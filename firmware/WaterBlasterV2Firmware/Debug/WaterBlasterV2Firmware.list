
WaterBlasterV2Firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bbac  080000b8  080000b8  000010b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000790  0800bc68  0800bc68  0000cc68  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c3f8  0800c3f8  0000e1dc  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  0800c3f8  0800c3f8  0000e1dc  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  0800c3f8  0800c3f8  0000e1dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c3f8  0800c3f8  0000d3f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800c3fc  0800c3fc  0000d3fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001dc  20000000  0800c400  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000027c  200001dc  0800c5dc  0000e1dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000458  0800c5dc  0000e458  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000e1dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000733b  00000000  00000000  0000e204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000019d0  00000000  00000000  0001553f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000850  00000000  00000000  00016f10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000627  00000000  00000000  00017760  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001638a  00000000  00000000  00017d87  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009359  00000000  00000000  0002e111  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008a172  00000000  00000000  0003746a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c15dc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003354  00000000  00000000  000c1620  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000076  00000000  00000000  000c4974  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	@ (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	@ (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	@ (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	200001dc 	.word	0x200001dc
 80000d8:	00000000 	.word	0x00000000
 80000dc:	0800bc4c 	.word	0x0800bc4c

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	@ (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	@ (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	@ (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			@ (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	200001e0 	.word	0x200001e0
 80000fc:	0800bc4c 	.word	0x0800bc4c

08000100 <strlen>:
 8000100:	2300      	movs	r3, #0
 8000102:	5cc2      	ldrb	r2, [r0, r3]
 8000104:	3301      	adds	r3, #1
 8000106:	2a00      	cmp	r2, #0
 8000108:	d1fb      	bne.n	8000102 <strlen+0x2>
 800010a:	1e58      	subs	r0, r3, #1
 800010c:	4770      	bx	lr
	...

08000110 <__gnu_thumb1_case_uqi>:
 8000110:	b402      	push	{r1}
 8000112:	4671      	mov	r1, lr
 8000114:	0849      	lsrs	r1, r1, #1
 8000116:	0049      	lsls	r1, r1, #1
 8000118:	5c09      	ldrb	r1, [r1, r0]
 800011a:	0049      	lsls	r1, r1, #1
 800011c:	448e      	add	lr, r1
 800011e:	bc02      	pop	{r1}
 8000120:	4770      	bx	lr
 8000122:	46c0      	nop			@ (mov r8, r8)

08000124 <__gnu_thumb1_case_shi>:
 8000124:	b403      	push	{r0, r1}
 8000126:	4671      	mov	r1, lr
 8000128:	0849      	lsrs	r1, r1, #1
 800012a:	0040      	lsls	r0, r0, #1
 800012c:	0049      	lsls	r1, r1, #1
 800012e:	5e09      	ldrsh	r1, [r1, r0]
 8000130:	0049      	lsls	r1, r1, #1
 8000132:	448e      	add	lr, r1
 8000134:	bc03      	pop	{r0, r1}
 8000136:	4770      	bx	lr

08000138 <__udivsi3>:
 8000138:	2200      	movs	r2, #0
 800013a:	0843      	lsrs	r3, r0, #1
 800013c:	428b      	cmp	r3, r1
 800013e:	d374      	bcc.n	800022a <__udivsi3+0xf2>
 8000140:	0903      	lsrs	r3, r0, #4
 8000142:	428b      	cmp	r3, r1
 8000144:	d35f      	bcc.n	8000206 <__udivsi3+0xce>
 8000146:	0a03      	lsrs	r3, r0, #8
 8000148:	428b      	cmp	r3, r1
 800014a:	d344      	bcc.n	80001d6 <__udivsi3+0x9e>
 800014c:	0b03      	lsrs	r3, r0, #12
 800014e:	428b      	cmp	r3, r1
 8000150:	d328      	bcc.n	80001a4 <__udivsi3+0x6c>
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d30d      	bcc.n	8000174 <__udivsi3+0x3c>
 8000158:	22ff      	movs	r2, #255	@ 0xff
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	ba12      	rev	r2, r2
 800015e:	0c03      	lsrs	r3, r0, #16
 8000160:	428b      	cmp	r3, r1
 8000162:	d302      	bcc.n	800016a <__udivsi3+0x32>
 8000164:	1212      	asrs	r2, r2, #8
 8000166:	0209      	lsls	r1, r1, #8
 8000168:	d065      	beq.n	8000236 <__udivsi3+0xfe>
 800016a:	0b03      	lsrs	r3, r0, #12
 800016c:	428b      	cmp	r3, r1
 800016e:	d319      	bcc.n	80001a4 <__udivsi3+0x6c>
 8000170:	e000      	b.n	8000174 <__udivsi3+0x3c>
 8000172:	0a09      	lsrs	r1, r1, #8
 8000174:	0bc3      	lsrs	r3, r0, #15
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x46>
 800017a:	03cb      	lsls	r3, r1, #15
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b83      	lsrs	r3, r0, #14
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x52>
 8000186:	038b      	lsls	r3, r1, #14
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b43      	lsrs	r3, r0, #13
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x5e>
 8000192:	034b      	lsls	r3, r1, #13
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0b03      	lsrs	r3, r0, #12
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x6a>
 800019e:	030b      	lsls	r3, r1, #12
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0ac3      	lsrs	r3, r0, #11
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x76>
 80001aa:	02cb      	lsls	r3, r1, #11
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a83      	lsrs	r3, r0, #10
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x82>
 80001b6:	028b      	lsls	r3, r1, #10
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a43      	lsrs	r3, r0, #9
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x8e>
 80001c2:	024b      	lsls	r3, r1, #9
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	0a03      	lsrs	r3, r0, #8
 80001ca:	428b      	cmp	r3, r1
 80001cc:	d301      	bcc.n	80001d2 <__udivsi3+0x9a>
 80001ce:	020b      	lsls	r3, r1, #8
 80001d0:	1ac0      	subs	r0, r0, r3
 80001d2:	4152      	adcs	r2, r2
 80001d4:	d2cd      	bcs.n	8000172 <__udivsi3+0x3a>
 80001d6:	09c3      	lsrs	r3, r0, #7
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xa8>
 80001dc:	01cb      	lsls	r3, r1, #7
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0983      	lsrs	r3, r0, #6
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xb4>
 80001e8:	018b      	lsls	r3, r1, #6
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0943      	lsrs	r3, r0, #5
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xc0>
 80001f4:	014b      	lsls	r3, r1, #5
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	0903      	lsrs	r3, r0, #4
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xcc>
 8000200:	010b      	lsls	r3, r1, #4
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	08c3      	lsrs	r3, r0, #3
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xd8>
 800020c:	00cb      	lsls	r3, r1, #3
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0883      	lsrs	r3, r0, #2
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xe4>
 8000218:	008b      	lsls	r3, r1, #2
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	0843      	lsrs	r3, r0, #1
 8000220:	428b      	cmp	r3, r1
 8000222:	d301      	bcc.n	8000228 <__udivsi3+0xf0>
 8000224:	004b      	lsls	r3, r1, #1
 8000226:	1ac0      	subs	r0, r0, r3
 8000228:	4152      	adcs	r2, r2
 800022a:	1a41      	subs	r1, r0, r1
 800022c:	d200      	bcs.n	8000230 <__udivsi3+0xf8>
 800022e:	4601      	mov	r1, r0
 8000230:	4152      	adcs	r2, r2
 8000232:	4610      	mov	r0, r2
 8000234:	4770      	bx	lr
 8000236:	e7ff      	b.n	8000238 <__udivsi3+0x100>
 8000238:	b501      	push	{r0, lr}
 800023a:	2000      	movs	r0, #0
 800023c:	f000 f8f0 	bl	8000420 <__aeabi_idiv0>
 8000240:	bd02      	pop	{r1, pc}
 8000242:	46c0      	nop			@ (mov r8, r8)

08000244 <__aeabi_uidivmod>:
 8000244:	2900      	cmp	r1, #0
 8000246:	d0f7      	beq.n	8000238 <__udivsi3+0x100>
 8000248:	e776      	b.n	8000138 <__udivsi3>
 800024a:	4770      	bx	lr

0800024c <__divsi3>:
 800024c:	4603      	mov	r3, r0
 800024e:	430b      	orrs	r3, r1
 8000250:	d47f      	bmi.n	8000352 <__divsi3+0x106>
 8000252:	2200      	movs	r2, #0
 8000254:	0843      	lsrs	r3, r0, #1
 8000256:	428b      	cmp	r3, r1
 8000258:	d374      	bcc.n	8000344 <__divsi3+0xf8>
 800025a:	0903      	lsrs	r3, r0, #4
 800025c:	428b      	cmp	r3, r1
 800025e:	d35f      	bcc.n	8000320 <__divsi3+0xd4>
 8000260:	0a03      	lsrs	r3, r0, #8
 8000262:	428b      	cmp	r3, r1
 8000264:	d344      	bcc.n	80002f0 <__divsi3+0xa4>
 8000266:	0b03      	lsrs	r3, r0, #12
 8000268:	428b      	cmp	r3, r1
 800026a:	d328      	bcc.n	80002be <__divsi3+0x72>
 800026c:	0c03      	lsrs	r3, r0, #16
 800026e:	428b      	cmp	r3, r1
 8000270:	d30d      	bcc.n	800028e <__divsi3+0x42>
 8000272:	22ff      	movs	r2, #255	@ 0xff
 8000274:	0209      	lsls	r1, r1, #8
 8000276:	ba12      	rev	r2, r2
 8000278:	0c03      	lsrs	r3, r0, #16
 800027a:	428b      	cmp	r3, r1
 800027c:	d302      	bcc.n	8000284 <__divsi3+0x38>
 800027e:	1212      	asrs	r2, r2, #8
 8000280:	0209      	lsls	r1, r1, #8
 8000282:	d065      	beq.n	8000350 <__divsi3+0x104>
 8000284:	0b03      	lsrs	r3, r0, #12
 8000286:	428b      	cmp	r3, r1
 8000288:	d319      	bcc.n	80002be <__divsi3+0x72>
 800028a:	e000      	b.n	800028e <__divsi3+0x42>
 800028c:	0a09      	lsrs	r1, r1, #8
 800028e:	0bc3      	lsrs	r3, r0, #15
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x4c>
 8000294:	03cb      	lsls	r3, r1, #15
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0b83      	lsrs	r3, r0, #14
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x58>
 80002a0:	038b      	lsls	r3, r1, #14
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0b43      	lsrs	r3, r0, #13
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x64>
 80002ac:	034b      	lsls	r3, r1, #13
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0b03      	lsrs	r3, r0, #12
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0x70>
 80002b8:	030b      	lsls	r3, r1, #12
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	0ac3      	lsrs	r3, r0, #11
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0x7c>
 80002c4:	02cb      	lsls	r3, r1, #11
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	0a83      	lsrs	r3, r0, #10
 80002cc:	428b      	cmp	r3, r1
 80002ce:	d301      	bcc.n	80002d4 <__divsi3+0x88>
 80002d0:	028b      	lsls	r3, r1, #10
 80002d2:	1ac0      	subs	r0, r0, r3
 80002d4:	4152      	adcs	r2, r2
 80002d6:	0a43      	lsrs	r3, r0, #9
 80002d8:	428b      	cmp	r3, r1
 80002da:	d301      	bcc.n	80002e0 <__divsi3+0x94>
 80002dc:	024b      	lsls	r3, r1, #9
 80002de:	1ac0      	subs	r0, r0, r3
 80002e0:	4152      	adcs	r2, r2
 80002e2:	0a03      	lsrs	r3, r0, #8
 80002e4:	428b      	cmp	r3, r1
 80002e6:	d301      	bcc.n	80002ec <__divsi3+0xa0>
 80002e8:	020b      	lsls	r3, r1, #8
 80002ea:	1ac0      	subs	r0, r0, r3
 80002ec:	4152      	adcs	r2, r2
 80002ee:	d2cd      	bcs.n	800028c <__divsi3+0x40>
 80002f0:	09c3      	lsrs	r3, r0, #7
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xae>
 80002f6:	01cb      	lsls	r3, r1, #7
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0983      	lsrs	r3, r0, #6
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xba>
 8000302:	018b      	lsls	r3, r1, #6
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0943      	lsrs	r3, r0, #5
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xc6>
 800030e:	014b      	lsls	r3, r1, #5
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	0903      	lsrs	r3, r0, #4
 8000316:	428b      	cmp	r3, r1
 8000318:	d301      	bcc.n	800031e <__divsi3+0xd2>
 800031a:	010b      	lsls	r3, r1, #4
 800031c:	1ac0      	subs	r0, r0, r3
 800031e:	4152      	adcs	r2, r2
 8000320:	08c3      	lsrs	r3, r0, #3
 8000322:	428b      	cmp	r3, r1
 8000324:	d301      	bcc.n	800032a <__divsi3+0xde>
 8000326:	00cb      	lsls	r3, r1, #3
 8000328:	1ac0      	subs	r0, r0, r3
 800032a:	4152      	adcs	r2, r2
 800032c:	0883      	lsrs	r3, r0, #2
 800032e:	428b      	cmp	r3, r1
 8000330:	d301      	bcc.n	8000336 <__divsi3+0xea>
 8000332:	008b      	lsls	r3, r1, #2
 8000334:	1ac0      	subs	r0, r0, r3
 8000336:	4152      	adcs	r2, r2
 8000338:	0843      	lsrs	r3, r0, #1
 800033a:	428b      	cmp	r3, r1
 800033c:	d301      	bcc.n	8000342 <__divsi3+0xf6>
 800033e:	004b      	lsls	r3, r1, #1
 8000340:	1ac0      	subs	r0, r0, r3
 8000342:	4152      	adcs	r2, r2
 8000344:	1a41      	subs	r1, r0, r1
 8000346:	d200      	bcs.n	800034a <__divsi3+0xfe>
 8000348:	4601      	mov	r1, r0
 800034a:	4152      	adcs	r2, r2
 800034c:	4610      	mov	r0, r2
 800034e:	4770      	bx	lr
 8000350:	e05d      	b.n	800040e <__divsi3+0x1c2>
 8000352:	0fca      	lsrs	r2, r1, #31
 8000354:	d000      	beq.n	8000358 <__divsi3+0x10c>
 8000356:	4249      	negs	r1, r1
 8000358:	1003      	asrs	r3, r0, #32
 800035a:	d300      	bcc.n	800035e <__divsi3+0x112>
 800035c:	4240      	negs	r0, r0
 800035e:	4053      	eors	r3, r2
 8000360:	2200      	movs	r2, #0
 8000362:	469c      	mov	ip, r3
 8000364:	0903      	lsrs	r3, r0, #4
 8000366:	428b      	cmp	r3, r1
 8000368:	d32d      	bcc.n	80003c6 <__divsi3+0x17a>
 800036a:	0a03      	lsrs	r3, r0, #8
 800036c:	428b      	cmp	r3, r1
 800036e:	d312      	bcc.n	8000396 <__divsi3+0x14a>
 8000370:	22fc      	movs	r2, #252	@ 0xfc
 8000372:	0189      	lsls	r1, r1, #6
 8000374:	ba12      	rev	r2, r2
 8000376:	0a03      	lsrs	r3, r0, #8
 8000378:	428b      	cmp	r3, r1
 800037a:	d30c      	bcc.n	8000396 <__divsi3+0x14a>
 800037c:	0189      	lsls	r1, r1, #6
 800037e:	1192      	asrs	r2, r2, #6
 8000380:	428b      	cmp	r3, r1
 8000382:	d308      	bcc.n	8000396 <__divsi3+0x14a>
 8000384:	0189      	lsls	r1, r1, #6
 8000386:	1192      	asrs	r2, r2, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d304      	bcc.n	8000396 <__divsi3+0x14a>
 800038c:	0189      	lsls	r1, r1, #6
 800038e:	d03a      	beq.n	8000406 <__divsi3+0x1ba>
 8000390:	1192      	asrs	r2, r2, #6
 8000392:	e000      	b.n	8000396 <__divsi3+0x14a>
 8000394:	0989      	lsrs	r1, r1, #6
 8000396:	09c3      	lsrs	r3, r0, #7
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x154>
 800039c:	01cb      	lsls	r3, r1, #7
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0983      	lsrs	r3, r0, #6
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x160>
 80003a8:	018b      	lsls	r3, r1, #6
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	0943      	lsrs	r3, r0, #5
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d301      	bcc.n	80003b8 <__divsi3+0x16c>
 80003b4:	014b      	lsls	r3, r1, #5
 80003b6:	1ac0      	subs	r0, r0, r3
 80003b8:	4152      	adcs	r2, r2
 80003ba:	0903      	lsrs	r3, r0, #4
 80003bc:	428b      	cmp	r3, r1
 80003be:	d301      	bcc.n	80003c4 <__divsi3+0x178>
 80003c0:	010b      	lsls	r3, r1, #4
 80003c2:	1ac0      	subs	r0, r0, r3
 80003c4:	4152      	adcs	r2, r2
 80003c6:	08c3      	lsrs	r3, r0, #3
 80003c8:	428b      	cmp	r3, r1
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x184>
 80003cc:	00cb      	lsls	r3, r1, #3
 80003ce:	1ac0      	subs	r0, r0, r3
 80003d0:	4152      	adcs	r2, r2
 80003d2:	0883      	lsrs	r3, r0, #2
 80003d4:	428b      	cmp	r3, r1
 80003d6:	d301      	bcc.n	80003dc <__divsi3+0x190>
 80003d8:	008b      	lsls	r3, r1, #2
 80003da:	1ac0      	subs	r0, r0, r3
 80003dc:	4152      	adcs	r2, r2
 80003de:	d2d9      	bcs.n	8000394 <__divsi3+0x148>
 80003e0:	0843      	lsrs	r3, r0, #1
 80003e2:	428b      	cmp	r3, r1
 80003e4:	d301      	bcc.n	80003ea <__divsi3+0x19e>
 80003e6:	004b      	lsls	r3, r1, #1
 80003e8:	1ac0      	subs	r0, r0, r3
 80003ea:	4152      	adcs	r2, r2
 80003ec:	1a41      	subs	r1, r0, r1
 80003ee:	d200      	bcs.n	80003f2 <__divsi3+0x1a6>
 80003f0:	4601      	mov	r1, r0
 80003f2:	4663      	mov	r3, ip
 80003f4:	4152      	adcs	r2, r2
 80003f6:	105b      	asrs	r3, r3, #1
 80003f8:	4610      	mov	r0, r2
 80003fa:	d301      	bcc.n	8000400 <__divsi3+0x1b4>
 80003fc:	4240      	negs	r0, r0
 80003fe:	2b00      	cmp	r3, #0
 8000400:	d500      	bpl.n	8000404 <__divsi3+0x1b8>
 8000402:	4249      	negs	r1, r1
 8000404:	4770      	bx	lr
 8000406:	4663      	mov	r3, ip
 8000408:	105b      	asrs	r3, r3, #1
 800040a:	d300      	bcc.n	800040e <__divsi3+0x1c2>
 800040c:	4240      	negs	r0, r0
 800040e:	b501      	push	{r0, lr}
 8000410:	2000      	movs	r0, #0
 8000412:	f000 f805 	bl	8000420 <__aeabi_idiv0>
 8000416:	bd02      	pop	{r1, pc}

08000418 <__aeabi_idivmod>:
 8000418:	2900      	cmp	r1, #0
 800041a:	d0f8      	beq.n	800040e <__divsi3+0x1c2>
 800041c:	e716      	b.n	800024c <__divsi3>
 800041e:	4770      	bx	lr

08000420 <__aeabi_idiv0>:
 8000420:	4770      	bx	lr
 8000422:	46c0      	nop			@ (mov r8, r8)

08000424 <__aeabi_cdrcmple>:
 8000424:	4684      	mov	ip, r0
 8000426:	0010      	movs	r0, r2
 8000428:	4662      	mov	r2, ip
 800042a:	468c      	mov	ip, r1
 800042c:	0019      	movs	r1, r3
 800042e:	4663      	mov	r3, ip
 8000430:	e000      	b.n	8000434 <__aeabi_cdcmpeq>
 8000432:	46c0      	nop			@ (mov r8, r8)

08000434 <__aeabi_cdcmpeq>:
 8000434:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000436:	f002 f851 	bl	80024dc <__ledf2>
 800043a:	2800      	cmp	r0, #0
 800043c:	d401      	bmi.n	8000442 <__aeabi_cdcmpeq+0xe>
 800043e:	2100      	movs	r1, #0
 8000440:	42c8      	cmn	r0, r1
 8000442:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000444 <__aeabi_dcmpeq>:
 8000444:	b510      	push	{r4, lr}
 8000446:	f001 ff95 	bl	8002374 <__eqdf2>
 800044a:	4240      	negs	r0, r0
 800044c:	3001      	adds	r0, #1
 800044e:	bd10      	pop	{r4, pc}

08000450 <__aeabi_dcmplt>:
 8000450:	b510      	push	{r4, lr}
 8000452:	f002 f843 	bl	80024dc <__ledf2>
 8000456:	2800      	cmp	r0, #0
 8000458:	db01      	blt.n	800045e <__aeabi_dcmplt+0xe>
 800045a:	2000      	movs	r0, #0
 800045c:	bd10      	pop	{r4, pc}
 800045e:	2001      	movs	r0, #1
 8000460:	bd10      	pop	{r4, pc}
 8000462:	46c0      	nop			@ (mov r8, r8)

08000464 <__aeabi_dcmple>:
 8000464:	b510      	push	{r4, lr}
 8000466:	f002 f839 	bl	80024dc <__ledf2>
 800046a:	2800      	cmp	r0, #0
 800046c:	dd01      	ble.n	8000472 <__aeabi_dcmple+0xe>
 800046e:	2000      	movs	r0, #0
 8000470:	bd10      	pop	{r4, pc}
 8000472:	2001      	movs	r0, #1
 8000474:	bd10      	pop	{r4, pc}
 8000476:	46c0      	nop			@ (mov r8, r8)

08000478 <__aeabi_dcmpgt>:
 8000478:	b510      	push	{r4, lr}
 800047a:	f001 ffbf 	bl	80023fc <__gedf2>
 800047e:	2800      	cmp	r0, #0
 8000480:	dc01      	bgt.n	8000486 <__aeabi_dcmpgt+0xe>
 8000482:	2000      	movs	r0, #0
 8000484:	bd10      	pop	{r4, pc}
 8000486:	2001      	movs	r0, #1
 8000488:	bd10      	pop	{r4, pc}
 800048a:	46c0      	nop			@ (mov r8, r8)

0800048c <__aeabi_dcmpge>:
 800048c:	b510      	push	{r4, lr}
 800048e:	f001 ffb5 	bl	80023fc <__gedf2>
 8000492:	2800      	cmp	r0, #0
 8000494:	da01      	bge.n	800049a <__aeabi_dcmpge+0xe>
 8000496:	2000      	movs	r0, #0
 8000498:	bd10      	pop	{r4, pc}
 800049a:	2001      	movs	r0, #1
 800049c:	bd10      	pop	{r4, pc}
 800049e:	46c0      	nop			@ (mov r8, r8)

080004a0 <__aeabi_cfrcmple>:
 80004a0:	4684      	mov	ip, r0
 80004a2:	0008      	movs	r0, r1
 80004a4:	4661      	mov	r1, ip
 80004a6:	e7ff      	b.n	80004a8 <__aeabi_cfcmpeq>

080004a8 <__aeabi_cfcmpeq>:
 80004a8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80004aa:	f000 fc19 	bl	8000ce0 <__lesf2>
 80004ae:	2800      	cmp	r0, #0
 80004b0:	d401      	bmi.n	80004b6 <__aeabi_cfcmpeq+0xe>
 80004b2:	2100      	movs	r1, #0
 80004b4:	42c8      	cmn	r0, r1
 80004b6:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080004b8 <__aeabi_fcmpeq>:
 80004b8:	b510      	push	{r4, lr}
 80004ba:	f000 fba1 	bl	8000c00 <__eqsf2>
 80004be:	4240      	negs	r0, r0
 80004c0:	3001      	adds	r0, #1
 80004c2:	bd10      	pop	{r4, pc}

080004c4 <__aeabi_fcmplt>:
 80004c4:	b510      	push	{r4, lr}
 80004c6:	f000 fc0b 	bl	8000ce0 <__lesf2>
 80004ca:	2800      	cmp	r0, #0
 80004cc:	db01      	blt.n	80004d2 <__aeabi_fcmplt+0xe>
 80004ce:	2000      	movs	r0, #0
 80004d0:	bd10      	pop	{r4, pc}
 80004d2:	2001      	movs	r0, #1
 80004d4:	bd10      	pop	{r4, pc}
 80004d6:	46c0      	nop			@ (mov r8, r8)

080004d8 <__aeabi_fcmple>:
 80004d8:	b510      	push	{r4, lr}
 80004da:	f000 fc01 	bl	8000ce0 <__lesf2>
 80004de:	2800      	cmp	r0, #0
 80004e0:	dd01      	ble.n	80004e6 <__aeabi_fcmple+0xe>
 80004e2:	2000      	movs	r0, #0
 80004e4:	bd10      	pop	{r4, pc}
 80004e6:	2001      	movs	r0, #1
 80004e8:	bd10      	pop	{r4, pc}
 80004ea:	46c0      	nop			@ (mov r8, r8)

080004ec <__aeabi_fcmpgt>:
 80004ec:	b510      	push	{r4, lr}
 80004ee:	f000 fbaf 	bl	8000c50 <__gesf2>
 80004f2:	2800      	cmp	r0, #0
 80004f4:	dc01      	bgt.n	80004fa <__aeabi_fcmpgt+0xe>
 80004f6:	2000      	movs	r0, #0
 80004f8:	bd10      	pop	{r4, pc}
 80004fa:	2001      	movs	r0, #1
 80004fc:	bd10      	pop	{r4, pc}
 80004fe:	46c0      	nop			@ (mov r8, r8)

08000500 <__aeabi_fcmpge>:
 8000500:	b510      	push	{r4, lr}
 8000502:	f000 fba5 	bl	8000c50 <__gesf2>
 8000506:	2800      	cmp	r0, #0
 8000508:	da01      	bge.n	800050e <__aeabi_fcmpge+0xe>
 800050a:	2000      	movs	r0, #0
 800050c:	bd10      	pop	{r4, pc}
 800050e:	2001      	movs	r0, #1
 8000510:	bd10      	pop	{r4, pc}
 8000512:	46c0      	nop			@ (mov r8, r8)

08000514 <__aeabi_d2uiz>:
 8000514:	b570      	push	{r4, r5, r6, lr}
 8000516:	2200      	movs	r2, #0
 8000518:	4b0c      	ldr	r3, [pc, #48]	@ (800054c <__aeabi_d2uiz+0x38>)
 800051a:	0004      	movs	r4, r0
 800051c:	000d      	movs	r5, r1
 800051e:	f7ff ffb5 	bl	800048c <__aeabi_dcmpge>
 8000522:	2800      	cmp	r0, #0
 8000524:	d104      	bne.n	8000530 <__aeabi_d2uiz+0x1c>
 8000526:	0020      	movs	r0, r4
 8000528:	0029      	movs	r1, r5
 800052a:	f002 ff57 	bl	80033dc <__aeabi_d2iz>
 800052e:	bd70      	pop	{r4, r5, r6, pc}
 8000530:	4b06      	ldr	r3, [pc, #24]	@ (800054c <__aeabi_d2uiz+0x38>)
 8000532:	2200      	movs	r2, #0
 8000534:	0020      	movs	r0, r4
 8000536:	0029      	movs	r1, r5
 8000538:	f002 fb24 	bl	8002b84 <__aeabi_dsub>
 800053c:	f002 ff4e 	bl	80033dc <__aeabi_d2iz>
 8000540:	2380      	movs	r3, #128	@ 0x80
 8000542:	061b      	lsls	r3, r3, #24
 8000544:	469c      	mov	ip, r3
 8000546:	4460      	add	r0, ip
 8000548:	e7f1      	b.n	800052e <__aeabi_d2uiz+0x1a>
 800054a:	46c0      	nop			@ (mov r8, r8)
 800054c:	41e00000 	.word	0x41e00000

08000550 <__aeabi_d2lz>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	2200      	movs	r2, #0
 8000554:	2300      	movs	r3, #0
 8000556:	0004      	movs	r4, r0
 8000558:	000d      	movs	r5, r1
 800055a:	f7ff ff79 	bl	8000450 <__aeabi_dcmplt>
 800055e:	2800      	cmp	r0, #0
 8000560:	d108      	bne.n	8000574 <__aeabi_d2lz+0x24>
 8000562:	0020      	movs	r0, r4
 8000564:	0029      	movs	r1, r5
 8000566:	f000 f80f 	bl	8000588 <__aeabi_d2ulz>
 800056a:	0002      	movs	r2, r0
 800056c:	000b      	movs	r3, r1
 800056e:	0010      	movs	r0, r2
 8000570:	0019      	movs	r1, r3
 8000572:	bd70      	pop	{r4, r5, r6, pc}
 8000574:	2380      	movs	r3, #128	@ 0x80
 8000576:	061b      	lsls	r3, r3, #24
 8000578:	18e9      	adds	r1, r5, r3
 800057a:	0020      	movs	r0, r4
 800057c:	f000 f804 	bl	8000588 <__aeabi_d2ulz>
 8000580:	2300      	movs	r3, #0
 8000582:	4242      	negs	r2, r0
 8000584:	418b      	sbcs	r3, r1
 8000586:	e7f2      	b.n	800056e <__aeabi_d2lz+0x1e>

08000588 <__aeabi_d2ulz>:
 8000588:	b570      	push	{r4, r5, r6, lr}
 800058a:	2200      	movs	r2, #0
 800058c:	4b0b      	ldr	r3, [pc, #44]	@ (80005bc <__aeabi_d2ulz+0x34>)
 800058e:	000d      	movs	r5, r1
 8000590:	0004      	movs	r4, r0
 8000592:	f002 f811 	bl	80025b8 <__aeabi_dmul>
 8000596:	f7ff ffbd 	bl	8000514 <__aeabi_d2uiz>
 800059a:	0006      	movs	r6, r0
 800059c:	f002 ff88 	bl	80034b0 <__aeabi_ui2d>
 80005a0:	2200      	movs	r2, #0
 80005a2:	4b07      	ldr	r3, [pc, #28]	@ (80005c0 <__aeabi_d2ulz+0x38>)
 80005a4:	f002 f808 	bl	80025b8 <__aeabi_dmul>
 80005a8:	0002      	movs	r2, r0
 80005aa:	000b      	movs	r3, r1
 80005ac:	0020      	movs	r0, r4
 80005ae:	0029      	movs	r1, r5
 80005b0:	f002 fae8 	bl	8002b84 <__aeabi_dsub>
 80005b4:	f7ff ffae 	bl	8000514 <__aeabi_d2uiz>
 80005b8:	0031      	movs	r1, r6
 80005ba:	bd70      	pop	{r4, r5, r6, pc}
 80005bc:	3df00000 	.word	0x3df00000
 80005c0:	41f00000 	.word	0x41f00000

080005c4 <__aeabi_l2d>:
 80005c4:	b570      	push	{r4, r5, r6, lr}
 80005c6:	0006      	movs	r6, r0
 80005c8:	0008      	movs	r0, r1
 80005ca:	f002 ff43 	bl	8003454 <__aeabi_i2d>
 80005ce:	2200      	movs	r2, #0
 80005d0:	4b06      	ldr	r3, [pc, #24]	@ (80005ec <__aeabi_l2d+0x28>)
 80005d2:	f001 fff1 	bl	80025b8 <__aeabi_dmul>
 80005d6:	000d      	movs	r5, r1
 80005d8:	0004      	movs	r4, r0
 80005da:	0030      	movs	r0, r6
 80005dc:	f002 ff68 	bl	80034b0 <__aeabi_ui2d>
 80005e0:	002b      	movs	r3, r5
 80005e2:	0022      	movs	r2, r4
 80005e4:	f000 ffe8 	bl	80015b8 <__aeabi_dadd>
 80005e8:	bd70      	pop	{r4, r5, r6, pc}
 80005ea:	46c0      	nop			@ (mov r8, r8)
 80005ec:	41f00000 	.word	0x41f00000

080005f0 <__aeabi_fadd>:
 80005f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80005f2:	024b      	lsls	r3, r1, #9
 80005f4:	0a5a      	lsrs	r2, r3, #9
 80005f6:	4694      	mov	ip, r2
 80005f8:	004a      	lsls	r2, r1, #1
 80005fa:	0fc9      	lsrs	r1, r1, #31
 80005fc:	46ce      	mov	lr, r9
 80005fe:	4647      	mov	r7, r8
 8000600:	4689      	mov	r9, r1
 8000602:	0045      	lsls	r5, r0, #1
 8000604:	0246      	lsls	r6, r0, #9
 8000606:	0e2d      	lsrs	r5, r5, #24
 8000608:	0e12      	lsrs	r2, r2, #24
 800060a:	b580      	push	{r7, lr}
 800060c:	0999      	lsrs	r1, r3, #6
 800060e:	0a77      	lsrs	r7, r6, #9
 8000610:	0fc4      	lsrs	r4, r0, #31
 8000612:	09b6      	lsrs	r6, r6, #6
 8000614:	1aab      	subs	r3, r5, r2
 8000616:	454c      	cmp	r4, r9
 8000618:	d020      	beq.n	800065c <__aeabi_fadd+0x6c>
 800061a:	2b00      	cmp	r3, #0
 800061c:	dd0c      	ble.n	8000638 <__aeabi_fadd+0x48>
 800061e:	2a00      	cmp	r2, #0
 8000620:	d134      	bne.n	800068c <__aeabi_fadd+0x9c>
 8000622:	2900      	cmp	r1, #0
 8000624:	d02a      	beq.n	800067c <__aeabi_fadd+0x8c>
 8000626:	1e5a      	subs	r2, r3, #1
 8000628:	2b01      	cmp	r3, #1
 800062a:	d100      	bne.n	800062e <__aeabi_fadd+0x3e>
 800062c:	e08f      	b.n	800074e <__aeabi_fadd+0x15e>
 800062e:	2bff      	cmp	r3, #255	@ 0xff
 8000630:	d100      	bne.n	8000634 <__aeabi_fadd+0x44>
 8000632:	e0cd      	b.n	80007d0 <__aeabi_fadd+0x1e0>
 8000634:	0013      	movs	r3, r2
 8000636:	e02f      	b.n	8000698 <__aeabi_fadd+0xa8>
 8000638:	2b00      	cmp	r3, #0
 800063a:	d060      	beq.n	80006fe <__aeabi_fadd+0x10e>
 800063c:	1b53      	subs	r3, r2, r5
 800063e:	2d00      	cmp	r5, #0
 8000640:	d000      	beq.n	8000644 <__aeabi_fadd+0x54>
 8000642:	e0ee      	b.n	8000822 <__aeabi_fadd+0x232>
 8000644:	2e00      	cmp	r6, #0
 8000646:	d100      	bne.n	800064a <__aeabi_fadd+0x5a>
 8000648:	e13e      	b.n	80008c8 <__aeabi_fadd+0x2d8>
 800064a:	1e5c      	subs	r4, r3, #1
 800064c:	2b01      	cmp	r3, #1
 800064e:	d100      	bne.n	8000652 <__aeabi_fadd+0x62>
 8000650:	e16b      	b.n	800092a <__aeabi_fadd+0x33a>
 8000652:	2bff      	cmp	r3, #255	@ 0xff
 8000654:	d100      	bne.n	8000658 <__aeabi_fadd+0x68>
 8000656:	e0b9      	b.n	80007cc <__aeabi_fadd+0x1dc>
 8000658:	0023      	movs	r3, r4
 800065a:	e0e7      	b.n	800082c <__aeabi_fadd+0x23c>
 800065c:	2b00      	cmp	r3, #0
 800065e:	dc00      	bgt.n	8000662 <__aeabi_fadd+0x72>
 8000660:	e0a4      	b.n	80007ac <__aeabi_fadd+0x1bc>
 8000662:	2a00      	cmp	r2, #0
 8000664:	d069      	beq.n	800073a <__aeabi_fadd+0x14a>
 8000666:	2dff      	cmp	r5, #255	@ 0xff
 8000668:	d100      	bne.n	800066c <__aeabi_fadd+0x7c>
 800066a:	e0b1      	b.n	80007d0 <__aeabi_fadd+0x1e0>
 800066c:	2280      	movs	r2, #128	@ 0x80
 800066e:	04d2      	lsls	r2, r2, #19
 8000670:	4311      	orrs	r1, r2
 8000672:	2b1b      	cmp	r3, #27
 8000674:	dc00      	bgt.n	8000678 <__aeabi_fadd+0x88>
 8000676:	e0e9      	b.n	800084c <__aeabi_fadd+0x25c>
 8000678:	002b      	movs	r3, r5
 800067a:	3605      	adds	r6, #5
 800067c:	08f7      	lsrs	r7, r6, #3
 800067e:	2bff      	cmp	r3, #255	@ 0xff
 8000680:	d100      	bne.n	8000684 <__aeabi_fadd+0x94>
 8000682:	e0a5      	b.n	80007d0 <__aeabi_fadd+0x1e0>
 8000684:	027a      	lsls	r2, r7, #9
 8000686:	0a52      	lsrs	r2, r2, #9
 8000688:	b2d8      	uxtb	r0, r3
 800068a:	e030      	b.n	80006ee <__aeabi_fadd+0xfe>
 800068c:	2dff      	cmp	r5, #255	@ 0xff
 800068e:	d100      	bne.n	8000692 <__aeabi_fadd+0xa2>
 8000690:	e09e      	b.n	80007d0 <__aeabi_fadd+0x1e0>
 8000692:	2280      	movs	r2, #128	@ 0x80
 8000694:	04d2      	lsls	r2, r2, #19
 8000696:	4311      	orrs	r1, r2
 8000698:	2001      	movs	r0, #1
 800069a:	2b1b      	cmp	r3, #27
 800069c:	dc08      	bgt.n	80006b0 <__aeabi_fadd+0xc0>
 800069e:	0008      	movs	r0, r1
 80006a0:	2220      	movs	r2, #32
 80006a2:	40d8      	lsrs	r0, r3
 80006a4:	1ad3      	subs	r3, r2, r3
 80006a6:	4099      	lsls	r1, r3
 80006a8:	000b      	movs	r3, r1
 80006aa:	1e5a      	subs	r2, r3, #1
 80006ac:	4193      	sbcs	r3, r2
 80006ae:	4318      	orrs	r0, r3
 80006b0:	1a36      	subs	r6, r6, r0
 80006b2:	0173      	lsls	r3, r6, #5
 80006b4:	d400      	bmi.n	80006b8 <__aeabi_fadd+0xc8>
 80006b6:	e071      	b.n	800079c <__aeabi_fadd+0x1ac>
 80006b8:	01b6      	lsls	r6, r6, #6
 80006ba:	09b7      	lsrs	r7, r6, #6
 80006bc:	0038      	movs	r0, r7
 80006be:	f002 ff9d 	bl	80035fc <__clzsi2>
 80006c2:	003b      	movs	r3, r7
 80006c4:	3805      	subs	r0, #5
 80006c6:	4083      	lsls	r3, r0
 80006c8:	4285      	cmp	r5, r0
 80006ca:	dd4d      	ble.n	8000768 <__aeabi_fadd+0x178>
 80006cc:	4eb4      	ldr	r6, [pc, #720]	@ (80009a0 <__aeabi_fadd+0x3b0>)
 80006ce:	1a2d      	subs	r5, r5, r0
 80006d0:	401e      	ands	r6, r3
 80006d2:	075a      	lsls	r2, r3, #29
 80006d4:	d068      	beq.n	80007a8 <__aeabi_fadd+0x1b8>
 80006d6:	220f      	movs	r2, #15
 80006d8:	4013      	ands	r3, r2
 80006da:	2b04      	cmp	r3, #4
 80006dc:	d064      	beq.n	80007a8 <__aeabi_fadd+0x1b8>
 80006de:	3604      	adds	r6, #4
 80006e0:	0173      	lsls	r3, r6, #5
 80006e2:	d561      	bpl.n	80007a8 <__aeabi_fadd+0x1b8>
 80006e4:	1c68      	adds	r0, r5, #1
 80006e6:	2dfe      	cmp	r5, #254	@ 0xfe
 80006e8:	d154      	bne.n	8000794 <__aeabi_fadd+0x1a4>
 80006ea:	20ff      	movs	r0, #255	@ 0xff
 80006ec:	2200      	movs	r2, #0
 80006ee:	05c0      	lsls	r0, r0, #23
 80006f0:	4310      	orrs	r0, r2
 80006f2:	07e4      	lsls	r4, r4, #31
 80006f4:	4320      	orrs	r0, r4
 80006f6:	bcc0      	pop	{r6, r7}
 80006f8:	46b9      	mov	r9, r7
 80006fa:	46b0      	mov	r8, r6
 80006fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80006fe:	22fe      	movs	r2, #254	@ 0xfe
 8000700:	4690      	mov	r8, r2
 8000702:	1c68      	adds	r0, r5, #1
 8000704:	0002      	movs	r2, r0
 8000706:	4640      	mov	r0, r8
 8000708:	4210      	tst	r0, r2
 800070a:	d16b      	bne.n	80007e4 <__aeabi_fadd+0x1f4>
 800070c:	2d00      	cmp	r5, #0
 800070e:	d000      	beq.n	8000712 <__aeabi_fadd+0x122>
 8000710:	e0dd      	b.n	80008ce <__aeabi_fadd+0x2de>
 8000712:	2e00      	cmp	r6, #0
 8000714:	d100      	bne.n	8000718 <__aeabi_fadd+0x128>
 8000716:	e102      	b.n	800091e <__aeabi_fadd+0x32e>
 8000718:	2900      	cmp	r1, #0
 800071a:	d0b3      	beq.n	8000684 <__aeabi_fadd+0x94>
 800071c:	2280      	movs	r2, #128	@ 0x80
 800071e:	1a77      	subs	r7, r6, r1
 8000720:	04d2      	lsls	r2, r2, #19
 8000722:	4217      	tst	r7, r2
 8000724:	d100      	bne.n	8000728 <__aeabi_fadd+0x138>
 8000726:	e136      	b.n	8000996 <__aeabi_fadd+0x3a6>
 8000728:	464c      	mov	r4, r9
 800072a:	1b8e      	subs	r6, r1, r6
 800072c:	d061      	beq.n	80007f2 <__aeabi_fadd+0x202>
 800072e:	2001      	movs	r0, #1
 8000730:	4216      	tst	r6, r2
 8000732:	d130      	bne.n	8000796 <__aeabi_fadd+0x1a6>
 8000734:	2300      	movs	r3, #0
 8000736:	08f7      	lsrs	r7, r6, #3
 8000738:	e7a4      	b.n	8000684 <__aeabi_fadd+0x94>
 800073a:	2900      	cmp	r1, #0
 800073c:	d09e      	beq.n	800067c <__aeabi_fadd+0x8c>
 800073e:	1e5a      	subs	r2, r3, #1
 8000740:	2b01      	cmp	r3, #1
 8000742:	d100      	bne.n	8000746 <__aeabi_fadd+0x156>
 8000744:	e0ca      	b.n	80008dc <__aeabi_fadd+0x2ec>
 8000746:	2bff      	cmp	r3, #255	@ 0xff
 8000748:	d042      	beq.n	80007d0 <__aeabi_fadd+0x1e0>
 800074a:	0013      	movs	r3, r2
 800074c:	e791      	b.n	8000672 <__aeabi_fadd+0x82>
 800074e:	1a71      	subs	r1, r6, r1
 8000750:	014b      	lsls	r3, r1, #5
 8000752:	d400      	bmi.n	8000756 <__aeabi_fadd+0x166>
 8000754:	e0d1      	b.n	80008fa <__aeabi_fadd+0x30a>
 8000756:	018f      	lsls	r7, r1, #6
 8000758:	09bf      	lsrs	r7, r7, #6
 800075a:	0038      	movs	r0, r7
 800075c:	f002 ff4e 	bl	80035fc <__clzsi2>
 8000760:	003b      	movs	r3, r7
 8000762:	3805      	subs	r0, #5
 8000764:	4083      	lsls	r3, r0
 8000766:	2501      	movs	r5, #1
 8000768:	2220      	movs	r2, #32
 800076a:	1b40      	subs	r0, r0, r5
 800076c:	3001      	adds	r0, #1
 800076e:	1a12      	subs	r2, r2, r0
 8000770:	001e      	movs	r6, r3
 8000772:	4093      	lsls	r3, r2
 8000774:	40c6      	lsrs	r6, r0
 8000776:	1e5a      	subs	r2, r3, #1
 8000778:	4193      	sbcs	r3, r2
 800077a:	431e      	orrs	r6, r3
 800077c:	d039      	beq.n	80007f2 <__aeabi_fadd+0x202>
 800077e:	0773      	lsls	r3, r6, #29
 8000780:	d100      	bne.n	8000784 <__aeabi_fadd+0x194>
 8000782:	e11b      	b.n	80009bc <__aeabi_fadd+0x3cc>
 8000784:	230f      	movs	r3, #15
 8000786:	2500      	movs	r5, #0
 8000788:	4033      	ands	r3, r6
 800078a:	2b04      	cmp	r3, #4
 800078c:	d1a7      	bne.n	80006de <__aeabi_fadd+0xee>
 800078e:	2001      	movs	r0, #1
 8000790:	0172      	lsls	r2, r6, #5
 8000792:	d57c      	bpl.n	800088e <__aeabi_fadd+0x29e>
 8000794:	b2c0      	uxtb	r0, r0
 8000796:	01b2      	lsls	r2, r6, #6
 8000798:	0a52      	lsrs	r2, r2, #9
 800079a:	e7a8      	b.n	80006ee <__aeabi_fadd+0xfe>
 800079c:	0773      	lsls	r3, r6, #29
 800079e:	d003      	beq.n	80007a8 <__aeabi_fadd+0x1b8>
 80007a0:	230f      	movs	r3, #15
 80007a2:	4033      	ands	r3, r6
 80007a4:	2b04      	cmp	r3, #4
 80007a6:	d19a      	bne.n	80006de <__aeabi_fadd+0xee>
 80007a8:	002b      	movs	r3, r5
 80007aa:	e767      	b.n	800067c <__aeabi_fadd+0x8c>
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	d023      	beq.n	80007f8 <__aeabi_fadd+0x208>
 80007b0:	1b53      	subs	r3, r2, r5
 80007b2:	2d00      	cmp	r5, #0
 80007b4:	d17b      	bne.n	80008ae <__aeabi_fadd+0x2be>
 80007b6:	2e00      	cmp	r6, #0
 80007b8:	d100      	bne.n	80007bc <__aeabi_fadd+0x1cc>
 80007ba:	e086      	b.n	80008ca <__aeabi_fadd+0x2da>
 80007bc:	1e5d      	subs	r5, r3, #1
 80007be:	2b01      	cmp	r3, #1
 80007c0:	d100      	bne.n	80007c4 <__aeabi_fadd+0x1d4>
 80007c2:	e08b      	b.n	80008dc <__aeabi_fadd+0x2ec>
 80007c4:	2bff      	cmp	r3, #255	@ 0xff
 80007c6:	d002      	beq.n	80007ce <__aeabi_fadd+0x1de>
 80007c8:	002b      	movs	r3, r5
 80007ca:	e075      	b.n	80008b8 <__aeabi_fadd+0x2c8>
 80007cc:	464c      	mov	r4, r9
 80007ce:	4667      	mov	r7, ip
 80007d0:	2f00      	cmp	r7, #0
 80007d2:	d100      	bne.n	80007d6 <__aeabi_fadd+0x1e6>
 80007d4:	e789      	b.n	80006ea <__aeabi_fadd+0xfa>
 80007d6:	2280      	movs	r2, #128	@ 0x80
 80007d8:	03d2      	lsls	r2, r2, #15
 80007da:	433a      	orrs	r2, r7
 80007dc:	0252      	lsls	r2, r2, #9
 80007de:	20ff      	movs	r0, #255	@ 0xff
 80007e0:	0a52      	lsrs	r2, r2, #9
 80007e2:	e784      	b.n	80006ee <__aeabi_fadd+0xfe>
 80007e4:	1a77      	subs	r7, r6, r1
 80007e6:	017b      	lsls	r3, r7, #5
 80007e8:	d46b      	bmi.n	80008c2 <__aeabi_fadd+0x2d2>
 80007ea:	2f00      	cmp	r7, #0
 80007ec:	d000      	beq.n	80007f0 <__aeabi_fadd+0x200>
 80007ee:	e765      	b.n	80006bc <__aeabi_fadd+0xcc>
 80007f0:	2400      	movs	r4, #0
 80007f2:	2000      	movs	r0, #0
 80007f4:	2200      	movs	r2, #0
 80007f6:	e77a      	b.n	80006ee <__aeabi_fadd+0xfe>
 80007f8:	22fe      	movs	r2, #254	@ 0xfe
 80007fa:	1c6b      	adds	r3, r5, #1
 80007fc:	421a      	tst	r2, r3
 80007fe:	d149      	bne.n	8000894 <__aeabi_fadd+0x2a4>
 8000800:	2d00      	cmp	r5, #0
 8000802:	d000      	beq.n	8000806 <__aeabi_fadd+0x216>
 8000804:	e09f      	b.n	8000946 <__aeabi_fadd+0x356>
 8000806:	2e00      	cmp	r6, #0
 8000808:	d100      	bne.n	800080c <__aeabi_fadd+0x21c>
 800080a:	e0ba      	b.n	8000982 <__aeabi_fadd+0x392>
 800080c:	2900      	cmp	r1, #0
 800080e:	d100      	bne.n	8000812 <__aeabi_fadd+0x222>
 8000810:	e0cf      	b.n	80009b2 <__aeabi_fadd+0x3c2>
 8000812:	1872      	adds	r2, r6, r1
 8000814:	0153      	lsls	r3, r2, #5
 8000816:	d400      	bmi.n	800081a <__aeabi_fadd+0x22a>
 8000818:	e0cd      	b.n	80009b6 <__aeabi_fadd+0x3c6>
 800081a:	0192      	lsls	r2, r2, #6
 800081c:	2001      	movs	r0, #1
 800081e:	0a52      	lsrs	r2, r2, #9
 8000820:	e765      	b.n	80006ee <__aeabi_fadd+0xfe>
 8000822:	2aff      	cmp	r2, #255	@ 0xff
 8000824:	d0d2      	beq.n	80007cc <__aeabi_fadd+0x1dc>
 8000826:	2080      	movs	r0, #128	@ 0x80
 8000828:	04c0      	lsls	r0, r0, #19
 800082a:	4306      	orrs	r6, r0
 800082c:	2001      	movs	r0, #1
 800082e:	2b1b      	cmp	r3, #27
 8000830:	dc08      	bgt.n	8000844 <__aeabi_fadd+0x254>
 8000832:	0030      	movs	r0, r6
 8000834:	2420      	movs	r4, #32
 8000836:	40d8      	lsrs	r0, r3
 8000838:	1ae3      	subs	r3, r4, r3
 800083a:	409e      	lsls	r6, r3
 800083c:	0033      	movs	r3, r6
 800083e:	1e5c      	subs	r4, r3, #1
 8000840:	41a3      	sbcs	r3, r4
 8000842:	4318      	orrs	r0, r3
 8000844:	464c      	mov	r4, r9
 8000846:	0015      	movs	r5, r2
 8000848:	1a0e      	subs	r6, r1, r0
 800084a:	e732      	b.n	80006b2 <__aeabi_fadd+0xc2>
 800084c:	0008      	movs	r0, r1
 800084e:	2220      	movs	r2, #32
 8000850:	40d8      	lsrs	r0, r3
 8000852:	1ad3      	subs	r3, r2, r3
 8000854:	4099      	lsls	r1, r3
 8000856:	000b      	movs	r3, r1
 8000858:	1e5a      	subs	r2, r3, #1
 800085a:	4193      	sbcs	r3, r2
 800085c:	4303      	orrs	r3, r0
 800085e:	18f6      	adds	r6, r6, r3
 8000860:	0173      	lsls	r3, r6, #5
 8000862:	d59b      	bpl.n	800079c <__aeabi_fadd+0x1ac>
 8000864:	3501      	adds	r5, #1
 8000866:	2dff      	cmp	r5, #255	@ 0xff
 8000868:	d100      	bne.n	800086c <__aeabi_fadd+0x27c>
 800086a:	e73e      	b.n	80006ea <__aeabi_fadd+0xfa>
 800086c:	2301      	movs	r3, #1
 800086e:	494d      	ldr	r1, [pc, #308]	@ (80009a4 <__aeabi_fadd+0x3b4>)
 8000870:	0872      	lsrs	r2, r6, #1
 8000872:	4033      	ands	r3, r6
 8000874:	400a      	ands	r2, r1
 8000876:	431a      	orrs	r2, r3
 8000878:	0016      	movs	r6, r2
 800087a:	0753      	lsls	r3, r2, #29
 800087c:	d004      	beq.n	8000888 <__aeabi_fadd+0x298>
 800087e:	230f      	movs	r3, #15
 8000880:	4013      	ands	r3, r2
 8000882:	2b04      	cmp	r3, #4
 8000884:	d000      	beq.n	8000888 <__aeabi_fadd+0x298>
 8000886:	e72a      	b.n	80006de <__aeabi_fadd+0xee>
 8000888:	0173      	lsls	r3, r6, #5
 800088a:	d500      	bpl.n	800088e <__aeabi_fadd+0x29e>
 800088c:	e72a      	b.n	80006e4 <__aeabi_fadd+0xf4>
 800088e:	002b      	movs	r3, r5
 8000890:	08f7      	lsrs	r7, r6, #3
 8000892:	e6f7      	b.n	8000684 <__aeabi_fadd+0x94>
 8000894:	2bff      	cmp	r3, #255	@ 0xff
 8000896:	d100      	bne.n	800089a <__aeabi_fadd+0x2aa>
 8000898:	e727      	b.n	80006ea <__aeabi_fadd+0xfa>
 800089a:	1871      	adds	r1, r6, r1
 800089c:	0849      	lsrs	r1, r1, #1
 800089e:	074a      	lsls	r2, r1, #29
 80008a0:	d02f      	beq.n	8000902 <__aeabi_fadd+0x312>
 80008a2:	220f      	movs	r2, #15
 80008a4:	400a      	ands	r2, r1
 80008a6:	2a04      	cmp	r2, #4
 80008a8:	d02b      	beq.n	8000902 <__aeabi_fadd+0x312>
 80008aa:	1d0e      	adds	r6, r1, #4
 80008ac:	e6e6      	b.n	800067c <__aeabi_fadd+0x8c>
 80008ae:	2aff      	cmp	r2, #255	@ 0xff
 80008b0:	d08d      	beq.n	80007ce <__aeabi_fadd+0x1de>
 80008b2:	2080      	movs	r0, #128	@ 0x80
 80008b4:	04c0      	lsls	r0, r0, #19
 80008b6:	4306      	orrs	r6, r0
 80008b8:	2b1b      	cmp	r3, #27
 80008ba:	dd24      	ble.n	8000906 <__aeabi_fadd+0x316>
 80008bc:	0013      	movs	r3, r2
 80008be:	1d4e      	adds	r6, r1, #5
 80008c0:	e6dc      	b.n	800067c <__aeabi_fadd+0x8c>
 80008c2:	464c      	mov	r4, r9
 80008c4:	1b8f      	subs	r7, r1, r6
 80008c6:	e6f9      	b.n	80006bc <__aeabi_fadd+0xcc>
 80008c8:	464c      	mov	r4, r9
 80008ca:	000e      	movs	r6, r1
 80008cc:	e6d6      	b.n	800067c <__aeabi_fadd+0x8c>
 80008ce:	2e00      	cmp	r6, #0
 80008d0:	d149      	bne.n	8000966 <__aeabi_fadd+0x376>
 80008d2:	2900      	cmp	r1, #0
 80008d4:	d068      	beq.n	80009a8 <__aeabi_fadd+0x3b8>
 80008d6:	4667      	mov	r7, ip
 80008d8:	464c      	mov	r4, r9
 80008da:	e77c      	b.n	80007d6 <__aeabi_fadd+0x1e6>
 80008dc:	1870      	adds	r0, r6, r1
 80008de:	0143      	lsls	r3, r0, #5
 80008e0:	d574      	bpl.n	80009cc <__aeabi_fadd+0x3dc>
 80008e2:	4930      	ldr	r1, [pc, #192]	@ (80009a4 <__aeabi_fadd+0x3b4>)
 80008e4:	0840      	lsrs	r0, r0, #1
 80008e6:	4001      	ands	r1, r0
 80008e8:	0743      	lsls	r3, r0, #29
 80008ea:	d009      	beq.n	8000900 <__aeabi_fadd+0x310>
 80008ec:	230f      	movs	r3, #15
 80008ee:	4003      	ands	r3, r0
 80008f0:	2b04      	cmp	r3, #4
 80008f2:	d005      	beq.n	8000900 <__aeabi_fadd+0x310>
 80008f4:	2302      	movs	r3, #2
 80008f6:	1d0e      	adds	r6, r1, #4
 80008f8:	e6c0      	b.n	800067c <__aeabi_fadd+0x8c>
 80008fa:	2301      	movs	r3, #1
 80008fc:	08cf      	lsrs	r7, r1, #3
 80008fe:	e6c1      	b.n	8000684 <__aeabi_fadd+0x94>
 8000900:	2302      	movs	r3, #2
 8000902:	08cf      	lsrs	r7, r1, #3
 8000904:	e6be      	b.n	8000684 <__aeabi_fadd+0x94>
 8000906:	2520      	movs	r5, #32
 8000908:	0030      	movs	r0, r6
 800090a:	40d8      	lsrs	r0, r3
 800090c:	1aeb      	subs	r3, r5, r3
 800090e:	409e      	lsls	r6, r3
 8000910:	0033      	movs	r3, r6
 8000912:	1e5d      	subs	r5, r3, #1
 8000914:	41ab      	sbcs	r3, r5
 8000916:	4303      	orrs	r3, r0
 8000918:	0015      	movs	r5, r2
 800091a:	185e      	adds	r6, r3, r1
 800091c:	e7a0      	b.n	8000860 <__aeabi_fadd+0x270>
 800091e:	2900      	cmp	r1, #0
 8000920:	d100      	bne.n	8000924 <__aeabi_fadd+0x334>
 8000922:	e765      	b.n	80007f0 <__aeabi_fadd+0x200>
 8000924:	464c      	mov	r4, r9
 8000926:	4667      	mov	r7, ip
 8000928:	e6ac      	b.n	8000684 <__aeabi_fadd+0x94>
 800092a:	1b8f      	subs	r7, r1, r6
 800092c:	017b      	lsls	r3, r7, #5
 800092e:	d52e      	bpl.n	800098e <__aeabi_fadd+0x39e>
 8000930:	01bf      	lsls	r7, r7, #6
 8000932:	09bf      	lsrs	r7, r7, #6
 8000934:	0038      	movs	r0, r7
 8000936:	f002 fe61 	bl	80035fc <__clzsi2>
 800093a:	003b      	movs	r3, r7
 800093c:	3805      	subs	r0, #5
 800093e:	4083      	lsls	r3, r0
 8000940:	464c      	mov	r4, r9
 8000942:	3501      	adds	r5, #1
 8000944:	e710      	b.n	8000768 <__aeabi_fadd+0x178>
 8000946:	2e00      	cmp	r6, #0
 8000948:	d100      	bne.n	800094c <__aeabi_fadd+0x35c>
 800094a:	e740      	b.n	80007ce <__aeabi_fadd+0x1de>
 800094c:	2900      	cmp	r1, #0
 800094e:	d100      	bne.n	8000952 <__aeabi_fadd+0x362>
 8000950:	e741      	b.n	80007d6 <__aeabi_fadd+0x1e6>
 8000952:	2380      	movs	r3, #128	@ 0x80
 8000954:	03db      	lsls	r3, r3, #15
 8000956:	429f      	cmp	r7, r3
 8000958:	d200      	bcs.n	800095c <__aeabi_fadd+0x36c>
 800095a:	e73c      	b.n	80007d6 <__aeabi_fadd+0x1e6>
 800095c:	459c      	cmp	ip, r3
 800095e:	d300      	bcc.n	8000962 <__aeabi_fadd+0x372>
 8000960:	e739      	b.n	80007d6 <__aeabi_fadd+0x1e6>
 8000962:	4667      	mov	r7, ip
 8000964:	e737      	b.n	80007d6 <__aeabi_fadd+0x1e6>
 8000966:	2900      	cmp	r1, #0
 8000968:	d100      	bne.n	800096c <__aeabi_fadd+0x37c>
 800096a:	e734      	b.n	80007d6 <__aeabi_fadd+0x1e6>
 800096c:	2380      	movs	r3, #128	@ 0x80
 800096e:	03db      	lsls	r3, r3, #15
 8000970:	429f      	cmp	r7, r3
 8000972:	d200      	bcs.n	8000976 <__aeabi_fadd+0x386>
 8000974:	e72f      	b.n	80007d6 <__aeabi_fadd+0x1e6>
 8000976:	459c      	cmp	ip, r3
 8000978:	d300      	bcc.n	800097c <__aeabi_fadd+0x38c>
 800097a:	e72c      	b.n	80007d6 <__aeabi_fadd+0x1e6>
 800097c:	464c      	mov	r4, r9
 800097e:	4667      	mov	r7, ip
 8000980:	e729      	b.n	80007d6 <__aeabi_fadd+0x1e6>
 8000982:	2900      	cmp	r1, #0
 8000984:	d100      	bne.n	8000988 <__aeabi_fadd+0x398>
 8000986:	e734      	b.n	80007f2 <__aeabi_fadd+0x202>
 8000988:	2300      	movs	r3, #0
 800098a:	08cf      	lsrs	r7, r1, #3
 800098c:	e67a      	b.n	8000684 <__aeabi_fadd+0x94>
 800098e:	464c      	mov	r4, r9
 8000990:	2301      	movs	r3, #1
 8000992:	08ff      	lsrs	r7, r7, #3
 8000994:	e676      	b.n	8000684 <__aeabi_fadd+0x94>
 8000996:	2f00      	cmp	r7, #0
 8000998:	d100      	bne.n	800099c <__aeabi_fadd+0x3ac>
 800099a:	e729      	b.n	80007f0 <__aeabi_fadd+0x200>
 800099c:	08ff      	lsrs	r7, r7, #3
 800099e:	e671      	b.n	8000684 <__aeabi_fadd+0x94>
 80009a0:	fbffffff 	.word	0xfbffffff
 80009a4:	7dffffff 	.word	0x7dffffff
 80009a8:	2280      	movs	r2, #128	@ 0x80
 80009aa:	2400      	movs	r4, #0
 80009ac:	20ff      	movs	r0, #255	@ 0xff
 80009ae:	03d2      	lsls	r2, r2, #15
 80009b0:	e69d      	b.n	80006ee <__aeabi_fadd+0xfe>
 80009b2:	2300      	movs	r3, #0
 80009b4:	e666      	b.n	8000684 <__aeabi_fadd+0x94>
 80009b6:	2300      	movs	r3, #0
 80009b8:	08d7      	lsrs	r7, r2, #3
 80009ba:	e663      	b.n	8000684 <__aeabi_fadd+0x94>
 80009bc:	2001      	movs	r0, #1
 80009be:	0172      	lsls	r2, r6, #5
 80009c0:	d500      	bpl.n	80009c4 <__aeabi_fadd+0x3d4>
 80009c2:	e6e7      	b.n	8000794 <__aeabi_fadd+0x1a4>
 80009c4:	0031      	movs	r1, r6
 80009c6:	2300      	movs	r3, #0
 80009c8:	08cf      	lsrs	r7, r1, #3
 80009ca:	e65b      	b.n	8000684 <__aeabi_fadd+0x94>
 80009cc:	2301      	movs	r3, #1
 80009ce:	08c7      	lsrs	r7, r0, #3
 80009d0:	e658      	b.n	8000684 <__aeabi_fadd+0x94>
 80009d2:	46c0      	nop			@ (mov r8, r8)

080009d4 <__aeabi_fdiv>:
 80009d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80009d6:	4646      	mov	r6, r8
 80009d8:	464f      	mov	r7, r9
 80009da:	46d6      	mov	lr, sl
 80009dc:	0245      	lsls	r5, r0, #9
 80009de:	b5c0      	push	{r6, r7, lr}
 80009e0:	0fc3      	lsrs	r3, r0, #31
 80009e2:	0047      	lsls	r7, r0, #1
 80009e4:	4698      	mov	r8, r3
 80009e6:	1c0e      	adds	r6, r1, #0
 80009e8:	0a6d      	lsrs	r5, r5, #9
 80009ea:	0e3f      	lsrs	r7, r7, #24
 80009ec:	d05b      	beq.n	8000aa6 <__aeabi_fdiv+0xd2>
 80009ee:	2fff      	cmp	r7, #255	@ 0xff
 80009f0:	d021      	beq.n	8000a36 <__aeabi_fdiv+0x62>
 80009f2:	2380      	movs	r3, #128	@ 0x80
 80009f4:	00ed      	lsls	r5, r5, #3
 80009f6:	04db      	lsls	r3, r3, #19
 80009f8:	431d      	orrs	r5, r3
 80009fa:	2300      	movs	r3, #0
 80009fc:	4699      	mov	r9, r3
 80009fe:	469a      	mov	sl, r3
 8000a00:	3f7f      	subs	r7, #127	@ 0x7f
 8000a02:	0274      	lsls	r4, r6, #9
 8000a04:	0073      	lsls	r3, r6, #1
 8000a06:	0a64      	lsrs	r4, r4, #9
 8000a08:	0e1b      	lsrs	r3, r3, #24
 8000a0a:	0ff6      	lsrs	r6, r6, #31
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d020      	beq.n	8000a52 <__aeabi_fdiv+0x7e>
 8000a10:	2bff      	cmp	r3, #255	@ 0xff
 8000a12:	d043      	beq.n	8000a9c <__aeabi_fdiv+0xc8>
 8000a14:	2280      	movs	r2, #128	@ 0x80
 8000a16:	2000      	movs	r0, #0
 8000a18:	00e4      	lsls	r4, r4, #3
 8000a1a:	04d2      	lsls	r2, r2, #19
 8000a1c:	4314      	orrs	r4, r2
 8000a1e:	3b7f      	subs	r3, #127	@ 0x7f
 8000a20:	4642      	mov	r2, r8
 8000a22:	1aff      	subs	r7, r7, r3
 8000a24:	464b      	mov	r3, r9
 8000a26:	4072      	eors	r2, r6
 8000a28:	2b0f      	cmp	r3, #15
 8000a2a:	d900      	bls.n	8000a2e <__aeabi_fdiv+0x5a>
 8000a2c:	e09d      	b.n	8000b6a <__aeabi_fdiv+0x196>
 8000a2e:	4971      	ldr	r1, [pc, #452]	@ (8000bf4 <__aeabi_fdiv+0x220>)
 8000a30:	009b      	lsls	r3, r3, #2
 8000a32:	58cb      	ldr	r3, [r1, r3]
 8000a34:	469f      	mov	pc, r3
 8000a36:	2d00      	cmp	r5, #0
 8000a38:	d15a      	bne.n	8000af0 <__aeabi_fdiv+0x11c>
 8000a3a:	2308      	movs	r3, #8
 8000a3c:	4699      	mov	r9, r3
 8000a3e:	3b06      	subs	r3, #6
 8000a40:	0274      	lsls	r4, r6, #9
 8000a42:	469a      	mov	sl, r3
 8000a44:	0073      	lsls	r3, r6, #1
 8000a46:	27ff      	movs	r7, #255	@ 0xff
 8000a48:	0a64      	lsrs	r4, r4, #9
 8000a4a:	0e1b      	lsrs	r3, r3, #24
 8000a4c:	0ff6      	lsrs	r6, r6, #31
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d1de      	bne.n	8000a10 <__aeabi_fdiv+0x3c>
 8000a52:	2c00      	cmp	r4, #0
 8000a54:	d13b      	bne.n	8000ace <__aeabi_fdiv+0xfa>
 8000a56:	2301      	movs	r3, #1
 8000a58:	4642      	mov	r2, r8
 8000a5a:	4649      	mov	r1, r9
 8000a5c:	4072      	eors	r2, r6
 8000a5e:	4319      	orrs	r1, r3
 8000a60:	290e      	cmp	r1, #14
 8000a62:	d818      	bhi.n	8000a96 <__aeabi_fdiv+0xc2>
 8000a64:	4864      	ldr	r0, [pc, #400]	@ (8000bf8 <__aeabi_fdiv+0x224>)
 8000a66:	0089      	lsls	r1, r1, #2
 8000a68:	5841      	ldr	r1, [r0, r1]
 8000a6a:	468f      	mov	pc, r1
 8000a6c:	4653      	mov	r3, sl
 8000a6e:	2b02      	cmp	r3, #2
 8000a70:	d100      	bne.n	8000a74 <__aeabi_fdiv+0xa0>
 8000a72:	e0b8      	b.n	8000be6 <__aeabi_fdiv+0x212>
 8000a74:	2b03      	cmp	r3, #3
 8000a76:	d06e      	beq.n	8000b56 <__aeabi_fdiv+0x182>
 8000a78:	4642      	mov	r2, r8
 8000a7a:	002c      	movs	r4, r5
 8000a7c:	2b01      	cmp	r3, #1
 8000a7e:	d140      	bne.n	8000b02 <__aeabi_fdiv+0x12e>
 8000a80:	2000      	movs	r0, #0
 8000a82:	2400      	movs	r4, #0
 8000a84:	05c0      	lsls	r0, r0, #23
 8000a86:	4320      	orrs	r0, r4
 8000a88:	07d2      	lsls	r2, r2, #31
 8000a8a:	4310      	orrs	r0, r2
 8000a8c:	bce0      	pop	{r5, r6, r7}
 8000a8e:	46ba      	mov	sl, r7
 8000a90:	46b1      	mov	r9, r6
 8000a92:	46a8      	mov	r8, r5
 8000a94:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000a96:	20ff      	movs	r0, #255	@ 0xff
 8000a98:	2400      	movs	r4, #0
 8000a9a:	e7f3      	b.n	8000a84 <__aeabi_fdiv+0xb0>
 8000a9c:	2c00      	cmp	r4, #0
 8000a9e:	d120      	bne.n	8000ae2 <__aeabi_fdiv+0x10e>
 8000aa0:	2302      	movs	r3, #2
 8000aa2:	3fff      	subs	r7, #255	@ 0xff
 8000aa4:	e7d8      	b.n	8000a58 <__aeabi_fdiv+0x84>
 8000aa6:	2d00      	cmp	r5, #0
 8000aa8:	d105      	bne.n	8000ab6 <__aeabi_fdiv+0xe2>
 8000aaa:	2304      	movs	r3, #4
 8000aac:	4699      	mov	r9, r3
 8000aae:	3b03      	subs	r3, #3
 8000ab0:	2700      	movs	r7, #0
 8000ab2:	469a      	mov	sl, r3
 8000ab4:	e7a5      	b.n	8000a02 <__aeabi_fdiv+0x2e>
 8000ab6:	0028      	movs	r0, r5
 8000ab8:	f002 fda0 	bl	80035fc <__clzsi2>
 8000abc:	2776      	movs	r7, #118	@ 0x76
 8000abe:	1f43      	subs	r3, r0, #5
 8000ac0:	409d      	lsls	r5, r3
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	427f      	negs	r7, r7
 8000ac6:	4699      	mov	r9, r3
 8000ac8:	469a      	mov	sl, r3
 8000aca:	1a3f      	subs	r7, r7, r0
 8000acc:	e799      	b.n	8000a02 <__aeabi_fdiv+0x2e>
 8000ace:	0020      	movs	r0, r4
 8000ad0:	f002 fd94 	bl	80035fc <__clzsi2>
 8000ad4:	1f43      	subs	r3, r0, #5
 8000ad6:	409c      	lsls	r4, r3
 8000ad8:	2376      	movs	r3, #118	@ 0x76
 8000ada:	425b      	negs	r3, r3
 8000adc:	1a1b      	subs	r3, r3, r0
 8000ade:	2000      	movs	r0, #0
 8000ae0:	e79e      	b.n	8000a20 <__aeabi_fdiv+0x4c>
 8000ae2:	2303      	movs	r3, #3
 8000ae4:	464a      	mov	r2, r9
 8000ae6:	431a      	orrs	r2, r3
 8000ae8:	4691      	mov	r9, r2
 8000aea:	2003      	movs	r0, #3
 8000aec:	33fc      	adds	r3, #252	@ 0xfc
 8000aee:	e797      	b.n	8000a20 <__aeabi_fdiv+0x4c>
 8000af0:	230c      	movs	r3, #12
 8000af2:	4699      	mov	r9, r3
 8000af4:	3b09      	subs	r3, #9
 8000af6:	27ff      	movs	r7, #255	@ 0xff
 8000af8:	469a      	mov	sl, r3
 8000afa:	e782      	b.n	8000a02 <__aeabi_fdiv+0x2e>
 8000afc:	2803      	cmp	r0, #3
 8000afe:	d02c      	beq.n	8000b5a <__aeabi_fdiv+0x186>
 8000b00:	0032      	movs	r2, r6
 8000b02:	0038      	movs	r0, r7
 8000b04:	307f      	adds	r0, #127	@ 0x7f
 8000b06:	2800      	cmp	r0, #0
 8000b08:	dd47      	ble.n	8000b9a <__aeabi_fdiv+0x1c6>
 8000b0a:	0763      	lsls	r3, r4, #29
 8000b0c:	d004      	beq.n	8000b18 <__aeabi_fdiv+0x144>
 8000b0e:	230f      	movs	r3, #15
 8000b10:	4023      	ands	r3, r4
 8000b12:	2b04      	cmp	r3, #4
 8000b14:	d000      	beq.n	8000b18 <__aeabi_fdiv+0x144>
 8000b16:	3404      	adds	r4, #4
 8000b18:	0123      	lsls	r3, r4, #4
 8000b1a:	d503      	bpl.n	8000b24 <__aeabi_fdiv+0x150>
 8000b1c:	0038      	movs	r0, r7
 8000b1e:	4b37      	ldr	r3, [pc, #220]	@ (8000bfc <__aeabi_fdiv+0x228>)
 8000b20:	3080      	adds	r0, #128	@ 0x80
 8000b22:	401c      	ands	r4, r3
 8000b24:	28fe      	cmp	r0, #254	@ 0xfe
 8000b26:	dcb6      	bgt.n	8000a96 <__aeabi_fdiv+0xc2>
 8000b28:	01a4      	lsls	r4, r4, #6
 8000b2a:	0a64      	lsrs	r4, r4, #9
 8000b2c:	b2c0      	uxtb	r0, r0
 8000b2e:	e7a9      	b.n	8000a84 <__aeabi_fdiv+0xb0>
 8000b30:	2480      	movs	r4, #128	@ 0x80
 8000b32:	2200      	movs	r2, #0
 8000b34:	20ff      	movs	r0, #255	@ 0xff
 8000b36:	03e4      	lsls	r4, r4, #15
 8000b38:	e7a4      	b.n	8000a84 <__aeabi_fdiv+0xb0>
 8000b3a:	2380      	movs	r3, #128	@ 0x80
 8000b3c:	03db      	lsls	r3, r3, #15
 8000b3e:	421d      	tst	r5, r3
 8000b40:	d001      	beq.n	8000b46 <__aeabi_fdiv+0x172>
 8000b42:	421c      	tst	r4, r3
 8000b44:	d00b      	beq.n	8000b5e <__aeabi_fdiv+0x18a>
 8000b46:	2480      	movs	r4, #128	@ 0x80
 8000b48:	03e4      	lsls	r4, r4, #15
 8000b4a:	432c      	orrs	r4, r5
 8000b4c:	0264      	lsls	r4, r4, #9
 8000b4e:	4642      	mov	r2, r8
 8000b50:	20ff      	movs	r0, #255	@ 0xff
 8000b52:	0a64      	lsrs	r4, r4, #9
 8000b54:	e796      	b.n	8000a84 <__aeabi_fdiv+0xb0>
 8000b56:	4646      	mov	r6, r8
 8000b58:	002c      	movs	r4, r5
 8000b5a:	2380      	movs	r3, #128	@ 0x80
 8000b5c:	03db      	lsls	r3, r3, #15
 8000b5e:	431c      	orrs	r4, r3
 8000b60:	0264      	lsls	r4, r4, #9
 8000b62:	0032      	movs	r2, r6
 8000b64:	20ff      	movs	r0, #255	@ 0xff
 8000b66:	0a64      	lsrs	r4, r4, #9
 8000b68:	e78c      	b.n	8000a84 <__aeabi_fdiv+0xb0>
 8000b6a:	016d      	lsls	r5, r5, #5
 8000b6c:	0160      	lsls	r0, r4, #5
 8000b6e:	4285      	cmp	r5, r0
 8000b70:	d22d      	bcs.n	8000bce <__aeabi_fdiv+0x1fa>
 8000b72:	231b      	movs	r3, #27
 8000b74:	2400      	movs	r4, #0
 8000b76:	3f01      	subs	r7, #1
 8000b78:	2601      	movs	r6, #1
 8000b7a:	0029      	movs	r1, r5
 8000b7c:	0064      	lsls	r4, r4, #1
 8000b7e:	006d      	lsls	r5, r5, #1
 8000b80:	2900      	cmp	r1, #0
 8000b82:	db01      	blt.n	8000b88 <__aeabi_fdiv+0x1b4>
 8000b84:	4285      	cmp	r5, r0
 8000b86:	d301      	bcc.n	8000b8c <__aeabi_fdiv+0x1b8>
 8000b88:	1a2d      	subs	r5, r5, r0
 8000b8a:	4334      	orrs	r4, r6
 8000b8c:	3b01      	subs	r3, #1
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d1f3      	bne.n	8000b7a <__aeabi_fdiv+0x1a6>
 8000b92:	1e6b      	subs	r3, r5, #1
 8000b94:	419d      	sbcs	r5, r3
 8000b96:	432c      	orrs	r4, r5
 8000b98:	e7b3      	b.n	8000b02 <__aeabi_fdiv+0x12e>
 8000b9a:	2301      	movs	r3, #1
 8000b9c:	1a1b      	subs	r3, r3, r0
 8000b9e:	2b1b      	cmp	r3, #27
 8000ba0:	dd00      	ble.n	8000ba4 <__aeabi_fdiv+0x1d0>
 8000ba2:	e76d      	b.n	8000a80 <__aeabi_fdiv+0xac>
 8000ba4:	0021      	movs	r1, r4
 8000ba6:	379e      	adds	r7, #158	@ 0x9e
 8000ba8:	40d9      	lsrs	r1, r3
 8000baa:	40bc      	lsls	r4, r7
 8000bac:	000b      	movs	r3, r1
 8000bae:	1e61      	subs	r1, r4, #1
 8000bb0:	418c      	sbcs	r4, r1
 8000bb2:	4323      	orrs	r3, r4
 8000bb4:	0759      	lsls	r1, r3, #29
 8000bb6:	d004      	beq.n	8000bc2 <__aeabi_fdiv+0x1ee>
 8000bb8:	210f      	movs	r1, #15
 8000bba:	4019      	ands	r1, r3
 8000bbc:	2904      	cmp	r1, #4
 8000bbe:	d000      	beq.n	8000bc2 <__aeabi_fdiv+0x1ee>
 8000bc0:	3304      	adds	r3, #4
 8000bc2:	0159      	lsls	r1, r3, #5
 8000bc4:	d413      	bmi.n	8000bee <__aeabi_fdiv+0x21a>
 8000bc6:	019b      	lsls	r3, r3, #6
 8000bc8:	2000      	movs	r0, #0
 8000bca:	0a5c      	lsrs	r4, r3, #9
 8000bcc:	e75a      	b.n	8000a84 <__aeabi_fdiv+0xb0>
 8000bce:	231a      	movs	r3, #26
 8000bd0:	2401      	movs	r4, #1
 8000bd2:	1a2d      	subs	r5, r5, r0
 8000bd4:	e7d0      	b.n	8000b78 <__aeabi_fdiv+0x1a4>
 8000bd6:	1e98      	subs	r0, r3, #2
 8000bd8:	4243      	negs	r3, r0
 8000bda:	4158      	adcs	r0, r3
 8000bdc:	4240      	negs	r0, r0
 8000bde:	0032      	movs	r2, r6
 8000be0:	2400      	movs	r4, #0
 8000be2:	b2c0      	uxtb	r0, r0
 8000be4:	e74e      	b.n	8000a84 <__aeabi_fdiv+0xb0>
 8000be6:	4642      	mov	r2, r8
 8000be8:	20ff      	movs	r0, #255	@ 0xff
 8000bea:	2400      	movs	r4, #0
 8000bec:	e74a      	b.n	8000a84 <__aeabi_fdiv+0xb0>
 8000bee:	2001      	movs	r0, #1
 8000bf0:	2400      	movs	r4, #0
 8000bf2:	e747      	b.n	8000a84 <__aeabi_fdiv+0xb0>
 8000bf4:	0800bed0 	.word	0x0800bed0
 8000bf8:	0800bf10 	.word	0x0800bf10
 8000bfc:	f7ffffff 	.word	0xf7ffffff

08000c00 <__eqsf2>:
 8000c00:	b570      	push	{r4, r5, r6, lr}
 8000c02:	0042      	lsls	r2, r0, #1
 8000c04:	024e      	lsls	r6, r1, #9
 8000c06:	004c      	lsls	r4, r1, #1
 8000c08:	0245      	lsls	r5, r0, #9
 8000c0a:	0a6d      	lsrs	r5, r5, #9
 8000c0c:	0e12      	lsrs	r2, r2, #24
 8000c0e:	0fc3      	lsrs	r3, r0, #31
 8000c10:	0a76      	lsrs	r6, r6, #9
 8000c12:	0e24      	lsrs	r4, r4, #24
 8000c14:	0fc9      	lsrs	r1, r1, #31
 8000c16:	2aff      	cmp	r2, #255	@ 0xff
 8000c18:	d010      	beq.n	8000c3c <__eqsf2+0x3c>
 8000c1a:	2cff      	cmp	r4, #255	@ 0xff
 8000c1c:	d00c      	beq.n	8000c38 <__eqsf2+0x38>
 8000c1e:	2001      	movs	r0, #1
 8000c20:	42a2      	cmp	r2, r4
 8000c22:	d10a      	bne.n	8000c3a <__eqsf2+0x3a>
 8000c24:	42b5      	cmp	r5, r6
 8000c26:	d108      	bne.n	8000c3a <__eqsf2+0x3a>
 8000c28:	428b      	cmp	r3, r1
 8000c2a:	d00f      	beq.n	8000c4c <__eqsf2+0x4c>
 8000c2c:	2a00      	cmp	r2, #0
 8000c2e:	d104      	bne.n	8000c3a <__eqsf2+0x3a>
 8000c30:	0028      	movs	r0, r5
 8000c32:	1e43      	subs	r3, r0, #1
 8000c34:	4198      	sbcs	r0, r3
 8000c36:	e000      	b.n	8000c3a <__eqsf2+0x3a>
 8000c38:	2001      	movs	r0, #1
 8000c3a:	bd70      	pop	{r4, r5, r6, pc}
 8000c3c:	2001      	movs	r0, #1
 8000c3e:	2cff      	cmp	r4, #255	@ 0xff
 8000c40:	d1fb      	bne.n	8000c3a <__eqsf2+0x3a>
 8000c42:	4335      	orrs	r5, r6
 8000c44:	d1f9      	bne.n	8000c3a <__eqsf2+0x3a>
 8000c46:	404b      	eors	r3, r1
 8000c48:	0018      	movs	r0, r3
 8000c4a:	e7f6      	b.n	8000c3a <__eqsf2+0x3a>
 8000c4c:	2000      	movs	r0, #0
 8000c4e:	e7f4      	b.n	8000c3a <__eqsf2+0x3a>

08000c50 <__gesf2>:
 8000c50:	b530      	push	{r4, r5, lr}
 8000c52:	0042      	lsls	r2, r0, #1
 8000c54:	0244      	lsls	r4, r0, #9
 8000c56:	024d      	lsls	r5, r1, #9
 8000c58:	0fc3      	lsrs	r3, r0, #31
 8000c5a:	0048      	lsls	r0, r1, #1
 8000c5c:	0a64      	lsrs	r4, r4, #9
 8000c5e:	0e12      	lsrs	r2, r2, #24
 8000c60:	0a6d      	lsrs	r5, r5, #9
 8000c62:	0e00      	lsrs	r0, r0, #24
 8000c64:	0fc9      	lsrs	r1, r1, #31
 8000c66:	2aff      	cmp	r2, #255	@ 0xff
 8000c68:	d018      	beq.n	8000c9c <__gesf2+0x4c>
 8000c6a:	28ff      	cmp	r0, #255	@ 0xff
 8000c6c:	d00a      	beq.n	8000c84 <__gesf2+0x34>
 8000c6e:	2a00      	cmp	r2, #0
 8000c70:	d11e      	bne.n	8000cb0 <__gesf2+0x60>
 8000c72:	2800      	cmp	r0, #0
 8000c74:	d10a      	bne.n	8000c8c <__gesf2+0x3c>
 8000c76:	2d00      	cmp	r5, #0
 8000c78:	d029      	beq.n	8000cce <__gesf2+0x7e>
 8000c7a:	2c00      	cmp	r4, #0
 8000c7c:	d12d      	bne.n	8000cda <__gesf2+0x8a>
 8000c7e:	0048      	lsls	r0, r1, #1
 8000c80:	3801      	subs	r0, #1
 8000c82:	bd30      	pop	{r4, r5, pc}
 8000c84:	2d00      	cmp	r5, #0
 8000c86:	d125      	bne.n	8000cd4 <__gesf2+0x84>
 8000c88:	2a00      	cmp	r2, #0
 8000c8a:	d101      	bne.n	8000c90 <__gesf2+0x40>
 8000c8c:	2c00      	cmp	r4, #0
 8000c8e:	d0f6      	beq.n	8000c7e <__gesf2+0x2e>
 8000c90:	428b      	cmp	r3, r1
 8000c92:	d019      	beq.n	8000cc8 <__gesf2+0x78>
 8000c94:	2001      	movs	r0, #1
 8000c96:	425b      	negs	r3, r3
 8000c98:	4318      	orrs	r0, r3
 8000c9a:	e7f2      	b.n	8000c82 <__gesf2+0x32>
 8000c9c:	2c00      	cmp	r4, #0
 8000c9e:	d119      	bne.n	8000cd4 <__gesf2+0x84>
 8000ca0:	28ff      	cmp	r0, #255	@ 0xff
 8000ca2:	d1f7      	bne.n	8000c94 <__gesf2+0x44>
 8000ca4:	2d00      	cmp	r5, #0
 8000ca6:	d115      	bne.n	8000cd4 <__gesf2+0x84>
 8000ca8:	2000      	movs	r0, #0
 8000caa:	428b      	cmp	r3, r1
 8000cac:	d1f2      	bne.n	8000c94 <__gesf2+0x44>
 8000cae:	e7e8      	b.n	8000c82 <__gesf2+0x32>
 8000cb0:	2800      	cmp	r0, #0
 8000cb2:	d0ef      	beq.n	8000c94 <__gesf2+0x44>
 8000cb4:	428b      	cmp	r3, r1
 8000cb6:	d1ed      	bne.n	8000c94 <__gesf2+0x44>
 8000cb8:	4282      	cmp	r2, r0
 8000cba:	dceb      	bgt.n	8000c94 <__gesf2+0x44>
 8000cbc:	db04      	blt.n	8000cc8 <__gesf2+0x78>
 8000cbe:	42ac      	cmp	r4, r5
 8000cc0:	d8e8      	bhi.n	8000c94 <__gesf2+0x44>
 8000cc2:	2000      	movs	r0, #0
 8000cc4:	42ac      	cmp	r4, r5
 8000cc6:	d2dc      	bcs.n	8000c82 <__gesf2+0x32>
 8000cc8:	0058      	lsls	r0, r3, #1
 8000cca:	3801      	subs	r0, #1
 8000ccc:	e7d9      	b.n	8000c82 <__gesf2+0x32>
 8000cce:	2c00      	cmp	r4, #0
 8000cd0:	d0d7      	beq.n	8000c82 <__gesf2+0x32>
 8000cd2:	e7df      	b.n	8000c94 <__gesf2+0x44>
 8000cd4:	2002      	movs	r0, #2
 8000cd6:	4240      	negs	r0, r0
 8000cd8:	e7d3      	b.n	8000c82 <__gesf2+0x32>
 8000cda:	428b      	cmp	r3, r1
 8000cdc:	d1da      	bne.n	8000c94 <__gesf2+0x44>
 8000cde:	e7ee      	b.n	8000cbe <__gesf2+0x6e>

08000ce0 <__lesf2>:
 8000ce0:	b530      	push	{r4, r5, lr}
 8000ce2:	0042      	lsls	r2, r0, #1
 8000ce4:	0244      	lsls	r4, r0, #9
 8000ce6:	024d      	lsls	r5, r1, #9
 8000ce8:	0fc3      	lsrs	r3, r0, #31
 8000cea:	0048      	lsls	r0, r1, #1
 8000cec:	0a64      	lsrs	r4, r4, #9
 8000cee:	0e12      	lsrs	r2, r2, #24
 8000cf0:	0a6d      	lsrs	r5, r5, #9
 8000cf2:	0e00      	lsrs	r0, r0, #24
 8000cf4:	0fc9      	lsrs	r1, r1, #31
 8000cf6:	2aff      	cmp	r2, #255	@ 0xff
 8000cf8:	d017      	beq.n	8000d2a <__lesf2+0x4a>
 8000cfa:	28ff      	cmp	r0, #255	@ 0xff
 8000cfc:	d00a      	beq.n	8000d14 <__lesf2+0x34>
 8000cfe:	2a00      	cmp	r2, #0
 8000d00:	d11b      	bne.n	8000d3a <__lesf2+0x5a>
 8000d02:	2800      	cmp	r0, #0
 8000d04:	d10a      	bne.n	8000d1c <__lesf2+0x3c>
 8000d06:	2d00      	cmp	r5, #0
 8000d08:	d01d      	beq.n	8000d46 <__lesf2+0x66>
 8000d0a:	2c00      	cmp	r4, #0
 8000d0c:	d12d      	bne.n	8000d6a <__lesf2+0x8a>
 8000d0e:	0048      	lsls	r0, r1, #1
 8000d10:	3801      	subs	r0, #1
 8000d12:	e011      	b.n	8000d38 <__lesf2+0x58>
 8000d14:	2d00      	cmp	r5, #0
 8000d16:	d10e      	bne.n	8000d36 <__lesf2+0x56>
 8000d18:	2a00      	cmp	r2, #0
 8000d1a:	d101      	bne.n	8000d20 <__lesf2+0x40>
 8000d1c:	2c00      	cmp	r4, #0
 8000d1e:	d0f6      	beq.n	8000d0e <__lesf2+0x2e>
 8000d20:	428b      	cmp	r3, r1
 8000d22:	d10c      	bne.n	8000d3e <__lesf2+0x5e>
 8000d24:	0058      	lsls	r0, r3, #1
 8000d26:	3801      	subs	r0, #1
 8000d28:	e006      	b.n	8000d38 <__lesf2+0x58>
 8000d2a:	2c00      	cmp	r4, #0
 8000d2c:	d103      	bne.n	8000d36 <__lesf2+0x56>
 8000d2e:	28ff      	cmp	r0, #255	@ 0xff
 8000d30:	d105      	bne.n	8000d3e <__lesf2+0x5e>
 8000d32:	2d00      	cmp	r5, #0
 8000d34:	d015      	beq.n	8000d62 <__lesf2+0x82>
 8000d36:	2002      	movs	r0, #2
 8000d38:	bd30      	pop	{r4, r5, pc}
 8000d3a:	2800      	cmp	r0, #0
 8000d3c:	d106      	bne.n	8000d4c <__lesf2+0x6c>
 8000d3e:	2001      	movs	r0, #1
 8000d40:	425b      	negs	r3, r3
 8000d42:	4318      	orrs	r0, r3
 8000d44:	e7f8      	b.n	8000d38 <__lesf2+0x58>
 8000d46:	2c00      	cmp	r4, #0
 8000d48:	d0f6      	beq.n	8000d38 <__lesf2+0x58>
 8000d4a:	e7f8      	b.n	8000d3e <__lesf2+0x5e>
 8000d4c:	428b      	cmp	r3, r1
 8000d4e:	d1f6      	bne.n	8000d3e <__lesf2+0x5e>
 8000d50:	4282      	cmp	r2, r0
 8000d52:	dcf4      	bgt.n	8000d3e <__lesf2+0x5e>
 8000d54:	dbe6      	blt.n	8000d24 <__lesf2+0x44>
 8000d56:	42ac      	cmp	r4, r5
 8000d58:	d8f1      	bhi.n	8000d3e <__lesf2+0x5e>
 8000d5a:	2000      	movs	r0, #0
 8000d5c:	42ac      	cmp	r4, r5
 8000d5e:	d2eb      	bcs.n	8000d38 <__lesf2+0x58>
 8000d60:	e7e0      	b.n	8000d24 <__lesf2+0x44>
 8000d62:	2000      	movs	r0, #0
 8000d64:	428b      	cmp	r3, r1
 8000d66:	d1ea      	bne.n	8000d3e <__lesf2+0x5e>
 8000d68:	e7e6      	b.n	8000d38 <__lesf2+0x58>
 8000d6a:	428b      	cmp	r3, r1
 8000d6c:	d1e7      	bne.n	8000d3e <__lesf2+0x5e>
 8000d6e:	e7f2      	b.n	8000d56 <__lesf2+0x76>

08000d70 <__aeabi_fmul>:
 8000d70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d72:	464f      	mov	r7, r9
 8000d74:	4646      	mov	r6, r8
 8000d76:	46d6      	mov	lr, sl
 8000d78:	0044      	lsls	r4, r0, #1
 8000d7a:	b5c0      	push	{r6, r7, lr}
 8000d7c:	0246      	lsls	r6, r0, #9
 8000d7e:	1c0f      	adds	r7, r1, #0
 8000d80:	0a76      	lsrs	r6, r6, #9
 8000d82:	0e24      	lsrs	r4, r4, #24
 8000d84:	0fc5      	lsrs	r5, r0, #31
 8000d86:	2c00      	cmp	r4, #0
 8000d88:	d100      	bne.n	8000d8c <__aeabi_fmul+0x1c>
 8000d8a:	e0da      	b.n	8000f42 <__aeabi_fmul+0x1d2>
 8000d8c:	2cff      	cmp	r4, #255	@ 0xff
 8000d8e:	d074      	beq.n	8000e7a <__aeabi_fmul+0x10a>
 8000d90:	2380      	movs	r3, #128	@ 0x80
 8000d92:	00f6      	lsls	r6, r6, #3
 8000d94:	04db      	lsls	r3, r3, #19
 8000d96:	431e      	orrs	r6, r3
 8000d98:	2300      	movs	r3, #0
 8000d9a:	4699      	mov	r9, r3
 8000d9c:	469a      	mov	sl, r3
 8000d9e:	3c7f      	subs	r4, #127	@ 0x7f
 8000da0:	027b      	lsls	r3, r7, #9
 8000da2:	0a5b      	lsrs	r3, r3, #9
 8000da4:	4698      	mov	r8, r3
 8000da6:	007b      	lsls	r3, r7, #1
 8000da8:	0e1b      	lsrs	r3, r3, #24
 8000daa:	0fff      	lsrs	r7, r7, #31
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d074      	beq.n	8000e9a <__aeabi_fmul+0x12a>
 8000db0:	2bff      	cmp	r3, #255	@ 0xff
 8000db2:	d100      	bne.n	8000db6 <__aeabi_fmul+0x46>
 8000db4:	e08e      	b.n	8000ed4 <__aeabi_fmul+0x164>
 8000db6:	4642      	mov	r2, r8
 8000db8:	2180      	movs	r1, #128	@ 0x80
 8000dba:	00d2      	lsls	r2, r2, #3
 8000dbc:	04c9      	lsls	r1, r1, #19
 8000dbe:	4311      	orrs	r1, r2
 8000dc0:	3b7f      	subs	r3, #127	@ 0x7f
 8000dc2:	002a      	movs	r2, r5
 8000dc4:	18e4      	adds	r4, r4, r3
 8000dc6:	464b      	mov	r3, r9
 8000dc8:	407a      	eors	r2, r7
 8000dca:	4688      	mov	r8, r1
 8000dcc:	b2d2      	uxtb	r2, r2
 8000dce:	2b0a      	cmp	r3, #10
 8000dd0:	dc75      	bgt.n	8000ebe <__aeabi_fmul+0x14e>
 8000dd2:	464b      	mov	r3, r9
 8000dd4:	2000      	movs	r0, #0
 8000dd6:	2b02      	cmp	r3, #2
 8000dd8:	dd0f      	ble.n	8000dfa <__aeabi_fmul+0x8a>
 8000dda:	4649      	mov	r1, r9
 8000ddc:	2301      	movs	r3, #1
 8000dde:	408b      	lsls	r3, r1
 8000de0:	21a6      	movs	r1, #166	@ 0xa6
 8000de2:	00c9      	lsls	r1, r1, #3
 8000de4:	420b      	tst	r3, r1
 8000de6:	d169      	bne.n	8000ebc <__aeabi_fmul+0x14c>
 8000de8:	2190      	movs	r1, #144	@ 0x90
 8000dea:	0089      	lsls	r1, r1, #2
 8000dec:	420b      	tst	r3, r1
 8000dee:	d000      	beq.n	8000df2 <__aeabi_fmul+0x82>
 8000df0:	e100      	b.n	8000ff4 <__aeabi_fmul+0x284>
 8000df2:	2188      	movs	r1, #136	@ 0x88
 8000df4:	4219      	tst	r1, r3
 8000df6:	d000      	beq.n	8000dfa <__aeabi_fmul+0x8a>
 8000df8:	e0f5      	b.n	8000fe6 <__aeabi_fmul+0x276>
 8000dfa:	4641      	mov	r1, r8
 8000dfc:	0409      	lsls	r1, r1, #16
 8000dfe:	0c09      	lsrs	r1, r1, #16
 8000e00:	4643      	mov	r3, r8
 8000e02:	0008      	movs	r0, r1
 8000e04:	0c35      	lsrs	r5, r6, #16
 8000e06:	0436      	lsls	r6, r6, #16
 8000e08:	0c1b      	lsrs	r3, r3, #16
 8000e0a:	0c36      	lsrs	r6, r6, #16
 8000e0c:	4370      	muls	r0, r6
 8000e0e:	4369      	muls	r1, r5
 8000e10:	435e      	muls	r6, r3
 8000e12:	435d      	muls	r5, r3
 8000e14:	1876      	adds	r6, r6, r1
 8000e16:	0c03      	lsrs	r3, r0, #16
 8000e18:	199b      	adds	r3, r3, r6
 8000e1a:	4299      	cmp	r1, r3
 8000e1c:	d903      	bls.n	8000e26 <__aeabi_fmul+0xb6>
 8000e1e:	2180      	movs	r1, #128	@ 0x80
 8000e20:	0249      	lsls	r1, r1, #9
 8000e22:	468c      	mov	ip, r1
 8000e24:	4465      	add	r5, ip
 8000e26:	0400      	lsls	r0, r0, #16
 8000e28:	0419      	lsls	r1, r3, #16
 8000e2a:	0c00      	lsrs	r0, r0, #16
 8000e2c:	1809      	adds	r1, r1, r0
 8000e2e:	018e      	lsls	r6, r1, #6
 8000e30:	1e70      	subs	r0, r6, #1
 8000e32:	4186      	sbcs	r6, r0
 8000e34:	0c1b      	lsrs	r3, r3, #16
 8000e36:	0e89      	lsrs	r1, r1, #26
 8000e38:	195b      	adds	r3, r3, r5
 8000e3a:	430e      	orrs	r6, r1
 8000e3c:	019b      	lsls	r3, r3, #6
 8000e3e:	431e      	orrs	r6, r3
 8000e40:	011b      	lsls	r3, r3, #4
 8000e42:	d46c      	bmi.n	8000f1e <__aeabi_fmul+0x1ae>
 8000e44:	0023      	movs	r3, r4
 8000e46:	337f      	adds	r3, #127	@ 0x7f
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	dc00      	bgt.n	8000e4e <__aeabi_fmul+0xde>
 8000e4c:	e0b1      	b.n	8000fb2 <__aeabi_fmul+0x242>
 8000e4e:	0015      	movs	r5, r2
 8000e50:	0771      	lsls	r1, r6, #29
 8000e52:	d00b      	beq.n	8000e6c <__aeabi_fmul+0xfc>
 8000e54:	200f      	movs	r0, #15
 8000e56:	0021      	movs	r1, r4
 8000e58:	4030      	ands	r0, r6
 8000e5a:	2804      	cmp	r0, #4
 8000e5c:	d006      	beq.n	8000e6c <__aeabi_fmul+0xfc>
 8000e5e:	3604      	adds	r6, #4
 8000e60:	0132      	lsls	r2, r6, #4
 8000e62:	d503      	bpl.n	8000e6c <__aeabi_fmul+0xfc>
 8000e64:	4b6e      	ldr	r3, [pc, #440]	@ (8001020 <__aeabi_fmul+0x2b0>)
 8000e66:	401e      	ands	r6, r3
 8000e68:	000b      	movs	r3, r1
 8000e6a:	3380      	adds	r3, #128	@ 0x80
 8000e6c:	2bfe      	cmp	r3, #254	@ 0xfe
 8000e6e:	dd00      	ble.n	8000e72 <__aeabi_fmul+0x102>
 8000e70:	e0bd      	b.n	8000fee <__aeabi_fmul+0x27e>
 8000e72:	01b2      	lsls	r2, r6, #6
 8000e74:	0a52      	lsrs	r2, r2, #9
 8000e76:	b2db      	uxtb	r3, r3
 8000e78:	e048      	b.n	8000f0c <__aeabi_fmul+0x19c>
 8000e7a:	2e00      	cmp	r6, #0
 8000e7c:	d000      	beq.n	8000e80 <__aeabi_fmul+0x110>
 8000e7e:	e092      	b.n	8000fa6 <__aeabi_fmul+0x236>
 8000e80:	2308      	movs	r3, #8
 8000e82:	4699      	mov	r9, r3
 8000e84:	3b06      	subs	r3, #6
 8000e86:	469a      	mov	sl, r3
 8000e88:	027b      	lsls	r3, r7, #9
 8000e8a:	0a5b      	lsrs	r3, r3, #9
 8000e8c:	4698      	mov	r8, r3
 8000e8e:	007b      	lsls	r3, r7, #1
 8000e90:	24ff      	movs	r4, #255	@ 0xff
 8000e92:	0e1b      	lsrs	r3, r3, #24
 8000e94:	0fff      	lsrs	r7, r7, #31
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d18a      	bne.n	8000db0 <__aeabi_fmul+0x40>
 8000e9a:	4642      	mov	r2, r8
 8000e9c:	2a00      	cmp	r2, #0
 8000e9e:	d164      	bne.n	8000f6a <__aeabi_fmul+0x1fa>
 8000ea0:	4649      	mov	r1, r9
 8000ea2:	3201      	adds	r2, #1
 8000ea4:	4311      	orrs	r1, r2
 8000ea6:	4689      	mov	r9, r1
 8000ea8:	290a      	cmp	r1, #10
 8000eaa:	dc08      	bgt.n	8000ebe <__aeabi_fmul+0x14e>
 8000eac:	407d      	eors	r5, r7
 8000eae:	2001      	movs	r0, #1
 8000eb0:	b2ea      	uxtb	r2, r5
 8000eb2:	2902      	cmp	r1, #2
 8000eb4:	dc91      	bgt.n	8000dda <__aeabi_fmul+0x6a>
 8000eb6:	0015      	movs	r5, r2
 8000eb8:	2200      	movs	r2, #0
 8000eba:	e027      	b.n	8000f0c <__aeabi_fmul+0x19c>
 8000ebc:	0015      	movs	r5, r2
 8000ebe:	4653      	mov	r3, sl
 8000ec0:	2b02      	cmp	r3, #2
 8000ec2:	d100      	bne.n	8000ec6 <__aeabi_fmul+0x156>
 8000ec4:	e093      	b.n	8000fee <__aeabi_fmul+0x27e>
 8000ec6:	2b03      	cmp	r3, #3
 8000ec8:	d01a      	beq.n	8000f00 <__aeabi_fmul+0x190>
 8000eca:	2b01      	cmp	r3, #1
 8000ecc:	d12c      	bne.n	8000f28 <__aeabi_fmul+0x1b8>
 8000ece:	2300      	movs	r3, #0
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	e01b      	b.n	8000f0c <__aeabi_fmul+0x19c>
 8000ed4:	4643      	mov	r3, r8
 8000ed6:	34ff      	adds	r4, #255	@ 0xff
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d055      	beq.n	8000f88 <__aeabi_fmul+0x218>
 8000edc:	2103      	movs	r1, #3
 8000ede:	464b      	mov	r3, r9
 8000ee0:	430b      	orrs	r3, r1
 8000ee2:	0019      	movs	r1, r3
 8000ee4:	2b0a      	cmp	r3, #10
 8000ee6:	dc00      	bgt.n	8000eea <__aeabi_fmul+0x17a>
 8000ee8:	e092      	b.n	8001010 <__aeabi_fmul+0x2a0>
 8000eea:	2b0f      	cmp	r3, #15
 8000eec:	d000      	beq.n	8000ef0 <__aeabi_fmul+0x180>
 8000eee:	e08c      	b.n	800100a <__aeabi_fmul+0x29a>
 8000ef0:	2280      	movs	r2, #128	@ 0x80
 8000ef2:	03d2      	lsls	r2, r2, #15
 8000ef4:	4216      	tst	r6, r2
 8000ef6:	d003      	beq.n	8000f00 <__aeabi_fmul+0x190>
 8000ef8:	4643      	mov	r3, r8
 8000efa:	4213      	tst	r3, r2
 8000efc:	d100      	bne.n	8000f00 <__aeabi_fmul+0x190>
 8000efe:	e07d      	b.n	8000ffc <__aeabi_fmul+0x28c>
 8000f00:	2280      	movs	r2, #128	@ 0x80
 8000f02:	03d2      	lsls	r2, r2, #15
 8000f04:	4332      	orrs	r2, r6
 8000f06:	0252      	lsls	r2, r2, #9
 8000f08:	0a52      	lsrs	r2, r2, #9
 8000f0a:	23ff      	movs	r3, #255	@ 0xff
 8000f0c:	05d8      	lsls	r0, r3, #23
 8000f0e:	07ed      	lsls	r5, r5, #31
 8000f10:	4310      	orrs	r0, r2
 8000f12:	4328      	orrs	r0, r5
 8000f14:	bce0      	pop	{r5, r6, r7}
 8000f16:	46ba      	mov	sl, r7
 8000f18:	46b1      	mov	r9, r6
 8000f1a:	46a8      	mov	r8, r5
 8000f1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000f1e:	2301      	movs	r3, #1
 8000f20:	0015      	movs	r5, r2
 8000f22:	0871      	lsrs	r1, r6, #1
 8000f24:	401e      	ands	r6, r3
 8000f26:	430e      	orrs	r6, r1
 8000f28:	0023      	movs	r3, r4
 8000f2a:	3380      	adds	r3, #128	@ 0x80
 8000f2c:	1c61      	adds	r1, r4, #1
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	dd41      	ble.n	8000fb6 <__aeabi_fmul+0x246>
 8000f32:	0772      	lsls	r2, r6, #29
 8000f34:	d094      	beq.n	8000e60 <__aeabi_fmul+0xf0>
 8000f36:	220f      	movs	r2, #15
 8000f38:	4032      	ands	r2, r6
 8000f3a:	2a04      	cmp	r2, #4
 8000f3c:	d000      	beq.n	8000f40 <__aeabi_fmul+0x1d0>
 8000f3e:	e78e      	b.n	8000e5e <__aeabi_fmul+0xee>
 8000f40:	e78e      	b.n	8000e60 <__aeabi_fmul+0xf0>
 8000f42:	2e00      	cmp	r6, #0
 8000f44:	d105      	bne.n	8000f52 <__aeabi_fmul+0x1e2>
 8000f46:	2304      	movs	r3, #4
 8000f48:	4699      	mov	r9, r3
 8000f4a:	3b03      	subs	r3, #3
 8000f4c:	2400      	movs	r4, #0
 8000f4e:	469a      	mov	sl, r3
 8000f50:	e726      	b.n	8000da0 <__aeabi_fmul+0x30>
 8000f52:	0030      	movs	r0, r6
 8000f54:	f002 fb52 	bl	80035fc <__clzsi2>
 8000f58:	2476      	movs	r4, #118	@ 0x76
 8000f5a:	1f43      	subs	r3, r0, #5
 8000f5c:	409e      	lsls	r6, r3
 8000f5e:	2300      	movs	r3, #0
 8000f60:	4264      	negs	r4, r4
 8000f62:	4699      	mov	r9, r3
 8000f64:	469a      	mov	sl, r3
 8000f66:	1a24      	subs	r4, r4, r0
 8000f68:	e71a      	b.n	8000da0 <__aeabi_fmul+0x30>
 8000f6a:	4640      	mov	r0, r8
 8000f6c:	f002 fb46 	bl	80035fc <__clzsi2>
 8000f70:	464b      	mov	r3, r9
 8000f72:	1a24      	subs	r4, r4, r0
 8000f74:	3c76      	subs	r4, #118	@ 0x76
 8000f76:	2b0a      	cmp	r3, #10
 8000f78:	dca1      	bgt.n	8000ebe <__aeabi_fmul+0x14e>
 8000f7a:	4643      	mov	r3, r8
 8000f7c:	3805      	subs	r0, #5
 8000f7e:	4083      	lsls	r3, r0
 8000f80:	407d      	eors	r5, r7
 8000f82:	4698      	mov	r8, r3
 8000f84:	b2ea      	uxtb	r2, r5
 8000f86:	e724      	b.n	8000dd2 <__aeabi_fmul+0x62>
 8000f88:	464a      	mov	r2, r9
 8000f8a:	3302      	adds	r3, #2
 8000f8c:	4313      	orrs	r3, r2
 8000f8e:	002a      	movs	r2, r5
 8000f90:	407a      	eors	r2, r7
 8000f92:	b2d2      	uxtb	r2, r2
 8000f94:	2b0a      	cmp	r3, #10
 8000f96:	dc92      	bgt.n	8000ebe <__aeabi_fmul+0x14e>
 8000f98:	4649      	mov	r1, r9
 8000f9a:	0015      	movs	r5, r2
 8000f9c:	2900      	cmp	r1, #0
 8000f9e:	d026      	beq.n	8000fee <__aeabi_fmul+0x27e>
 8000fa0:	4699      	mov	r9, r3
 8000fa2:	2002      	movs	r0, #2
 8000fa4:	e719      	b.n	8000dda <__aeabi_fmul+0x6a>
 8000fa6:	230c      	movs	r3, #12
 8000fa8:	4699      	mov	r9, r3
 8000faa:	3b09      	subs	r3, #9
 8000fac:	24ff      	movs	r4, #255	@ 0xff
 8000fae:	469a      	mov	sl, r3
 8000fb0:	e6f6      	b.n	8000da0 <__aeabi_fmul+0x30>
 8000fb2:	0015      	movs	r5, r2
 8000fb4:	0021      	movs	r1, r4
 8000fb6:	2201      	movs	r2, #1
 8000fb8:	1ad3      	subs	r3, r2, r3
 8000fba:	2b1b      	cmp	r3, #27
 8000fbc:	dd00      	ble.n	8000fc0 <__aeabi_fmul+0x250>
 8000fbe:	e786      	b.n	8000ece <__aeabi_fmul+0x15e>
 8000fc0:	319e      	adds	r1, #158	@ 0x9e
 8000fc2:	0032      	movs	r2, r6
 8000fc4:	408e      	lsls	r6, r1
 8000fc6:	40da      	lsrs	r2, r3
 8000fc8:	1e73      	subs	r3, r6, #1
 8000fca:	419e      	sbcs	r6, r3
 8000fcc:	4332      	orrs	r2, r6
 8000fce:	0753      	lsls	r3, r2, #29
 8000fd0:	d004      	beq.n	8000fdc <__aeabi_fmul+0x26c>
 8000fd2:	230f      	movs	r3, #15
 8000fd4:	4013      	ands	r3, r2
 8000fd6:	2b04      	cmp	r3, #4
 8000fd8:	d000      	beq.n	8000fdc <__aeabi_fmul+0x26c>
 8000fda:	3204      	adds	r2, #4
 8000fdc:	0153      	lsls	r3, r2, #5
 8000fde:	d510      	bpl.n	8001002 <__aeabi_fmul+0x292>
 8000fe0:	2301      	movs	r3, #1
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	e792      	b.n	8000f0c <__aeabi_fmul+0x19c>
 8000fe6:	003d      	movs	r5, r7
 8000fe8:	4646      	mov	r6, r8
 8000fea:	4682      	mov	sl, r0
 8000fec:	e767      	b.n	8000ebe <__aeabi_fmul+0x14e>
 8000fee:	23ff      	movs	r3, #255	@ 0xff
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	e78b      	b.n	8000f0c <__aeabi_fmul+0x19c>
 8000ff4:	2280      	movs	r2, #128	@ 0x80
 8000ff6:	2500      	movs	r5, #0
 8000ff8:	03d2      	lsls	r2, r2, #15
 8000ffa:	e786      	b.n	8000f0a <__aeabi_fmul+0x19a>
 8000ffc:	003d      	movs	r5, r7
 8000ffe:	431a      	orrs	r2, r3
 8001000:	e783      	b.n	8000f0a <__aeabi_fmul+0x19a>
 8001002:	0192      	lsls	r2, r2, #6
 8001004:	2300      	movs	r3, #0
 8001006:	0a52      	lsrs	r2, r2, #9
 8001008:	e780      	b.n	8000f0c <__aeabi_fmul+0x19c>
 800100a:	003d      	movs	r5, r7
 800100c:	4646      	mov	r6, r8
 800100e:	e777      	b.n	8000f00 <__aeabi_fmul+0x190>
 8001010:	002a      	movs	r2, r5
 8001012:	2301      	movs	r3, #1
 8001014:	407a      	eors	r2, r7
 8001016:	408b      	lsls	r3, r1
 8001018:	2003      	movs	r0, #3
 800101a:	b2d2      	uxtb	r2, r2
 800101c:	e6e9      	b.n	8000df2 <__aeabi_fmul+0x82>
 800101e:	46c0      	nop			@ (mov r8, r8)
 8001020:	f7ffffff 	.word	0xf7ffffff

08001024 <__aeabi_fsub>:
 8001024:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001026:	4647      	mov	r7, r8
 8001028:	46ce      	mov	lr, r9
 800102a:	0243      	lsls	r3, r0, #9
 800102c:	b580      	push	{r7, lr}
 800102e:	0a5f      	lsrs	r7, r3, #9
 8001030:	099b      	lsrs	r3, r3, #6
 8001032:	0045      	lsls	r5, r0, #1
 8001034:	004a      	lsls	r2, r1, #1
 8001036:	469c      	mov	ip, r3
 8001038:	024b      	lsls	r3, r1, #9
 800103a:	0fc4      	lsrs	r4, r0, #31
 800103c:	0fce      	lsrs	r6, r1, #31
 800103e:	0e2d      	lsrs	r5, r5, #24
 8001040:	0a58      	lsrs	r0, r3, #9
 8001042:	0e12      	lsrs	r2, r2, #24
 8001044:	0999      	lsrs	r1, r3, #6
 8001046:	2aff      	cmp	r2, #255	@ 0xff
 8001048:	d06b      	beq.n	8001122 <__aeabi_fsub+0xfe>
 800104a:	2301      	movs	r3, #1
 800104c:	405e      	eors	r6, r3
 800104e:	1aab      	subs	r3, r5, r2
 8001050:	42b4      	cmp	r4, r6
 8001052:	d04b      	beq.n	80010ec <__aeabi_fsub+0xc8>
 8001054:	2b00      	cmp	r3, #0
 8001056:	dc00      	bgt.n	800105a <__aeabi_fsub+0x36>
 8001058:	e0ff      	b.n	800125a <__aeabi_fsub+0x236>
 800105a:	2a00      	cmp	r2, #0
 800105c:	d100      	bne.n	8001060 <__aeabi_fsub+0x3c>
 800105e:	e088      	b.n	8001172 <__aeabi_fsub+0x14e>
 8001060:	2dff      	cmp	r5, #255	@ 0xff
 8001062:	d100      	bne.n	8001066 <__aeabi_fsub+0x42>
 8001064:	e0ef      	b.n	8001246 <__aeabi_fsub+0x222>
 8001066:	2280      	movs	r2, #128	@ 0x80
 8001068:	04d2      	lsls	r2, r2, #19
 800106a:	4311      	orrs	r1, r2
 800106c:	2001      	movs	r0, #1
 800106e:	2b1b      	cmp	r3, #27
 8001070:	dc08      	bgt.n	8001084 <__aeabi_fsub+0x60>
 8001072:	0008      	movs	r0, r1
 8001074:	2220      	movs	r2, #32
 8001076:	40d8      	lsrs	r0, r3
 8001078:	1ad3      	subs	r3, r2, r3
 800107a:	4099      	lsls	r1, r3
 800107c:	000b      	movs	r3, r1
 800107e:	1e5a      	subs	r2, r3, #1
 8001080:	4193      	sbcs	r3, r2
 8001082:	4318      	orrs	r0, r3
 8001084:	4663      	mov	r3, ip
 8001086:	1a1b      	subs	r3, r3, r0
 8001088:	469c      	mov	ip, r3
 800108a:	4663      	mov	r3, ip
 800108c:	015b      	lsls	r3, r3, #5
 800108e:	d400      	bmi.n	8001092 <__aeabi_fsub+0x6e>
 8001090:	e0cd      	b.n	800122e <__aeabi_fsub+0x20a>
 8001092:	4663      	mov	r3, ip
 8001094:	019f      	lsls	r7, r3, #6
 8001096:	09bf      	lsrs	r7, r7, #6
 8001098:	0038      	movs	r0, r7
 800109a:	f002 faaf 	bl	80035fc <__clzsi2>
 800109e:	003b      	movs	r3, r7
 80010a0:	3805      	subs	r0, #5
 80010a2:	4083      	lsls	r3, r0
 80010a4:	4285      	cmp	r5, r0
 80010a6:	dc00      	bgt.n	80010aa <__aeabi_fsub+0x86>
 80010a8:	e0a2      	b.n	80011f0 <__aeabi_fsub+0x1cc>
 80010aa:	4ab7      	ldr	r2, [pc, #732]	@ (8001388 <__aeabi_fsub+0x364>)
 80010ac:	1a2d      	subs	r5, r5, r0
 80010ae:	401a      	ands	r2, r3
 80010b0:	4694      	mov	ip, r2
 80010b2:	075a      	lsls	r2, r3, #29
 80010b4:	d100      	bne.n	80010b8 <__aeabi_fsub+0x94>
 80010b6:	e0c3      	b.n	8001240 <__aeabi_fsub+0x21c>
 80010b8:	220f      	movs	r2, #15
 80010ba:	4013      	ands	r3, r2
 80010bc:	2b04      	cmp	r3, #4
 80010be:	d100      	bne.n	80010c2 <__aeabi_fsub+0x9e>
 80010c0:	e0be      	b.n	8001240 <__aeabi_fsub+0x21c>
 80010c2:	2304      	movs	r3, #4
 80010c4:	4698      	mov	r8, r3
 80010c6:	44c4      	add	ip, r8
 80010c8:	4663      	mov	r3, ip
 80010ca:	015b      	lsls	r3, r3, #5
 80010cc:	d400      	bmi.n	80010d0 <__aeabi_fsub+0xac>
 80010ce:	e0b7      	b.n	8001240 <__aeabi_fsub+0x21c>
 80010d0:	1c68      	adds	r0, r5, #1
 80010d2:	2dfe      	cmp	r5, #254	@ 0xfe
 80010d4:	d000      	beq.n	80010d8 <__aeabi_fsub+0xb4>
 80010d6:	e0a5      	b.n	8001224 <__aeabi_fsub+0x200>
 80010d8:	20ff      	movs	r0, #255	@ 0xff
 80010da:	2200      	movs	r2, #0
 80010dc:	05c0      	lsls	r0, r0, #23
 80010de:	4310      	orrs	r0, r2
 80010e0:	07e4      	lsls	r4, r4, #31
 80010e2:	4320      	orrs	r0, r4
 80010e4:	bcc0      	pop	{r6, r7}
 80010e6:	46b9      	mov	r9, r7
 80010e8:	46b0      	mov	r8, r6
 80010ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	dc00      	bgt.n	80010f2 <__aeabi_fsub+0xce>
 80010f0:	e1eb      	b.n	80014ca <__aeabi_fsub+0x4a6>
 80010f2:	2a00      	cmp	r2, #0
 80010f4:	d046      	beq.n	8001184 <__aeabi_fsub+0x160>
 80010f6:	2dff      	cmp	r5, #255	@ 0xff
 80010f8:	d100      	bne.n	80010fc <__aeabi_fsub+0xd8>
 80010fa:	e0a4      	b.n	8001246 <__aeabi_fsub+0x222>
 80010fc:	2280      	movs	r2, #128	@ 0x80
 80010fe:	04d2      	lsls	r2, r2, #19
 8001100:	4311      	orrs	r1, r2
 8001102:	2b1b      	cmp	r3, #27
 8001104:	dc00      	bgt.n	8001108 <__aeabi_fsub+0xe4>
 8001106:	e0fb      	b.n	8001300 <__aeabi_fsub+0x2dc>
 8001108:	2305      	movs	r3, #5
 800110a:	4698      	mov	r8, r3
 800110c:	002b      	movs	r3, r5
 800110e:	44c4      	add	ip, r8
 8001110:	4662      	mov	r2, ip
 8001112:	08d7      	lsrs	r7, r2, #3
 8001114:	2bff      	cmp	r3, #255	@ 0xff
 8001116:	d100      	bne.n	800111a <__aeabi_fsub+0xf6>
 8001118:	e095      	b.n	8001246 <__aeabi_fsub+0x222>
 800111a:	027a      	lsls	r2, r7, #9
 800111c:	0a52      	lsrs	r2, r2, #9
 800111e:	b2d8      	uxtb	r0, r3
 8001120:	e7dc      	b.n	80010dc <__aeabi_fsub+0xb8>
 8001122:	002b      	movs	r3, r5
 8001124:	3bff      	subs	r3, #255	@ 0xff
 8001126:	4699      	mov	r9, r3
 8001128:	2900      	cmp	r1, #0
 800112a:	d118      	bne.n	800115e <__aeabi_fsub+0x13a>
 800112c:	2301      	movs	r3, #1
 800112e:	405e      	eors	r6, r3
 8001130:	42b4      	cmp	r4, r6
 8001132:	d100      	bne.n	8001136 <__aeabi_fsub+0x112>
 8001134:	e0ca      	b.n	80012cc <__aeabi_fsub+0x2a8>
 8001136:	464b      	mov	r3, r9
 8001138:	2b00      	cmp	r3, #0
 800113a:	d02d      	beq.n	8001198 <__aeabi_fsub+0x174>
 800113c:	2d00      	cmp	r5, #0
 800113e:	d000      	beq.n	8001142 <__aeabi_fsub+0x11e>
 8001140:	e13c      	b.n	80013bc <__aeabi_fsub+0x398>
 8001142:	23ff      	movs	r3, #255	@ 0xff
 8001144:	4664      	mov	r4, ip
 8001146:	2c00      	cmp	r4, #0
 8001148:	d100      	bne.n	800114c <__aeabi_fsub+0x128>
 800114a:	e15f      	b.n	800140c <__aeabi_fsub+0x3e8>
 800114c:	1e5d      	subs	r5, r3, #1
 800114e:	2b01      	cmp	r3, #1
 8001150:	d100      	bne.n	8001154 <__aeabi_fsub+0x130>
 8001152:	e174      	b.n	800143e <__aeabi_fsub+0x41a>
 8001154:	0034      	movs	r4, r6
 8001156:	2bff      	cmp	r3, #255	@ 0xff
 8001158:	d074      	beq.n	8001244 <__aeabi_fsub+0x220>
 800115a:	002b      	movs	r3, r5
 800115c:	e103      	b.n	8001366 <__aeabi_fsub+0x342>
 800115e:	42b4      	cmp	r4, r6
 8001160:	d100      	bne.n	8001164 <__aeabi_fsub+0x140>
 8001162:	e09c      	b.n	800129e <__aeabi_fsub+0x27a>
 8001164:	2b00      	cmp	r3, #0
 8001166:	d017      	beq.n	8001198 <__aeabi_fsub+0x174>
 8001168:	2d00      	cmp	r5, #0
 800116a:	d0ea      	beq.n	8001142 <__aeabi_fsub+0x11e>
 800116c:	0007      	movs	r7, r0
 800116e:	0034      	movs	r4, r6
 8001170:	e06c      	b.n	800124c <__aeabi_fsub+0x228>
 8001172:	2900      	cmp	r1, #0
 8001174:	d0cc      	beq.n	8001110 <__aeabi_fsub+0xec>
 8001176:	1e5a      	subs	r2, r3, #1
 8001178:	2b01      	cmp	r3, #1
 800117a:	d02b      	beq.n	80011d4 <__aeabi_fsub+0x1b0>
 800117c:	2bff      	cmp	r3, #255	@ 0xff
 800117e:	d062      	beq.n	8001246 <__aeabi_fsub+0x222>
 8001180:	0013      	movs	r3, r2
 8001182:	e773      	b.n	800106c <__aeabi_fsub+0x48>
 8001184:	2900      	cmp	r1, #0
 8001186:	d0c3      	beq.n	8001110 <__aeabi_fsub+0xec>
 8001188:	1e5a      	subs	r2, r3, #1
 800118a:	2b01      	cmp	r3, #1
 800118c:	d100      	bne.n	8001190 <__aeabi_fsub+0x16c>
 800118e:	e11e      	b.n	80013ce <__aeabi_fsub+0x3aa>
 8001190:	2bff      	cmp	r3, #255	@ 0xff
 8001192:	d058      	beq.n	8001246 <__aeabi_fsub+0x222>
 8001194:	0013      	movs	r3, r2
 8001196:	e7b4      	b.n	8001102 <__aeabi_fsub+0xde>
 8001198:	22fe      	movs	r2, #254	@ 0xfe
 800119a:	1c6b      	adds	r3, r5, #1
 800119c:	421a      	tst	r2, r3
 800119e:	d10d      	bne.n	80011bc <__aeabi_fsub+0x198>
 80011a0:	2d00      	cmp	r5, #0
 80011a2:	d060      	beq.n	8001266 <__aeabi_fsub+0x242>
 80011a4:	4663      	mov	r3, ip
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d000      	beq.n	80011ac <__aeabi_fsub+0x188>
 80011aa:	e120      	b.n	80013ee <__aeabi_fsub+0x3ca>
 80011ac:	2900      	cmp	r1, #0
 80011ae:	d000      	beq.n	80011b2 <__aeabi_fsub+0x18e>
 80011b0:	e128      	b.n	8001404 <__aeabi_fsub+0x3e0>
 80011b2:	2280      	movs	r2, #128	@ 0x80
 80011b4:	2400      	movs	r4, #0
 80011b6:	20ff      	movs	r0, #255	@ 0xff
 80011b8:	03d2      	lsls	r2, r2, #15
 80011ba:	e78f      	b.n	80010dc <__aeabi_fsub+0xb8>
 80011bc:	4663      	mov	r3, ip
 80011be:	1a5f      	subs	r7, r3, r1
 80011c0:	017b      	lsls	r3, r7, #5
 80011c2:	d500      	bpl.n	80011c6 <__aeabi_fsub+0x1a2>
 80011c4:	e0fe      	b.n	80013c4 <__aeabi_fsub+0x3a0>
 80011c6:	2f00      	cmp	r7, #0
 80011c8:	d000      	beq.n	80011cc <__aeabi_fsub+0x1a8>
 80011ca:	e765      	b.n	8001098 <__aeabi_fsub+0x74>
 80011cc:	2400      	movs	r4, #0
 80011ce:	2000      	movs	r0, #0
 80011d0:	2200      	movs	r2, #0
 80011d2:	e783      	b.n	80010dc <__aeabi_fsub+0xb8>
 80011d4:	4663      	mov	r3, ip
 80011d6:	1a59      	subs	r1, r3, r1
 80011d8:	014b      	lsls	r3, r1, #5
 80011da:	d400      	bmi.n	80011de <__aeabi_fsub+0x1ba>
 80011dc:	e119      	b.n	8001412 <__aeabi_fsub+0x3ee>
 80011de:	018f      	lsls	r7, r1, #6
 80011e0:	09bf      	lsrs	r7, r7, #6
 80011e2:	0038      	movs	r0, r7
 80011e4:	f002 fa0a 	bl	80035fc <__clzsi2>
 80011e8:	003b      	movs	r3, r7
 80011ea:	3805      	subs	r0, #5
 80011ec:	4083      	lsls	r3, r0
 80011ee:	2501      	movs	r5, #1
 80011f0:	2220      	movs	r2, #32
 80011f2:	1b40      	subs	r0, r0, r5
 80011f4:	3001      	adds	r0, #1
 80011f6:	1a12      	subs	r2, r2, r0
 80011f8:	0019      	movs	r1, r3
 80011fa:	4093      	lsls	r3, r2
 80011fc:	40c1      	lsrs	r1, r0
 80011fe:	1e5a      	subs	r2, r3, #1
 8001200:	4193      	sbcs	r3, r2
 8001202:	4319      	orrs	r1, r3
 8001204:	468c      	mov	ip, r1
 8001206:	1e0b      	subs	r3, r1, #0
 8001208:	d0e1      	beq.n	80011ce <__aeabi_fsub+0x1aa>
 800120a:	075b      	lsls	r3, r3, #29
 800120c:	d100      	bne.n	8001210 <__aeabi_fsub+0x1ec>
 800120e:	e152      	b.n	80014b6 <__aeabi_fsub+0x492>
 8001210:	230f      	movs	r3, #15
 8001212:	2500      	movs	r5, #0
 8001214:	400b      	ands	r3, r1
 8001216:	2b04      	cmp	r3, #4
 8001218:	d000      	beq.n	800121c <__aeabi_fsub+0x1f8>
 800121a:	e752      	b.n	80010c2 <__aeabi_fsub+0x9e>
 800121c:	2001      	movs	r0, #1
 800121e:	014a      	lsls	r2, r1, #5
 8001220:	d400      	bmi.n	8001224 <__aeabi_fsub+0x200>
 8001222:	e092      	b.n	800134a <__aeabi_fsub+0x326>
 8001224:	b2c0      	uxtb	r0, r0
 8001226:	4663      	mov	r3, ip
 8001228:	019a      	lsls	r2, r3, #6
 800122a:	0a52      	lsrs	r2, r2, #9
 800122c:	e756      	b.n	80010dc <__aeabi_fsub+0xb8>
 800122e:	4663      	mov	r3, ip
 8001230:	075b      	lsls	r3, r3, #29
 8001232:	d005      	beq.n	8001240 <__aeabi_fsub+0x21c>
 8001234:	230f      	movs	r3, #15
 8001236:	4662      	mov	r2, ip
 8001238:	4013      	ands	r3, r2
 800123a:	2b04      	cmp	r3, #4
 800123c:	d000      	beq.n	8001240 <__aeabi_fsub+0x21c>
 800123e:	e740      	b.n	80010c2 <__aeabi_fsub+0x9e>
 8001240:	002b      	movs	r3, r5
 8001242:	e765      	b.n	8001110 <__aeabi_fsub+0xec>
 8001244:	0007      	movs	r7, r0
 8001246:	2f00      	cmp	r7, #0
 8001248:	d100      	bne.n	800124c <__aeabi_fsub+0x228>
 800124a:	e745      	b.n	80010d8 <__aeabi_fsub+0xb4>
 800124c:	2280      	movs	r2, #128	@ 0x80
 800124e:	03d2      	lsls	r2, r2, #15
 8001250:	433a      	orrs	r2, r7
 8001252:	0252      	lsls	r2, r2, #9
 8001254:	20ff      	movs	r0, #255	@ 0xff
 8001256:	0a52      	lsrs	r2, r2, #9
 8001258:	e740      	b.n	80010dc <__aeabi_fsub+0xb8>
 800125a:	2b00      	cmp	r3, #0
 800125c:	d179      	bne.n	8001352 <__aeabi_fsub+0x32e>
 800125e:	22fe      	movs	r2, #254	@ 0xfe
 8001260:	1c6b      	adds	r3, r5, #1
 8001262:	421a      	tst	r2, r3
 8001264:	d1aa      	bne.n	80011bc <__aeabi_fsub+0x198>
 8001266:	4663      	mov	r3, ip
 8001268:	2b00      	cmp	r3, #0
 800126a:	d100      	bne.n	800126e <__aeabi_fsub+0x24a>
 800126c:	e0f5      	b.n	800145a <__aeabi_fsub+0x436>
 800126e:	2900      	cmp	r1, #0
 8001270:	d100      	bne.n	8001274 <__aeabi_fsub+0x250>
 8001272:	e0d1      	b.n	8001418 <__aeabi_fsub+0x3f4>
 8001274:	1a5f      	subs	r7, r3, r1
 8001276:	2380      	movs	r3, #128	@ 0x80
 8001278:	04db      	lsls	r3, r3, #19
 800127a:	421f      	tst	r7, r3
 800127c:	d100      	bne.n	8001280 <__aeabi_fsub+0x25c>
 800127e:	e10e      	b.n	800149e <__aeabi_fsub+0x47a>
 8001280:	4662      	mov	r2, ip
 8001282:	2401      	movs	r4, #1
 8001284:	1a8a      	subs	r2, r1, r2
 8001286:	4694      	mov	ip, r2
 8001288:	2000      	movs	r0, #0
 800128a:	4034      	ands	r4, r6
 800128c:	2a00      	cmp	r2, #0
 800128e:	d100      	bne.n	8001292 <__aeabi_fsub+0x26e>
 8001290:	e724      	b.n	80010dc <__aeabi_fsub+0xb8>
 8001292:	2001      	movs	r0, #1
 8001294:	421a      	tst	r2, r3
 8001296:	d1c6      	bne.n	8001226 <__aeabi_fsub+0x202>
 8001298:	2300      	movs	r3, #0
 800129a:	08d7      	lsrs	r7, r2, #3
 800129c:	e73d      	b.n	800111a <__aeabi_fsub+0xf6>
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d017      	beq.n	80012d2 <__aeabi_fsub+0x2ae>
 80012a2:	2d00      	cmp	r5, #0
 80012a4:	d000      	beq.n	80012a8 <__aeabi_fsub+0x284>
 80012a6:	e0af      	b.n	8001408 <__aeabi_fsub+0x3e4>
 80012a8:	23ff      	movs	r3, #255	@ 0xff
 80012aa:	4665      	mov	r5, ip
 80012ac:	2d00      	cmp	r5, #0
 80012ae:	d100      	bne.n	80012b2 <__aeabi_fsub+0x28e>
 80012b0:	e0ad      	b.n	800140e <__aeabi_fsub+0x3ea>
 80012b2:	1e5e      	subs	r6, r3, #1
 80012b4:	2b01      	cmp	r3, #1
 80012b6:	d100      	bne.n	80012ba <__aeabi_fsub+0x296>
 80012b8:	e089      	b.n	80013ce <__aeabi_fsub+0x3aa>
 80012ba:	2bff      	cmp	r3, #255	@ 0xff
 80012bc:	d0c2      	beq.n	8001244 <__aeabi_fsub+0x220>
 80012be:	2e1b      	cmp	r6, #27
 80012c0:	dc00      	bgt.n	80012c4 <__aeabi_fsub+0x2a0>
 80012c2:	e0ab      	b.n	800141c <__aeabi_fsub+0x3f8>
 80012c4:	1d4b      	adds	r3, r1, #5
 80012c6:	469c      	mov	ip, r3
 80012c8:	0013      	movs	r3, r2
 80012ca:	e721      	b.n	8001110 <__aeabi_fsub+0xec>
 80012cc:	464b      	mov	r3, r9
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d170      	bne.n	80013b4 <__aeabi_fsub+0x390>
 80012d2:	22fe      	movs	r2, #254	@ 0xfe
 80012d4:	1c6b      	adds	r3, r5, #1
 80012d6:	421a      	tst	r2, r3
 80012d8:	d15e      	bne.n	8001398 <__aeabi_fsub+0x374>
 80012da:	2d00      	cmp	r5, #0
 80012dc:	d000      	beq.n	80012e0 <__aeabi_fsub+0x2bc>
 80012de:	e0c3      	b.n	8001468 <__aeabi_fsub+0x444>
 80012e0:	4663      	mov	r3, ip
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d100      	bne.n	80012e8 <__aeabi_fsub+0x2c4>
 80012e6:	e0d0      	b.n	800148a <__aeabi_fsub+0x466>
 80012e8:	2900      	cmp	r1, #0
 80012ea:	d100      	bne.n	80012ee <__aeabi_fsub+0x2ca>
 80012ec:	e094      	b.n	8001418 <__aeabi_fsub+0x3f4>
 80012ee:	000a      	movs	r2, r1
 80012f0:	4462      	add	r2, ip
 80012f2:	0153      	lsls	r3, r2, #5
 80012f4:	d400      	bmi.n	80012f8 <__aeabi_fsub+0x2d4>
 80012f6:	e0d8      	b.n	80014aa <__aeabi_fsub+0x486>
 80012f8:	0192      	lsls	r2, r2, #6
 80012fa:	2001      	movs	r0, #1
 80012fc:	0a52      	lsrs	r2, r2, #9
 80012fe:	e6ed      	b.n	80010dc <__aeabi_fsub+0xb8>
 8001300:	0008      	movs	r0, r1
 8001302:	2220      	movs	r2, #32
 8001304:	40d8      	lsrs	r0, r3
 8001306:	1ad3      	subs	r3, r2, r3
 8001308:	4099      	lsls	r1, r3
 800130a:	000b      	movs	r3, r1
 800130c:	1e5a      	subs	r2, r3, #1
 800130e:	4193      	sbcs	r3, r2
 8001310:	4303      	orrs	r3, r0
 8001312:	449c      	add	ip, r3
 8001314:	4663      	mov	r3, ip
 8001316:	015b      	lsls	r3, r3, #5
 8001318:	d589      	bpl.n	800122e <__aeabi_fsub+0x20a>
 800131a:	3501      	adds	r5, #1
 800131c:	2dff      	cmp	r5, #255	@ 0xff
 800131e:	d100      	bne.n	8001322 <__aeabi_fsub+0x2fe>
 8001320:	e6da      	b.n	80010d8 <__aeabi_fsub+0xb4>
 8001322:	4662      	mov	r2, ip
 8001324:	2301      	movs	r3, #1
 8001326:	4919      	ldr	r1, [pc, #100]	@ (800138c <__aeabi_fsub+0x368>)
 8001328:	4013      	ands	r3, r2
 800132a:	0852      	lsrs	r2, r2, #1
 800132c:	400a      	ands	r2, r1
 800132e:	431a      	orrs	r2, r3
 8001330:	0013      	movs	r3, r2
 8001332:	4694      	mov	ip, r2
 8001334:	075b      	lsls	r3, r3, #29
 8001336:	d004      	beq.n	8001342 <__aeabi_fsub+0x31e>
 8001338:	230f      	movs	r3, #15
 800133a:	4013      	ands	r3, r2
 800133c:	2b04      	cmp	r3, #4
 800133e:	d000      	beq.n	8001342 <__aeabi_fsub+0x31e>
 8001340:	e6bf      	b.n	80010c2 <__aeabi_fsub+0x9e>
 8001342:	4663      	mov	r3, ip
 8001344:	015b      	lsls	r3, r3, #5
 8001346:	d500      	bpl.n	800134a <__aeabi_fsub+0x326>
 8001348:	e6c2      	b.n	80010d0 <__aeabi_fsub+0xac>
 800134a:	4663      	mov	r3, ip
 800134c:	08df      	lsrs	r7, r3, #3
 800134e:	002b      	movs	r3, r5
 8001350:	e6e3      	b.n	800111a <__aeabi_fsub+0xf6>
 8001352:	1b53      	subs	r3, r2, r5
 8001354:	2d00      	cmp	r5, #0
 8001356:	d100      	bne.n	800135a <__aeabi_fsub+0x336>
 8001358:	e6f4      	b.n	8001144 <__aeabi_fsub+0x120>
 800135a:	2080      	movs	r0, #128	@ 0x80
 800135c:	4664      	mov	r4, ip
 800135e:	04c0      	lsls	r0, r0, #19
 8001360:	4304      	orrs	r4, r0
 8001362:	46a4      	mov	ip, r4
 8001364:	0034      	movs	r4, r6
 8001366:	2001      	movs	r0, #1
 8001368:	2b1b      	cmp	r3, #27
 800136a:	dc09      	bgt.n	8001380 <__aeabi_fsub+0x35c>
 800136c:	2520      	movs	r5, #32
 800136e:	4660      	mov	r0, ip
 8001370:	40d8      	lsrs	r0, r3
 8001372:	1aeb      	subs	r3, r5, r3
 8001374:	4665      	mov	r5, ip
 8001376:	409d      	lsls	r5, r3
 8001378:	002b      	movs	r3, r5
 800137a:	1e5d      	subs	r5, r3, #1
 800137c:	41ab      	sbcs	r3, r5
 800137e:	4318      	orrs	r0, r3
 8001380:	1a0b      	subs	r3, r1, r0
 8001382:	469c      	mov	ip, r3
 8001384:	0015      	movs	r5, r2
 8001386:	e680      	b.n	800108a <__aeabi_fsub+0x66>
 8001388:	fbffffff 	.word	0xfbffffff
 800138c:	7dffffff 	.word	0x7dffffff
 8001390:	22fe      	movs	r2, #254	@ 0xfe
 8001392:	1c6b      	adds	r3, r5, #1
 8001394:	4213      	tst	r3, r2
 8001396:	d0a3      	beq.n	80012e0 <__aeabi_fsub+0x2bc>
 8001398:	2bff      	cmp	r3, #255	@ 0xff
 800139a:	d100      	bne.n	800139e <__aeabi_fsub+0x37a>
 800139c:	e69c      	b.n	80010d8 <__aeabi_fsub+0xb4>
 800139e:	4461      	add	r1, ip
 80013a0:	0849      	lsrs	r1, r1, #1
 80013a2:	074a      	lsls	r2, r1, #29
 80013a4:	d049      	beq.n	800143a <__aeabi_fsub+0x416>
 80013a6:	220f      	movs	r2, #15
 80013a8:	400a      	ands	r2, r1
 80013aa:	2a04      	cmp	r2, #4
 80013ac:	d045      	beq.n	800143a <__aeabi_fsub+0x416>
 80013ae:	1d0a      	adds	r2, r1, #4
 80013b0:	4694      	mov	ip, r2
 80013b2:	e6ad      	b.n	8001110 <__aeabi_fsub+0xec>
 80013b4:	2d00      	cmp	r5, #0
 80013b6:	d100      	bne.n	80013ba <__aeabi_fsub+0x396>
 80013b8:	e776      	b.n	80012a8 <__aeabi_fsub+0x284>
 80013ba:	e68d      	b.n	80010d8 <__aeabi_fsub+0xb4>
 80013bc:	0034      	movs	r4, r6
 80013be:	20ff      	movs	r0, #255	@ 0xff
 80013c0:	2200      	movs	r2, #0
 80013c2:	e68b      	b.n	80010dc <__aeabi_fsub+0xb8>
 80013c4:	4663      	mov	r3, ip
 80013c6:	2401      	movs	r4, #1
 80013c8:	1acf      	subs	r7, r1, r3
 80013ca:	4034      	ands	r4, r6
 80013cc:	e664      	b.n	8001098 <__aeabi_fsub+0x74>
 80013ce:	4461      	add	r1, ip
 80013d0:	014b      	lsls	r3, r1, #5
 80013d2:	d56d      	bpl.n	80014b0 <__aeabi_fsub+0x48c>
 80013d4:	0848      	lsrs	r0, r1, #1
 80013d6:	4944      	ldr	r1, [pc, #272]	@ (80014e8 <__aeabi_fsub+0x4c4>)
 80013d8:	4001      	ands	r1, r0
 80013da:	0743      	lsls	r3, r0, #29
 80013dc:	d02c      	beq.n	8001438 <__aeabi_fsub+0x414>
 80013de:	230f      	movs	r3, #15
 80013e0:	4003      	ands	r3, r0
 80013e2:	2b04      	cmp	r3, #4
 80013e4:	d028      	beq.n	8001438 <__aeabi_fsub+0x414>
 80013e6:	1d0b      	adds	r3, r1, #4
 80013e8:	469c      	mov	ip, r3
 80013ea:	2302      	movs	r3, #2
 80013ec:	e690      	b.n	8001110 <__aeabi_fsub+0xec>
 80013ee:	2900      	cmp	r1, #0
 80013f0:	d100      	bne.n	80013f4 <__aeabi_fsub+0x3d0>
 80013f2:	e72b      	b.n	800124c <__aeabi_fsub+0x228>
 80013f4:	2380      	movs	r3, #128	@ 0x80
 80013f6:	03db      	lsls	r3, r3, #15
 80013f8:	429f      	cmp	r7, r3
 80013fa:	d200      	bcs.n	80013fe <__aeabi_fsub+0x3da>
 80013fc:	e726      	b.n	800124c <__aeabi_fsub+0x228>
 80013fe:	4298      	cmp	r0, r3
 8001400:	d300      	bcc.n	8001404 <__aeabi_fsub+0x3e0>
 8001402:	e723      	b.n	800124c <__aeabi_fsub+0x228>
 8001404:	2401      	movs	r4, #1
 8001406:	4034      	ands	r4, r6
 8001408:	0007      	movs	r7, r0
 800140a:	e71f      	b.n	800124c <__aeabi_fsub+0x228>
 800140c:	0034      	movs	r4, r6
 800140e:	468c      	mov	ip, r1
 8001410:	e67e      	b.n	8001110 <__aeabi_fsub+0xec>
 8001412:	2301      	movs	r3, #1
 8001414:	08cf      	lsrs	r7, r1, #3
 8001416:	e680      	b.n	800111a <__aeabi_fsub+0xf6>
 8001418:	2300      	movs	r3, #0
 800141a:	e67e      	b.n	800111a <__aeabi_fsub+0xf6>
 800141c:	2020      	movs	r0, #32
 800141e:	4665      	mov	r5, ip
 8001420:	1b80      	subs	r0, r0, r6
 8001422:	4085      	lsls	r5, r0
 8001424:	4663      	mov	r3, ip
 8001426:	0028      	movs	r0, r5
 8001428:	40f3      	lsrs	r3, r6
 800142a:	1e45      	subs	r5, r0, #1
 800142c:	41a8      	sbcs	r0, r5
 800142e:	4303      	orrs	r3, r0
 8001430:	469c      	mov	ip, r3
 8001432:	0015      	movs	r5, r2
 8001434:	448c      	add	ip, r1
 8001436:	e76d      	b.n	8001314 <__aeabi_fsub+0x2f0>
 8001438:	2302      	movs	r3, #2
 800143a:	08cf      	lsrs	r7, r1, #3
 800143c:	e66d      	b.n	800111a <__aeabi_fsub+0xf6>
 800143e:	1b0f      	subs	r7, r1, r4
 8001440:	017b      	lsls	r3, r7, #5
 8001442:	d528      	bpl.n	8001496 <__aeabi_fsub+0x472>
 8001444:	01bf      	lsls	r7, r7, #6
 8001446:	09bf      	lsrs	r7, r7, #6
 8001448:	0038      	movs	r0, r7
 800144a:	f002 f8d7 	bl	80035fc <__clzsi2>
 800144e:	003b      	movs	r3, r7
 8001450:	3805      	subs	r0, #5
 8001452:	4083      	lsls	r3, r0
 8001454:	0034      	movs	r4, r6
 8001456:	2501      	movs	r5, #1
 8001458:	e6ca      	b.n	80011f0 <__aeabi_fsub+0x1cc>
 800145a:	2900      	cmp	r1, #0
 800145c:	d100      	bne.n	8001460 <__aeabi_fsub+0x43c>
 800145e:	e6b5      	b.n	80011cc <__aeabi_fsub+0x1a8>
 8001460:	2401      	movs	r4, #1
 8001462:	0007      	movs	r7, r0
 8001464:	4034      	ands	r4, r6
 8001466:	e658      	b.n	800111a <__aeabi_fsub+0xf6>
 8001468:	4663      	mov	r3, ip
 800146a:	2b00      	cmp	r3, #0
 800146c:	d100      	bne.n	8001470 <__aeabi_fsub+0x44c>
 800146e:	e6e9      	b.n	8001244 <__aeabi_fsub+0x220>
 8001470:	2900      	cmp	r1, #0
 8001472:	d100      	bne.n	8001476 <__aeabi_fsub+0x452>
 8001474:	e6ea      	b.n	800124c <__aeabi_fsub+0x228>
 8001476:	2380      	movs	r3, #128	@ 0x80
 8001478:	03db      	lsls	r3, r3, #15
 800147a:	429f      	cmp	r7, r3
 800147c:	d200      	bcs.n	8001480 <__aeabi_fsub+0x45c>
 800147e:	e6e5      	b.n	800124c <__aeabi_fsub+0x228>
 8001480:	4298      	cmp	r0, r3
 8001482:	d300      	bcc.n	8001486 <__aeabi_fsub+0x462>
 8001484:	e6e2      	b.n	800124c <__aeabi_fsub+0x228>
 8001486:	0007      	movs	r7, r0
 8001488:	e6e0      	b.n	800124c <__aeabi_fsub+0x228>
 800148a:	2900      	cmp	r1, #0
 800148c:	d100      	bne.n	8001490 <__aeabi_fsub+0x46c>
 800148e:	e69e      	b.n	80011ce <__aeabi_fsub+0x1aa>
 8001490:	2300      	movs	r3, #0
 8001492:	08cf      	lsrs	r7, r1, #3
 8001494:	e641      	b.n	800111a <__aeabi_fsub+0xf6>
 8001496:	0034      	movs	r4, r6
 8001498:	2301      	movs	r3, #1
 800149a:	08ff      	lsrs	r7, r7, #3
 800149c:	e63d      	b.n	800111a <__aeabi_fsub+0xf6>
 800149e:	2f00      	cmp	r7, #0
 80014a0:	d100      	bne.n	80014a4 <__aeabi_fsub+0x480>
 80014a2:	e693      	b.n	80011cc <__aeabi_fsub+0x1a8>
 80014a4:	2300      	movs	r3, #0
 80014a6:	08ff      	lsrs	r7, r7, #3
 80014a8:	e637      	b.n	800111a <__aeabi_fsub+0xf6>
 80014aa:	2300      	movs	r3, #0
 80014ac:	08d7      	lsrs	r7, r2, #3
 80014ae:	e634      	b.n	800111a <__aeabi_fsub+0xf6>
 80014b0:	2301      	movs	r3, #1
 80014b2:	08cf      	lsrs	r7, r1, #3
 80014b4:	e631      	b.n	800111a <__aeabi_fsub+0xf6>
 80014b6:	2280      	movs	r2, #128	@ 0x80
 80014b8:	000b      	movs	r3, r1
 80014ba:	04d2      	lsls	r2, r2, #19
 80014bc:	2001      	movs	r0, #1
 80014be:	4013      	ands	r3, r2
 80014c0:	4211      	tst	r1, r2
 80014c2:	d000      	beq.n	80014c6 <__aeabi_fsub+0x4a2>
 80014c4:	e6ae      	b.n	8001224 <__aeabi_fsub+0x200>
 80014c6:	08cf      	lsrs	r7, r1, #3
 80014c8:	e627      	b.n	800111a <__aeabi_fsub+0xf6>
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d100      	bne.n	80014d0 <__aeabi_fsub+0x4ac>
 80014ce:	e75f      	b.n	8001390 <__aeabi_fsub+0x36c>
 80014d0:	1b56      	subs	r6, r2, r5
 80014d2:	2d00      	cmp	r5, #0
 80014d4:	d101      	bne.n	80014da <__aeabi_fsub+0x4b6>
 80014d6:	0033      	movs	r3, r6
 80014d8:	e6e7      	b.n	80012aa <__aeabi_fsub+0x286>
 80014da:	2380      	movs	r3, #128	@ 0x80
 80014dc:	4660      	mov	r0, ip
 80014de:	04db      	lsls	r3, r3, #19
 80014e0:	4318      	orrs	r0, r3
 80014e2:	4684      	mov	ip, r0
 80014e4:	e6eb      	b.n	80012be <__aeabi_fsub+0x29a>
 80014e6:	46c0      	nop			@ (mov r8, r8)
 80014e8:	7dffffff 	.word	0x7dffffff

080014ec <__aeabi_f2iz>:
 80014ec:	0241      	lsls	r1, r0, #9
 80014ee:	0042      	lsls	r2, r0, #1
 80014f0:	0fc3      	lsrs	r3, r0, #31
 80014f2:	0a49      	lsrs	r1, r1, #9
 80014f4:	2000      	movs	r0, #0
 80014f6:	0e12      	lsrs	r2, r2, #24
 80014f8:	2a7e      	cmp	r2, #126	@ 0x7e
 80014fa:	dd03      	ble.n	8001504 <__aeabi_f2iz+0x18>
 80014fc:	2a9d      	cmp	r2, #157	@ 0x9d
 80014fe:	dd02      	ble.n	8001506 <__aeabi_f2iz+0x1a>
 8001500:	4a09      	ldr	r2, [pc, #36]	@ (8001528 <__aeabi_f2iz+0x3c>)
 8001502:	1898      	adds	r0, r3, r2
 8001504:	4770      	bx	lr
 8001506:	2080      	movs	r0, #128	@ 0x80
 8001508:	0400      	lsls	r0, r0, #16
 800150a:	4301      	orrs	r1, r0
 800150c:	2a95      	cmp	r2, #149	@ 0x95
 800150e:	dc07      	bgt.n	8001520 <__aeabi_f2iz+0x34>
 8001510:	2096      	movs	r0, #150	@ 0x96
 8001512:	1a82      	subs	r2, r0, r2
 8001514:	40d1      	lsrs	r1, r2
 8001516:	4248      	negs	r0, r1
 8001518:	2b00      	cmp	r3, #0
 800151a:	d1f3      	bne.n	8001504 <__aeabi_f2iz+0x18>
 800151c:	0008      	movs	r0, r1
 800151e:	e7f1      	b.n	8001504 <__aeabi_f2iz+0x18>
 8001520:	3a96      	subs	r2, #150	@ 0x96
 8001522:	4091      	lsls	r1, r2
 8001524:	e7f7      	b.n	8001516 <__aeabi_f2iz+0x2a>
 8001526:	46c0      	nop			@ (mov r8, r8)
 8001528:	7fffffff 	.word	0x7fffffff

0800152c <__aeabi_ui2f>:
 800152c:	b510      	push	{r4, lr}
 800152e:	1e04      	subs	r4, r0, #0
 8001530:	d00d      	beq.n	800154e <__aeabi_ui2f+0x22>
 8001532:	f002 f863 	bl	80035fc <__clzsi2>
 8001536:	239e      	movs	r3, #158	@ 0x9e
 8001538:	1a1b      	subs	r3, r3, r0
 800153a:	2b96      	cmp	r3, #150	@ 0x96
 800153c:	dc0c      	bgt.n	8001558 <__aeabi_ui2f+0x2c>
 800153e:	2808      	cmp	r0, #8
 8001540:	d034      	beq.n	80015ac <__aeabi_ui2f+0x80>
 8001542:	3808      	subs	r0, #8
 8001544:	4084      	lsls	r4, r0
 8001546:	0264      	lsls	r4, r4, #9
 8001548:	0a64      	lsrs	r4, r4, #9
 800154a:	b2d8      	uxtb	r0, r3
 800154c:	e001      	b.n	8001552 <__aeabi_ui2f+0x26>
 800154e:	2000      	movs	r0, #0
 8001550:	2400      	movs	r4, #0
 8001552:	05c0      	lsls	r0, r0, #23
 8001554:	4320      	orrs	r0, r4
 8001556:	bd10      	pop	{r4, pc}
 8001558:	2b99      	cmp	r3, #153	@ 0x99
 800155a:	dc13      	bgt.n	8001584 <__aeabi_ui2f+0x58>
 800155c:	1f42      	subs	r2, r0, #5
 800155e:	4094      	lsls	r4, r2
 8001560:	4a14      	ldr	r2, [pc, #80]	@ (80015b4 <__aeabi_ui2f+0x88>)
 8001562:	4022      	ands	r2, r4
 8001564:	0761      	lsls	r1, r4, #29
 8001566:	d01c      	beq.n	80015a2 <__aeabi_ui2f+0x76>
 8001568:	210f      	movs	r1, #15
 800156a:	4021      	ands	r1, r4
 800156c:	2904      	cmp	r1, #4
 800156e:	d018      	beq.n	80015a2 <__aeabi_ui2f+0x76>
 8001570:	3204      	adds	r2, #4
 8001572:	08d4      	lsrs	r4, r2, #3
 8001574:	0152      	lsls	r2, r2, #5
 8001576:	d515      	bpl.n	80015a4 <__aeabi_ui2f+0x78>
 8001578:	239f      	movs	r3, #159	@ 0x9f
 800157a:	0264      	lsls	r4, r4, #9
 800157c:	1a18      	subs	r0, r3, r0
 800157e:	0a64      	lsrs	r4, r4, #9
 8001580:	b2c0      	uxtb	r0, r0
 8001582:	e7e6      	b.n	8001552 <__aeabi_ui2f+0x26>
 8001584:	0002      	movs	r2, r0
 8001586:	0021      	movs	r1, r4
 8001588:	321b      	adds	r2, #27
 800158a:	4091      	lsls	r1, r2
 800158c:	000a      	movs	r2, r1
 800158e:	1e51      	subs	r1, r2, #1
 8001590:	418a      	sbcs	r2, r1
 8001592:	2105      	movs	r1, #5
 8001594:	1a09      	subs	r1, r1, r0
 8001596:	40cc      	lsrs	r4, r1
 8001598:	4314      	orrs	r4, r2
 800159a:	4a06      	ldr	r2, [pc, #24]	@ (80015b4 <__aeabi_ui2f+0x88>)
 800159c:	4022      	ands	r2, r4
 800159e:	0761      	lsls	r1, r4, #29
 80015a0:	d1e2      	bne.n	8001568 <__aeabi_ui2f+0x3c>
 80015a2:	08d4      	lsrs	r4, r2, #3
 80015a4:	0264      	lsls	r4, r4, #9
 80015a6:	0a64      	lsrs	r4, r4, #9
 80015a8:	b2d8      	uxtb	r0, r3
 80015aa:	e7d2      	b.n	8001552 <__aeabi_ui2f+0x26>
 80015ac:	0264      	lsls	r4, r4, #9
 80015ae:	0a64      	lsrs	r4, r4, #9
 80015b0:	308e      	adds	r0, #142	@ 0x8e
 80015b2:	e7ce      	b.n	8001552 <__aeabi_ui2f+0x26>
 80015b4:	fbffffff 	.word	0xfbffffff

080015b8 <__aeabi_dadd>:
 80015b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80015ba:	464f      	mov	r7, r9
 80015bc:	4646      	mov	r6, r8
 80015be:	46d6      	mov	lr, sl
 80015c0:	b5c0      	push	{r6, r7, lr}
 80015c2:	b082      	sub	sp, #8
 80015c4:	9000      	str	r0, [sp, #0]
 80015c6:	9101      	str	r1, [sp, #4]
 80015c8:	030e      	lsls	r6, r1, #12
 80015ca:	004c      	lsls	r4, r1, #1
 80015cc:	0fcd      	lsrs	r5, r1, #31
 80015ce:	0a71      	lsrs	r1, r6, #9
 80015d0:	9e00      	ldr	r6, [sp, #0]
 80015d2:	005f      	lsls	r7, r3, #1
 80015d4:	0f76      	lsrs	r6, r6, #29
 80015d6:	430e      	orrs	r6, r1
 80015d8:	9900      	ldr	r1, [sp, #0]
 80015da:	9200      	str	r2, [sp, #0]
 80015dc:	9301      	str	r3, [sp, #4]
 80015de:	00c9      	lsls	r1, r1, #3
 80015e0:	4689      	mov	r9, r1
 80015e2:	0319      	lsls	r1, r3, #12
 80015e4:	0d7b      	lsrs	r3, r7, #21
 80015e6:	4698      	mov	r8, r3
 80015e8:	9b01      	ldr	r3, [sp, #4]
 80015ea:	0a49      	lsrs	r1, r1, #9
 80015ec:	0fdb      	lsrs	r3, r3, #31
 80015ee:	469c      	mov	ip, r3
 80015f0:	9b00      	ldr	r3, [sp, #0]
 80015f2:	9a00      	ldr	r2, [sp, #0]
 80015f4:	0f5b      	lsrs	r3, r3, #29
 80015f6:	430b      	orrs	r3, r1
 80015f8:	4641      	mov	r1, r8
 80015fa:	0d64      	lsrs	r4, r4, #21
 80015fc:	00d2      	lsls	r2, r2, #3
 80015fe:	1a61      	subs	r1, r4, r1
 8001600:	4565      	cmp	r5, ip
 8001602:	d100      	bne.n	8001606 <__aeabi_dadd+0x4e>
 8001604:	e0a6      	b.n	8001754 <__aeabi_dadd+0x19c>
 8001606:	2900      	cmp	r1, #0
 8001608:	dd72      	ble.n	80016f0 <__aeabi_dadd+0x138>
 800160a:	4647      	mov	r7, r8
 800160c:	2f00      	cmp	r7, #0
 800160e:	d100      	bne.n	8001612 <__aeabi_dadd+0x5a>
 8001610:	e0dd      	b.n	80017ce <__aeabi_dadd+0x216>
 8001612:	4fcc      	ldr	r7, [pc, #816]	@ (8001944 <__aeabi_dadd+0x38c>)
 8001614:	42bc      	cmp	r4, r7
 8001616:	d100      	bne.n	800161a <__aeabi_dadd+0x62>
 8001618:	e19a      	b.n	8001950 <__aeabi_dadd+0x398>
 800161a:	2701      	movs	r7, #1
 800161c:	2938      	cmp	r1, #56	@ 0x38
 800161e:	dc17      	bgt.n	8001650 <__aeabi_dadd+0x98>
 8001620:	2780      	movs	r7, #128	@ 0x80
 8001622:	043f      	lsls	r7, r7, #16
 8001624:	433b      	orrs	r3, r7
 8001626:	291f      	cmp	r1, #31
 8001628:	dd00      	ble.n	800162c <__aeabi_dadd+0x74>
 800162a:	e1dd      	b.n	80019e8 <__aeabi_dadd+0x430>
 800162c:	2720      	movs	r7, #32
 800162e:	1a78      	subs	r0, r7, r1
 8001630:	001f      	movs	r7, r3
 8001632:	4087      	lsls	r7, r0
 8001634:	46ba      	mov	sl, r7
 8001636:	0017      	movs	r7, r2
 8001638:	40cf      	lsrs	r7, r1
 800163a:	4684      	mov	ip, r0
 800163c:	0038      	movs	r0, r7
 800163e:	4657      	mov	r7, sl
 8001640:	4307      	orrs	r7, r0
 8001642:	4660      	mov	r0, ip
 8001644:	4082      	lsls	r2, r0
 8001646:	40cb      	lsrs	r3, r1
 8001648:	1e50      	subs	r0, r2, #1
 800164a:	4182      	sbcs	r2, r0
 800164c:	1af6      	subs	r6, r6, r3
 800164e:	4317      	orrs	r7, r2
 8001650:	464b      	mov	r3, r9
 8001652:	1bdf      	subs	r7, r3, r7
 8001654:	45b9      	cmp	r9, r7
 8001656:	4180      	sbcs	r0, r0
 8001658:	4240      	negs	r0, r0
 800165a:	1a36      	subs	r6, r6, r0
 800165c:	0233      	lsls	r3, r6, #8
 800165e:	d400      	bmi.n	8001662 <__aeabi_dadd+0xaa>
 8001660:	e0ff      	b.n	8001862 <__aeabi_dadd+0x2aa>
 8001662:	0276      	lsls	r6, r6, #9
 8001664:	0a76      	lsrs	r6, r6, #9
 8001666:	2e00      	cmp	r6, #0
 8001668:	d100      	bne.n	800166c <__aeabi_dadd+0xb4>
 800166a:	e13c      	b.n	80018e6 <__aeabi_dadd+0x32e>
 800166c:	0030      	movs	r0, r6
 800166e:	f001 ffc5 	bl	80035fc <__clzsi2>
 8001672:	0003      	movs	r3, r0
 8001674:	3b08      	subs	r3, #8
 8001676:	2120      	movs	r1, #32
 8001678:	0038      	movs	r0, r7
 800167a:	1aca      	subs	r2, r1, r3
 800167c:	40d0      	lsrs	r0, r2
 800167e:	409e      	lsls	r6, r3
 8001680:	0002      	movs	r2, r0
 8001682:	409f      	lsls	r7, r3
 8001684:	4332      	orrs	r2, r6
 8001686:	429c      	cmp	r4, r3
 8001688:	dd00      	ble.n	800168c <__aeabi_dadd+0xd4>
 800168a:	e1a6      	b.n	80019da <__aeabi_dadd+0x422>
 800168c:	1b18      	subs	r0, r3, r4
 800168e:	3001      	adds	r0, #1
 8001690:	1a09      	subs	r1, r1, r0
 8001692:	003e      	movs	r6, r7
 8001694:	408f      	lsls	r7, r1
 8001696:	40c6      	lsrs	r6, r0
 8001698:	1e7b      	subs	r3, r7, #1
 800169a:	419f      	sbcs	r7, r3
 800169c:	0013      	movs	r3, r2
 800169e:	408b      	lsls	r3, r1
 80016a0:	4337      	orrs	r7, r6
 80016a2:	431f      	orrs	r7, r3
 80016a4:	40c2      	lsrs	r2, r0
 80016a6:	003b      	movs	r3, r7
 80016a8:	0016      	movs	r6, r2
 80016aa:	2400      	movs	r4, #0
 80016ac:	4313      	orrs	r3, r2
 80016ae:	d100      	bne.n	80016b2 <__aeabi_dadd+0xfa>
 80016b0:	e1df      	b.n	8001a72 <__aeabi_dadd+0x4ba>
 80016b2:	077b      	lsls	r3, r7, #29
 80016b4:	d100      	bne.n	80016b8 <__aeabi_dadd+0x100>
 80016b6:	e332      	b.n	8001d1e <__aeabi_dadd+0x766>
 80016b8:	230f      	movs	r3, #15
 80016ba:	003a      	movs	r2, r7
 80016bc:	403b      	ands	r3, r7
 80016be:	2b04      	cmp	r3, #4
 80016c0:	d004      	beq.n	80016cc <__aeabi_dadd+0x114>
 80016c2:	1d3a      	adds	r2, r7, #4
 80016c4:	42ba      	cmp	r2, r7
 80016c6:	41bf      	sbcs	r7, r7
 80016c8:	427f      	negs	r7, r7
 80016ca:	19f6      	adds	r6, r6, r7
 80016cc:	0233      	lsls	r3, r6, #8
 80016ce:	d400      	bmi.n	80016d2 <__aeabi_dadd+0x11a>
 80016d0:	e323      	b.n	8001d1a <__aeabi_dadd+0x762>
 80016d2:	4b9c      	ldr	r3, [pc, #624]	@ (8001944 <__aeabi_dadd+0x38c>)
 80016d4:	3401      	adds	r4, #1
 80016d6:	429c      	cmp	r4, r3
 80016d8:	d100      	bne.n	80016dc <__aeabi_dadd+0x124>
 80016da:	e0b4      	b.n	8001846 <__aeabi_dadd+0x28e>
 80016dc:	4b9a      	ldr	r3, [pc, #616]	@ (8001948 <__aeabi_dadd+0x390>)
 80016de:	0564      	lsls	r4, r4, #21
 80016e0:	401e      	ands	r6, r3
 80016e2:	0d64      	lsrs	r4, r4, #21
 80016e4:	0777      	lsls	r7, r6, #29
 80016e6:	08d2      	lsrs	r2, r2, #3
 80016e8:	0276      	lsls	r6, r6, #9
 80016ea:	4317      	orrs	r7, r2
 80016ec:	0b36      	lsrs	r6, r6, #12
 80016ee:	e0ac      	b.n	800184a <__aeabi_dadd+0x292>
 80016f0:	2900      	cmp	r1, #0
 80016f2:	d100      	bne.n	80016f6 <__aeabi_dadd+0x13e>
 80016f4:	e07e      	b.n	80017f4 <__aeabi_dadd+0x23c>
 80016f6:	4641      	mov	r1, r8
 80016f8:	1b09      	subs	r1, r1, r4
 80016fa:	2c00      	cmp	r4, #0
 80016fc:	d000      	beq.n	8001700 <__aeabi_dadd+0x148>
 80016fe:	e160      	b.n	80019c2 <__aeabi_dadd+0x40a>
 8001700:	0034      	movs	r4, r6
 8001702:	4648      	mov	r0, r9
 8001704:	4304      	orrs	r4, r0
 8001706:	d100      	bne.n	800170a <__aeabi_dadd+0x152>
 8001708:	e1c9      	b.n	8001a9e <__aeabi_dadd+0x4e6>
 800170a:	1e4c      	subs	r4, r1, #1
 800170c:	2901      	cmp	r1, #1
 800170e:	d100      	bne.n	8001712 <__aeabi_dadd+0x15a>
 8001710:	e22e      	b.n	8001b70 <__aeabi_dadd+0x5b8>
 8001712:	4d8c      	ldr	r5, [pc, #560]	@ (8001944 <__aeabi_dadd+0x38c>)
 8001714:	42a9      	cmp	r1, r5
 8001716:	d100      	bne.n	800171a <__aeabi_dadd+0x162>
 8001718:	e224      	b.n	8001b64 <__aeabi_dadd+0x5ac>
 800171a:	2701      	movs	r7, #1
 800171c:	2c38      	cmp	r4, #56	@ 0x38
 800171e:	dc11      	bgt.n	8001744 <__aeabi_dadd+0x18c>
 8001720:	0021      	movs	r1, r4
 8001722:	291f      	cmp	r1, #31
 8001724:	dd00      	ble.n	8001728 <__aeabi_dadd+0x170>
 8001726:	e20b      	b.n	8001b40 <__aeabi_dadd+0x588>
 8001728:	2420      	movs	r4, #32
 800172a:	0037      	movs	r7, r6
 800172c:	4648      	mov	r0, r9
 800172e:	1a64      	subs	r4, r4, r1
 8001730:	40a7      	lsls	r7, r4
 8001732:	40c8      	lsrs	r0, r1
 8001734:	4307      	orrs	r7, r0
 8001736:	4648      	mov	r0, r9
 8001738:	40a0      	lsls	r0, r4
 800173a:	40ce      	lsrs	r6, r1
 800173c:	1e44      	subs	r4, r0, #1
 800173e:	41a0      	sbcs	r0, r4
 8001740:	1b9b      	subs	r3, r3, r6
 8001742:	4307      	orrs	r7, r0
 8001744:	1bd7      	subs	r7, r2, r7
 8001746:	42ba      	cmp	r2, r7
 8001748:	4192      	sbcs	r2, r2
 800174a:	4252      	negs	r2, r2
 800174c:	4665      	mov	r5, ip
 800174e:	4644      	mov	r4, r8
 8001750:	1a9e      	subs	r6, r3, r2
 8001752:	e783      	b.n	800165c <__aeabi_dadd+0xa4>
 8001754:	2900      	cmp	r1, #0
 8001756:	dc00      	bgt.n	800175a <__aeabi_dadd+0x1a2>
 8001758:	e09c      	b.n	8001894 <__aeabi_dadd+0x2dc>
 800175a:	4647      	mov	r7, r8
 800175c:	2f00      	cmp	r7, #0
 800175e:	d167      	bne.n	8001830 <__aeabi_dadd+0x278>
 8001760:	001f      	movs	r7, r3
 8001762:	4317      	orrs	r7, r2
 8001764:	d100      	bne.n	8001768 <__aeabi_dadd+0x1b0>
 8001766:	e0e4      	b.n	8001932 <__aeabi_dadd+0x37a>
 8001768:	1e48      	subs	r0, r1, #1
 800176a:	2901      	cmp	r1, #1
 800176c:	d100      	bne.n	8001770 <__aeabi_dadd+0x1b8>
 800176e:	e19b      	b.n	8001aa8 <__aeabi_dadd+0x4f0>
 8001770:	4f74      	ldr	r7, [pc, #464]	@ (8001944 <__aeabi_dadd+0x38c>)
 8001772:	42b9      	cmp	r1, r7
 8001774:	d100      	bne.n	8001778 <__aeabi_dadd+0x1c0>
 8001776:	e0eb      	b.n	8001950 <__aeabi_dadd+0x398>
 8001778:	2701      	movs	r7, #1
 800177a:	0001      	movs	r1, r0
 800177c:	2838      	cmp	r0, #56	@ 0x38
 800177e:	dc11      	bgt.n	80017a4 <__aeabi_dadd+0x1ec>
 8001780:	291f      	cmp	r1, #31
 8001782:	dd00      	ble.n	8001786 <__aeabi_dadd+0x1ce>
 8001784:	e1c7      	b.n	8001b16 <__aeabi_dadd+0x55e>
 8001786:	2720      	movs	r7, #32
 8001788:	1a78      	subs	r0, r7, r1
 800178a:	001f      	movs	r7, r3
 800178c:	4684      	mov	ip, r0
 800178e:	4087      	lsls	r7, r0
 8001790:	0010      	movs	r0, r2
 8001792:	40c8      	lsrs	r0, r1
 8001794:	4307      	orrs	r7, r0
 8001796:	4660      	mov	r0, ip
 8001798:	4082      	lsls	r2, r0
 800179a:	40cb      	lsrs	r3, r1
 800179c:	1e50      	subs	r0, r2, #1
 800179e:	4182      	sbcs	r2, r0
 80017a0:	18f6      	adds	r6, r6, r3
 80017a2:	4317      	orrs	r7, r2
 80017a4:	444f      	add	r7, r9
 80017a6:	454f      	cmp	r7, r9
 80017a8:	4180      	sbcs	r0, r0
 80017aa:	4240      	negs	r0, r0
 80017ac:	1836      	adds	r6, r6, r0
 80017ae:	0233      	lsls	r3, r6, #8
 80017b0:	d557      	bpl.n	8001862 <__aeabi_dadd+0x2aa>
 80017b2:	4b64      	ldr	r3, [pc, #400]	@ (8001944 <__aeabi_dadd+0x38c>)
 80017b4:	3401      	adds	r4, #1
 80017b6:	429c      	cmp	r4, r3
 80017b8:	d045      	beq.n	8001846 <__aeabi_dadd+0x28e>
 80017ba:	2101      	movs	r1, #1
 80017bc:	4b62      	ldr	r3, [pc, #392]	@ (8001948 <__aeabi_dadd+0x390>)
 80017be:	087a      	lsrs	r2, r7, #1
 80017c0:	401e      	ands	r6, r3
 80017c2:	4039      	ands	r1, r7
 80017c4:	430a      	orrs	r2, r1
 80017c6:	07f7      	lsls	r7, r6, #31
 80017c8:	4317      	orrs	r7, r2
 80017ca:	0876      	lsrs	r6, r6, #1
 80017cc:	e771      	b.n	80016b2 <__aeabi_dadd+0xfa>
 80017ce:	001f      	movs	r7, r3
 80017d0:	4317      	orrs	r7, r2
 80017d2:	d100      	bne.n	80017d6 <__aeabi_dadd+0x21e>
 80017d4:	e0ad      	b.n	8001932 <__aeabi_dadd+0x37a>
 80017d6:	1e4f      	subs	r7, r1, #1
 80017d8:	46bc      	mov	ip, r7
 80017da:	2901      	cmp	r1, #1
 80017dc:	d100      	bne.n	80017e0 <__aeabi_dadd+0x228>
 80017de:	e182      	b.n	8001ae6 <__aeabi_dadd+0x52e>
 80017e0:	4f58      	ldr	r7, [pc, #352]	@ (8001944 <__aeabi_dadd+0x38c>)
 80017e2:	42b9      	cmp	r1, r7
 80017e4:	d100      	bne.n	80017e8 <__aeabi_dadd+0x230>
 80017e6:	e190      	b.n	8001b0a <__aeabi_dadd+0x552>
 80017e8:	4661      	mov	r1, ip
 80017ea:	2701      	movs	r7, #1
 80017ec:	2938      	cmp	r1, #56	@ 0x38
 80017ee:	dd00      	ble.n	80017f2 <__aeabi_dadd+0x23a>
 80017f0:	e72e      	b.n	8001650 <__aeabi_dadd+0x98>
 80017f2:	e718      	b.n	8001626 <__aeabi_dadd+0x6e>
 80017f4:	4f55      	ldr	r7, [pc, #340]	@ (800194c <__aeabi_dadd+0x394>)
 80017f6:	1c61      	adds	r1, r4, #1
 80017f8:	4239      	tst	r1, r7
 80017fa:	d000      	beq.n	80017fe <__aeabi_dadd+0x246>
 80017fc:	e0d0      	b.n	80019a0 <__aeabi_dadd+0x3e8>
 80017fe:	0031      	movs	r1, r6
 8001800:	4648      	mov	r0, r9
 8001802:	001f      	movs	r7, r3
 8001804:	4301      	orrs	r1, r0
 8001806:	4317      	orrs	r7, r2
 8001808:	2c00      	cmp	r4, #0
 800180a:	d000      	beq.n	800180e <__aeabi_dadd+0x256>
 800180c:	e13d      	b.n	8001a8a <__aeabi_dadd+0x4d2>
 800180e:	2900      	cmp	r1, #0
 8001810:	d100      	bne.n	8001814 <__aeabi_dadd+0x25c>
 8001812:	e1bc      	b.n	8001b8e <__aeabi_dadd+0x5d6>
 8001814:	2f00      	cmp	r7, #0
 8001816:	d000      	beq.n	800181a <__aeabi_dadd+0x262>
 8001818:	e1bf      	b.n	8001b9a <__aeabi_dadd+0x5e2>
 800181a:	464b      	mov	r3, r9
 800181c:	2100      	movs	r1, #0
 800181e:	08d8      	lsrs	r0, r3, #3
 8001820:	0777      	lsls	r7, r6, #29
 8001822:	4307      	orrs	r7, r0
 8001824:	08f0      	lsrs	r0, r6, #3
 8001826:	0306      	lsls	r6, r0, #12
 8001828:	054c      	lsls	r4, r1, #21
 800182a:	0b36      	lsrs	r6, r6, #12
 800182c:	0d64      	lsrs	r4, r4, #21
 800182e:	e00c      	b.n	800184a <__aeabi_dadd+0x292>
 8001830:	4f44      	ldr	r7, [pc, #272]	@ (8001944 <__aeabi_dadd+0x38c>)
 8001832:	42bc      	cmp	r4, r7
 8001834:	d100      	bne.n	8001838 <__aeabi_dadd+0x280>
 8001836:	e08b      	b.n	8001950 <__aeabi_dadd+0x398>
 8001838:	2701      	movs	r7, #1
 800183a:	2938      	cmp	r1, #56	@ 0x38
 800183c:	dcb2      	bgt.n	80017a4 <__aeabi_dadd+0x1ec>
 800183e:	2780      	movs	r7, #128	@ 0x80
 8001840:	043f      	lsls	r7, r7, #16
 8001842:	433b      	orrs	r3, r7
 8001844:	e79c      	b.n	8001780 <__aeabi_dadd+0x1c8>
 8001846:	2600      	movs	r6, #0
 8001848:	2700      	movs	r7, #0
 800184a:	0524      	lsls	r4, r4, #20
 800184c:	4334      	orrs	r4, r6
 800184e:	07ed      	lsls	r5, r5, #31
 8001850:	432c      	orrs	r4, r5
 8001852:	0038      	movs	r0, r7
 8001854:	0021      	movs	r1, r4
 8001856:	b002      	add	sp, #8
 8001858:	bce0      	pop	{r5, r6, r7}
 800185a:	46ba      	mov	sl, r7
 800185c:	46b1      	mov	r9, r6
 800185e:	46a8      	mov	r8, r5
 8001860:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001862:	077b      	lsls	r3, r7, #29
 8001864:	d004      	beq.n	8001870 <__aeabi_dadd+0x2b8>
 8001866:	230f      	movs	r3, #15
 8001868:	403b      	ands	r3, r7
 800186a:	2b04      	cmp	r3, #4
 800186c:	d000      	beq.n	8001870 <__aeabi_dadd+0x2b8>
 800186e:	e728      	b.n	80016c2 <__aeabi_dadd+0x10a>
 8001870:	08f8      	lsrs	r0, r7, #3
 8001872:	4b34      	ldr	r3, [pc, #208]	@ (8001944 <__aeabi_dadd+0x38c>)
 8001874:	0777      	lsls	r7, r6, #29
 8001876:	4307      	orrs	r7, r0
 8001878:	08f0      	lsrs	r0, r6, #3
 800187a:	429c      	cmp	r4, r3
 800187c:	d000      	beq.n	8001880 <__aeabi_dadd+0x2c8>
 800187e:	e24a      	b.n	8001d16 <__aeabi_dadd+0x75e>
 8001880:	003b      	movs	r3, r7
 8001882:	4303      	orrs	r3, r0
 8001884:	d059      	beq.n	800193a <__aeabi_dadd+0x382>
 8001886:	2680      	movs	r6, #128	@ 0x80
 8001888:	0336      	lsls	r6, r6, #12
 800188a:	4306      	orrs	r6, r0
 800188c:	0336      	lsls	r6, r6, #12
 800188e:	4c2d      	ldr	r4, [pc, #180]	@ (8001944 <__aeabi_dadd+0x38c>)
 8001890:	0b36      	lsrs	r6, r6, #12
 8001892:	e7da      	b.n	800184a <__aeabi_dadd+0x292>
 8001894:	2900      	cmp	r1, #0
 8001896:	d061      	beq.n	800195c <__aeabi_dadd+0x3a4>
 8001898:	4641      	mov	r1, r8
 800189a:	1b09      	subs	r1, r1, r4
 800189c:	2c00      	cmp	r4, #0
 800189e:	d100      	bne.n	80018a2 <__aeabi_dadd+0x2ea>
 80018a0:	e0b9      	b.n	8001a16 <__aeabi_dadd+0x45e>
 80018a2:	4c28      	ldr	r4, [pc, #160]	@ (8001944 <__aeabi_dadd+0x38c>)
 80018a4:	45a0      	cmp	r8, r4
 80018a6:	d100      	bne.n	80018aa <__aeabi_dadd+0x2f2>
 80018a8:	e1a5      	b.n	8001bf6 <__aeabi_dadd+0x63e>
 80018aa:	2701      	movs	r7, #1
 80018ac:	2938      	cmp	r1, #56	@ 0x38
 80018ae:	dc13      	bgt.n	80018d8 <__aeabi_dadd+0x320>
 80018b0:	2480      	movs	r4, #128	@ 0x80
 80018b2:	0424      	lsls	r4, r4, #16
 80018b4:	4326      	orrs	r6, r4
 80018b6:	291f      	cmp	r1, #31
 80018b8:	dd00      	ble.n	80018bc <__aeabi_dadd+0x304>
 80018ba:	e1c8      	b.n	8001c4e <__aeabi_dadd+0x696>
 80018bc:	2420      	movs	r4, #32
 80018be:	0037      	movs	r7, r6
 80018c0:	4648      	mov	r0, r9
 80018c2:	1a64      	subs	r4, r4, r1
 80018c4:	40a7      	lsls	r7, r4
 80018c6:	40c8      	lsrs	r0, r1
 80018c8:	4307      	orrs	r7, r0
 80018ca:	4648      	mov	r0, r9
 80018cc:	40a0      	lsls	r0, r4
 80018ce:	40ce      	lsrs	r6, r1
 80018d0:	1e44      	subs	r4, r0, #1
 80018d2:	41a0      	sbcs	r0, r4
 80018d4:	199b      	adds	r3, r3, r6
 80018d6:	4307      	orrs	r7, r0
 80018d8:	18bf      	adds	r7, r7, r2
 80018da:	4297      	cmp	r7, r2
 80018dc:	4192      	sbcs	r2, r2
 80018de:	4252      	negs	r2, r2
 80018e0:	4644      	mov	r4, r8
 80018e2:	18d6      	adds	r6, r2, r3
 80018e4:	e763      	b.n	80017ae <__aeabi_dadd+0x1f6>
 80018e6:	0038      	movs	r0, r7
 80018e8:	f001 fe88 	bl	80035fc <__clzsi2>
 80018ec:	0003      	movs	r3, r0
 80018ee:	3318      	adds	r3, #24
 80018f0:	2b1f      	cmp	r3, #31
 80018f2:	dc00      	bgt.n	80018f6 <__aeabi_dadd+0x33e>
 80018f4:	e6bf      	b.n	8001676 <__aeabi_dadd+0xbe>
 80018f6:	003a      	movs	r2, r7
 80018f8:	3808      	subs	r0, #8
 80018fa:	4082      	lsls	r2, r0
 80018fc:	429c      	cmp	r4, r3
 80018fe:	dd00      	ble.n	8001902 <__aeabi_dadd+0x34a>
 8001900:	e083      	b.n	8001a0a <__aeabi_dadd+0x452>
 8001902:	1b1b      	subs	r3, r3, r4
 8001904:	1c58      	adds	r0, r3, #1
 8001906:	281f      	cmp	r0, #31
 8001908:	dc00      	bgt.n	800190c <__aeabi_dadd+0x354>
 800190a:	e1b4      	b.n	8001c76 <__aeabi_dadd+0x6be>
 800190c:	0017      	movs	r7, r2
 800190e:	3b1f      	subs	r3, #31
 8001910:	40df      	lsrs	r7, r3
 8001912:	2820      	cmp	r0, #32
 8001914:	d005      	beq.n	8001922 <__aeabi_dadd+0x36a>
 8001916:	2340      	movs	r3, #64	@ 0x40
 8001918:	1a1b      	subs	r3, r3, r0
 800191a:	409a      	lsls	r2, r3
 800191c:	1e53      	subs	r3, r2, #1
 800191e:	419a      	sbcs	r2, r3
 8001920:	4317      	orrs	r7, r2
 8001922:	2400      	movs	r4, #0
 8001924:	2f00      	cmp	r7, #0
 8001926:	d00a      	beq.n	800193e <__aeabi_dadd+0x386>
 8001928:	077b      	lsls	r3, r7, #29
 800192a:	d000      	beq.n	800192e <__aeabi_dadd+0x376>
 800192c:	e6c4      	b.n	80016b8 <__aeabi_dadd+0x100>
 800192e:	0026      	movs	r6, r4
 8001930:	e79e      	b.n	8001870 <__aeabi_dadd+0x2b8>
 8001932:	464b      	mov	r3, r9
 8001934:	000c      	movs	r4, r1
 8001936:	08d8      	lsrs	r0, r3, #3
 8001938:	e79b      	b.n	8001872 <__aeabi_dadd+0x2ba>
 800193a:	2700      	movs	r7, #0
 800193c:	4c01      	ldr	r4, [pc, #4]	@ (8001944 <__aeabi_dadd+0x38c>)
 800193e:	2600      	movs	r6, #0
 8001940:	e783      	b.n	800184a <__aeabi_dadd+0x292>
 8001942:	46c0      	nop			@ (mov r8, r8)
 8001944:	000007ff 	.word	0x000007ff
 8001948:	ff7fffff 	.word	0xff7fffff
 800194c:	000007fe 	.word	0x000007fe
 8001950:	464b      	mov	r3, r9
 8001952:	0777      	lsls	r7, r6, #29
 8001954:	08d8      	lsrs	r0, r3, #3
 8001956:	4307      	orrs	r7, r0
 8001958:	08f0      	lsrs	r0, r6, #3
 800195a:	e791      	b.n	8001880 <__aeabi_dadd+0x2c8>
 800195c:	4fcd      	ldr	r7, [pc, #820]	@ (8001c94 <__aeabi_dadd+0x6dc>)
 800195e:	1c61      	adds	r1, r4, #1
 8001960:	4239      	tst	r1, r7
 8001962:	d16b      	bne.n	8001a3c <__aeabi_dadd+0x484>
 8001964:	0031      	movs	r1, r6
 8001966:	4648      	mov	r0, r9
 8001968:	4301      	orrs	r1, r0
 800196a:	2c00      	cmp	r4, #0
 800196c:	d000      	beq.n	8001970 <__aeabi_dadd+0x3b8>
 800196e:	e14b      	b.n	8001c08 <__aeabi_dadd+0x650>
 8001970:	001f      	movs	r7, r3
 8001972:	4317      	orrs	r7, r2
 8001974:	2900      	cmp	r1, #0
 8001976:	d100      	bne.n	800197a <__aeabi_dadd+0x3c2>
 8001978:	e181      	b.n	8001c7e <__aeabi_dadd+0x6c6>
 800197a:	2f00      	cmp	r7, #0
 800197c:	d100      	bne.n	8001980 <__aeabi_dadd+0x3c8>
 800197e:	e74c      	b.n	800181a <__aeabi_dadd+0x262>
 8001980:	444a      	add	r2, r9
 8001982:	454a      	cmp	r2, r9
 8001984:	4180      	sbcs	r0, r0
 8001986:	18f6      	adds	r6, r6, r3
 8001988:	4240      	negs	r0, r0
 800198a:	1836      	adds	r6, r6, r0
 800198c:	0233      	lsls	r3, r6, #8
 800198e:	d500      	bpl.n	8001992 <__aeabi_dadd+0x3da>
 8001990:	e1b0      	b.n	8001cf4 <__aeabi_dadd+0x73c>
 8001992:	0017      	movs	r7, r2
 8001994:	4691      	mov	r9, r2
 8001996:	4337      	orrs	r7, r6
 8001998:	d000      	beq.n	800199c <__aeabi_dadd+0x3e4>
 800199a:	e73e      	b.n	800181a <__aeabi_dadd+0x262>
 800199c:	2600      	movs	r6, #0
 800199e:	e754      	b.n	800184a <__aeabi_dadd+0x292>
 80019a0:	4649      	mov	r1, r9
 80019a2:	1a89      	subs	r1, r1, r2
 80019a4:	4688      	mov	r8, r1
 80019a6:	45c1      	cmp	r9, r8
 80019a8:	41bf      	sbcs	r7, r7
 80019aa:	1af1      	subs	r1, r6, r3
 80019ac:	427f      	negs	r7, r7
 80019ae:	1bc9      	subs	r1, r1, r7
 80019b0:	020f      	lsls	r7, r1, #8
 80019b2:	d461      	bmi.n	8001a78 <__aeabi_dadd+0x4c0>
 80019b4:	4647      	mov	r7, r8
 80019b6:	430f      	orrs	r7, r1
 80019b8:	d100      	bne.n	80019bc <__aeabi_dadd+0x404>
 80019ba:	e0bd      	b.n	8001b38 <__aeabi_dadd+0x580>
 80019bc:	000e      	movs	r6, r1
 80019be:	4647      	mov	r7, r8
 80019c0:	e651      	b.n	8001666 <__aeabi_dadd+0xae>
 80019c2:	4cb5      	ldr	r4, [pc, #724]	@ (8001c98 <__aeabi_dadd+0x6e0>)
 80019c4:	45a0      	cmp	r8, r4
 80019c6:	d100      	bne.n	80019ca <__aeabi_dadd+0x412>
 80019c8:	e100      	b.n	8001bcc <__aeabi_dadd+0x614>
 80019ca:	2701      	movs	r7, #1
 80019cc:	2938      	cmp	r1, #56	@ 0x38
 80019ce:	dd00      	ble.n	80019d2 <__aeabi_dadd+0x41a>
 80019d0:	e6b8      	b.n	8001744 <__aeabi_dadd+0x18c>
 80019d2:	2480      	movs	r4, #128	@ 0x80
 80019d4:	0424      	lsls	r4, r4, #16
 80019d6:	4326      	orrs	r6, r4
 80019d8:	e6a3      	b.n	8001722 <__aeabi_dadd+0x16a>
 80019da:	4eb0      	ldr	r6, [pc, #704]	@ (8001c9c <__aeabi_dadd+0x6e4>)
 80019dc:	1ae4      	subs	r4, r4, r3
 80019de:	4016      	ands	r6, r2
 80019e0:	077b      	lsls	r3, r7, #29
 80019e2:	d000      	beq.n	80019e6 <__aeabi_dadd+0x42e>
 80019e4:	e73f      	b.n	8001866 <__aeabi_dadd+0x2ae>
 80019e6:	e743      	b.n	8001870 <__aeabi_dadd+0x2b8>
 80019e8:	000f      	movs	r7, r1
 80019ea:	0018      	movs	r0, r3
 80019ec:	3f20      	subs	r7, #32
 80019ee:	40f8      	lsrs	r0, r7
 80019f0:	4684      	mov	ip, r0
 80019f2:	2920      	cmp	r1, #32
 80019f4:	d003      	beq.n	80019fe <__aeabi_dadd+0x446>
 80019f6:	2740      	movs	r7, #64	@ 0x40
 80019f8:	1a79      	subs	r1, r7, r1
 80019fa:	408b      	lsls	r3, r1
 80019fc:	431a      	orrs	r2, r3
 80019fe:	1e53      	subs	r3, r2, #1
 8001a00:	419a      	sbcs	r2, r3
 8001a02:	4663      	mov	r3, ip
 8001a04:	0017      	movs	r7, r2
 8001a06:	431f      	orrs	r7, r3
 8001a08:	e622      	b.n	8001650 <__aeabi_dadd+0x98>
 8001a0a:	48a4      	ldr	r0, [pc, #656]	@ (8001c9c <__aeabi_dadd+0x6e4>)
 8001a0c:	1ae1      	subs	r1, r4, r3
 8001a0e:	4010      	ands	r0, r2
 8001a10:	0747      	lsls	r7, r0, #29
 8001a12:	08c0      	lsrs	r0, r0, #3
 8001a14:	e707      	b.n	8001826 <__aeabi_dadd+0x26e>
 8001a16:	0034      	movs	r4, r6
 8001a18:	4648      	mov	r0, r9
 8001a1a:	4304      	orrs	r4, r0
 8001a1c:	d100      	bne.n	8001a20 <__aeabi_dadd+0x468>
 8001a1e:	e0fa      	b.n	8001c16 <__aeabi_dadd+0x65e>
 8001a20:	1e4c      	subs	r4, r1, #1
 8001a22:	2901      	cmp	r1, #1
 8001a24:	d100      	bne.n	8001a28 <__aeabi_dadd+0x470>
 8001a26:	e0d7      	b.n	8001bd8 <__aeabi_dadd+0x620>
 8001a28:	4f9b      	ldr	r7, [pc, #620]	@ (8001c98 <__aeabi_dadd+0x6e0>)
 8001a2a:	42b9      	cmp	r1, r7
 8001a2c:	d100      	bne.n	8001a30 <__aeabi_dadd+0x478>
 8001a2e:	e0e2      	b.n	8001bf6 <__aeabi_dadd+0x63e>
 8001a30:	2701      	movs	r7, #1
 8001a32:	2c38      	cmp	r4, #56	@ 0x38
 8001a34:	dd00      	ble.n	8001a38 <__aeabi_dadd+0x480>
 8001a36:	e74f      	b.n	80018d8 <__aeabi_dadd+0x320>
 8001a38:	0021      	movs	r1, r4
 8001a3a:	e73c      	b.n	80018b6 <__aeabi_dadd+0x2fe>
 8001a3c:	4c96      	ldr	r4, [pc, #600]	@ (8001c98 <__aeabi_dadd+0x6e0>)
 8001a3e:	42a1      	cmp	r1, r4
 8001a40:	d100      	bne.n	8001a44 <__aeabi_dadd+0x48c>
 8001a42:	e0dd      	b.n	8001c00 <__aeabi_dadd+0x648>
 8001a44:	444a      	add	r2, r9
 8001a46:	454a      	cmp	r2, r9
 8001a48:	4180      	sbcs	r0, r0
 8001a4a:	18f3      	adds	r3, r6, r3
 8001a4c:	4240      	negs	r0, r0
 8001a4e:	1818      	adds	r0, r3, r0
 8001a50:	07c7      	lsls	r7, r0, #31
 8001a52:	0852      	lsrs	r2, r2, #1
 8001a54:	4317      	orrs	r7, r2
 8001a56:	0846      	lsrs	r6, r0, #1
 8001a58:	0752      	lsls	r2, r2, #29
 8001a5a:	d005      	beq.n	8001a68 <__aeabi_dadd+0x4b0>
 8001a5c:	220f      	movs	r2, #15
 8001a5e:	000c      	movs	r4, r1
 8001a60:	403a      	ands	r2, r7
 8001a62:	2a04      	cmp	r2, #4
 8001a64:	d000      	beq.n	8001a68 <__aeabi_dadd+0x4b0>
 8001a66:	e62c      	b.n	80016c2 <__aeabi_dadd+0x10a>
 8001a68:	0776      	lsls	r6, r6, #29
 8001a6a:	08ff      	lsrs	r7, r7, #3
 8001a6c:	4337      	orrs	r7, r6
 8001a6e:	0900      	lsrs	r0, r0, #4
 8001a70:	e6d9      	b.n	8001826 <__aeabi_dadd+0x26e>
 8001a72:	2700      	movs	r7, #0
 8001a74:	2600      	movs	r6, #0
 8001a76:	e6e8      	b.n	800184a <__aeabi_dadd+0x292>
 8001a78:	4649      	mov	r1, r9
 8001a7a:	1a57      	subs	r7, r2, r1
 8001a7c:	42ba      	cmp	r2, r7
 8001a7e:	4192      	sbcs	r2, r2
 8001a80:	1b9e      	subs	r6, r3, r6
 8001a82:	4252      	negs	r2, r2
 8001a84:	4665      	mov	r5, ip
 8001a86:	1ab6      	subs	r6, r6, r2
 8001a88:	e5ed      	b.n	8001666 <__aeabi_dadd+0xae>
 8001a8a:	2900      	cmp	r1, #0
 8001a8c:	d000      	beq.n	8001a90 <__aeabi_dadd+0x4d8>
 8001a8e:	e0c6      	b.n	8001c1e <__aeabi_dadd+0x666>
 8001a90:	2f00      	cmp	r7, #0
 8001a92:	d167      	bne.n	8001b64 <__aeabi_dadd+0x5ac>
 8001a94:	2680      	movs	r6, #128	@ 0x80
 8001a96:	2500      	movs	r5, #0
 8001a98:	4c7f      	ldr	r4, [pc, #508]	@ (8001c98 <__aeabi_dadd+0x6e0>)
 8001a9a:	0336      	lsls	r6, r6, #12
 8001a9c:	e6d5      	b.n	800184a <__aeabi_dadd+0x292>
 8001a9e:	4665      	mov	r5, ip
 8001aa0:	000c      	movs	r4, r1
 8001aa2:	001e      	movs	r6, r3
 8001aa4:	08d0      	lsrs	r0, r2, #3
 8001aa6:	e6e4      	b.n	8001872 <__aeabi_dadd+0x2ba>
 8001aa8:	444a      	add	r2, r9
 8001aaa:	454a      	cmp	r2, r9
 8001aac:	4180      	sbcs	r0, r0
 8001aae:	18f3      	adds	r3, r6, r3
 8001ab0:	4240      	negs	r0, r0
 8001ab2:	1818      	adds	r0, r3, r0
 8001ab4:	0011      	movs	r1, r2
 8001ab6:	0203      	lsls	r3, r0, #8
 8001ab8:	d400      	bmi.n	8001abc <__aeabi_dadd+0x504>
 8001aba:	e096      	b.n	8001bea <__aeabi_dadd+0x632>
 8001abc:	4b77      	ldr	r3, [pc, #476]	@ (8001c9c <__aeabi_dadd+0x6e4>)
 8001abe:	0849      	lsrs	r1, r1, #1
 8001ac0:	4018      	ands	r0, r3
 8001ac2:	07c3      	lsls	r3, r0, #31
 8001ac4:	430b      	orrs	r3, r1
 8001ac6:	0844      	lsrs	r4, r0, #1
 8001ac8:	0749      	lsls	r1, r1, #29
 8001aca:	d100      	bne.n	8001ace <__aeabi_dadd+0x516>
 8001acc:	e129      	b.n	8001d22 <__aeabi_dadd+0x76a>
 8001ace:	220f      	movs	r2, #15
 8001ad0:	401a      	ands	r2, r3
 8001ad2:	2a04      	cmp	r2, #4
 8001ad4:	d100      	bne.n	8001ad8 <__aeabi_dadd+0x520>
 8001ad6:	e0ea      	b.n	8001cae <__aeabi_dadd+0x6f6>
 8001ad8:	1d1f      	adds	r7, r3, #4
 8001ada:	429f      	cmp	r7, r3
 8001adc:	41b6      	sbcs	r6, r6
 8001ade:	4276      	negs	r6, r6
 8001ae0:	1936      	adds	r6, r6, r4
 8001ae2:	2402      	movs	r4, #2
 8001ae4:	e6c4      	b.n	8001870 <__aeabi_dadd+0x2b8>
 8001ae6:	4649      	mov	r1, r9
 8001ae8:	1a8f      	subs	r7, r1, r2
 8001aea:	45b9      	cmp	r9, r7
 8001aec:	4180      	sbcs	r0, r0
 8001aee:	1af6      	subs	r6, r6, r3
 8001af0:	4240      	negs	r0, r0
 8001af2:	1a36      	subs	r6, r6, r0
 8001af4:	0233      	lsls	r3, r6, #8
 8001af6:	d406      	bmi.n	8001b06 <__aeabi_dadd+0x54e>
 8001af8:	0773      	lsls	r3, r6, #29
 8001afa:	08ff      	lsrs	r7, r7, #3
 8001afc:	2101      	movs	r1, #1
 8001afe:	431f      	orrs	r7, r3
 8001b00:	08f0      	lsrs	r0, r6, #3
 8001b02:	e690      	b.n	8001826 <__aeabi_dadd+0x26e>
 8001b04:	4665      	mov	r5, ip
 8001b06:	2401      	movs	r4, #1
 8001b08:	e5ab      	b.n	8001662 <__aeabi_dadd+0xaa>
 8001b0a:	464b      	mov	r3, r9
 8001b0c:	0777      	lsls	r7, r6, #29
 8001b0e:	08d8      	lsrs	r0, r3, #3
 8001b10:	4307      	orrs	r7, r0
 8001b12:	08f0      	lsrs	r0, r6, #3
 8001b14:	e6b4      	b.n	8001880 <__aeabi_dadd+0x2c8>
 8001b16:	000f      	movs	r7, r1
 8001b18:	0018      	movs	r0, r3
 8001b1a:	3f20      	subs	r7, #32
 8001b1c:	40f8      	lsrs	r0, r7
 8001b1e:	4684      	mov	ip, r0
 8001b20:	2920      	cmp	r1, #32
 8001b22:	d003      	beq.n	8001b2c <__aeabi_dadd+0x574>
 8001b24:	2740      	movs	r7, #64	@ 0x40
 8001b26:	1a79      	subs	r1, r7, r1
 8001b28:	408b      	lsls	r3, r1
 8001b2a:	431a      	orrs	r2, r3
 8001b2c:	1e53      	subs	r3, r2, #1
 8001b2e:	419a      	sbcs	r2, r3
 8001b30:	4663      	mov	r3, ip
 8001b32:	0017      	movs	r7, r2
 8001b34:	431f      	orrs	r7, r3
 8001b36:	e635      	b.n	80017a4 <__aeabi_dadd+0x1ec>
 8001b38:	2500      	movs	r5, #0
 8001b3a:	2400      	movs	r4, #0
 8001b3c:	2600      	movs	r6, #0
 8001b3e:	e684      	b.n	800184a <__aeabi_dadd+0x292>
 8001b40:	000c      	movs	r4, r1
 8001b42:	0035      	movs	r5, r6
 8001b44:	3c20      	subs	r4, #32
 8001b46:	40e5      	lsrs	r5, r4
 8001b48:	2920      	cmp	r1, #32
 8001b4a:	d005      	beq.n	8001b58 <__aeabi_dadd+0x5a0>
 8001b4c:	2440      	movs	r4, #64	@ 0x40
 8001b4e:	1a61      	subs	r1, r4, r1
 8001b50:	408e      	lsls	r6, r1
 8001b52:	4649      	mov	r1, r9
 8001b54:	4331      	orrs	r1, r6
 8001b56:	4689      	mov	r9, r1
 8001b58:	4648      	mov	r0, r9
 8001b5a:	1e41      	subs	r1, r0, #1
 8001b5c:	4188      	sbcs	r0, r1
 8001b5e:	0007      	movs	r7, r0
 8001b60:	432f      	orrs	r7, r5
 8001b62:	e5ef      	b.n	8001744 <__aeabi_dadd+0x18c>
 8001b64:	08d2      	lsrs	r2, r2, #3
 8001b66:	075f      	lsls	r7, r3, #29
 8001b68:	4665      	mov	r5, ip
 8001b6a:	4317      	orrs	r7, r2
 8001b6c:	08d8      	lsrs	r0, r3, #3
 8001b6e:	e687      	b.n	8001880 <__aeabi_dadd+0x2c8>
 8001b70:	1a17      	subs	r7, r2, r0
 8001b72:	42ba      	cmp	r2, r7
 8001b74:	4192      	sbcs	r2, r2
 8001b76:	1b9e      	subs	r6, r3, r6
 8001b78:	4252      	negs	r2, r2
 8001b7a:	1ab6      	subs	r6, r6, r2
 8001b7c:	0233      	lsls	r3, r6, #8
 8001b7e:	d4c1      	bmi.n	8001b04 <__aeabi_dadd+0x54c>
 8001b80:	0773      	lsls	r3, r6, #29
 8001b82:	08ff      	lsrs	r7, r7, #3
 8001b84:	4665      	mov	r5, ip
 8001b86:	2101      	movs	r1, #1
 8001b88:	431f      	orrs	r7, r3
 8001b8a:	08f0      	lsrs	r0, r6, #3
 8001b8c:	e64b      	b.n	8001826 <__aeabi_dadd+0x26e>
 8001b8e:	2f00      	cmp	r7, #0
 8001b90:	d07b      	beq.n	8001c8a <__aeabi_dadd+0x6d2>
 8001b92:	4665      	mov	r5, ip
 8001b94:	001e      	movs	r6, r3
 8001b96:	4691      	mov	r9, r2
 8001b98:	e63f      	b.n	800181a <__aeabi_dadd+0x262>
 8001b9a:	1a81      	subs	r1, r0, r2
 8001b9c:	4688      	mov	r8, r1
 8001b9e:	45c1      	cmp	r9, r8
 8001ba0:	41a4      	sbcs	r4, r4
 8001ba2:	1af1      	subs	r1, r6, r3
 8001ba4:	4264      	negs	r4, r4
 8001ba6:	1b09      	subs	r1, r1, r4
 8001ba8:	2480      	movs	r4, #128	@ 0x80
 8001baa:	0424      	lsls	r4, r4, #16
 8001bac:	4221      	tst	r1, r4
 8001bae:	d077      	beq.n	8001ca0 <__aeabi_dadd+0x6e8>
 8001bb0:	1a10      	subs	r0, r2, r0
 8001bb2:	4282      	cmp	r2, r0
 8001bb4:	4192      	sbcs	r2, r2
 8001bb6:	0007      	movs	r7, r0
 8001bb8:	1b9e      	subs	r6, r3, r6
 8001bba:	4252      	negs	r2, r2
 8001bbc:	1ab6      	subs	r6, r6, r2
 8001bbe:	4337      	orrs	r7, r6
 8001bc0:	d000      	beq.n	8001bc4 <__aeabi_dadd+0x60c>
 8001bc2:	e0a0      	b.n	8001d06 <__aeabi_dadd+0x74e>
 8001bc4:	4665      	mov	r5, ip
 8001bc6:	2400      	movs	r4, #0
 8001bc8:	2600      	movs	r6, #0
 8001bca:	e63e      	b.n	800184a <__aeabi_dadd+0x292>
 8001bcc:	075f      	lsls	r7, r3, #29
 8001bce:	08d2      	lsrs	r2, r2, #3
 8001bd0:	4665      	mov	r5, ip
 8001bd2:	4317      	orrs	r7, r2
 8001bd4:	08d8      	lsrs	r0, r3, #3
 8001bd6:	e653      	b.n	8001880 <__aeabi_dadd+0x2c8>
 8001bd8:	1881      	adds	r1, r0, r2
 8001bda:	4291      	cmp	r1, r2
 8001bdc:	4192      	sbcs	r2, r2
 8001bde:	18f0      	adds	r0, r6, r3
 8001be0:	4252      	negs	r2, r2
 8001be2:	1880      	adds	r0, r0, r2
 8001be4:	0203      	lsls	r3, r0, #8
 8001be6:	d500      	bpl.n	8001bea <__aeabi_dadd+0x632>
 8001be8:	e768      	b.n	8001abc <__aeabi_dadd+0x504>
 8001bea:	0747      	lsls	r7, r0, #29
 8001bec:	08c9      	lsrs	r1, r1, #3
 8001bee:	430f      	orrs	r7, r1
 8001bf0:	08c0      	lsrs	r0, r0, #3
 8001bf2:	2101      	movs	r1, #1
 8001bf4:	e617      	b.n	8001826 <__aeabi_dadd+0x26e>
 8001bf6:	08d2      	lsrs	r2, r2, #3
 8001bf8:	075f      	lsls	r7, r3, #29
 8001bfa:	4317      	orrs	r7, r2
 8001bfc:	08d8      	lsrs	r0, r3, #3
 8001bfe:	e63f      	b.n	8001880 <__aeabi_dadd+0x2c8>
 8001c00:	000c      	movs	r4, r1
 8001c02:	2600      	movs	r6, #0
 8001c04:	2700      	movs	r7, #0
 8001c06:	e620      	b.n	800184a <__aeabi_dadd+0x292>
 8001c08:	2900      	cmp	r1, #0
 8001c0a:	d156      	bne.n	8001cba <__aeabi_dadd+0x702>
 8001c0c:	075f      	lsls	r7, r3, #29
 8001c0e:	08d2      	lsrs	r2, r2, #3
 8001c10:	4317      	orrs	r7, r2
 8001c12:	08d8      	lsrs	r0, r3, #3
 8001c14:	e634      	b.n	8001880 <__aeabi_dadd+0x2c8>
 8001c16:	000c      	movs	r4, r1
 8001c18:	001e      	movs	r6, r3
 8001c1a:	08d0      	lsrs	r0, r2, #3
 8001c1c:	e629      	b.n	8001872 <__aeabi_dadd+0x2ba>
 8001c1e:	08c1      	lsrs	r1, r0, #3
 8001c20:	0770      	lsls	r0, r6, #29
 8001c22:	4301      	orrs	r1, r0
 8001c24:	08f0      	lsrs	r0, r6, #3
 8001c26:	2f00      	cmp	r7, #0
 8001c28:	d062      	beq.n	8001cf0 <__aeabi_dadd+0x738>
 8001c2a:	2480      	movs	r4, #128	@ 0x80
 8001c2c:	0324      	lsls	r4, r4, #12
 8001c2e:	4220      	tst	r0, r4
 8001c30:	d007      	beq.n	8001c42 <__aeabi_dadd+0x68a>
 8001c32:	08de      	lsrs	r6, r3, #3
 8001c34:	4226      	tst	r6, r4
 8001c36:	d104      	bne.n	8001c42 <__aeabi_dadd+0x68a>
 8001c38:	4665      	mov	r5, ip
 8001c3a:	0030      	movs	r0, r6
 8001c3c:	08d1      	lsrs	r1, r2, #3
 8001c3e:	075b      	lsls	r3, r3, #29
 8001c40:	4319      	orrs	r1, r3
 8001c42:	0f4f      	lsrs	r7, r1, #29
 8001c44:	00c9      	lsls	r1, r1, #3
 8001c46:	08c9      	lsrs	r1, r1, #3
 8001c48:	077f      	lsls	r7, r7, #29
 8001c4a:	430f      	orrs	r7, r1
 8001c4c:	e618      	b.n	8001880 <__aeabi_dadd+0x2c8>
 8001c4e:	000c      	movs	r4, r1
 8001c50:	0030      	movs	r0, r6
 8001c52:	3c20      	subs	r4, #32
 8001c54:	40e0      	lsrs	r0, r4
 8001c56:	4684      	mov	ip, r0
 8001c58:	2920      	cmp	r1, #32
 8001c5a:	d005      	beq.n	8001c68 <__aeabi_dadd+0x6b0>
 8001c5c:	2440      	movs	r4, #64	@ 0x40
 8001c5e:	1a61      	subs	r1, r4, r1
 8001c60:	408e      	lsls	r6, r1
 8001c62:	4649      	mov	r1, r9
 8001c64:	4331      	orrs	r1, r6
 8001c66:	4689      	mov	r9, r1
 8001c68:	4648      	mov	r0, r9
 8001c6a:	1e41      	subs	r1, r0, #1
 8001c6c:	4188      	sbcs	r0, r1
 8001c6e:	4661      	mov	r1, ip
 8001c70:	0007      	movs	r7, r0
 8001c72:	430f      	orrs	r7, r1
 8001c74:	e630      	b.n	80018d8 <__aeabi_dadd+0x320>
 8001c76:	2120      	movs	r1, #32
 8001c78:	2700      	movs	r7, #0
 8001c7a:	1a09      	subs	r1, r1, r0
 8001c7c:	e50e      	b.n	800169c <__aeabi_dadd+0xe4>
 8001c7e:	001e      	movs	r6, r3
 8001c80:	2f00      	cmp	r7, #0
 8001c82:	d000      	beq.n	8001c86 <__aeabi_dadd+0x6ce>
 8001c84:	e522      	b.n	80016cc <__aeabi_dadd+0x114>
 8001c86:	2400      	movs	r4, #0
 8001c88:	e758      	b.n	8001b3c <__aeabi_dadd+0x584>
 8001c8a:	2500      	movs	r5, #0
 8001c8c:	2400      	movs	r4, #0
 8001c8e:	2600      	movs	r6, #0
 8001c90:	e5db      	b.n	800184a <__aeabi_dadd+0x292>
 8001c92:	46c0      	nop			@ (mov r8, r8)
 8001c94:	000007fe 	.word	0x000007fe
 8001c98:	000007ff 	.word	0x000007ff
 8001c9c:	ff7fffff 	.word	0xff7fffff
 8001ca0:	4647      	mov	r7, r8
 8001ca2:	430f      	orrs	r7, r1
 8001ca4:	d100      	bne.n	8001ca8 <__aeabi_dadd+0x6f0>
 8001ca6:	e747      	b.n	8001b38 <__aeabi_dadd+0x580>
 8001ca8:	000e      	movs	r6, r1
 8001caa:	46c1      	mov	r9, r8
 8001cac:	e5b5      	b.n	800181a <__aeabi_dadd+0x262>
 8001cae:	08df      	lsrs	r7, r3, #3
 8001cb0:	0764      	lsls	r4, r4, #29
 8001cb2:	2102      	movs	r1, #2
 8001cb4:	4327      	orrs	r7, r4
 8001cb6:	0900      	lsrs	r0, r0, #4
 8001cb8:	e5b5      	b.n	8001826 <__aeabi_dadd+0x26e>
 8001cba:	0019      	movs	r1, r3
 8001cbc:	08c0      	lsrs	r0, r0, #3
 8001cbe:	0777      	lsls	r7, r6, #29
 8001cc0:	4307      	orrs	r7, r0
 8001cc2:	4311      	orrs	r1, r2
 8001cc4:	08f0      	lsrs	r0, r6, #3
 8001cc6:	2900      	cmp	r1, #0
 8001cc8:	d100      	bne.n	8001ccc <__aeabi_dadd+0x714>
 8001cca:	e5d9      	b.n	8001880 <__aeabi_dadd+0x2c8>
 8001ccc:	2180      	movs	r1, #128	@ 0x80
 8001cce:	0309      	lsls	r1, r1, #12
 8001cd0:	4208      	tst	r0, r1
 8001cd2:	d007      	beq.n	8001ce4 <__aeabi_dadd+0x72c>
 8001cd4:	08dc      	lsrs	r4, r3, #3
 8001cd6:	420c      	tst	r4, r1
 8001cd8:	d104      	bne.n	8001ce4 <__aeabi_dadd+0x72c>
 8001cda:	08d2      	lsrs	r2, r2, #3
 8001cdc:	075b      	lsls	r3, r3, #29
 8001cde:	431a      	orrs	r2, r3
 8001ce0:	0017      	movs	r7, r2
 8001ce2:	0020      	movs	r0, r4
 8001ce4:	0f7b      	lsrs	r3, r7, #29
 8001ce6:	00ff      	lsls	r7, r7, #3
 8001ce8:	08ff      	lsrs	r7, r7, #3
 8001cea:	075b      	lsls	r3, r3, #29
 8001cec:	431f      	orrs	r7, r3
 8001cee:	e5c7      	b.n	8001880 <__aeabi_dadd+0x2c8>
 8001cf0:	000f      	movs	r7, r1
 8001cf2:	e5c5      	b.n	8001880 <__aeabi_dadd+0x2c8>
 8001cf4:	4b12      	ldr	r3, [pc, #72]	@ (8001d40 <__aeabi_dadd+0x788>)
 8001cf6:	08d2      	lsrs	r2, r2, #3
 8001cf8:	4033      	ands	r3, r6
 8001cfa:	075f      	lsls	r7, r3, #29
 8001cfc:	025b      	lsls	r3, r3, #9
 8001cfe:	2401      	movs	r4, #1
 8001d00:	4317      	orrs	r7, r2
 8001d02:	0b1e      	lsrs	r6, r3, #12
 8001d04:	e5a1      	b.n	800184a <__aeabi_dadd+0x292>
 8001d06:	4226      	tst	r6, r4
 8001d08:	d012      	beq.n	8001d30 <__aeabi_dadd+0x778>
 8001d0a:	4b0d      	ldr	r3, [pc, #52]	@ (8001d40 <__aeabi_dadd+0x788>)
 8001d0c:	4665      	mov	r5, ip
 8001d0e:	0002      	movs	r2, r0
 8001d10:	2401      	movs	r4, #1
 8001d12:	401e      	ands	r6, r3
 8001d14:	e4e6      	b.n	80016e4 <__aeabi_dadd+0x12c>
 8001d16:	0021      	movs	r1, r4
 8001d18:	e585      	b.n	8001826 <__aeabi_dadd+0x26e>
 8001d1a:	0017      	movs	r7, r2
 8001d1c:	e5a8      	b.n	8001870 <__aeabi_dadd+0x2b8>
 8001d1e:	003a      	movs	r2, r7
 8001d20:	e4d4      	b.n	80016cc <__aeabi_dadd+0x114>
 8001d22:	08db      	lsrs	r3, r3, #3
 8001d24:	0764      	lsls	r4, r4, #29
 8001d26:	431c      	orrs	r4, r3
 8001d28:	0027      	movs	r7, r4
 8001d2a:	2102      	movs	r1, #2
 8001d2c:	0900      	lsrs	r0, r0, #4
 8001d2e:	e57a      	b.n	8001826 <__aeabi_dadd+0x26e>
 8001d30:	08c0      	lsrs	r0, r0, #3
 8001d32:	0777      	lsls	r7, r6, #29
 8001d34:	4307      	orrs	r7, r0
 8001d36:	4665      	mov	r5, ip
 8001d38:	2100      	movs	r1, #0
 8001d3a:	08f0      	lsrs	r0, r6, #3
 8001d3c:	e573      	b.n	8001826 <__aeabi_dadd+0x26e>
 8001d3e:	46c0      	nop			@ (mov r8, r8)
 8001d40:	ff7fffff 	.word	0xff7fffff

08001d44 <__aeabi_ddiv>:
 8001d44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d46:	46de      	mov	lr, fp
 8001d48:	4645      	mov	r5, r8
 8001d4a:	4657      	mov	r7, sl
 8001d4c:	464e      	mov	r6, r9
 8001d4e:	b5e0      	push	{r5, r6, r7, lr}
 8001d50:	b087      	sub	sp, #28
 8001d52:	9200      	str	r2, [sp, #0]
 8001d54:	9301      	str	r3, [sp, #4]
 8001d56:	030b      	lsls	r3, r1, #12
 8001d58:	0b1b      	lsrs	r3, r3, #12
 8001d5a:	469b      	mov	fp, r3
 8001d5c:	0fca      	lsrs	r2, r1, #31
 8001d5e:	004b      	lsls	r3, r1, #1
 8001d60:	0004      	movs	r4, r0
 8001d62:	4680      	mov	r8, r0
 8001d64:	0d5b      	lsrs	r3, r3, #21
 8001d66:	9202      	str	r2, [sp, #8]
 8001d68:	d100      	bne.n	8001d6c <__aeabi_ddiv+0x28>
 8001d6a:	e098      	b.n	8001e9e <__aeabi_ddiv+0x15a>
 8001d6c:	4a7c      	ldr	r2, [pc, #496]	@ (8001f60 <__aeabi_ddiv+0x21c>)
 8001d6e:	4293      	cmp	r3, r2
 8001d70:	d037      	beq.n	8001de2 <__aeabi_ddiv+0x9e>
 8001d72:	4659      	mov	r1, fp
 8001d74:	0f42      	lsrs	r2, r0, #29
 8001d76:	00c9      	lsls	r1, r1, #3
 8001d78:	430a      	orrs	r2, r1
 8001d7a:	2180      	movs	r1, #128	@ 0x80
 8001d7c:	0409      	lsls	r1, r1, #16
 8001d7e:	4311      	orrs	r1, r2
 8001d80:	00c2      	lsls	r2, r0, #3
 8001d82:	4690      	mov	r8, r2
 8001d84:	4a77      	ldr	r2, [pc, #476]	@ (8001f64 <__aeabi_ddiv+0x220>)
 8001d86:	4689      	mov	r9, r1
 8001d88:	4692      	mov	sl, r2
 8001d8a:	449a      	add	sl, r3
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	2400      	movs	r4, #0
 8001d90:	9303      	str	r3, [sp, #12]
 8001d92:	9e00      	ldr	r6, [sp, #0]
 8001d94:	9f01      	ldr	r7, [sp, #4]
 8001d96:	033b      	lsls	r3, r7, #12
 8001d98:	0b1b      	lsrs	r3, r3, #12
 8001d9a:	469b      	mov	fp, r3
 8001d9c:	007b      	lsls	r3, r7, #1
 8001d9e:	0030      	movs	r0, r6
 8001da0:	0d5b      	lsrs	r3, r3, #21
 8001da2:	0ffd      	lsrs	r5, r7, #31
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d059      	beq.n	8001e5c <__aeabi_ddiv+0x118>
 8001da8:	4a6d      	ldr	r2, [pc, #436]	@ (8001f60 <__aeabi_ddiv+0x21c>)
 8001daa:	4293      	cmp	r3, r2
 8001dac:	d048      	beq.n	8001e40 <__aeabi_ddiv+0xfc>
 8001dae:	4659      	mov	r1, fp
 8001db0:	0f72      	lsrs	r2, r6, #29
 8001db2:	00c9      	lsls	r1, r1, #3
 8001db4:	430a      	orrs	r2, r1
 8001db6:	2180      	movs	r1, #128	@ 0x80
 8001db8:	0409      	lsls	r1, r1, #16
 8001dba:	4311      	orrs	r1, r2
 8001dbc:	468b      	mov	fp, r1
 8001dbe:	4969      	ldr	r1, [pc, #420]	@ (8001f64 <__aeabi_ddiv+0x220>)
 8001dc0:	00f2      	lsls	r2, r6, #3
 8001dc2:	468c      	mov	ip, r1
 8001dc4:	4651      	mov	r1, sl
 8001dc6:	4463      	add	r3, ip
 8001dc8:	1acb      	subs	r3, r1, r3
 8001dca:	469a      	mov	sl, r3
 8001dcc:	2100      	movs	r1, #0
 8001dce:	9e02      	ldr	r6, [sp, #8]
 8001dd0:	406e      	eors	r6, r5
 8001dd2:	b2f6      	uxtb	r6, r6
 8001dd4:	2c0f      	cmp	r4, #15
 8001dd6:	d900      	bls.n	8001dda <__aeabi_ddiv+0x96>
 8001dd8:	e0ce      	b.n	8001f78 <__aeabi_ddiv+0x234>
 8001dda:	4b63      	ldr	r3, [pc, #396]	@ (8001f68 <__aeabi_ddiv+0x224>)
 8001ddc:	00a4      	lsls	r4, r4, #2
 8001dde:	591b      	ldr	r3, [r3, r4]
 8001de0:	469f      	mov	pc, r3
 8001de2:	465a      	mov	r2, fp
 8001de4:	4302      	orrs	r2, r0
 8001de6:	4691      	mov	r9, r2
 8001de8:	d000      	beq.n	8001dec <__aeabi_ddiv+0xa8>
 8001dea:	e090      	b.n	8001f0e <__aeabi_ddiv+0x1ca>
 8001dec:	469a      	mov	sl, r3
 8001dee:	2302      	movs	r3, #2
 8001df0:	4690      	mov	r8, r2
 8001df2:	2408      	movs	r4, #8
 8001df4:	9303      	str	r3, [sp, #12]
 8001df6:	e7cc      	b.n	8001d92 <__aeabi_ddiv+0x4e>
 8001df8:	46cb      	mov	fp, r9
 8001dfa:	4642      	mov	r2, r8
 8001dfc:	9d02      	ldr	r5, [sp, #8]
 8001dfe:	9903      	ldr	r1, [sp, #12]
 8001e00:	2902      	cmp	r1, #2
 8001e02:	d100      	bne.n	8001e06 <__aeabi_ddiv+0xc2>
 8001e04:	e1de      	b.n	80021c4 <__aeabi_ddiv+0x480>
 8001e06:	2903      	cmp	r1, #3
 8001e08:	d100      	bne.n	8001e0c <__aeabi_ddiv+0xc8>
 8001e0a:	e08d      	b.n	8001f28 <__aeabi_ddiv+0x1e4>
 8001e0c:	2901      	cmp	r1, #1
 8001e0e:	d000      	beq.n	8001e12 <__aeabi_ddiv+0xce>
 8001e10:	e179      	b.n	8002106 <__aeabi_ddiv+0x3c2>
 8001e12:	002e      	movs	r6, r5
 8001e14:	2200      	movs	r2, #0
 8001e16:	2300      	movs	r3, #0
 8001e18:	2400      	movs	r4, #0
 8001e1a:	4690      	mov	r8, r2
 8001e1c:	051b      	lsls	r3, r3, #20
 8001e1e:	4323      	orrs	r3, r4
 8001e20:	07f6      	lsls	r6, r6, #31
 8001e22:	4333      	orrs	r3, r6
 8001e24:	4640      	mov	r0, r8
 8001e26:	0019      	movs	r1, r3
 8001e28:	b007      	add	sp, #28
 8001e2a:	bcf0      	pop	{r4, r5, r6, r7}
 8001e2c:	46bb      	mov	fp, r7
 8001e2e:	46b2      	mov	sl, r6
 8001e30:	46a9      	mov	r9, r5
 8001e32:	46a0      	mov	r8, r4
 8001e34:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001e36:	2200      	movs	r2, #0
 8001e38:	2400      	movs	r4, #0
 8001e3a:	4690      	mov	r8, r2
 8001e3c:	4b48      	ldr	r3, [pc, #288]	@ (8001f60 <__aeabi_ddiv+0x21c>)
 8001e3e:	e7ed      	b.n	8001e1c <__aeabi_ddiv+0xd8>
 8001e40:	465a      	mov	r2, fp
 8001e42:	9b00      	ldr	r3, [sp, #0]
 8001e44:	431a      	orrs	r2, r3
 8001e46:	4b49      	ldr	r3, [pc, #292]	@ (8001f6c <__aeabi_ddiv+0x228>)
 8001e48:	469c      	mov	ip, r3
 8001e4a:	44e2      	add	sl, ip
 8001e4c:	2a00      	cmp	r2, #0
 8001e4e:	d159      	bne.n	8001f04 <__aeabi_ddiv+0x1c0>
 8001e50:	2302      	movs	r3, #2
 8001e52:	431c      	orrs	r4, r3
 8001e54:	2300      	movs	r3, #0
 8001e56:	2102      	movs	r1, #2
 8001e58:	469b      	mov	fp, r3
 8001e5a:	e7b8      	b.n	8001dce <__aeabi_ddiv+0x8a>
 8001e5c:	465a      	mov	r2, fp
 8001e5e:	9b00      	ldr	r3, [sp, #0]
 8001e60:	431a      	orrs	r2, r3
 8001e62:	d049      	beq.n	8001ef8 <__aeabi_ddiv+0x1b4>
 8001e64:	465b      	mov	r3, fp
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d100      	bne.n	8001e6c <__aeabi_ddiv+0x128>
 8001e6a:	e19c      	b.n	80021a6 <__aeabi_ddiv+0x462>
 8001e6c:	4658      	mov	r0, fp
 8001e6e:	f001 fbc5 	bl	80035fc <__clzsi2>
 8001e72:	0002      	movs	r2, r0
 8001e74:	0003      	movs	r3, r0
 8001e76:	3a0b      	subs	r2, #11
 8001e78:	271d      	movs	r7, #29
 8001e7a:	9e00      	ldr	r6, [sp, #0]
 8001e7c:	1aba      	subs	r2, r7, r2
 8001e7e:	0019      	movs	r1, r3
 8001e80:	4658      	mov	r0, fp
 8001e82:	40d6      	lsrs	r6, r2
 8001e84:	3908      	subs	r1, #8
 8001e86:	4088      	lsls	r0, r1
 8001e88:	0032      	movs	r2, r6
 8001e8a:	4302      	orrs	r2, r0
 8001e8c:	4693      	mov	fp, r2
 8001e8e:	9a00      	ldr	r2, [sp, #0]
 8001e90:	408a      	lsls	r2, r1
 8001e92:	4937      	ldr	r1, [pc, #220]	@ (8001f70 <__aeabi_ddiv+0x22c>)
 8001e94:	4453      	add	r3, sl
 8001e96:	468a      	mov	sl, r1
 8001e98:	2100      	movs	r1, #0
 8001e9a:	449a      	add	sl, r3
 8001e9c:	e797      	b.n	8001dce <__aeabi_ddiv+0x8a>
 8001e9e:	465b      	mov	r3, fp
 8001ea0:	4303      	orrs	r3, r0
 8001ea2:	4699      	mov	r9, r3
 8001ea4:	d021      	beq.n	8001eea <__aeabi_ddiv+0x1a6>
 8001ea6:	465b      	mov	r3, fp
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d100      	bne.n	8001eae <__aeabi_ddiv+0x16a>
 8001eac:	e169      	b.n	8002182 <__aeabi_ddiv+0x43e>
 8001eae:	4658      	mov	r0, fp
 8001eb0:	f001 fba4 	bl	80035fc <__clzsi2>
 8001eb4:	230b      	movs	r3, #11
 8001eb6:	425b      	negs	r3, r3
 8001eb8:	469c      	mov	ip, r3
 8001eba:	0002      	movs	r2, r0
 8001ebc:	4484      	add	ip, r0
 8001ebe:	4666      	mov	r6, ip
 8001ec0:	231d      	movs	r3, #29
 8001ec2:	1b9b      	subs	r3, r3, r6
 8001ec4:	0026      	movs	r6, r4
 8001ec6:	0011      	movs	r1, r2
 8001ec8:	4658      	mov	r0, fp
 8001eca:	40de      	lsrs	r6, r3
 8001ecc:	3908      	subs	r1, #8
 8001ece:	4088      	lsls	r0, r1
 8001ed0:	0033      	movs	r3, r6
 8001ed2:	4303      	orrs	r3, r0
 8001ed4:	4699      	mov	r9, r3
 8001ed6:	0023      	movs	r3, r4
 8001ed8:	408b      	lsls	r3, r1
 8001eda:	4698      	mov	r8, r3
 8001edc:	4b25      	ldr	r3, [pc, #148]	@ (8001f74 <__aeabi_ddiv+0x230>)
 8001ede:	2400      	movs	r4, #0
 8001ee0:	1a9b      	subs	r3, r3, r2
 8001ee2:	469a      	mov	sl, r3
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	9303      	str	r3, [sp, #12]
 8001ee8:	e753      	b.n	8001d92 <__aeabi_ddiv+0x4e>
 8001eea:	2300      	movs	r3, #0
 8001eec:	4698      	mov	r8, r3
 8001eee:	469a      	mov	sl, r3
 8001ef0:	3301      	adds	r3, #1
 8001ef2:	2404      	movs	r4, #4
 8001ef4:	9303      	str	r3, [sp, #12]
 8001ef6:	e74c      	b.n	8001d92 <__aeabi_ddiv+0x4e>
 8001ef8:	2301      	movs	r3, #1
 8001efa:	431c      	orrs	r4, r3
 8001efc:	2300      	movs	r3, #0
 8001efe:	2101      	movs	r1, #1
 8001f00:	469b      	mov	fp, r3
 8001f02:	e764      	b.n	8001dce <__aeabi_ddiv+0x8a>
 8001f04:	2303      	movs	r3, #3
 8001f06:	0032      	movs	r2, r6
 8001f08:	2103      	movs	r1, #3
 8001f0a:	431c      	orrs	r4, r3
 8001f0c:	e75f      	b.n	8001dce <__aeabi_ddiv+0x8a>
 8001f0e:	469a      	mov	sl, r3
 8001f10:	2303      	movs	r3, #3
 8001f12:	46d9      	mov	r9, fp
 8001f14:	240c      	movs	r4, #12
 8001f16:	9303      	str	r3, [sp, #12]
 8001f18:	e73b      	b.n	8001d92 <__aeabi_ddiv+0x4e>
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	2480      	movs	r4, #128	@ 0x80
 8001f1e:	4698      	mov	r8, r3
 8001f20:	2600      	movs	r6, #0
 8001f22:	4b0f      	ldr	r3, [pc, #60]	@ (8001f60 <__aeabi_ddiv+0x21c>)
 8001f24:	0324      	lsls	r4, r4, #12
 8001f26:	e779      	b.n	8001e1c <__aeabi_ddiv+0xd8>
 8001f28:	2480      	movs	r4, #128	@ 0x80
 8001f2a:	465b      	mov	r3, fp
 8001f2c:	0324      	lsls	r4, r4, #12
 8001f2e:	431c      	orrs	r4, r3
 8001f30:	0324      	lsls	r4, r4, #12
 8001f32:	002e      	movs	r6, r5
 8001f34:	4690      	mov	r8, r2
 8001f36:	4b0a      	ldr	r3, [pc, #40]	@ (8001f60 <__aeabi_ddiv+0x21c>)
 8001f38:	0b24      	lsrs	r4, r4, #12
 8001f3a:	e76f      	b.n	8001e1c <__aeabi_ddiv+0xd8>
 8001f3c:	2480      	movs	r4, #128	@ 0x80
 8001f3e:	464b      	mov	r3, r9
 8001f40:	0324      	lsls	r4, r4, #12
 8001f42:	4223      	tst	r3, r4
 8001f44:	d002      	beq.n	8001f4c <__aeabi_ddiv+0x208>
 8001f46:	465b      	mov	r3, fp
 8001f48:	4223      	tst	r3, r4
 8001f4a:	d0f0      	beq.n	8001f2e <__aeabi_ddiv+0x1ea>
 8001f4c:	2480      	movs	r4, #128	@ 0x80
 8001f4e:	464b      	mov	r3, r9
 8001f50:	0324      	lsls	r4, r4, #12
 8001f52:	431c      	orrs	r4, r3
 8001f54:	0324      	lsls	r4, r4, #12
 8001f56:	9e02      	ldr	r6, [sp, #8]
 8001f58:	4b01      	ldr	r3, [pc, #4]	@ (8001f60 <__aeabi_ddiv+0x21c>)
 8001f5a:	0b24      	lsrs	r4, r4, #12
 8001f5c:	e75e      	b.n	8001e1c <__aeabi_ddiv+0xd8>
 8001f5e:	46c0      	nop			@ (mov r8, r8)
 8001f60:	000007ff 	.word	0x000007ff
 8001f64:	fffffc01 	.word	0xfffffc01
 8001f68:	0800bf4c 	.word	0x0800bf4c
 8001f6c:	fffff801 	.word	0xfffff801
 8001f70:	000003f3 	.word	0x000003f3
 8001f74:	fffffc0d 	.word	0xfffffc0d
 8001f78:	45cb      	cmp	fp, r9
 8001f7a:	d200      	bcs.n	8001f7e <__aeabi_ddiv+0x23a>
 8001f7c:	e0f8      	b.n	8002170 <__aeabi_ddiv+0x42c>
 8001f7e:	d100      	bne.n	8001f82 <__aeabi_ddiv+0x23e>
 8001f80:	e0f3      	b.n	800216a <__aeabi_ddiv+0x426>
 8001f82:	2301      	movs	r3, #1
 8001f84:	425b      	negs	r3, r3
 8001f86:	469c      	mov	ip, r3
 8001f88:	4644      	mov	r4, r8
 8001f8a:	4648      	mov	r0, r9
 8001f8c:	2500      	movs	r5, #0
 8001f8e:	44e2      	add	sl, ip
 8001f90:	465b      	mov	r3, fp
 8001f92:	0e17      	lsrs	r7, r2, #24
 8001f94:	021b      	lsls	r3, r3, #8
 8001f96:	431f      	orrs	r7, r3
 8001f98:	0c19      	lsrs	r1, r3, #16
 8001f9a:	043b      	lsls	r3, r7, #16
 8001f9c:	0212      	lsls	r2, r2, #8
 8001f9e:	9700      	str	r7, [sp, #0]
 8001fa0:	0c1f      	lsrs	r7, r3, #16
 8001fa2:	4691      	mov	r9, r2
 8001fa4:	9102      	str	r1, [sp, #8]
 8001fa6:	9703      	str	r7, [sp, #12]
 8001fa8:	f7fe f94c 	bl	8000244 <__aeabi_uidivmod>
 8001fac:	0002      	movs	r2, r0
 8001fae:	437a      	muls	r2, r7
 8001fb0:	040b      	lsls	r3, r1, #16
 8001fb2:	0c21      	lsrs	r1, r4, #16
 8001fb4:	4680      	mov	r8, r0
 8001fb6:	4319      	orrs	r1, r3
 8001fb8:	428a      	cmp	r2, r1
 8001fba:	d909      	bls.n	8001fd0 <__aeabi_ddiv+0x28c>
 8001fbc:	9f00      	ldr	r7, [sp, #0]
 8001fbe:	2301      	movs	r3, #1
 8001fc0:	46bc      	mov	ip, r7
 8001fc2:	425b      	negs	r3, r3
 8001fc4:	4461      	add	r1, ip
 8001fc6:	469c      	mov	ip, r3
 8001fc8:	44e0      	add	r8, ip
 8001fca:	428f      	cmp	r7, r1
 8001fcc:	d800      	bhi.n	8001fd0 <__aeabi_ddiv+0x28c>
 8001fce:	e15c      	b.n	800228a <__aeabi_ddiv+0x546>
 8001fd0:	1a88      	subs	r0, r1, r2
 8001fd2:	9902      	ldr	r1, [sp, #8]
 8001fd4:	f7fe f936 	bl	8000244 <__aeabi_uidivmod>
 8001fd8:	9a03      	ldr	r2, [sp, #12]
 8001fda:	0424      	lsls	r4, r4, #16
 8001fdc:	4342      	muls	r2, r0
 8001fde:	0409      	lsls	r1, r1, #16
 8001fe0:	0c24      	lsrs	r4, r4, #16
 8001fe2:	0003      	movs	r3, r0
 8001fe4:	430c      	orrs	r4, r1
 8001fe6:	42a2      	cmp	r2, r4
 8001fe8:	d906      	bls.n	8001ff8 <__aeabi_ddiv+0x2b4>
 8001fea:	9900      	ldr	r1, [sp, #0]
 8001fec:	3b01      	subs	r3, #1
 8001fee:	468c      	mov	ip, r1
 8001ff0:	4464      	add	r4, ip
 8001ff2:	42a1      	cmp	r1, r4
 8001ff4:	d800      	bhi.n	8001ff8 <__aeabi_ddiv+0x2b4>
 8001ff6:	e142      	b.n	800227e <__aeabi_ddiv+0x53a>
 8001ff8:	1aa0      	subs	r0, r4, r2
 8001ffa:	4642      	mov	r2, r8
 8001ffc:	0412      	lsls	r2, r2, #16
 8001ffe:	431a      	orrs	r2, r3
 8002000:	4693      	mov	fp, r2
 8002002:	464b      	mov	r3, r9
 8002004:	4659      	mov	r1, fp
 8002006:	0c1b      	lsrs	r3, r3, #16
 8002008:	001f      	movs	r7, r3
 800200a:	9304      	str	r3, [sp, #16]
 800200c:	040b      	lsls	r3, r1, #16
 800200e:	4649      	mov	r1, r9
 8002010:	0409      	lsls	r1, r1, #16
 8002012:	0c09      	lsrs	r1, r1, #16
 8002014:	000c      	movs	r4, r1
 8002016:	0c1b      	lsrs	r3, r3, #16
 8002018:	435c      	muls	r4, r3
 800201a:	0c12      	lsrs	r2, r2, #16
 800201c:	437b      	muls	r3, r7
 800201e:	4688      	mov	r8, r1
 8002020:	4351      	muls	r1, r2
 8002022:	437a      	muls	r2, r7
 8002024:	0c27      	lsrs	r7, r4, #16
 8002026:	46bc      	mov	ip, r7
 8002028:	185b      	adds	r3, r3, r1
 800202a:	4463      	add	r3, ip
 800202c:	4299      	cmp	r1, r3
 800202e:	d903      	bls.n	8002038 <__aeabi_ddiv+0x2f4>
 8002030:	2180      	movs	r1, #128	@ 0x80
 8002032:	0249      	lsls	r1, r1, #9
 8002034:	468c      	mov	ip, r1
 8002036:	4462      	add	r2, ip
 8002038:	0c19      	lsrs	r1, r3, #16
 800203a:	0424      	lsls	r4, r4, #16
 800203c:	041b      	lsls	r3, r3, #16
 800203e:	0c24      	lsrs	r4, r4, #16
 8002040:	188a      	adds	r2, r1, r2
 8002042:	191c      	adds	r4, r3, r4
 8002044:	4290      	cmp	r0, r2
 8002046:	d302      	bcc.n	800204e <__aeabi_ddiv+0x30a>
 8002048:	d116      	bne.n	8002078 <__aeabi_ddiv+0x334>
 800204a:	42a5      	cmp	r5, r4
 800204c:	d214      	bcs.n	8002078 <__aeabi_ddiv+0x334>
 800204e:	465b      	mov	r3, fp
 8002050:	9f00      	ldr	r7, [sp, #0]
 8002052:	3b01      	subs	r3, #1
 8002054:	444d      	add	r5, r9
 8002056:	9305      	str	r3, [sp, #20]
 8002058:	454d      	cmp	r5, r9
 800205a:	419b      	sbcs	r3, r3
 800205c:	46bc      	mov	ip, r7
 800205e:	425b      	negs	r3, r3
 8002060:	4463      	add	r3, ip
 8002062:	18c0      	adds	r0, r0, r3
 8002064:	4287      	cmp	r7, r0
 8002066:	d300      	bcc.n	800206a <__aeabi_ddiv+0x326>
 8002068:	e102      	b.n	8002270 <__aeabi_ddiv+0x52c>
 800206a:	4282      	cmp	r2, r0
 800206c:	d900      	bls.n	8002070 <__aeabi_ddiv+0x32c>
 800206e:	e129      	b.n	80022c4 <__aeabi_ddiv+0x580>
 8002070:	d100      	bne.n	8002074 <__aeabi_ddiv+0x330>
 8002072:	e124      	b.n	80022be <__aeabi_ddiv+0x57a>
 8002074:	9b05      	ldr	r3, [sp, #20]
 8002076:	469b      	mov	fp, r3
 8002078:	1b2c      	subs	r4, r5, r4
 800207a:	42a5      	cmp	r5, r4
 800207c:	41ad      	sbcs	r5, r5
 800207e:	9b00      	ldr	r3, [sp, #0]
 8002080:	1a80      	subs	r0, r0, r2
 8002082:	426d      	negs	r5, r5
 8002084:	1b40      	subs	r0, r0, r5
 8002086:	4283      	cmp	r3, r0
 8002088:	d100      	bne.n	800208c <__aeabi_ddiv+0x348>
 800208a:	e10f      	b.n	80022ac <__aeabi_ddiv+0x568>
 800208c:	9902      	ldr	r1, [sp, #8]
 800208e:	f7fe f8d9 	bl	8000244 <__aeabi_uidivmod>
 8002092:	9a03      	ldr	r2, [sp, #12]
 8002094:	040b      	lsls	r3, r1, #16
 8002096:	4342      	muls	r2, r0
 8002098:	0c21      	lsrs	r1, r4, #16
 800209a:	0005      	movs	r5, r0
 800209c:	4319      	orrs	r1, r3
 800209e:	428a      	cmp	r2, r1
 80020a0:	d900      	bls.n	80020a4 <__aeabi_ddiv+0x360>
 80020a2:	e0cb      	b.n	800223c <__aeabi_ddiv+0x4f8>
 80020a4:	1a88      	subs	r0, r1, r2
 80020a6:	9902      	ldr	r1, [sp, #8]
 80020a8:	f7fe f8cc 	bl	8000244 <__aeabi_uidivmod>
 80020ac:	9a03      	ldr	r2, [sp, #12]
 80020ae:	0424      	lsls	r4, r4, #16
 80020b0:	4342      	muls	r2, r0
 80020b2:	0409      	lsls	r1, r1, #16
 80020b4:	0c24      	lsrs	r4, r4, #16
 80020b6:	0003      	movs	r3, r0
 80020b8:	430c      	orrs	r4, r1
 80020ba:	42a2      	cmp	r2, r4
 80020bc:	d900      	bls.n	80020c0 <__aeabi_ddiv+0x37c>
 80020be:	e0ca      	b.n	8002256 <__aeabi_ddiv+0x512>
 80020c0:	4641      	mov	r1, r8
 80020c2:	1aa4      	subs	r4, r4, r2
 80020c4:	042a      	lsls	r2, r5, #16
 80020c6:	431a      	orrs	r2, r3
 80020c8:	9f04      	ldr	r7, [sp, #16]
 80020ca:	0413      	lsls	r3, r2, #16
 80020cc:	0c1b      	lsrs	r3, r3, #16
 80020ce:	4359      	muls	r1, r3
 80020d0:	4640      	mov	r0, r8
 80020d2:	437b      	muls	r3, r7
 80020d4:	469c      	mov	ip, r3
 80020d6:	0c15      	lsrs	r5, r2, #16
 80020d8:	4368      	muls	r0, r5
 80020da:	0c0b      	lsrs	r3, r1, #16
 80020dc:	4484      	add	ip, r0
 80020de:	4463      	add	r3, ip
 80020e0:	437d      	muls	r5, r7
 80020e2:	4298      	cmp	r0, r3
 80020e4:	d903      	bls.n	80020ee <__aeabi_ddiv+0x3aa>
 80020e6:	2080      	movs	r0, #128	@ 0x80
 80020e8:	0240      	lsls	r0, r0, #9
 80020ea:	4684      	mov	ip, r0
 80020ec:	4465      	add	r5, ip
 80020ee:	0c18      	lsrs	r0, r3, #16
 80020f0:	0409      	lsls	r1, r1, #16
 80020f2:	041b      	lsls	r3, r3, #16
 80020f4:	0c09      	lsrs	r1, r1, #16
 80020f6:	1940      	adds	r0, r0, r5
 80020f8:	185b      	adds	r3, r3, r1
 80020fa:	4284      	cmp	r4, r0
 80020fc:	d327      	bcc.n	800214e <__aeabi_ddiv+0x40a>
 80020fe:	d023      	beq.n	8002148 <__aeabi_ddiv+0x404>
 8002100:	2301      	movs	r3, #1
 8002102:	0035      	movs	r5, r6
 8002104:	431a      	orrs	r2, r3
 8002106:	4b94      	ldr	r3, [pc, #592]	@ (8002358 <__aeabi_ddiv+0x614>)
 8002108:	4453      	add	r3, sl
 800210a:	2b00      	cmp	r3, #0
 800210c:	dd60      	ble.n	80021d0 <__aeabi_ddiv+0x48c>
 800210e:	0751      	lsls	r1, r2, #29
 8002110:	d000      	beq.n	8002114 <__aeabi_ddiv+0x3d0>
 8002112:	e086      	b.n	8002222 <__aeabi_ddiv+0x4de>
 8002114:	002e      	movs	r6, r5
 8002116:	08d1      	lsrs	r1, r2, #3
 8002118:	465a      	mov	r2, fp
 800211a:	01d2      	lsls	r2, r2, #7
 800211c:	d506      	bpl.n	800212c <__aeabi_ddiv+0x3e8>
 800211e:	465a      	mov	r2, fp
 8002120:	4b8e      	ldr	r3, [pc, #568]	@ (800235c <__aeabi_ddiv+0x618>)
 8002122:	401a      	ands	r2, r3
 8002124:	2380      	movs	r3, #128	@ 0x80
 8002126:	4693      	mov	fp, r2
 8002128:	00db      	lsls	r3, r3, #3
 800212a:	4453      	add	r3, sl
 800212c:	4a8c      	ldr	r2, [pc, #560]	@ (8002360 <__aeabi_ddiv+0x61c>)
 800212e:	4293      	cmp	r3, r2
 8002130:	dd00      	ble.n	8002134 <__aeabi_ddiv+0x3f0>
 8002132:	e680      	b.n	8001e36 <__aeabi_ddiv+0xf2>
 8002134:	465a      	mov	r2, fp
 8002136:	0752      	lsls	r2, r2, #29
 8002138:	430a      	orrs	r2, r1
 800213a:	4690      	mov	r8, r2
 800213c:	465a      	mov	r2, fp
 800213e:	055b      	lsls	r3, r3, #21
 8002140:	0254      	lsls	r4, r2, #9
 8002142:	0b24      	lsrs	r4, r4, #12
 8002144:	0d5b      	lsrs	r3, r3, #21
 8002146:	e669      	b.n	8001e1c <__aeabi_ddiv+0xd8>
 8002148:	0035      	movs	r5, r6
 800214a:	2b00      	cmp	r3, #0
 800214c:	d0db      	beq.n	8002106 <__aeabi_ddiv+0x3c2>
 800214e:	9d00      	ldr	r5, [sp, #0]
 8002150:	1e51      	subs	r1, r2, #1
 8002152:	46ac      	mov	ip, r5
 8002154:	4464      	add	r4, ip
 8002156:	42ac      	cmp	r4, r5
 8002158:	d200      	bcs.n	800215c <__aeabi_ddiv+0x418>
 800215a:	e09e      	b.n	800229a <__aeabi_ddiv+0x556>
 800215c:	4284      	cmp	r4, r0
 800215e:	d200      	bcs.n	8002162 <__aeabi_ddiv+0x41e>
 8002160:	e0e1      	b.n	8002326 <__aeabi_ddiv+0x5e2>
 8002162:	d100      	bne.n	8002166 <__aeabi_ddiv+0x422>
 8002164:	e0ee      	b.n	8002344 <__aeabi_ddiv+0x600>
 8002166:	000a      	movs	r2, r1
 8002168:	e7ca      	b.n	8002100 <__aeabi_ddiv+0x3bc>
 800216a:	4542      	cmp	r2, r8
 800216c:	d900      	bls.n	8002170 <__aeabi_ddiv+0x42c>
 800216e:	e708      	b.n	8001f82 <__aeabi_ddiv+0x23e>
 8002170:	464b      	mov	r3, r9
 8002172:	07dc      	lsls	r4, r3, #31
 8002174:	0858      	lsrs	r0, r3, #1
 8002176:	4643      	mov	r3, r8
 8002178:	085b      	lsrs	r3, r3, #1
 800217a:	431c      	orrs	r4, r3
 800217c:	4643      	mov	r3, r8
 800217e:	07dd      	lsls	r5, r3, #31
 8002180:	e706      	b.n	8001f90 <__aeabi_ddiv+0x24c>
 8002182:	f001 fa3b 	bl	80035fc <__clzsi2>
 8002186:	2315      	movs	r3, #21
 8002188:	469c      	mov	ip, r3
 800218a:	4484      	add	ip, r0
 800218c:	0002      	movs	r2, r0
 800218e:	4663      	mov	r3, ip
 8002190:	3220      	adds	r2, #32
 8002192:	2b1c      	cmp	r3, #28
 8002194:	dc00      	bgt.n	8002198 <__aeabi_ddiv+0x454>
 8002196:	e692      	b.n	8001ebe <__aeabi_ddiv+0x17a>
 8002198:	0023      	movs	r3, r4
 800219a:	3808      	subs	r0, #8
 800219c:	4083      	lsls	r3, r0
 800219e:	4699      	mov	r9, r3
 80021a0:	2300      	movs	r3, #0
 80021a2:	4698      	mov	r8, r3
 80021a4:	e69a      	b.n	8001edc <__aeabi_ddiv+0x198>
 80021a6:	f001 fa29 	bl	80035fc <__clzsi2>
 80021aa:	0002      	movs	r2, r0
 80021ac:	0003      	movs	r3, r0
 80021ae:	3215      	adds	r2, #21
 80021b0:	3320      	adds	r3, #32
 80021b2:	2a1c      	cmp	r2, #28
 80021b4:	dc00      	bgt.n	80021b8 <__aeabi_ddiv+0x474>
 80021b6:	e65f      	b.n	8001e78 <__aeabi_ddiv+0x134>
 80021b8:	9900      	ldr	r1, [sp, #0]
 80021ba:	3808      	subs	r0, #8
 80021bc:	4081      	lsls	r1, r0
 80021be:	2200      	movs	r2, #0
 80021c0:	468b      	mov	fp, r1
 80021c2:	e666      	b.n	8001e92 <__aeabi_ddiv+0x14e>
 80021c4:	2200      	movs	r2, #0
 80021c6:	002e      	movs	r6, r5
 80021c8:	2400      	movs	r4, #0
 80021ca:	4690      	mov	r8, r2
 80021cc:	4b65      	ldr	r3, [pc, #404]	@ (8002364 <__aeabi_ddiv+0x620>)
 80021ce:	e625      	b.n	8001e1c <__aeabi_ddiv+0xd8>
 80021d0:	002e      	movs	r6, r5
 80021d2:	2101      	movs	r1, #1
 80021d4:	1ac9      	subs	r1, r1, r3
 80021d6:	2938      	cmp	r1, #56	@ 0x38
 80021d8:	dd00      	ble.n	80021dc <__aeabi_ddiv+0x498>
 80021da:	e61b      	b.n	8001e14 <__aeabi_ddiv+0xd0>
 80021dc:	291f      	cmp	r1, #31
 80021de:	dc7e      	bgt.n	80022de <__aeabi_ddiv+0x59a>
 80021e0:	4861      	ldr	r0, [pc, #388]	@ (8002368 <__aeabi_ddiv+0x624>)
 80021e2:	0014      	movs	r4, r2
 80021e4:	4450      	add	r0, sl
 80021e6:	465b      	mov	r3, fp
 80021e8:	4082      	lsls	r2, r0
 80021ea:	4083      	lsls	r3, r0
 80021ec:	40cc      	lsrs	r4, r1
 80021ee:	1e50      	subs	r0, r2, #1
 80021f0:	4182      	sbcs	r2, r0
 80021f2:	4323      	orrs	r3, r4
 80021f4:	431a      	orrs	r2, r3
 80021f6:	465b      	mov	r3, fp
 80021f8:	40cb      	lsrs	r3, r1
 80021fa:	0751      	lsls	r1, r2, #29
 80021fc:	d009      	beq.n	8002212 <__aeabi_ddiv+0x4ce>
 80021fe:	210f      	movs	r1, #15
 8002200:	4011      	ands	r1, r2
 8002202:	2904      	cmp	r1, #4
 8002204:	d005      	beq.n	8002212 <__aeabi_ddiv+0x4ce>
 8002206:	1d11      	adds	r1, r2, #4
 8002208:	4291      	cmp	r1, r2
 800220a:	4192      	sbcs	r2, r2
 800220c:	4252      	negs	r2, r2
 800220e:	189b      	adds	r3, r3, r2
 8002210:	000a      	movs	r2, r1
 8002212:	0219      	lsls	r1, r3, #8
 8002214:	d400      	bmi.n	8002218 <__aeabi_ddiv+0x4d4>
 8002216:	e09b      	b.n	8002350 <__aeabi_ddiv+0x60c>
 8002218:	2200      	movs	r2, #0
 800221a:	2301      	movs	r3, #1
 800221c:	2400      	movs	r4, #0
 800221e:	4690      	mov	r8, r2
 8002220:	e5fc      	b.n	8001e1c <__aeabi_ddiv+0xd8>
 8002222:	210f      	movs	r1, #15
 8002224:	4011      	ands	r1, r2
 8002226:	2904      	cmp	r1, #4
 8002228:	d100      	bne.n	800222c <__aeabi_ddiv+0x4e8>
 800222a:	e773      	b.n	8002114 <__aeabi_ddiv+0x3d0>
 800222c:	1d11      	adds	r1, r2, #4
 800222e:	4291      	cmp	r1, r2
 8002230:	4192      	sbcs	r2, r2
 8002232:	4252      	negs	r2, r2
 8002234:	002e      	movs	r6, r5
 8002236:	08c9      	lsrs	r1, r1, #3
 8002238:	4493      	add	fp, r2
 800223a:	e76d      	b.n	8002118 <__aeabi_ddiv+0x3d4>
 800223c:	9b00      	ldr	r3, [sp, #0]
 800223e:	3d01      	subs	r5, #1
 8002240:	469c      	mov	ip, r3
 8002242:	4461      	add	r1, ip
 8002244:	428b      	cmp	r3, r1
 8002246:	d900      	bls.n	800224a <__aeabi_ddiv+0x506>
 8002248:	e72c      	b.n	80020a4 <__aeabi_ddiv+0x360>
 800224a:	428a      	cmp	r2, r1
 800224c:	d800      	bhi.n	8002250 <__aeabi_ddiv+0x50c>
 800224e:	e729      	b.n	80020a4 <__aeabi_ddiv+0x360>
 8002250:	1e85      	subs	r5, r0, #2
 8002252:	4461      	add	r1, ip
 8002254:	e726      	b.n	80020a4 <__aeabi_ddiv+0x360>
 8002256:	9900      	ldr	r1, [sp, #0]
 8002258:	3b01      	subs	r3, #1
 800225a:	468c      	mov	ip, r1
 800225c:	4464      	add	r4, ip
 800225e:	42a1      	cmp	r1, r4
 8002260:	d900      	bls.n	8002264 <__aeabi_ddiv+0x520>
 8002262:	e72d      	b.n	80020c0 <__aeabi_ddiv+0x37c>
 8002264:	42a2      	cmp	r2, r4
 8002266:	d800      	bhi.n	800226a <__aeabi_ddiv+0x526>
 8002268:	e72a      	b.n	80020c0 <__aeabi_ddiv+0x37c>
 800226a:	1e83      	subs	r3, r0, #2
 800226c:	4464      	add	r4, ip
 800226e:	e727      	b.n	80020c0 <__aeabi_ddiv+0x37c>
 8002270:	4287      	cmp	r7, r0
 8002272:	d000      	beq.n	8002276 <__aeabi_ddiv+0x532>
 8002274:	e6fe      	b.n	8002074 <__aeabi_ddiv+0x330>
 8002276:	45a9      	cmp	r9, r5
 8002278:	d900      	bls.n	800227c <__aeabi_ddiv+0x538>
 800227a:	e6fb      	b.n	8002074 <__aeabi_ddiv+0x330>
 800227c:	e6f5      	b.n	800206a <__aeabi_ddiv+0x326>
 800227e:	42a2      	cmp	r2, r4
 8002280:	d800      	bhi.n	8002284 <__aeabi_ddiv+0x540>
 8002282:	e6b9      	b.n	8001ff8 <__aeabi_ddiv+0x2b4>
 8002284:	1e83      	subs	r3, r0, #2
 8002286:	4464      	add	r4, ip
 8002288:	e6b6      	b.n	8001ff8 <__aeabi_ddiv+0x2b4>
 800228a:	428a      	cmp	r2, r1
 800228c:	d800      	bhi.n	8002290 <__aeabi_ddiv+0x54c>
 800228e:	e69f      	b.n	8001fd0 <__aeabi_ddiv+0x28c>
 8002290:	46bc      	mov	ip, r7
 8002292:	1e83      	subs	r3, r0, #2
 8002294:	4698      	mov	r8, r3
 8002296:	4461      	add	r1, ip
 8002298:	e69a      	b.n	8001fd0 <__aeabi_ddiv+0x28c>
 800229a:	000a      	movs	r2, r1
 800229c:	4284      	cmp	r4, r0
 800229e:	d000      	beq.n	80022a2 <__aeabi_ddiv+0x55e>
 80022a0:	e72e      	b.n	8002100 <__aeabi_ddiv+0x3bc>
 80022a2:	454b      	cmp	r3, r9
 80022a4:	d000      	beq.n	80022a8 <__aeabi_ddiv+0x564>
 80022a6:	e72b      	b.n	8002100 <__aeabi_ddiv+0x3bc>
 80022a8:	0035      	movs	r5, r6
 80022aa:	e72c      	b.n	8002106 <__aeabi_ddiv+0x3c2>
 80022ac:	4b2a      	ldr	r3, [pc, #168]	@ (8002358 <__aeabi_ddiv+0x614>)
 80022ae:	4a2f      	ldr	r2, [pc, #188]	@ (800236c <__aeabi_ddiv+0x628>)
 80022b0:	4453      	add	r3, sl
 80022b2:	4592      	cmp	sl, r2
 80022b4:	db43      	blt.n	800233e <__aeabi_ddiv+0x5fa>
 80022b6:	2201      	movs	r2, #1
 80022b8:	2100      	movs	r1, #0
 80022ba:	4493      	add	fp, r2
 80022bc:	e72c      	b.n	8002118 <__aeabi_ddiv+0x3d4>
 80022be:	42ac      	cmp	r4, r5
 80022c0:	d800      	bhi.n	80022c4 <__aeabi_ddiv+0x580>
 80022c2:	e6d7      	b.n	8002074 <__aeabi_ddiv+0x330>
 80022c4:	2302      	movs	r3, #2
 80022c6:	425b      	negs	r3, r3
 80022c8:	469c      	mov	ip, r3
 80022ca:	9900      	ldr	r1, [sp, #0]
 80022cc:	444d      	add	r5, r9
 80022ce:	454d      	cmp	r5, r9
 80022d0:	419b      	sbcs	r3, r3
 80022d2:	44e3      	add	fp, ip
 80022d4:	468c      	mov	ip, r1
 80022d6:	425b      	negs	r3, r3
 80022d8:	4463      	add	r3, ip
 80022da:	18c0      	adds	r0, r0, r3
 80022dc:	e6cc      	b.n	8002078 <__aeabi_ddiv+0x334>
 80022de:	201f      	movs	r0, #31
 80022e0:	4240      	negs	r0, r0
 80022e2:	1ac3      	subs	r3, r0, r3
 80022e4:	4658      	mov	r0, fp
 80022e6:	40d8      	lsrs	r0, r3
 80022e8:	2920      	cmp	r1, #32
 80022ea:	d004      	beq.n	80022f6 <__aeabi_ddiv+0x5b2>
 80022ec:	4659      	mov	r1, fp
 80022ee:	4b20      	ldr	r3, [pc, #128]	@ (8002370 <__aeabi_ddiv+0x62c>)
 80022f0:	4453      	add	r3, sl
 80022f2:	4099      	lsls	r1, r3
 80022f4:	430a      	orrs	r2, r1
 80022f6:	1e53      	subs	r3, r2, #1
 80022f8:	419a      	sbcs	r2, r3
 80022fa:	2307      	movs	r3, #7
 80022fc:	0019      	movs	r1, r3
 80022fe:	4302      	orrs	r2, r0
 8002300:	2400      	movs	r4, #0
 8002302:	4011      	ands	r1, r2
 8002304:	4213      	tst	r3, r2
 8002306:	d009      	beq.n	800231c <__aeabi_ddiv+0x5d8>
 8002308:	3308      	adds	r3, #8
 800230a:	4013      	ands	r3, r2
 800230c:	2b04      	cmp	r3, #4
 800230e:	d01d      	beq.n	800234c <__aeabi_ddiv+0x608>
 8002310:	1d13      	adds	r3, r2, #4
 8002312:	4293      	cmp	r3, r2
 8002314:	4189      	sbcs	r1, r1
 8002316:	001a      	movs	r2, r3
 8002318:	4249      	negs	r1, r1
 800231a:	0749      	lsls	r1, r1, #29
 800231c:	08d2      	lsrs	r2, r2, #3
 800231e:	430a      	orrs	r2, r1
 8002320:	4690      	mov	r8, r2
 8002322:	2300      	movs	r3, #0
 8002324:	e57a      	b.n	8001e1c <__aeabi_ddiv+0xd8>
 8002326:	4649      	mov	r1, r9
 8002328:	9f00      	ldr	r7, [sp, #0]
 800232a:	004d      	lsls	r5, r1, #1
 800232c:	454d      	cmp	r5, r9
 800232e:	4189      	sbcs	r1, r1
 8002330:	46bc      	mov	ip, r7
 8002332:	4249      	negs	r1, r1
 8002334:	4461      	add	r1, ip
 8002336:	46a9      	mov	r9, r5
 8002338:	3a02      	subs	r2, #2
 800233a:	1864      	adds	r4, r4, r1
 800233c:	e7ae      	b.n	800229c <__aeabi_ddiv+0x558>
 800233e:	2201      	movs	r2, #1
 8002340:	4252      	negs	r2, r2
 8002342:	e746      	b.n	80021d2 <__aeabi_ddiv+0x48e>
 8002344:	4599      	cmp	r9, r3
 8002346:	d3ee      	bcc.n	8002326 <__aeabi_ddiv+0x5e2>
 8002348:	000a      	movs	r2, r1
 800234a:	e7aa      	b.n	80022a2 <__aeabi_ddiv+0x55e>
 800234c:	2100      	movs	r1, #0
 800234e:	e7e5      	b.n	800231c <__aeabi_ddiv+0x5d8>
 8002350:	0759      	lsls	r1, r3, #29
 8002352:	025b      	lsls	r3, r3, #9
 8002354:	0b1c      	lsrs	r4, r3, #12
 8002356:	e7e1      	b.n	800231c <__aeabi_ddiv+0x5d8>
 8002358:	000003ff 	.word	0x000003ff
 800235c:	feffffff 	.word	0xfeffffff
 8002360:	000007fe 	.word	0x000007fe
 8002364:	000007ff 	.word	0x000007ff
 8002368:	0000041e 	.word	0x0000041e
 800236c:	fffffc02 	.word	0xfffffc02
 8002370:	0000043e 	.word	0x0000043e

08002374 <__eqdf2>:
 8002374:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002376:	4657      	mov	r7, sl
 8002378:	46de      	mov	lr, fp
 800237a:	464e      	mov	r6, r9
 800237c:	4645      	mov	r5, r8
 800237e:	b5e0      	push	{r5, r6, r7, lr}
 8002380:	000d      	movs	r5, r1
 8002382:	0004      	movs	r4, r0
 8002384:	0fe8      	lsrs	r0, r5, #31
 8002386:	4683      	mov	fp, r0
 8002388:	0309      	lsls	r1, r1, #12
 800238a:	0fd8      	lsrs	r0, r3, #31
 800238c:	0b09      	lsrs	r1, r1, #12
 800238e:	4682      	mov	sl, r0
 8002390:	4819      	ldr	r0, [pc, #100]	@ (80023f8 <__eqdf2+0x84>)
 8002392:	468c      	mov	ip, r1
 8002394:	031f      	lsls	r7, r3, #12
 8002396:	0069      	lsls	r1, r5, #1
 8002398:	005e      	lsls	r6, r3, #1
 800239a:	0d49      	lsrs	r1, r1, #21
 800239c:	0b3f      	lsrs	r7, r7, #12
 800239e:	0d76      	lsrs	r6, r6, #21
 80023a0:	4281      	cmp	r1, r0
 80023a2:	d018      	beq.n	80023d6 <__eqdf2+0x62>
 80023a4:	4286      	cmp	r6, r0
 80023a6:	d00f      	beq.n	80023c8 <__eqdf2+0x54>
 80023a8:	2001      	movs	r0, #1
 80023aa:	42b1      	cmp	r1, r6
 80023ac:	d10d      	bne.n	80023ca <__eqdf2+0x56>
 80023ae:	45bc      	cmp	ip, r7
 80023b0:	d10b      	bne.n	80023ca <__eqdf2+0x56>
 80023b2:	4294      	cmp	r4, r2
 80023b4:	d109      	bne.n	80023ca <__eqdf2+0x56>
 80023b6:	45d3      	cmp	fp, sl
 80023b8:	d01c      	beq.n	80023f4 <__eqdf2+0x80>
 80023ba:	2900      	cmp	r1, #0
 80023bc:	d105      	bne.n	80023ca <__eqdf2+0x56>
 80023be:	4660      	mov	r0, ip
 80023c0:	4320      	orrs	r0, r4
 80023c2:	1e43      	subs	r3, r0, #1
 80023c4:	4198      	sbcs	r0, r3
 80023c6:	e000      	b.n	80023ca <__eqdf2+0x56>
 80023c8:	2001      	movs	r0, #1
 80023ca:	bcf0      	pop	{r4, r5, r6, r7}
 80023cc:	46bb      	mov	fp, r7
 80023ce:	46b2      	mov	sl, r6
 80023d0:	46a9      	mov	r9, r5
 80023d2:	46a0      	mov	r8, r4
 80023d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80023d6:	2001      	movs	r0, #1
 80023d8:	428e      	cmp	r6, r1
 80023da:	d1f6      	bne.n	80023ca <__eqdf2+0x56>
 80023dc:	4661      	mov	r1, ip
 80023de:	4339      	orrs	r1, r7
 80023e0:	000f      	movs	r7, r1
 80023e2:	4317      	orrs	r7, r2
 80023e4:	4327      	orrs	r7, r4
 80023e6:	d1f0      	bne.n	80023ca <__eqdf2+0x56>
 80023e8:	465b      	mov	r3, fp
 80023ea:	4652      	mov	r2, sl
 80023ec:	1a98      	subs	r0, r3, r2
 80023ee:	1e43      	subs	r3, r0, #1
 80023f0:	4198      	sbcs	r0, r3
 80023f2:	e7ea      	b.n	80023ca <__eqdf2+0x56>
 80023f4:	2000      	movs	r0, #0
 80023f6:	e7e8      	b.n	80023ca <__eqdf2+0x56>
 80023f8:	000007ff 	.word	0x000007ff

080023fc <__gedf2>:
 80023fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80023fe:	4657      	mov	r7, sl
 8002400:	464e      	mov	r6, r9
 8002402:	4645      	mov	r5, r8
 8002404:	46de      	mov	lr, fp
 8002406:	b5e0      	push	{r5, r6, r7, lr}
 8002408:	000d      	movs	r5, r1
 800240a:	030e      	lsls	r6, r1, #12
 800240c:	0049      	lsls	r1, r1, #1
 800240e:	0d49      	lsrs	r1, r1, #21
 8002410:	468a      	mov	sl, r1
 8002412:	0fdf      	lsrs	r7, r3, #31
 8002414:	0fe9      	lsrs	r1, r5, #31
 8002416:	46bc      	mov	ip, r7
 8002418:	b083      	sub	sp, #12
 800241a:	4f2f      	ldr	r7, [pc, #188]	@ (80024d8 <__gedf2+0xdc>)
 800241c:	0004      	movs	r4, r0
 800241e:	4680      	mov	r8, r0
 8002420:	9101      	str	r1, [sp, #4]
 8002422:	0058      	lsls	r0, r3, #1
 8002424:	0319      	lsls	r1, r3, #12
 8002426:	4691      	mov	r9, r2
 8002428:	0b36      	lsrs	r6, r6, #12
 800242a:	0b09      	lsrs	r1, r1, #12
 800242c:	0d40      	lsrs	r0, r0, #21
 800242e:	45ba      	cmp	sl, r7
 8002430:	d01d      	beq.n	800246e <__gedf2+0x72>
 8002432:	42b8      	cmp	r0, r7
 8002434:	d00d      	beq.n	8002452 <__gedf2+0x56>
 8002436:	4657      	mov	r7, sl
 8002438:	2f00      	cmp	r7, #0
 800243a:	d12a      	bne.n	8002492 <__gedf2+0x96>
 800243c:	4334      	orrs	r4, r6
 800243e:	2800      	cmp	r0, #0
 8002440:	d124      	bne.n	800248c <__gedf2+0x90>
 8002442:	430a      	orrs	r2, r1
 8002444:	d036      	beq.n	80024b4 <__gedf2+0xb8>
 8002446:	2c00      	cmp	r4, #0
 8002448:	d141      	bne.n	80024ce <__gedf2+0xd2>
 800244a:	4663      	mov	r3, ip
 800244c:	0058      	lsls	r0, r3, #1
 800244e:	3801      	subs	r0, #1
 8002450:	e015      	b.n	800247e <__gedf2+0x82>
 8002452:	4311      	orrs	r1, r2
 8002454:	d138      	bne.n	80024c8 <__gedf2+0xcc>
 8002456:	4653      	mov	r3, sl
 8002458:	2b00      	cmp	r3, #0
 800245a:	d101      	bne.n	8002460 <__gedf2+0x64>
 800245c:	4326      	orrs	r6, r4
 800245e:	d0f4      	beq.n	800244a <__gedf2+0x4e>
 8002460:	9b01      	ldr	r3, [sp, #4]
 8002462:	4563      	cmp	r3, ip
 8002464:	d107      	bne.n	8002476 <__gedf2+0x7a>
 8002466:	9b01      	ldr	r3, [sp, #4]
 8002468:	0058      	lsls	r0, r3, #1
 800246a:	3801      	subs	r0, #1
 800246c:	e007      	b.n	800247e <__gedf2+0x82>
 800246e:	4326      	orrs	r6, r4
 8002470:	d12a      	bne.n	80024c8 <__gedf2+0xcc>
 8002472:	4550      	cmp	r0, sl
 8002474:	d021      	beq.n	80024ba <__gedf2+0xbe>
 8002476:	2001      	movs	r0, #1
 8002478:	9b01      	ldr	r3, [sp, #4]
 800247a:	425f      	negs	r7, r3
 800247c:	4338      	orrs	r0, r7
 800247e:	b003      	add	sp, #12
 8002480:	bcf0      	pop	{r4, r5, r6, r7}
 8002482:	46bb      	mov	fp, r7
 8002484:	46b2      	mov	sl, r6
 8002486:	46a9      	mov	r9, r5
 8002488:	46a0      	mov	r8, r4
 800248a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800248c:	2c00      	cmp	r4, #0
 800248e:	d0dc      	beq.n	800244a <__gedf2+0x4e>
 8002490:	e7e6      	b.n	8002460 <__gedf2+0x64>
 8002492:	2800      	cmp	r0, #0
 8002494:	d0ef      	beq.n	8002476 <__gedf2+0x7a>
 8002496:	9b01      	ldr	r3, [sp, #4]
 8002498:	4563      	cmp	r3, ip
 800249a:	d1ec      	bne.n	8002476 <__gedf2+0x7a>
 800249c:	4582      	cmp	sl, r0
 800249e:	dcea      	bgt.n	8002476 <__gedf2+0x7a>
 80024a0:	dbe1      	blt.n	8002466 <__gedf2+0x6a>
 80024a2:	428e      	cmp	r6, r1
 80024a4:	d8e7      	bhi.n	8002476 <__gedf2+0x7a>
 80024a6:	d1de      	bne.n	8002466 <__gedf2+0x6a>
 80024a8:	45c8      	cmp	r8, r9
 80024aa:	d8e4      	bhi.n	8002476 <__gedf2+0x7a>
 80024ac:	2000      	movs	r0, #0
 80024ae:	45c8      	cmp	r8, r9
 80024b0:	d2e5      	bcs.n	800247e <__gedf2+0x82>
 80024b2:	e7d8      	b.n	8002466 <__gedf2+0x6a>
 80024b4:	2c00      	cmp	r4, #0
 80024b6:	d0e2      	beq.n	800247e <__gedf2+0x82>
 80024b8:	e7dd      	b.n	8002476 <__gedf2+0x7a>
 80024ba:	4311      	orrs	r1, r2
 80024bc:	d104      	bne.n	80024c8 <__gedf2+0xcc>
 80024be:	9b01      	ldr	r3, [sp, #4]
 80024c0:	4563      	cmp	r3, ip
 80024c2:	d1d8      	bne.n	8002476 <__gedf2+0x7a>
 80024c4:	2000      	movs	r0, #0
 80024c6:	e7da      	b.n	800247e <__gedf2+0x82>
 80024c8:	2002      	movs	r0, #2
 80024ca:	4240      	negs	r0, r0
 80024cc:	e7d7      	b.n	800247e <__gedf2+0x82>
 80024ce:	9b01      	ldr	r3, [sp, #4]
 80024d0:	4563      	cmp	r3, ip
 80024d2:	d0e6      	beq.n	80024a2 <__gedf2+0xa6>
 80024d4:	e7cf      	b.n	8002476 <__gedf2+0x7a>
 80024d6:	46c0      	nop			@ (mov r8, r8)
 80024d8:	000007ff 	.word	0x000007ff

080024dc <__ledf2>:
 80024dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80024de:	4657      	mov	r7, sl
 80024e0:	464e      	mov	r6, r9
 80024e2:	4645      	mov	r5, r8
 80024e4:	46de      	mov	lr, fp
 80024e6:	b5e0      	push	{r5, r6, r7, lr}
 80024e8:	000d      	movs	r5, r1
 80024ea:	030e      	lsls	r6, r1, #12
 80024ec:	0049      	lsls	r1, r1, #1
 80024ee:	0d49      	lsrs	r1, r1, #21
 80024f0:	468a      	mov	sl, r1
 80024f2:	0fdf      	lsrs	r7, r3, #31
 80024f4:	0fe9      	lsrs	r1, r5, #31
 80024f6:	46bc      	mov	ip, r7
 80024f8:	b083      	sub	sp, #12
 80024fa:	4f2e      	ldr	r7, [pc, #184]	@ (80025b4 <__ledf2+0xd8>)
 80024fc:	0004      	movs	r4, r0
 80024fe:	4680      	mov	r8, r0
 8002500:	9101      	str	r1, [sp, #4]
 8002502:	0058      	lsls	r0, r3, #1
 8002504:	0319      	lsls	r1, r3, #12
 8002506:	4691      	mov	r9, r2
 8002508:	0b36      	lsrs	r6, r6, #12
 800250a:	0b09      	lsrs	r1, r1, #12
 800250c:	0d40      	lsrs	r0, r0, #21
 800250e:	45ba      	cmp	sl, r7
 8002510:	d01e      	beq.n	8002550 <__ledf2+0x74>
 8002512:	42b8      	cmp	r0, r7
 8002514:	d00d      	beq.n	8002532 <__ledf2+0x56>
 8002516:	4657      	mov	r7, sl
 8002518:	2f00      	cmp	r7, #0
 800251a:	d127      	bne.n	800256c <__ledf2+0x90>
 800251c:	4334      	orrs	r4, r6
 800251e:	2800      	cmp	r0, #0
 8002520:	d133      	bne.n	800258a <__ledf2+0xae>
 8002522:	430a      	orrs	r2, r1
 8002524:	d034      	beq.n	8002590 <__ledf2+0xb4>
 8002526:	2c00      	cmp	r4, #0
 8002528:	d140      	bne.n	80025ac <__ledf2+0xd0>
 800252a:	4663      	mov	r3, ip
 800252c:	0058      	lsls	r0, r3, #1
 800252e:	3801      	subs	r0, #1
 8002530:	e015      	b.n	800255e <__ledf2+0x82>
 8002532:	4311      	orrs	r1, r2
 8002534:	d112      	bne.n	800255c <__ledf2+0x80>
 8002536:	4653      	mov	r3, sl
 8002538:	2b00      	cmp	r3, #0
 800253a:	d101      	bne.n	8002540 <__ledf2+0x64>
 800253c:	4326      	orrs	r6, r4
 800253e:	d0f4      	beq.n	800252a <__ledf2+0x4e>
 8002540:	9b01      	ldr	r3, [sp, #4]
 8002542:	4563      	cmp	r3, ip
 8002544:	d01d      	beq.n	8002582 <__ledf2+0xa6>
 8002546:	2001      	movs	r0, #1
 8002548:	9b01      	ldr	r3, [sp, #4]
 800254a:	425f      	negs	r7, r3
 800254c:	4338      	orrs	r0, r7
 800254e:	e006      	b.n	800255e <__ledf2+0x82>
 8002550:	4326      	orrs	r6, r4
 8002552:	d103      	bne.n	800255c <__ledf2+0x80>
 8002554:	4550      	cmp	r0, sl
 8002556:	d1f6      	bne.n	8002546 <__ledf2+0x6a>
 8002558:	4311      	orrs	r1, r2
 800255a:	d01c      	beq.n	8002596 <__ledf2+0xba>
 800255c:	2002      	movs	r0, #2
 800255e:	b003      	add	sp, #12
 8002560:	bcf0      	pop	{r4, r5, r6, r7}
 8002562:	46bb      	mov	fp, r7
 8002564:	46b2      	mov	sl, r6
 8002566:	46a9      	mov	r9, r5
 8002568:	46a0      	mov	r8, r4
 800256a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800256c:	2800      	cmp	r0, #0
 800256e:	d0ea      	beq.n	8002546 <__ledf2+0x6a>
 8002570:	9b01      	ldr	r3, [sp, #4]
 8002572:	4563      	cmp	r3, ip
 8002574:	d1e7      	bne.n	8002546 <__ledf2+0x6a>
 8002576:	4582      	cmp	sl, r0
 8002578:	dce5      	bgt.n	8002546 <__ledf2+0x6a>
 800257a:	db02      	blt.n	8002582 <__ledf2+0xa6>
 800257c:	428e      	cmp	r6, r1
 800257e:	d8e2      	bhi.n	8002546 <__ledf2+0x6a>
 8002580:	d00e      	beq.n	80025a0 <__ledf2+0xc4>
 8002582:	9b01      	ldr	r3, [sp, #4]
 8002584:	0058      	lsls	r0, r3, #1
 8002586:	3801      	subs	r0, #1
 8002588:	e7e9      	b.n	800255e <__ledf2+0x82>
 800258a:	2c00      	cmp	r4, #0
 800258c:	d0cd      	beq.n	800252a <__ledf2+0x4e>
 800258e:	e7d7      	b.n	8002540 <__ledf2+0x64>
 8002590:	2c00      	cmp	r4, #0
 8002592:	d0e4      	beq.n	800255e <__ledf2+0x82>
 8002594:	e7d7      	b.n	8002546 <__ledf2+0x6a>
 8002596:	9b01      	ldr	r3, [sp, #4]
 8002598:	2000      	movs	r0, #0
 800259a:	4563      	cmp	r3, ip
 800259c:	d0df      	beq.n	800255e <__ledf2+0x82>
 800259e:	e7d2      	b.n	8002546 <__ledf2+0x6a>
 80025a0:	45c8      	cmp	r8, r9
 80025a2:	d8d0      	bhi.n	8002546 <__ledf2+0x6a>
 80025a4:	2000      	movs	r0, #0
 80025a6:	45c8      	cmp	r8, r9
 80025a8:	d2d9      	bcs.n	800255e <__ledf2+0x82>
 80025aa:	e7ea      	b.n	8002582 <__ledf2+0xa6>
 80025ac:	9b01      	ldr	r3, [sp, #4]
 80025ae:	4563      	cmp	r3, ip
 80025b0:	d0e4      	beq.n	800257c <__ledf2+0xa0>
 80025b2:	e7c8      	b.n	8002546 <__ledf2+0x6a>
 80025b4:	000007ff 	.word	0x000007ff

080025b8 <__aeabi_dmul>:
 80025b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80025ba:	4657      	mov	r7, sl
 80025bc:	464e      	mov	r6, r9
 80025be:	46de      	mov	lr, fp
 80025c0:	4645      	mov	r5, r8
 80025c2:	b5e0      	push	{r5, r6, r7, lr}
 80025c4:	001f      	movs	r7, r3
 80025c6:	030b      	lsls	r3, r1, #12
 80025c8:	0b1b      	lsrs	r3, r3, #12
 80025ca:	0016      	movs	r6, r2
 80025cc:	469a      	mov	sl, r3
 80025ce:	0fca      	lsrs	r2, r1, #31
 80025d0:	004b      	lsls	r3, r1, #1
 80025d2:	0004      	movs	r4, r0
 80025d4:	4691      	mov	r9, r2
 80025d6:	b085      	sub	sp, #20
 80025d8:	0d5b      	lsrs	r3, r3, #21
 80025da:	d100      	bne.n	80025de <__aeabi_dmul+0x26>
 80025dc:	e1cf      	b.n	800297e <__aeabi_dmul+0x3c6>
 80025de:	4acd      	ldr	r2, [pc, #820]	@ (8002914 <__aeabi_dmul+0x35c>)
 80025e0:	4293      	cmp	r3, r2
 80025e2:	d055      	beq.n	8002690 <__aeabi_dmul+0xd8>
 80025e4:	4651      	mov	r1, sl
 80025e6:	0f42      	lsrs	r2, r0, #29
 80025e8:	00c9      	lsls	r1, r1, #3
 80025ea:	430a      	orrs	r2, r1
 80025ec:	2180      	movs	r1, #128	@ 0x80
 80025ee:	0409      	lsls	r1, r1, #16
 80025f0:	4311      	orrs	r1, r2
 80025f2:	00c2      	lsls	r2, r0, #3
 80025f4:	4690      	mov	r8, r2
 80025f6:	4ac8      	ldr	r2, [pc, #800]	@ (8002918 <__aeabi_dmul+0x360>)
 80025f8:	468a      	mov	sl, r1
 80025fa:	4693      	mov	fp, r2
 80025fc:	449b      	add	fp, r3
 80025fe:	2300      	movs	r3, #0
 8002600:	2500      	movs	r5, #0
 8002602:	9302      	str	r3, [sp, #8]
 8002604:	033c      	lsls	r4, r7, #12
 8002606:	007b      	lsls	r3, r7, #1
 8002608:	0ffa      	lsrs	r2, r7, #31
 800260a:	9601      	str	r6, [sp, #4]
 800260c:	0b24      	lsrs	r4, r4, #12
 800260e:	0d5b      	lsrs	r3, r3, #21
 8002610:	9200      	str	r2, [sp, #0]
 8002612:	d100      	bne.n	8002616 <__aeabi_dmul+0x5e>
 8002614:	e188      	b.n	8002928 <__aeabi_dmul+0x370>
 8002616:	4abf      	ldr	r2, [pc, #764]	@ (8002914 <__aeabi_dmul+0x35c>)
 8002618:	4293      	cmp	r3, r2
 800261a:	d100      	bne.n	800261e <__aeabi_dmul+0x66>
 800261c:	e092      	b.n	8002744 <__aeabi_dmul+0x18c>
 800261e:	4abe      	ldr	r2, [pc, #760]	@ (8002918 <__aeabi_dmul+0x360>)
 8002620:	4694      	mov	ip, r2
 8002622:	4463      	add	r3, ip
 8002624:	449b      	add	fp, r3
 8002626:	2d0a      	cmp	r5, #10
 8002628:	dc42      	bgt.n	80026b0 <__aeabi_dmul+0xf8>
 800262a:	00e4      	lsls	r4, r4, #3
 800262c:	0f73      	lsrs	r3, r6, #29
 800262e:	4323      	orrs	r3, r4
 8002630:	2480      	movs	r4, #128	@ 0x80
 8002632:	4649      	mov	r1, r9
 8002634:	0424      	lsls	r4, r4, #16
 8002636:	431c      	orrs	r4, r3
 8002638:	00f3      	lsls	r3, r6, #3
 800263a:	9301      	str	r3, [sp, #4]
 800263c:	9b00      	ldr	r3, [sp, #0]
 800263e:	2000      	movs	r0, #0
 8002640:	4059      	eors	r1, r3
 8002642:	b2cb      	uxtb	r3, r1
 8002644:	9303      	str	r3, [sp, #12]
 8002646:	2d02      	cmp	r5, #2
 8002648:	dc00      	bgt.n	800264c <__aeabi_dmul+0x94>
 800264a:	e094      	b.n	8002776 <__aeabi_dmul+0x1be>
 800264c:	2301      	movs	r3, #1
 800264e:	40ab      	lsls	r3, r5
 8002650:	001d      	movs	r5, r3
 8002652:	23a6      	movs	r3, #166	@ 0xa6
 8002654:	002a      	movs	r2, r5
 8002656:	00db      	lsls	r3, r3, #3
 8002658:	401a      	ands	r2, r3
 800265a:	421d      	tst	r5, r3
 800265c:	d000      	beq.n	8002660 <__aeabi_dmul+0xa8>
 800265e:	e229      	b.n	8002ab4 <__aeabi_dmul+0x4fc>
 8002660:	2390      	movs	r3, #144	@ 0x90
 8002662:	009b      	lsls	r3, r3, #2
 8002664:	421d      	tst	r5, r3
 8002666:	d100      	bne.n	800266a <__aeabi_dmul+0xb2>
 8002668:	e24d      	b.n	8002b06 <__aeabi_dmul+0x54e>
 800266a:	2300      	movs	r3, #0
 800266c:	2480      	movs	r4, #128	@ 0x80
 800266e:	4699      	mov	r9, r3
 8002670:	0324      	lsls	r4, r4, #12
 8002672:	4ba8      	ldr	r3, [pc, #672]	@ (8002914 <__aeabi_dmul+0x35c>)
 8002674:	0010      	movs	r0, r2
 8002676:	464a      	mov	r2, r9
 8002678:	051b      	lsls	r3, r3, #20
 800267a:	4323      	orrs	r3, r4
 800267c:	07d2      	lsls	r2, r2, #31
 800267e:	4313      	orrs	r3, r2
 8002680:	0019      	movs	r1, r3
 8002682:	b005      	add	sp, #20
 8002684:	bcf0      	pop	{r4, r5, r6, r7}
 8002686:	46bb      	mov	fp, r7
 8002688:	46b2      	mov	sl, r6
 800268a:	46a9      	mov	r9, r5
 800268c:	46a0      	mov	r8, r4
 800268e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002690:	4652      	mov	r2, sl
 8002692:	4302      	orrs	r2, r0
 8002694:	4690      	mov	r8, r2
 8002696:	d000      	beq.n	800269a <__aeabi_dmul+0xe2>
 8002698:	e1ac      	b.n	80029f4 <__aeabi_dmul+0x43c>
 800269a:	469b      	mov	fp, r3
 800269c:	2302      	movs	r3, #2
 800269e:	4692      	mov	sl, r2
 80026a0:	2508      	movs	r5, #8
 80026a2:	9302      	str	r3, [sp, #8]
 80026a4:	e7ae      	b.n	8002604 <__aeabi_dmul+0x4c>
 80026a6:	9b00      	ldr	r3, [sp, #0]
 80026a8:	46a2      	mov	sl, r4
 80026aa:	4699      	mov	r9, r3
 80026ac:	9b01      	ldr	r3, [sp, #4]
 80026ae:	4698      	mov	r8, r3
 80026b0:	9b02      	ldr	r3, [sp, #8]
 80026b2:	2b02      	cmp	r3, #2
 80026b4:	d100      	bne.n	80026b8 <__aeabi_dmul+0x100>
 80026b6:	e1ca      	b.n	8002a4e <__aeabi_dmul+0x496>
 80026b8:	2b03      	cmp	r3, #3
 80026ba:	d100      	bne.n	80026be <__aeabi_dmul+0x106>
 80026bc:	e192      	b.n	80029e4 <__aeabi_dmul+0x42c>
 80026be:	2b01      	cmp	r3, #1
 80026c0:	d110      	bne.n	80026e4 <__aeabi_dmul+0x12c>
 80026c2:	2300      	movs	r3, #0
 80026c4:	2400      	movs	r4, #0
 80026c6:	2200      	movs	r2, #0
 80026c8:	e7d4      	b.n	8002674 <__aeabi_dmul+0xbc>
 80026ca:	2201      	movs	r2, #1
 80026cc:	087b      	lsrs	r3, r7, #1
 80026ce:	403a      	ands	r2, r7
 80026d0:	4313      	orrs	r3, r2
 80026d2:	4652      	mov	r2, sl
 80026d4:	07d2      	lsls	r2, r2, #31
 80026d6:	4313      	orrs	r3, r2
 80026d8:	4698      	mov	r8, r3
 80026da:	4653      	mov	r3, sl
 80026dc:	085b      	lsrs	r3, r3, #1
 80026de:	469a      	mov	sl, r3
 80026e0:	9b03      	ldr	r3, [sp, #12]
 80026e2:	4699      	mov	r9, r3
 80026e4:	465b      	mov	r3, fp
 80026e6:	1c58      	adds	r0, r3, #1
 80026e8:	2380      	movs	r3, #128	@ 0x80
 80026ea:	00db      	lsls	r3, r3, #3
 80026ec:	445b      	add	r3, fp
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	dc00      	bgt.n	80026f4 <__aeabi_dmul+0x13c>
 80026f2:	e1b1      	b.n	8002a58 <__aeabi_dmul+0x4a0>
 80026f4:	4642      	mov	r2, r8
 80026f6:	0752      	lsls	r2, r2, #29
 80026f8:	d00b      	beq.n	8002712 <__aeabi_dmul+0x15a>
 80026fa:	220f      	movs	r2, #15
 80026fc:	4641      	mov	r1, r8
 80026fe:	400a      	ands	r2, r1
 8002700:	2a04      	cmp	r2, #4
 8002702:	d006      	beq.n	8002712 <__aeabi_dmul+0x15a>
 8002704:	4642      	mov	r2, r8
 8002706:	1d11      	adds	r1, r2, #4
 8002708:	4541      	cmp	r1, r8
 800270a:	4192      	sbcs	r2, r2
 800270c:	4688      	mov	r8, r1
 800270e:	4252      	negs	r2, r2
 8002710:	4492      	add	sl, r2
 8002712:	4652      	mov	r2, sl
 8002714:	01d2      	lsls	r2, r2, #7
 8002716:	d506      	bpl.n	8002726 <__aeabi_dmul+0x16e>
 8002718:	4652      	mov	r2, sl
 800271a:	4b80      	ldr	r3, [pc, #512]	@ (800291c <__aeabi_dmul+0x364>)
 800271c:	401a      	ands	r2, r3
 800271e:	2380      	movs	r3, #128	@ 0x80
 8002720:	4692      	mov	sl, r2
 8002722:	00db      	lsls	r3, r3, #3
 8002724:	18c3      	adds	r3, r0, r3
 8002726:	4a7e      	ldr	r2, [pc, #504]	@ (8002920 <__aeabi_dmul+0x368>)
 8002728:	4293      	cmp	r3, r2
 800272a:	dd00      	ble.n	800272e <__aeabi_dmul+0x176>
 800272c:	e18f      	b.n	8002a4e <__aeabi_dmul+0x496>
 800272e:	4642      	mov	r2, r8
 8002730:	08d1      	lsrs	r1, r2, #3
 8002732:	4652      	mov	r2, sl
 8002734:	0752      	lsls	r2, r2, #29
 8002736:	430a      	orrs	r2, r1
 8002738:	4651      	mov	r1, sl
 800273a:	055b      	lsls	r3, r3, #21
 800273c:	024c      	lsls	r4, r1, #9
 800273e:	0b24      	lsrs	r4, r4, #12
 8002740:	0d5b      	lsrs	r3, r3, #21
 8002742:	e797      	b.n	8002674 <__aeabi_dmul+0xbc>
 8002744:	4b73      	ldr	r3, [pc, #460]	@ (8002914 <__aeabi_dmul+0x35c>)
 8002746:	4326      	orrs	r6, r4
 8002748:	469c      	mov	ip, r3
 800274a:	44e3      	add	fp, ip
 800274c:	2e00      	cmp	r6, #0
 800274e:	d100      	bne.n	8002752 <__aeabi_dmul+0x19a>
 8002750:	e16f      	b.n	8002a32 <__aeabi_dmul+0x47a>
 8002752:	2303      	movs	r3, #3
 8002754:	4649      	mov	r1, r9
 8002756:	431d      	orrs	r5, r3
 8002758:	9b00      	ldr	r3, [sp, #0]
 800275a:	4059      	eors	r1, r3
 800275c:	b2cb      	uxtb	r3, r1
 800275e:	9303      	str	r3, [sp, #12]
 8002760:	2d0a      	cmp	r5, #10
 8002762:	dd00      	ble.n	8002766 <__aeabi_dmul+0x1ae>
 8002764:	e133      	b.n	80029ce <__aeabi_dmul+0x416>
 8002766:	2301      	movs	r3, #1
 8002768:	40ab      	lsls	r3, r5
 800276a:	001d      	movs	r5, r3
 800276c:	2303      	movs	r3, #3
 800276e:	9302      	str	r3, [sp, #8]
 8002770:	2288      	movs	r2, #136	@ 0x88
 8002772:	422a      	tst	r2, r5
 8002774:	d197      	bne.n	80026a6 <__aeabi_dmul+0xee>
 8002776:	4642      	mov	r2, r8
 8002778:	4643      	mov	r3, r8
 800277a:	0412      	lsls	r2, r2, #16
 800277c:	0c12      	lsrs	r2, r2, #16
 800277e:	0016      	movs	r6, r2
 8002780:	9801      	ldr	r0, [sp, #4]
 8002782:	0c1d      	lsrs	r5, r3, #16
 8002784:	0c03      	lsrs	r3, r0, #16
 8002786:	0400      	lsls	r0, r0, #16
 8002788:	0c00      	lsrs	r0, r0, #16
 800278a:	4346      	muls	r6, r0
 800278c:	46b4      	mov	ip, r6
 800278e:	001e      	movs	r6, r3
 8002790:	436e      	muls	r6, r5
 8002792:	9600      	str	r6, [sp, #0]
 8002794:	0016      	movs	r6, r2
 8002796:	0007      	movs	r7, r0
 8002798:	435e      	muls	r6, r3
 800279a:	4661      	mov	r1, ip
 800279c:	46b0      	mov	r8, r6
 800279e:	436f      	muls	r7, r5
 80027a0:	0c0e      	lsrs	r6, r1, #16
 80027a2:	44b8      	add	r8, r7
 80027a4:	4446      	add	r6, r8
 80027a6:	42b7      	cmp	r7, r6
 80027a8:	d905      	bls.n	80027b6 <__aeabi_dmul+0x1fe>
 80027aa:	2180      	movs	r1, #128	@ 0x80
 80027ac:	0249      	lsls	r1, r1, #9
 80027ae:	4688      	mov	r8, r1
 80027b0:	9f00      	ldr	r7, [sp, #0]
 80027b2:	4447      	add	r7, r8
 80027b4:	9700      	str	r7, [sp, #0]
 80027b6:	4661      	mov	r1, ip
 80027b8:	0409      	lsls	r1, r1, #16
 80027ba:	0c09      	lsrs	r1, r1, #16
 80027bc:	0c37      	lsrs	r7, r6, #16
 80027be:	0436      	lsls	r6, r6, #16
 80027c0:	468c      	mov	ip, r1
 80027c2:	0031      	movs	r1, r6
 80027c4:	4461      	add	r1, ip
 80027c6:	9101      	str	r1, [sp, #4]
 80027c8:	0011      	movs	r1, r2
 80027ca:	0c26      	lsrs	r6, r4, #16
 80027cc:	0424      	lsls	r4, r4, #16
 80027ce:	0c24      	lsrs	r4, r4, #16
 80027d0:	4361      	muls	r1, r4
 80027d2:	468c      	mov	ip, r1
 80027d4:	0021      	movs	r1, r4
 80027d6:	4369      	muls	r1, r5
 80027d8:	4689      	mov	r9, r1
 80027da:	4661      	mov	r1, ip
 80027dc:	0c09      	lsrs	r1, r1, #16
 80027de:	4688      	mov	r8, r1
 80027e0:	4372      	muls	r2, r6
 80027e2:	444a      	add	r2, r9
 80027e4:	4442      	add	r2, r8
 80027e6:	4375      	muls	r5, r6
 80027e8:	4591      	cmp	r9, r2
 80027ea:	d903      	bls.n	80027f4 <__aeabi_dmul+0x23c>
 80027ec:	2180      	movs	r1, #128	@ 0x80
 80027ee:	0249      	lsls	r1, r1, #9
 80027f0:	4688      	mov	r8, r1
 80027f2:	4445      	add	r5, r8
 80027f4:	0c11      	lsrs	r1, r2, #16
 80027f6:	4688      	mov	r8, r1
 80027f8:	4661      	mov	r1, ip
 80027fa:	0409      	lsls	r1, r1, #16
 80027fc:	0c09      	lsrs	r1, r1, #16
 80027fe:	468c      	mov	ip, r1
 8002800:	0412      	lsls	r2, r2, #16
 8002802:	4462      	add	r2, ip
 8002804:	18b9      	adds	r1, r7, r2
 8002806:	9102      	str	r1, [sp, #8]
 8002808:	4651      	mov	r1, sl
 800280a:	0c09      	lsrs	r1, r1, #16
 800280c:	468c      	mov	ip, r1
 800280e:	4651      	mov	r1, sl
 8002810:	040f      	lsls	r7, r1, #16
 8002812:	0c3f      	lsrs	r7, r7, #16
 8002814:	0039      	movs	r1, r7
 8002816:	4341      	muls	r1, r0
 8002818:	4445      	add	r5, r8
 800281a:	4688      	mov	r8, r1
 800281c:	4661      	mov	r1, ip
 800281e:	4341      	muls	r1, r0
 8002820:	468a      	mov	sl, r1
 8002822:	4641      	mov	r1, r8
 8002824:	4660      	mov	r0, ip
 8002826:	0c09      	lsrs	r1, r1, #16
 8002828:	4689      	mov	r9, r1
 800282a:	4358      	muls	r0, r3
 800282c:	437b      	muls	r3, r7
 800282e:	4453      	add	r3, sl
 8002830:	444b      	add	r3, r9
 8002832:	459a      	cmp	sl, r3
 8002834:	d903      	bls.n	800283e <__aeabi_dmul+0x286>
 8002836:	2180      	movs	r1, #128	@ 0x80
 8002838:	0249      	lsls	r1, r1, #9
 800283a:	4689      	mov	r9, r1
 800283c:	4448      	add	r0, r9
 800283e:	0c19      	lsrs	r1, r3, #16
 8002840:	4689      	mov	r9, r1
 8002842:	4641      	mov	r1, r8
 8002844:	0409      	lsls	r1, r1, #16
 8002846:	0c09      	lsrs	r1, r1, #16
 8002848:	4688      	mov	r8, r1
 800284a:	0039      	movs	r1, r7
 800284c:	4361      	muls	r1, r4
 800284e:	041b      	lsls	r3, r3, #16
 8002850:	4443      	add	r3, r8
 8002852:	4688      	mov	r8, r1
 8002854:	4661      	mov	r1, ip
 8002856:	434c      	muls	r4, r1
 8002858:	4371      	muls	r1, r6
 800285a:	468c      	mov	ip, r1
 800285c:	4641      	mov	r1, r8
 800285e:	4377      	muls	r7, r6
 8002860:	0c0e      	lsrs	r6, r1, #16
 8002862:	193f      	adds	r7, r7, r4
 8002864:	19f6      	adds	r6, r6, r7
 8002866:	4448      	add	r0, r9
 8002868:	42b4      	cmp	r4, r6
 800286a:	d903      	bls.n	8002874 <__aeabi_dmul+0x2bc>
 800286c:	2180      	movs	r1, #128	@ 0x80
 800286e:	0249      	lsls	r1, r1, #9
 8002870:	4689      	mov	r9, r1
 8002872:	44cc      	add	ip, r9
 8002874:	9902      	ldr	r1, [sp, #8]
 8002876:	9f00      	ldr	r7, [sp, #0]
 8002878:	4689      	mov	r9, r1
 800287a:	0431      	lsls	r1, r6, #16
 800287c:	444f      	add	r7, r9
 800287e:	4689      	mov	r9, r1
 8002880:	4641      	mov	r1, r8
 8002882:	4297      	cmp	r7, r2
 8002884:	4192      	sbcs	r2, r2
 8002886:	040c      	lsls	r4, r1, #16
 8002888:	0c24      	lsrs	r4, r4, #16
 800288a:	444c      	add	r4, r9
 800288c:	18ff      	adds	r7, r7, r3
 800288e:	4252      	negs	r2, r2
 8002890:	1964      	adds	r4, r4, r5
 8002892:	18a1      	adds	r1, r4, r2
 8002894:	429f      	cmp	r7, r3
 8002896:	419b      	sbcs	r3, r3
 8002898:	4688      	mov	r8, r1
 800289a:	4682      	mov	sl, r0
 800289c:	425b      	negs	r3, r3
 800289e:	4699      	mov	r9, r3
 80028a0:	4590      	cmp	r8, r2
 80028a2:	4192      	sbcs	r2, r2
 80028a4:	42ac      	cmp	r4, r5
 80028a6:	41a4      	sbcs	r4, r4
 80028a8:	44c2      	add	sl, r8
 80028aa:	44d1      	add	r9, sl
 80028ac:	4252      	negs	r2, r2
 80028ae:	4264      	negs	r4, r4
 80028b0:	4314      	orrs	r4, r2
 80028b2:	4599      	cmp	r9, r3
 80028b4:	419b      	sbcs	r3, r3
 80028b6:	4582      	cmp	sl, r0
 80028b8:	4192      	sbcs	r2, r2
 80028ba:	425b      	negs	r3, r3
 80028bc:	4252      	negs	r2, r2
 80028be:	4313      	orrs	r3, r2
 80028c0:	464a      	mov	r2, r9
 80028c2:	0c36      	lsrs	r6, r6, #16
 80028c4:	19a4      	adds	r4, r4, r6
 80028c6:	18e3      	adds	r3, r4, r3
 80028c8:	4463      	add	r3, ip
 80028ca:	025b      	lsls	r3, r3, #9
 80028cc:	0dd2      	lsrs	r2, r2, #23
 80028ce:	431a      	orrs	r2, r3
 80028d0:	9901      	ldr	r1, [sp, #4]
 80028d2:	4692      	mov	sl, r2
 80028d4:	027a      	lsls	r2, r7, #9
 80028d6:	430a      	orrs	r2, r1
 80028d8:	1e50      	subs	r0, r2, #1
 80028da:	4182      	sbcs	r2, r0
 80028dc:	0dff      	lsrs	r7, r7, #23
 80028de:	4317      	orrs	r7, r2
 80028e0:	464a      	mov	r2, r9
 80028e2:	0252      	lsls	r2, r2, #9
 80028e4:	4317      	orrs	r7, r2
 80028e6:	46b8      	mov	r8, r7
 80028e8:	01db      	lsls	r3, r3, #7
 80028ea:	d500      	bpl.n	80028ee <__aeabi_dmul+0x336>
 80028ec:	e6ed      	b.n	80026ca <__aeabi_dmul+0x112>
 80028ee:	4b0d      	ldr	r3, [pc, #52]	@ (8002924 <__aeabi_dmul+0x36c>)
 80028f0:	9a03      	ldr	r2, [sp, #12]
 80028f2:	445b      	add	r3, fp
 80028f4:	4691      	mov	r9, r2
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	dc00      	bgt.n	80028fc <__aeabi_dmul+0x344>
 80028fa:	e0ac      	b.n	8002a56 <__aeabi_dmul+0x49e>
 80028fc:	003a      	movs	r2, r7
 80028fe:	0752      	lsls	r2, r2, #29
 8002900:	d100      	bne.n	8002904 <__aeabi_dmul+0x34c>
 8002902:	e710      	b.n	8002726 <__aeabi_dmul+0x16e>
 8002904:	220f      	movs	r2, #15
 8002906:	4658      	mov	r0, fp
 8002908:	403a      	ands	r2, r7
 800290a:	2a04      	cmp	r2, #4
 800290c:	d000      	beq.n	8002910 <__aeabi_dmul+0x358>
 800290e:	e6f9      	b.n	8002704 <__aeabi_dmul+0x14c>
 8002910:	e709      	b.n	8002726 <__aeabi_dmul+0x16e>
 8002912:	46c0      	nop			@ (mov r8, r8)
 8002914:	000007ff 	.word	0x000007ff
 8002918:	fffffc01 	.word	0xfffffc01
 800291c:	feffffff 	.word	0xfeffffff
 8002920:	000007fe 	.word	0x000007fe
 8002924:	000003ff 	.word	0x000003ff
 8002928:	0022      	movs	r2, r4
 800292a:	4332      	orrs	r2, r6
 800292c:	d06f      	beq.n	8002a0e <__aeabi_dmul+0x456>
 800292e:	2c00      	cmp	r4, #0
 8002930:	d100      	bne.n	8002934 <__aeabi_dmul+0x37c>
 8002932:	e0c2      	b.n	8002aba <__aeabi_dmul+0x502>
 8002934:	0020      	movs	r0, r4
 8002936:	f000 fe61 	bl	80035fc <__clzsi2>
 800293a:	0002      	movs	r2, r0
 800293c:	0003      	movs	r3, r0
 800293e:	3a0b      	subs	r2, #11
 8002940:	201d      	movs	r0, #29
 8002942:	1a82      	subs	r2, r0, r2
 8002944:	0030      	movs	r0, r6
 8002946:	0019      	movs	r1, r3
 8002948:	40d0      	lsrs	r0, r2
 800294a:	3908      	subs	r1, #8
 800294c:	408c      	lsls	r4, r1
 800294e:	0002      	movs	r2, r0
 8002950:	4322      	orrs	r2, r4
 8002952:	0034      	movs	r4, r6
 8002954:	408c      	lsls	r4, r1
 8002956:	4659      	mov	r1, fp
 8002958:	1acb      	subs	r3, r1, r3
 800295a:	4986      	ldr	r1, [pc, #536]	@ (8002b74 <__aeabi_dmul+0x5bc>)
 800295c:	468b      	mov	fp, r1
 800295e:	449b      	add	fp, r3
 8002960:	2d0a      	cmp	r5, #10
 8002962:	dd00      	ble.n	8002966 <__aeabi_dmul+0x3ae>
 8002964:	e6a4      	b.n	80026b0 <__aeabi_dmul+0xf8>
 8002966:	4649      	mov	r1, r9
 8002968:	9b00      	ldr	r3, [sp, #0]
 800296a:	9401      	str	r4, [sp, #4]
 800296c:	4059      	eors	r1, r3
 800296e:	b2cb      	uxtb	r3, r1
 8002970:	0014      	movs	r4, r2
 8002972:	2000      	movs	r0, #0
 8002974:	9303      	str	r3, [sp, #12]
 8002976:	2d02      	cmp	r5, #2
 8002978:	dd00      	ble.n	800297c <__aeabi_dmul+0x3c4>
 800297a:	e667      	b.n	800264c <__aeabi_dmul+0x94>
 800297c:	e6fb      	b.n	8002776 <__aeabi_dmul+0x1be>
 800297e:	4653      	mov	r3, sl
 8002980:	4303      	orrs	r3, r0
 8002982:	4698      	mov	r8, r3
 8002984:	d03c      	beq.n	8002a00 <__aeabi_dmul+0x448>
 8002986:	4653      	mov	r3, sl
 8002988:	2b00      	cmp	r3, #0
 800298a:	d100      	bne.n	800298e <__aeabi_dmul+0x3d6>
 800298c:	e0a3      	b.n	8002ad6 <__aeabi_dmul+0x51e>
 800298e:	4650      	mov	r0, sl
 8002990:	f000 fe34 	bl	80035fc <__clzsi2>
 8002994:	230b      	movs	r3, #11
 8002996:	425b      	negs	r3, r3
 8002998:	469c      	mov	ip, r3
 800299a:	0002      	movs	r2, r0
 800299c:	4484      	add	ip, r0
 800299e:	0011      	movs	r1, r2
 80029a0:	4650      	mov	r0, sl
 80029a2:	3908      	subs	r1, #8
 80029a4:	4088      	lsls	r0, r1
 80029a6:	231d      	movs	r3, #29
 80029a8:	4680      	mov	r8, r0
 80029aa:	4660      	mov	r0, ip
 80029ac:	1a1b      	subs	r3, r3, r0
 80029ae:	0020      	movs	r0, r4
 80029b0:	40d8      	lsrs	r0, r3
 80029b2:	0003      	movs	r3, r0
 80029b4:	4640      	mov	r0, r8
 80029b6:	4303      	orrs	r3, r0
 80029b8:	469a      	mov	sl, r3
 80029ba:	0023      	movs	r3, r4
 80029bc:	408b      	lsls	r3, r1
 80029be:	4698      	mov	r8, r3
 80029c0:	4b6c      	ldr	r3, [pc, #432]	@ (8002b74 <__aeabi_dmul+0x5bc>)
 80029c2:	2500      	movs	r5, #0
 80029c4:	1a9b      	subs	r3, r3, r2
 80029c6:	469b      	mov	fp, r3
 80029c8:	2300      	movs	r3, #0
 80029ca:	9302      	str	r3, [sp, #8]
 80029cc:	e61a      	b.n	8002604 <__aeabi_dmul+0x4c>
 80029ce:	2d0f      	cmp	r5, #15
 80029d0:	d000      	beq.n	80029d4 <__aeabi_dmul+0x41c>
 80029d2:	e0c9      	b.n	8002b68 <__aeabi_dmul+0x5b0>
 80029d4:	2380      	movs	r3, #128	@ 0x80
 80029d6:	4652      	mov	r2, sl
 80029d8:	031b      	lsls	r3, r3, #12
 80029da:	421a      	tst	r2, r3
 80029dc:	d002      	beq.n	80029e4 <__aeabi_dmul+0x42c>
 80029de:	421c      	tst	r4, r3
 80029e0:	d100      	bne.n	80029e4 <__aeabi_dmul+0x42c>
 80029e2:	e092      	b.n	8002b0a <__aeabi_dmul+0x552>
 80029e4:	2480      	movs	r4, #128	@ 0x80
 80029e6:	4653      	mov	r3, sl
 80029e8:	0324      	lsls	r4, r4, #12
 80029ea:	431c      	orrs	r4, r3
 80029ec:	0324      	lsls	r4, r4, #12
 80029ee:	4642      	mov	r2, r8
 80029f0:	0b24      	lsrs	r4, r4, #12
 80029f2:	e63e      	b.n	8002672 <__aeabi_dmul+0xba>
 80029f4:	469b      	mov	fp, r3
 80029f6:	2303      	movs	r3, #3
 80029f8:	4680      	mov	r8, r0
 80029fa:	250c      	movs	r5, #12
 80029fc:	9302      	str	r3, [sp, #8]
 80029fe:	e601      	b.n	8002604 <__aeabi_dmul+0x4c>
 8002a00:	2300      	movs	r3, #0
 8002a02:	469a      	mov	sl, r3
 8002a04:	469b      	mov	fp, r3
 8002a06:	3301      	adds	r3, #1
 8002a08:	2504      	movs	r5, #4
 8002a0a:	9302      	str	r3, [sp, #8]
 8002a0c:	e5fa      	b.n	8002604 <__aeabi_dmul+0x4c>
 8002a0e:	2101      	movs	r1, #1
 8002a10:	430d      	orrs	r5, r1
 8002a12:	2d0a      	cmp	r5, #10
 8002a14:	dd00      	ble.n	8002a18 <__aeabi_dmul+0x460>
 8002a16:	e64b      	b.n	80026b0 <__aeabi_dmul+0xf8>
 8002a18:	4649      	mov	r1, r9
 8002a1a:	9800      	ldr	r0, [sp, #0]
 8002a1c:	4041      	eors	r1, r0
 8002a1e:	b2c9      	uxtb	r1, r1
 8002a20:	9103      	str	r1, [sp, #12]
 8002a22:	2d02      	cmp	r5, #2
 8002a24:	dc00      	bgt.n	8002a28 <__aeabi_dmul+0x470>
 8002a26:	e096      	b.n	8002b56 <__aeabi_dmul+0x59e>
 8002a28:	2300      	movs	r3, #0
 8002a2a:	2400      	movs	r4, #0
 8002a2c:	2001      	movs	r0, #1
 8002a2e:	9301      	str	r3, [sp, #4]
 8002a30:	e60c      	b.n	800264c <__aeabi_dmul+0x94>
 8002a32:	4649      	mov	r1, r9
 8002a34:	2302      	movs	r3, #2
 8002a36:	9a00      	ldr	r2, [sp, #0]
 8002a38:	432b      	orrs	r3, r5
 8002a3a:	4051      	eors	r1, r2
 8002a3c:	b2ca      	uxtb	r2, r1
 8002a3e:	9203      	str	r2, [sp, #12]
 8002a40:	2b0a      	cmp	r3, #10
 8002a42:	dd00      	ble.n	8002a46 <__aeabi_dmul+0x48e>
 8002a44:	e634      	b.n	80026b0 <__aeabi_dmul+0xf8>
 8002a46:	2d00      	cmp	r5, #0
 8002a48:	d157      	bne.n	8002afa <__aeabi_dmul+0x542>
 8002a4a:	9b03      	ldr	r3, [sp, #12]
 8002a4c:	4699      	mov	r9, r3
 8002a4e:	2400      	movs	r4, #0
 8002a50:	2200      	movs	r2, #0
 8002a52:	4b49      	ldr	r3, [pc, #292]	@ (8002b78 <__aeabi_dmul+0x5c0>)
 8002a54:	e60e      	b.n	8002674 <__aeabi_dmul+0xbc>
 8002a56:	4658      	mov	r0, fp
 8002a58:	2101      	movs	r1, #1
 8002a5a:	1ac9      	subs	r1, r1, r3
 8002a5c:	2938      	cmp	r1, #56	@ 0x38
 8002a5e:	dd00      	ble.n	8002a62 <__aeabi_dmul+0x4aa>
 8002a60:	e62f      	b.n	80026c2 <__aeabi_dmul+0x10a>
 8002a62:	291f      	cmp	r1, #31
 8002a64:	dd56      	ble.n	8002b14 <__aeabi_dmul+0x55c>
 8002a66:	221f      	movs	r2, #31
 8002a68:	4654      	mov	r4, sl
 8002a6a:	4252      	negs	r2, r2
 8002a6c:	1ad3      	subs	r3, r2, r3
 8002a6e:	40dc      	lsrs	r4, r3
 8002a70:	2920      	cmp	r1, #32
 8002a72:	d007      	beq.n	8002a84 <__aeabi_dmul+0x4cc>
 8002a74:	4b41      	ldr	r3, [pc, #260]	@ (8002b7c <__aeabi_dmul+0x5c4>)
 8002a76:	4642      	mov	r2, r8
 8002a78:	469c      	mov	ip, r3
 8002a7a:	4653      	mov	r3, sl
 8002a7c:	4460      	add	r0, ip
 8002a7e:	4083      	lsls	r3, r0
 8002a80:	431a      	orrs	r2, r3
 8002a82:	4690      	mov	r8, r2
 8002a84:	4642      	mov	r2, r8
 8002a86:	2107      	movs	r1, #7
 8002a88:	1e53      	subs	r3, r2, #1
 8002a8a:	419a      	sbcs	r2, r3
 8002a8c:	000b      	movs	r3, r1
 8002a8e:	4322      	orrs	r2, r4
 8002a90:	4013      	ands	r3, r2
 8002a92:	2400      	movs	r4, #0
 8002a94:	4211      	tst	r1, r2
 8002a96:	d009      	beq.n	8002aac <__aeabi_dmul+0x4f4>
 8002a98:	230f      	movs	r3, #15
 8002a9a:	4013      	ands	r3, r2
 8002a9c:	2b04      	cmp	r3, #4
 8002a9e:	d05d      	beq.n	8002b5c <__aeabi_dmul+0x5a4>
 8002aa0:	1d11      	adds	r1, r2, #4
 8002aa2:	4291      	cmp	r1, r2
 8002aa4:	419b      	sbcs	r3, r3
 8002aa6:	000a      	movs	r2, r1
 8002aa8:	425b      	negs	r3, r3
 8002aaa:	075b      	lsls	r3, r3, #29
 8002aac:	08d2      	lsrs	r2, r2, #3
 8002aae:	431a      	orrs	r2, r3
 8002ab0:	2300      	movs	r3, #0
 8002ab2:	e5df      	b.n	8002674 <__aeabi_dmul+0xbc>
 8002ab4:	9b03      	ldr	r3, [sp, #12]
 8002ab6:	4699      	mov	r9, r3
 8002ab8:	e5fa      	b.n	80026b0 <__aeabi_dmul+0xf8>
 8002aba:	9801      	ldr	r0, [sp, #4]
 8002abc:	f000 fd9e 	bl	80035fc <__clzsi2>
 8002ac0:	0002      	movs	r2, r0
 8002ac2:	0003      	movs	r3, r0
 8002ac4:	3215      	adds	r2, #21
 8002ac6:	3320      	adds	r3, #32
 8002ac8:	2a1c      	cmp	r2, #28
 8002aca:	dc00      	bgt.n	8002ace <__aeabi_dmul+0x516>
 8002acc:	e738      	b.n	8002940 <__aeabi_dmul+0x388>
 8002ace:	9a01      	ldr	r2, [sp, #4]
 8002ad0:	3808      	subs	r0, #8
 8002ad2:	4082      	lsls	r2, r0
 8002ad4:	e73f      	b.n	8002956 <__aeabi_dmul+0x39e>
 8002ad6:	f000 fd91 	bl	80035fc <__clzsi2>
 8002ada:	2315      	movs	r3, #21
 8002adc:	469c      	mov	ip, r3
 8002ade:	4484      	add	ip, r0
 8002ae0:	0002      	movs	r2, r0
 8002ae2:	4663      	mov	r3, ip
 8002ae4:	3220      	adds	r2, #32
 8002ae6:	2b1c      	cmp	r3, #28
 8002ae8:	dc00      	bgt.n	8002aec <__aeabi_dmul+0x534>
 8002aea:	e758      	b.n	800299e <__aeabi_dmul+0x3e6>
 8002aec:	2300      	movs	r3, #0
 8002aee:	4698      	mov	r8, r3
 8002af0:	0023      	movs	r3, r4
 8002af2:	3808      	subs	r0, #8
 8002af4:	4083      	lsls	r3, r0
 8002af6:	469a      	mov	sl, r3
 8002af8:	e762      	b.n	80029c0 <__aeabi_dmul+0x408>
 8002afa:	001d      	movs	r5, r3
 8002afc:	2300      	movs	r3, #0
 8002afe:	2400      	movs	r4, #0
 8002b00:	2002      	movs	r0, #2
 8002b02:	9301      	str	r3, [sp, #4]
 8002b04:	e5a2      	b.n	800264c <__aeabi_dmul+0x94>
 8002b06:	9002      	str	r0, [sp, #8]
 8002b08:	e632      	b.n	8002770 <__aeabi_dmul+0x1b8>
 8002b0a:	431c      	orrs	r4, r3
 8002b0c:	9b00      	ldr	r3, [sp, #0]
 8002b0e:	9a01      	ldr	r2, [sp, #4]
 8002b10:	4699      	mov	r9, r3
 8002b12:	e5ae      	b.n	8002672 <__aeabi_dmul+0xba>
 8002b14:	4b1a      	ldr	r3, [pc, #104]	@ (8002b80 <__aeabi_dmul+0x5c8>)
 8002b16:	4652      	mov	r2, sl
 8002b18:	18c3      	adds	r3, r0, r3
 8002b1a:	4640      	mov	r0, r8
 8002b1c:	409a      	lsls	r2, r3
 8002b1e:	40c8      	lsrs	r0, r1
 8002b20:	4302      	orrs	r2, r0
 8002b22:	4640      	mov	r0, r8
 8002b24:	4098      	lsls	r0, r3
 8002b26:	0003      	movs	r3, r0
 8002b28:	1e58      	subs	r0, r3, #1
 8002b2a:	4183      	sbcs	r3, r0
 8002b2c:	4654      	mov	r4, sl
 8002b2e:	431a      	orrs	r2, r3
 8002b30:	40cc      	lsrs	r4, r1
 8002b32:	0753      	lsls	r3, r2, #29
 8002b34:	d009      	beq.n	8002b4a <__aeabi_dmul+0x592>
 8002b36:	230f      	movs	r3, #15
 8002b38:	4013      	ands	r3, r2
 8002b3a:	2b04      	cmp	r3, #4
 8002b3c:	d005      	beq.n	8002b4a <__aeabi_dmul+0x592>
 8002b3e:	1d13      	adds	r3, r2, #4
 8002b40:	4293      	cmp	r3, r2
 8002b42:	4192      	sbcs	r2, r2
 8002b44:	4252      	negs	r2, r2
 8002b46:	18a4      	adds	r4, r4, r2
 8002b48:	001a      	movs	r2, r3
 8002b4a:	0223      	lsls	r3, r4, #8
 8002b4c:	d508      	bpl.n	8002b60 <__aeabi_dmul+0x5a8>
 8002b4e:	2301      	movs	r3, #1
 8002b50:	2400      	movs	r4, #0
 8002b52:	2200      	movs	r2, #0
 8002b54:	e58e      	b.n	8002674 <__aeabi_dmul+0xbc>
 8002b56:	4689      	mov	r9, r1
 8002b58:	2400      	movs	r4, #0
 8002b5a:	e58b      	b.n	8002674 <__aeabi_dmul+0xbc>
 8002b5c:	2300      	movs	r3, #0
 8002b5e:	e7a5      	b.n	8002aac <__aeabi_dmul+0x4f4>
 8002b60:	0763      	lsls	r3, r4, #29
 8002b62:	0264      	lsls	r4, r4, #9
 8002b64:	0b24      	lsrs	r4, r4, #12
 8002b66:	e7a1      	b.n	8002aac <__aeabi_dmul+0x4f4>
 8002b68:	9b00      	ldr	r3, [sp, #0]
 8002b6a:	46a2      	mov	sl, r4
 8002b6c:	4699      	mov	r9, r3
 8002b6e:	9b01      	ldr	r3, [sp, #4]
 8002b70:	4698      	mov	r8, r3
 8002b72:	e737      	b.n	80029e4 <__aeabi_dmul+0x42c>
 8002b74:	fffffc0d 	.word	0xfffffc0d
 8002b78:	000007ff 	.word	0x000007ff
 8002b7c:	0000043e 	.word	0x0000043e
 8002b80:	0000041e 	.word	0x0000041e

08002b84 <__aeabi_dsub>:
 8002b84:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002b86:	4657      	mov	r7, sl
 8002b88:	464e      	mov	r6, r9
 8002b8a:	4645      	mov	r5, r8
 8002b8c:	46de      	mov	lr, fp
 8002b8e:	b5e0      	push	{r5, r6, r7, lr}
 8002b90:	b083      	sub	sp, #12
 8002b92:	9000      	str	r0, [sp, #0]
 8002b94:	9101      	str	r1, [sp, #4]
 8002b96:	030c      	lsls	r4, r1, #12
 8002b98:	004d      	lsls	r5, r1, #1
 8002b9a:	0fce      	lsrs	r6, r1, #31
 8002b9c:	0a61      	lsrs	r1, r4, #9
 8002b9e:	9c00      	ldr	r4, [sp, #0]
 8002ba0:	005f      	lsls	r7, r3, #1
 8002ba2:	0f64      	lsrs	r4, r4, #29
 8002ba4:	430c      	orrs	r4, r1
 8002ba6:	9900      	ldr	r1, [sp, #0]
 8002ba8:	9200      	str	r2, [sp, #0]
 8002baa:	9301      	str	r3, [sp, #4]
 8002bac:	00c8      	lsls	r0, r1, #3
 8002bae:	0319      	lsls	r1, r3, #12
 8002bb0:	0d7b      	lsrs	r3, r7, #21
 8002bb2:	4699      	mov	r9, r3
 8002bb4:	9b01      	ldr	r3, [sp, #4]
 8002bb6:	4fcc      	ldr	r7, [pc, #816]	@ (8002ee8 <__aeabi_dsub+0x364>)
 8002bb8:	0fdb      	lsrs	r3, r3, #31
 8002bba:	469c      	mov	ip, r3
 8002bbc:	0a4b      	lsrs	r3, r1, #9
 8002bbe:	9900      	ldr	r1, [sp, #0]
 8002bc0:	4680      	mov	r8, r0
 8002bc2:	0f49      	lsrs	r1, r1, #29
 8002bc4:	4319      	orrs	r1, r3
 8002bc6:	9b00      	ldr	r3, [sp, #0]
 8002bc8:	468b      	mov	fp, r1
 8002bca:	00da      	lsls	r2, r3, #3
 8002bcc:	4692      	mov	sl, r2
 8002bce:	0d6d      	lsrs	r5, r5, #21
 8002bd0:	45b9      	cmp	r9, r7
 8002bd2:	d100      	bne.n	8002bd6 <__aeabi_dsub+0x52>
 8002bd4:	e0bf      	b.n	8002d56 <__aeabi_dsub+0x1d2>
 8002bd6:	2301      	movs	r3, #1
 8002bd8:	4661      	mov	r1, ip
 8002bda:	4059      	eors	r1, r3
 8002bdc:	464b      	mov	r3, r9
 8002bde:	468c      	mov	ip, r1
 8002be0:	1aeb      	subs	r3, r5, r3
 8002be2:	428e      	cmp	r6, r1
 8002be4:	d075      	beq.n	8002cd2 <__aeabi_dsub+0x14e>
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	dc00      	bgt.n	8002bec <__aeabi_dsub+0x68>
 8002bea:	e2a3      	b.n	8003134 <__aeabi_dsub+0x5b0>
 8002bec:	4649      	mov	r1, r9
 8002bee:	2900      	cmp	r1, #0
 8002bf0:	d100      	bne.n	8002bf4 <__aeabi_dsub+0x70>
 8002bf2:	e0ce      	b.n	8002d92 <__aeabi_dsub+0x20e>
 8002bf4:	42bd      	cmp	r5, r7
 8002bf6:	d100      	bne.n	8002bfa <__aeabi_dsub+0x76>
 8002bf8:	e200      	b.n	8002ffc <__aeabi_dsub+0x478>
 8002bfa:	2701      	movs	r7, #1
 8002bfc:	2b38      	cmp	r3, #56	@ 0x38
 8002bfe:	dc19      	bgt.n	8002c34 <__aeabi_dsub+0xb0>
 8002c00:	2780      	movs	r7, #128	@ 0x80
 8002c02:	4659      	mov	r1, fp
 8002c04:	043f      	lsls	r7, r7, #16
 8002c06:	4339      	orrs	r1, r7
 8002c08:	468b      	mov	fp, r1
 8002c0a:	2b1f      	cmp	r3, #31
 8002c0c:	dd00      	ble.n	8002c10 <__aeabi_dsub+0x8c>
 8002c0e:	e1fa      	b.n	8003006 <__aeabi_dsub+0x482>
 8002c10:	2720      	movs	r7, #32
 8002c12:	1af9      	subs	r1, r7, r3
 8002c14:	468c      	mov	ip, r1
 8002c16:	4659      	mov	r1, fp
 8002c18:	4667      	mov	r7, ip
 8002c1a:	40b9      	lsls	r1, r7
 8002c1c:	000f      	movs	r7, r1
 8002c1e:	0011      	movs	r1, r2
 8002c20:	40d9      	lsrs	r1, r3
 8002c22:	430f      	orrs	r7, r1
 8002c24:	4661      	mov	r1, ip
 8002c26:	408a      	lsls	r2, r1
 8002c28:	1e51      	subs	r1, r2, #1
 8002c2a:	418a      	sbcs	r2, r1
 8002c2c:	4659      	mov	r1, fp
 8002c2e:	40d9      	lsrs	r1, r3
 8002c30:	4317      	orrs	r7, r2
 8002c32:	1a64      	subs	r4, r4, r1
 8002c34:	1bc7      	subs	r7, r0, r7
 8002c36:	42b8      	cmp	r0, r7
 8002c38:	4180      	sbcs	r0, r0
 8002c3a:	4240      	negs	r0, r0
 8002c3c:	1a24      	subs	r4, r4, r0
 8002c3e:	0223      	lsls	r3, r4, #8
 8002c40:	d400      	bmi.n	8002c44 <__aeabi_dsub+0xc0>
 8002c42:	e140      	b.n	8002ec6 <__aeabi_dsub+0x342>
 8002c44:	0264      	lsls	r4, r4, #9
 8002c46:	0a64      	lsrs	r4, r4, #9
 8002c48:	2c00      	cmp	r4, #0
 8002c4a:	d100      	bne.n	8002c4e <__aeabi_dsub+0xca>
 8002c4c:	e154      	b.n	8002ef8 <__aeabi_dsub+0x374>
 8002c4e:	0020      	movs	r0, r4
 8002c50:	f000 fcd4 	bl	80035fc <__clzsi2>
 8002c54:	0003      	movs	r3, r0
 8002c56:	3b08      	subs	r3, #8
 8002c58:	2120      	movs	r1, #32
 8002c5a:	0038      	movs	r0, r7
 8002c5c:	1aca      	subs	r2, r1, r3
 8002c5e:	40d0      	lsrs	r0, r2
 8002c60:	409c      	lsls	r4, r3
 8002c62:	0002      	movs	r2, r0
 8002c64:	409f      	lsls	r7, r3
 8002c66:	4322      	orrs	r2, r4
 8002c68:	429d      	cmp	r5, r3
 8002c6a:	dd00      	ble.n	8002c6e <__aeabi_dsub+0xea>
 8002c6c:	e1a6      	b.n	8002fbc <__aeabi_dsub+0x438>
 8002c6e:	1b58      	subs	r0, r3, r5
 8002c70:	3001      	adds	r0, #1
 8002c72:	1a09      	subs	r1, r1, r0
 8002c74:	003c      	movs	r4, r7
 8002c76:	408f      	lsls	r7, r1
 8002c78:	40c4      	lsrs	r4, r0
 8002c7a:	1e7b      	subs	r3, r7, #1
 8002c7c:	419f      	sbcs	r7, r3
 8002c7e:	0013      	movs	r3, r2
 8002c80:	408b      	lsls	r3, r1
 8002c82:	4327      	orrs	r7, r4
 8002c84:	431f      	orrs	r7, r3
 8002c86:	40c2      	lsrs	r2, r0
 8002c88:	003b      	movs	r3, r7
 8002c8a:	0014      	movs	r4, r2
 8002c8c:	2500      	movs	r5, #0
 8002c8e:	4313      	orrs	r3, r2
 8002c90:	d100      	bne.n	8002c94 <__aeabi_dsub+0x110>
 8002c92:	e1f7      	b.n	8003084 <__aeabi_dsub+0x500>
 8002c94:	077b      	lsls	r3, r7, #29
 8002c96:	d100      	bne.n	8002c9a <__aeabi_dsub+0x116>
 8002c98:	e377      	b.n	800338a <__aeabi_dsub+0x806>
 8002c9a:	230f      	movs	r3, #15
 8002c9c:	0038      	movs	r0, r7
 8002c9e:	403b      	ands	r3, r7
 8002ca0:	2b04      	cmp	r3, #4
 8002ca2:	d004      	beq.n	8002cae <__aeabi_dsub+0x12a>
 8002ca4:	1d38      	adds	r0, r7, #4
 8002ca6:	42b8      	cmp	r0, r7
 8002ca8:	41bf      	sbcs	r7, r7
 8002caa:	427f      	negs	r7, r7
 8002cac:	19e4      	adds	r4, r4, r7
 8002cae:	0223      	lsls	r3, r4, #8
 8002cb0:	d400      	bmi.n	8002cb4 <__aeabi_dsub+0x130>
 8002cb2:	e368      	b.n	8003386 <__aeabi_dsub+0x802>
 8002cb4:	4b8c      	ldr	r3, [pc, #560]	@ (8002ee8 <__aeabi_dsub+0x364>)
 8002cb6:	3501      	adds	r5, #1
 8002cb8:	429d      	cmp	r5, r3
 8002cba:	d100      	bne.n	8002cbe <__aeabi_dsub+0x13a>
 8002cbc:	e0f4      	b.n	8002ea8 <__aeabi_dsub+0x324>
 8002cbe:	4b8b      	ldr	r3, [pc, #556]	@ (8002eec <__aeabi_dsub+0x368>)
 8002cc0:	056d      	lsls	r5, r5, #21
 8002cc2:	401c      	ands	r4, r3
 8002cc4:	0d6d      	lsrs	r5, r5, #21
 8002cc6:	0767      	lsls	r7, r4, #29
 8002cc8:	08c0      	lsrs	r0, r0, #3
 8002cca:	0264      	lsls	r4, r4, #9
 8002ccc:	4307      	orrs	r7, r0
 8002cce:	0b24      	lsrs	r4, r4, #12
 8002cd0:	e0ec      	b.n	8002eac <__aeabi_dsub+0x328>
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	dc00      	bgt.n	8002cd8 <__aeabi_dsub+0x154>
 8002cd6:	e329      	b.n	800332c <__aeabi_dsub+0x7a8>
 8002cd8:	4649      	mov	r1, r9
 8002cda:	2900      	cmp	r1, #0
 8002cdc:	d000      	beq.n	8002ce0 <__aeabi_dsub+0x15c>
 8002cde:	e0d6      	b.n	8002e8e <__aeabi_dsub+0x30a>
 8002ce0:	4659      	mov	r1, fp
 8002ce2:	4311      	orrs	r1, r2
 8002ce4:	d100      	bne.n	8002ce8 <__aeabi_dsub+0x164>
 8002ce6:	e12e      	b.n	8002f46 <__aeabi_dsub+0x3c2>
 8002ce8:	1e59      	subs	r1, r3, #1
 8002cea:	2b01      	cmp	r3, #1
 8002cec:	d100      	bne.n	8002cf0 <__aeabi_dsub+0x16c>
 8002cee:	e1e6      	b.n	80030be <__aeabi_dsub+0x53a>
 8002cf0:	42bb      	cmp	r3, r7
 8002cf2:	d100      	bne.n	8002cf6 <__aeabi_dsub+0x172>
 8002cf4:	e182      	b.n	8002ffc <__aeabi_dsub+0x478>
 8002cf6:	2701      	movs	r7, #1
 8002cf8:	000b      	movs	r3, r1
 8002cfa:	2938      	cmp	r1, #56	@ 0x38
 8002cfc:	dc14      	bgt.n	8002d28 <__aeabi_dsub+0x1a4>
 8002cfe:	2b1f      	cmp	r3, #31
 8002d00:	dd00      	ble.n	8002d04 <__aeabi_dsub+0x180>
 8002d02:	e23c      	b.n	800317e <__aeabi_dsub+0x5fa>
 8002d04:	2720      	movs	r7, #32
 8002d06:	1af9      	subs	r1, r7, r3
 8002d08:	468c      	mov	ip, r1
 8002d0a:	4659      	mov	r1, fp
 8002d0c:	4667      	mov	r7, ip
 8002d0e:	40b9      	lsls	r1, r7
 8002d10:	000f      	movs	r7, r1
 8002d12:	0011      	movs	r1, r2
 8002d14:	40d9      	lsrs	r1, r3
 8002d16:	430f      	orrs	r7, r1
 8002d18:	4661      	mov	r1, ip
 8002d1a:	408a      	lsls	r2, r1
 8002d1c:	1e51      	subs	r1, r2, #1
 8002d1e:	418a      	sbcs	r2, r1
 8002d20:	4659      	mov	r1, fp
 8002d22:	40d9      	lsrs	r1, r3
 8002d24:	4317      	orrs	r7, r2
 8002d26:	1864      	adds	r4, r4, r1
 8002d28:	183f      	adds	r7, r7, r0
 8002d2a:	4287      	cmp	r7, r0
 8002d2c:	4180      	sbcs	r0, r0
 8002d2e:	4240      	negs	r0, r0
 8002d30:	1824      	adds	r4, r4, r0
 8002d32:	0223      	lsls	r3, r4, #8
 8002d34:	d400      	bmi.n	8002d38 <__aeabi_dsub+0x1b4>
 8002d36:	e0c6      	b.n	8002ec6 <__aeabi_dsub+0x342>
 8002d38:	4b6b      	ldr	r3, [pc, #428]	@ (8002ee8 <__aeabi_dsub+0x364>)
 8002d3a:	3501      	adds	r5, #1
 8002d3c:	429d      	cmp	r5, r3
 8002d3e:	d100      	bne.n	8002d42 <__aeabi_dsub+0x1be>
 8002d40:	e0b2      	b.n	8002ea8 <__aeabi_dsub+0x324>
 8002d42:	2101      	movs	r1, #1
 8002d44:	4b69      	ldr	r3, [pc, #420]	@ (8002eec <__aeabi_dsub+0x368>)
 8002d46:	087a      	lsrs	r2, r7, #1
 8002d48:	401c      	ands	r4, r3
 8002d4a:	4039      	ands	r1, r7
 8002d4c:	430a      	orrs	r2, r1
 8002d4e:	07e7      	lsls	r7, r4, #31
 8002d50:	4317      	orrs	r7, r2
 8002d52:	0864      	lsrs	r4, r4, #1
 8002d54:	e79e      	b.n	8002c94 <__aeabi_dsub+0x110>
 8002d56:	4b66      	ldr	r3, [pc, #408]	@ (8002ef0 <__aeabi_dsub+0x36c>)
 8002d58:	4311      	orrs	r1, r2
 8002d5a:	468a      	mov	sl, r1
 8002d5c:	18eb      	adds	r3, r5, r3
 8002d5e:	2900      	cmp	r1, #0
 8002d60:	d028      	beq.n	8002db4 <__aeabi_dsub+0x230>
 8002d62:	4566      	cmp	r6, ip
 8002d64:	d02c      	beq.n	8002dc0 <__aeabi_dsub+0x23c>
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d05b      	beq.n	8002e22 <__aeabi_dsub+0x29e>
 8002d6a:	2d00      	cmp	r5, #0
 8002d6c:	d100      	bne.n	8002d70 <__aeabi_dsub+0x1ec>
 8002d6e:	e12c      	b.n	8002fca <__aeabi_dsub+0x446>
 8002d70:	465b      	mov	r3, fp
 8002d72:	4666      	mov	r6, ip
 8002d74:	075f      	lsls	r7, r3, #29
 8002d76:	08d2      	lsrs	r2, r2, #3
 8002d78:	4317      	orrs	r7, r2
 8002d7a:	08dd      	lsrs	r5, r3, #3
 8002d7c:	003b      	movs	r3, r7
 8002d7e:	432b      	orrs	r3, r5
 8002d80:	d100      	bne.n	8002d84 <__aeabi_dsub+0x200>
 8002d82:	e0e2      	b.n	8002f4a <__aeabi_dsub+0x3c6>
 8002d84:	2480      	movs	r4, #128	@ 0x80
 8002d86:	0324      	lsls	r4, r4, #12
 8002d88:	432c      	orrs	r4, r5
 8002d8a:	0324      	lsls	r4, r4, #12
 8002d8c:	4d56      	ldr	r5, [pc, #344]	@ (8002ee8 <__aeabi_dsub+0x364>)
 8002d8e:	0b24      	lsrs	r4, r4, #12
 8002d90:	e08c      	b.n	8002eac <__aeabi_dsub+0x328>
 8002d92:	4659      	mov	r1, fp
 8002d94:	4311      	orrs	r1, r2
 8002d96:	d100      	bne.n	8002d9a <__aeabi_dsub+0x216>
 8002d98:	e0d5      	b.n	8002f46 <__aeabi_dsub+0x3c2>
 8002d9a:	1e59      	subs	r1, r3, #1
 8002d9c:	2b01      	cmp	r3, #1
 8002d9e:	d100      	bne.n	8002da2 <__aeabi_dsub+0x21e>
 8002da0:	e1b9      	b.n	8003116 <__aeabi_dsub+0x592>
 8002da2:	42bb      	cmp	r3, r7
 8002da4:	d100      	bne.n	8002da8 <__aeabi_dsub+0x224>
 8002da6:	e1b1      	b.n	800310c <__aeabi_dsub+0x588>
 8002da8:	2701      	movs	r7, #1
 8002daa:	000b      	movs	r3, r1
 8002dac:	2938      	cmp	r1, #56	@ 0x38
 8002dae:	dd00      	ble.n	8002db2 <__aeabi_dsub+0x22e>
 8002db0:	e740      	b.n	8002c34 <__aeabi_dsub+0xb0>
 8002db2:	e72a      	b.n	8002c0a <__aeabi_dsub+0x86>
 8002db4:	4661      	mov	r1, ip
 8002db6:	2701      	movs	r7, #1
 8002db8:	4079      	eors	r1, r7
 8002dba:	468c      	mov	ip, r1
 8002dbc:	4566      	cmp	r6, ip
 8002dbe:	d1d2      	bne.n	8002d66 <__aeabi_dsub+0x1e2>
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d100      	bne.n	8002dc6 <__aeabi_dsub+0x242>
 8002dc4:	e0c5      	b.n	8002f52 <__aeabi_dsub+0x3ce>
 8002dc6:	2d00      	cmp	r5, #0
 8002dc8:	d000      	beq.n	8002dcc <__aeabi_dsub+0x248>
 8002dca:	e155      	b.n	8003078 <__aeabi_dsub+0x4f4>
 8002dcc:	464b      	mov	r3, r9
 8002dce:	0025      	movs	r5, r4
 8002dd0:	4305      	orrs	r5, r0
 8002dd2:	d100      	bne.n	8002dd6 <__aeabi_dsub+0x252>
 8002dd4:	e212      	b.n	80031fc <__aeabi_dsub+0x678>
 8002dd6:	1e59      	subs	r1, r3, #1
 8002dd8:	468c      	mov	ip, r1
 8002dda:	2b01      	cmp	r3, #1
 8002ddc:	d100      	bne.n	8002de0 <__aeabi_dsub+0x25c>
 8002dde:	e249      	b.n	8003274 <__aeabi_dsub+0x6f0>
 8002de0:	4d41      	ldr	r5, [pc, #260]	@ (8002ee8 <__aeabi_dsub+0x364>)
 8002de2:	42ab      	cmp	r3, r5
 8002de4:	d100      	bne.n	8002de8 <__aeabi_dsub+0x264>
 8002de6:	e28f      	b.n	8003308 <__aeabi_dsub+0x784>
 8002de8:	2701      	movs	r7, #1
 8002dea:	2938      	cmp	r1, #56	@ 0x38
 8002dec:	dc11      	bgt.n	8002e12 <__aeabi_dsub+0x28e>
 8002dee:	4663      	mov	r3, ip
 8002df0:	2b1f      	cmp	r3, #31
 8002df2:	dd00      	ble.n	8002df6 <__aeabi_dsub+0x272>
 8002df4:	e25b      	b.n	80032ae <__aeabi_dsub+0x72a>
 8002df6:	4661      	mov	r1, ip
 8002df8:	2320      	movs	r3, #32
 8002dfa:	0027      	movs	r7, r4
 8002dfc:	1a5b      	subs	r3, r3, r1
 8002dfe:	0005      	movs	r5, r0
 8002e00:	4098      	lsls	r0, r3
 8002e02:	409f      	lsls	r7, r3
 8002e04:	40cd      	lsrs	r5, r1
 8002e06:	1e43      	subs	r3, r0, #1
 8002e08:	4198      	sbcs	r0, r3
 8002e0a:	40cc      	lsrs	r4, r1
 8002e0c:	432f      	orrs	r7, r5
 8002e0e:	4307      	orrs	r7, r0
 8002e10:	44a3      	add	fp, r4
 8002e12:	18bf      	adds	r7, r7, r2
 8002e14:	4297      	cmp	r7, r2
 8002e16:	4192      	sbcs	r2, r2
 8002e18:	4252      	negs	r2, r2
 8002e1a:	445a      	add	r2, fp
 8002e1c:	0014      	movs	r4, r2
 8002e1e:	464d      	mov	r5, r9
 8002e20:	e787      	b.n	8002d32 <__aeabi_dsub+0x1ae>
 8002e22:	4f34      	ldr	r7, [pc, #208]	@ (8002ef4 <__aeabi_dsub+0x370>)
 8002e24:	1c6b      	adds	r3, r5, #1
 8002e26:	423b      	tst	r3, r7
 8002e28:	d000      	beq.n	8002e2c <__aeabi_dsub+0x2a8>
 8002e2a:	e0b6      	b.n	8002f9a <__aeabi_dsub+0x416>
 8002e2c:	4659      	mov	r1, fp
 8002e2e:	0023      	movs	r3, r4
 8002e30:	4311      	orrs	r1, r2
 8002e32:	000f      	movs	r7, r1
 8002e34:	4303      	orrs	r3, r0
 8002e36:	2d00      	cmp	r5, #0
 8002e38:	d000      	beq.n	8002e3c <__aeabi_dsub+0x2b8>
 8002e3a:	e126      	b.n	800308a <__aeabi_dsub+0x506>
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d100      	bne.n	8002e42 <__aeabi_dsub+0x2be>
 8002e40:	e1c0      	b.n	80031c4 <__aeabi_dsub+0x640>
 8002e42:	2900      	cmp	r1, #0
 8002e44:	d100      	bne.n	8002e48 <__aeabi_dsub+0x2c4>
 8002e46:	e0a1      	b.n	8002f8c <__aeabi_dsub+0x408>
 8002e48:	1a83      	subs	r3, r0, r2
 8002e4a:	4698      	mov	r8, r3
 8002e4c:	465b      	mov	r3, fp
 8002e4e:	4540      	cmp	r0, r8
 8002e50:	41ad      	sbcs	r5, r5
 8002e52:	1ae3      	subs	r3, r4, r3
 8002e54:	426d      	negs	r5, r5
 8002e56:	1b5b      	subs	r3, r3, r5
 8002e58:	2580      	movs	r5, #128	@ 0x80
 8002e5a:	042d      	lsls	r5, r5, #16
 8002e5c:	422b      	tst	r3, r5
 8002e5e:	d100      	bne.n	8002e62 <__aeabi_dsub+0x2de>
 8002e60:	e14b      	b.n	80030fa <__aeabi_dsub+0x576>
 8002e62:	465b      	mov	r3, fp
 8002e64:	1a10      	subs	r0, r2, r0
 8002e66:	4282      	cmp	r2, r0
 8002e68:	4192      	sbcs	r2, r2
 8002e6a:	1b1c      	subs	r4, r3, r4
 8002e6c:	0007      	movs	r7, r0
 8002e6e:	2601      	movs	r6, #1
 8002e70:	4663      	mov	r3, ip
 8002e72:	4252      	negs	r2, r2
 8002e74:	1aa4      	subs	r4, r4, r2
 8002e76:	4327      	orrs	r7, r4
 8002e78:	401e      	ands	r6, r3
 8002e7a:	2f00      	cmp	r7, #0
 8002e7c:	d100      	bne.n	8002e80 <__aeabi_dsub+0x2fc>
 8002e7e:	e142      	b.n	8003106 <__aeabi_dsub+0x582>
 8002e80:	422c      	tst	r4, r5
 8002e82:	d100      	bne.n	8002e86 <__aeabi_dsub+0x302>
 8002e84:	e26d      	b.n	8003362 <__aeabi_dsub+0x7de>
 8002e86:	4b19      	ldr	r3, [pc, #100]	@ (8002eec <__aeabi_dsub+0x368>)
 8002e88:	2501      	movs	r5, #1
 8002e8a:	401c      	ands	r4, r3
 8002e8c:	e71b      	b.n	8002cc6 <__aeabi_dsub+0x142>
 8002e8e:	42bd      	cmp	r5, r7
 8002e90:	d100      	bne.n	8002e94 <__aeabi_dsub+0x310>
 8002e92:	e13b      	b.n	800310c <__aeabi_dsub+0x588>
 8002e94:	2701      	movs	r7, #1
 8002e96:	2b38      	cmp	r3, #56	@ 0x38
 8002e98:	dd00      	ble.n	8002e9c <__aeabi_dsub+0x318>
 8002e9a:	e745      	b.n	8002d28 <__aeabi_dsub+0x1a4>
 8002e9c:	2780      	movs	r7, #128	@ 0x80
 8002e9e:	4659      	mov	r1, fp
 8002ea0:	043f      	lsls	r7, r7, #16
 8002ea2:	4339      	orrs	r1, r7
 8002ea4:	468b      	mov	fp, r1
 8002ea6:	e72a      	b.n	8002cfe <__aeabi_dsub+0x17a>
 8002ea8:	2400      	movs	r4, #0
 8002eaa:	2700      	movs	r7, #0
 8002eac:	052d      	lsls	r5, r5, #20
 8002eae:	4325      	orrs	r5, r4
 8002eb0:	07f6      	lsls	r6, r6, #31
 8002eb2:	4335      	orrs	r5, r6
 8002eb4:	0038      	movs	r0, r7
 8002eb6:	0029      	movs	r1, r5
 8002eb8:	b003      	add	sp, #12
 8002eba:	bcf0      	pop	{r4, r5, r6, r7}
 8002ebc:	46bb      	mov	fp, r7
 8002ebe:	46b2      	mov	sl, r6
 8002ec0:	46a9      	mov	r9, r5
 8002ec2:	46a0      	mov	r8, r4
 8002ec4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002ec6:	077b      	lsls	r3, r7, #29
 8002ec8:	d004      	beq.n	8002ed4 <__aeabi_dsub+0x350>
 8002eca:	230f      	movs	r3, #15
 8002ecc:	403b      	ands	r3, r7
 8002ece:	2b04      	cmp	r3, #4
 8002ed0:	d000      	beq.n	8002ed4 <__aeabi_dsub+0x350>
 8002ed2:	e6e7      	b.n	8002ca4 <__aeabi_dsub+0x120>
 8002ed4:	002b      	movs	r3, r5
 8002ed6:	08f8      	lsrs	r0, r7, #3
 8002ed8:	4a03      	ldr	r2, [pc, #12]	@ (8002ee8 <__aeabi_dsub+0x364>)
 8002eda:	0767      	lsls	r7, r4, #29
 8002edc:	4307      	orrs	r7, r0
 8002ede:	08e5      	lsrs	r5, r4, #3
 8002ee0:	4293      	cmp	r3, r2
 8002ee2:	d100      	bne.n	8002ee6 <__aeabi_dsub+0x362>
 8002ee4:	e74a      	b.n	8002d7c <__aeabi_dsub+0x1f8>
 8002ee6:	e0a5      	b.n	8003034 <__aeabi_dsub+0x4b0>
 8002ee8:	000007ff 	.word	0x000007ff
 8002eec:	ff7fffff 	.word	0xff7fffff
 8002ef0:	fffff801 	.word	0xfffff801
 8002ef4:	000007fe 	.word	0x000007fe
 8002ef8:	0038      	movs	r0, r7
 8002efa:	f000 fb7f 	bl	80035fc <__clzsi2>
 8002efe:	0003      	movs	r3, r0
 8002f00:	3318      	adds	r3, #24
 8002f02:	2b1f      	cmp	r3, #31
 8002f04:	dc00      	bgt.n	8002f08 <__aeabi_dsub+0x384>
 8002f06:	e6a7      	b.n	8002c58 <__aeabi_dsub+0xd4>
 8002f08:	003a      	movs	r2, r7
 8002f0a:	3808      	subs	r0, #8
 8002f0c:	4082      	lsls	r2, r0
 8002f0e:	429d      	cmp	r5, r3
 8002f10:	dd00      	ble.n	8002f14 <__aeabi_dsub+0x390>
 8002f12:	e08a      	b.n	800302a <__aeabi_dsub+0x4a6>
 8002f14:	1b5b      	subs	r3, r3, r5
 8002f16:	1c58      	adds	r0, r3, #1
 8002f18:	281f      	cmp	r0, #31
 8002f1a:	dc00      	bgt.n	8002f1e <__aeabi_dsub+0x39a>
 8002f1c:	e1d8      	b.n	80032d0 <__aeabi_dsub+0x74c>
 8002f1e:	0017      	movs	r7, r2
 8002f20:	3b1f      	subs	r3, #31
 8002f22:	40df      	lsrs	r7, r3
 8002f24:	2820      	cmp	r0, #32
 8002f26:	d005      	beq.n	8002f34 <__aeabi_dsub+0x3b0>
 8002f28:	2340      	movs	r3, #64	@ 0x40
 8002f2a:	1a1b      	subs	r3, r3, r0
 8002f2c:	409a      	lsls	r2, r3
 8002f2e:	1e53      	subs	r3, r2, #1
 8002f30:	419a      	sbcs	r2, r3
 8002f32:	4317      	orrs	r7, r2
 8002f34:	2500      	movs	r5, #0
 8002f36:	2f00      	cmp	r7, #0
 8002f38:	d100      	bne.n	8002f3c <__aeabi_dsub+0x3b8>
 8002f3a:	e0e5      	b.n	8003108 <__aeabi_dsub+0x584>
 8002f3c:	077b      	lsls	r3, r7, #29
 8002f3e:	d000      	beq.n	8002f42 <__aeabi_dsub+0x3be>
 8002f40:	e6ab      	b.n	8002c9a <__aeabi_dsub+0x116>
 8002f42:	002c      	movs	r4, r5
 8002f44:	e7c6      	b.n	8002ed4 <__aeabi_dsub+0x350>
 8002f46:	08c0      	lsrs	r0, r0, #3
 8002f48:	e7c6      	b.n	8002ed8 <__aeabi_dsub+0x354>
 8002f4a:	2700      	movs	r7, #0
 8002f4c:	2400      	movs	r4, #0
 8002f4e:	4dd1      	ldr	r5, [pc, #836]	@ (8003294 <__aeabi_dsub+0x710>)
 8002f50:	e7ac      	b.n	8002eac <__aeabi_dsub+0x328>
 8002f52:	4fd1      	ldr	r7, [pc, #836]	@ (8003298 <__aeabi_dsub+0x714>)
 8002f54:	1c6b      	adds	r3, r5, #1
 8002f56:	423b      	tst	r3, r7
 8002f58:	d171      	bne.n	800303e <__aeabi_dsub+0x4ba>
 8002f5a:	0023      	movs	r3, r4
 8002f5c:	4303      	orrs	r3, r0
 8002f5e:	2d00      	cmp	r5, #0
 8002f60:	d000      	beq.n	8002f64 <__aeabi_dsub+0x3e0>
 8002f62:	e14e      	b.n	8003202 <__aeabi_dsub+0x67e>
 8002f64:	4657      	mov	r7, sl
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d100      	bne.n	8002f6c <__aeabi_dsub+0x3e8>
 8002f6a:	e1b5      	b.n	80032d8 <__aeabi_dsub+0x754>
 8002f6c:	2f00      	cmp	r7, #0
 8002f6e:	d00d      	beq.n	8002f8c <__aeabi_dsub+0x408>
 8002f70:	1883      	adds	r3, r0, r2
 8002f72:	4283      	cmp	r3, r0
 8002f74:	4180      	sbcs	r0, r0
 8002f76:	445c      	add	r4, fp
 8002f78:	4240      	negs	r0, r0
 8002f7a:	1824      	adds	r4, r4, r0
 8002f7c:	0222      	lsls	r2, r4, #8
 8002f7e:	d500      	bpl.n	8002f82 <__aeabi_dsub+0x3fe>
 8002f80:	e1c8      	b.n	8003314 <__aeabi_dsub+0x790>
 8002f82:	001f      	movs	r7, r3
 8002f84:	4698      	mov	r8, r3
 8002f86:	4327      	orrs	r7, r4
 8002f88:	d100      	bne.n	8002f8c <__aeabi_dsub+0x408>
 8002f8a:	e0bc      	b.n	8003106 <__aeabi_dsub+0x582>
 8002f8c:	4643      	mov	r3, r8
 8002f8e:	0767      	lsls	r7, r4, #29
 8002f90:	08db      	lsrs	r3, r3, #3
 8002f92:	431f      	orrs	r7, r3
 8002f94:	08e5      	lsrs	r5, r4, #3
 8002f96:	2300      	movs	r3, #0
 8002f98:	e04c      	b.n	8003034 <__aeabi_dsub+0x4b0>
 8002f9a:	1a83      	subs	r3, r0, r2
 8002f9c:	4698      	mov	r8, r3
 8002f9e:	465b      	mov	r3, fp
 8002fa0:	4540      	cmp	r0, r8
 8002fa2:	41bf      	sbcs	r7, r7
 8002fa4:	1ae3      	subs	r3, r4, r3
 8002fa6:	427f      	negs	r7, r7
 8002fa8:	1bdb      	subs	r3, r3, r7
 8002faa:	021f      	lsls	r7, r3, #8
 8002fac:	d47c      	bmi.n	80030a8 <__aeabi_dsub+0x524>
 8002fae:	4647      	mov	r7, r8
 8002fb0:	431f      	orrs	r7, r3
 8002fb2:	d100      	bne.n	8002fb6 <__aeabi_dsub+0x432>
 8002fb4:	e0a6      	b.n	8003104 <__aeabi_dsub+0x580>
 8002fb6:	001c      	movs	r4, r3
 8002fb8:	4647      	mov	r7, r8
 8002fba:	e645      	b.n	8002c48 <__aeabi_dsub+0xc4>
 8002fbc:	4cb7      	ldr	r4, [pc, #732]	@ (800329c <__aeabi_dsub+0x718>)
 8002fbe:	1aed      	subs	r5, r5, r3
 8002fc0:	4014      	ands	r4, r2
 8002fc2:	077b      	lsls	r3, r7, #29
 8002fc4:	d000      	beq.n	8002fc8 <__aeabi_dsub+0x444>
 8002fc6:	e780      	b.n	8002eca <__aeabi_dsub+0x346>
 8002fc8:	e784      	b.n	8002ed4 <__aeabi_dsub+0x350>
 8002fca:	464b      	mov	r3, r9
 8002fcc:	0025      	movs	r5, r4
 8002fce:	4305      	orrs	r5, r0
 8002fd0:	d066      	beq.n	80030a0 <__aeabi_dsub+0x51c>
 8002fd2:	1e5f      	subs	r7, r3, #1
 8002fd4:	2b01      	cmp	r3, #1
 8002fd6:	d100      	bne.n	8002fda <__aeabi_dsub+0x456>
 8002fd8:	e0fc      	b.n	80031d4 <__aeabi_dsub+0x650>
 8002fda:	4dae      	ldr	r5, [pc, #696]	@ (8003294 <__aeabi_dsub+0x710>)
 8002fdc:	42ab      	cmp	r3, r5
 8002fde:	d100      	bne.n	8002fe2 <__aeabi_dsub+0x45e>
 8002fe0:	e15e      	b.n	80032a0 <__aeabi_dsub+0x71c>
 8002fe2:	4666      	mov	r6, ip
 8002fe4:	2f38      	cmp	r7, #56	@ 0x38
 8002fe6:	dc00      	bgt.n	8002fea <__aeabi_dsub+0x466>
 8002fe8:	e0b4      	b.n	8003154 <__aeabi_dsub+0x5d0>
 8002fea:	2001      	movs	r0, #1
 8002fec:	1a17      	subs	r7, r2, r0
 8002fee:	42ba      	cmp	r2, r7
 8002ff0:	4192      	sbcs	r2, r2
 8002ff2:	465b      	mov	r3, fp
 8002ff4:	4252      	negs	r2, r2
 8002ff6:	464d      	mov	r5, r9
 8002ff8:	1a9c      	subs	r4, r3, r2
 8002ffa:	e620      	b.n	8002c3e <__aeabi_dsub+0xba>
 8002ffc:	0767      	lsls	r7, r4, #29
 8002ffe:	08c0      	lsrs	r0, r0, #3
 8003000:	4307      	orrs	r7, r0
 8003002:	08e5      	lsrs	r5, r4, #3
 8003004:	e6ba      	b.n	8002d7c <__aeabi_dsub+0x1f8>
 8003006:	001f      	movs	r7, r3
 8003008:	4659      	mov	r1, fp
 800300a:	3f20      	subs	r7, #32
 800300c:	40f9      	lsrs	r1, r7
 800300e:	000f      	movs	r7, r1
 8003010:	2b20      	cmp	r3, #32
 8003012:	d005      	beq.n	8003020 <__aeabi_dsub+0x49c>
 8003014:	2140      	movs	r1, #64	@ 0x40
 8003016:	1acb      	subs	r3, r1, r3
 8003018:	4659      	mov	r1, fp
 800301a:	4099      	lsls	r1, r3
 800301c:	430a      	orrs	r2, r1
 800301e:	4692      	mov	sl, r2
 8003020:	4653      	mov	r3, sl
 8003022:	1e5a      	subs	r2, r3, #1
 8003024:	4193      	sbcs	r3, r2
 8003026:	431f      	orrs	r7, r3
 8003028:	e604      	b.n	8002c34 <__aeabi_dsub+0xb0>
 800302a:	1aeb      	subs	r3, r5, r3
 800302c:	4d9b      	ldr	r5, [pc, #620]	@ (800329c <__aeabi_dsub+0x718>)
 800302e:	4015      	ands	r5, r2
 8003030:	076f      	lsls	r7, r5, #29
 8003032:	08ed      	lsrs	r5, r5, #3
 8003034:	032c      	lsls	r4, r5, #12
 8003036:	055d      	lsls	r5, r3, #21
 8003038:	0b24      	lsrs	r4, r4, #12
 800303a:	0d6d      	lsrs	r5, r5, #21
 800303c:	e736      	b.n	8002eac <__aeabi_dsub+0x328>
 800303e:	4d95      	ldr	r5, [pc, #596]	@ (8003294 <__aeabi_dsub+0x710>)
 8003040:	42ab      	cmp	r3, r5
 8003042:	d100      	bne.n	8003046 <__aeabi_dsub+0x4c2>
 8003044:	e0d6      	b.n	80031f4 <__aeabi_dsub+0x670>
 8003046:	1882      	adds	r2, r0, r2
 8003048:	0021      	movs	r1, r4
 800304a:	4282      	cmp	r2, r0
 800304c:	4180      	sbcs	r0, r0
 800304e:	4459      	add	r1, fp
 8003050:	4240      	negs	r0, r0
 8003052:	1808      	adds	r0, r1, r0
 8003054:	07c7      	lsls	r7, r0, #31
 8003056:	0852      	lsrs	r2, r2, #1
 8003058:	4317      	orrs	r7, r2
 800305a:	0844      	lsrs	r4, r0, #1
 800305c:	0752      	lsls	r2, r2, #29
 800305e:	d400      	bmi.n	8003062 <__aeabi_dsub+0x4de>
 8003060:	e185      	b.n	800336e <__aeabi_dsub+0x7ea>
 8003062:	220f      	movs	r2, #15
 8003064:	001d      	movs	r5, r3
 8003066:	403a      	ands	r2, r7
 8003068:	2a04      	cmp	r2, #4
 800306a:	d000      	beq.n	800306e <__aeabi_dsub+0x4ea>
 800306c:	e61a      	b.n	8002ca4 <__aeabi_dsub+0x120>
 800306e:	08ff      	lsrs	r7, r7, #3
 8003070:	0764      	lsls	r4, r4, #29
 8003072:	4327      	orrs	r7, r4
 8003074:	0905      	lsrs	r5, r0, #4
 8003076:	e7dd      	b.n	8003034 <__aeabi_dsub+0x4b0>
 8003078:	465b      	mov	r3, fp
 800307a:	08d2      	lsrs	r2, r2, #3
 800307c:	075f      	lsls	r7, r3, #29
 800307e:	4317      	orrs	r7, r2
 8003080:	08dd      	lsrs	r5, r3, #3
 8003082:	e67b      	b.n	8002d7c <__aeabi_dsub+0x1f8>
 8003084:	2700      	movs	r7, #0
 8003086:	2400      	movs	r4, #0
 8003088:	e710      	b.n	8002eac <__aeabi_dsub+0x328>
 800308a:	2b00      	cmp	r3, #0
 800308c:	d000      	beq.n	8003090 <__aeabi_dsub+0x50c>
 800308e:	e0d6      	b.n	800323e <__aeabi_dsub+0x6ba>
 8003090:	2900      	cmp	r1, #0
 8003092:	d000      	beq.n	8003096 <__aeabi_dsub+0x512>
 8003094:	e12f      	b.n	80032f6 <__aeabi_dsub+0x772>
 8003096:	2480      	movs	r4, #128	@ 0x80
 8003098:	2600      	movs	r6, #0
 800309a:	4d7e      	ldr	r5, [pc, #504]	@ (8003294 <__aeabi_dsub+0x710>)
 800309c:	0324      	lsls	r4, r4, #12
 800309e:	e705      	b.n	8002eac <__aeabi_dsub+0x328>
 80030a0:	4666      	mov	r6, ip
 80030a2:	465c      	mov	r4, fp
 80030a4:	08d0      	lsrs	r0, r2, #3
 80030a6:	e717      	b.n	8002ed8 <__aeabi_dsub+0x354>
 80030a8:	465b      	mov	r3, fp
 80030aa:	1a17      	subs	r7, r2, r0
 80030ac:	42ba      	cmp	r2, r7
 80030ae:	4192      	sbcs	r2, r2
 80030b0:	1b1c      	subs	r4, r3, r4
 80030b2:	2601      	movs	r6, #1
 80030b4:	4663      	mov	r3, ip
 80030b6:	4252      	negs	r2, r2
 80030b8:	1aa4      	subs	r4, r4, r2
 80030ba:	401e      	ands	r6, r3
 80030bc:	e5c4      	b.n	8002c48 <__aeabi_dsub+0xc4>
 80030be:	1883      	adds	r3, r0, r2
 80030c0:	4283      	cmp	r3, r0
 80030c2:	4180      	sbcs	r0, r0
 80030c4:	445c      	add	r4, fp
 80030c6:	4240      	negs	r0, r0
 80030c8:	1825      	adds	r5, r4, r0
 80030ca:	022a      	lsls	r2, r5, #8
 80030cc:	d400      	bmi.n	80030d0 <__aeabi_dsub+0x54c>
 80030ce:	e0da      	b.n	8003286 <__aeabi_dsub+0x702>
 80030d0:	4a72      	ldr	r2, [pc, #456]	@ (800329c <__aeabi_dsub+0x718>)
 80030d2:	085b      	lsrs	r3, r3, #1
 80030d4:	4015      	ands	r5, r2
 80030d6:	07ea      	lsls	r2, r5, #31
 80030d8:	431a      	orrs	r2, r3
 80030da:	0869      	lsrs	r1, r5, #1
 80030dc:	075b      	lsls	r3, r3, #29
 80030de:	d400      	bmi.n	80030e2 <__aeabi_dsub+0x55e>
 80030e0:	e14a      	b.n	8003378 <__aeabi_dsub+0x7f4>
 80030e2:	230f      	movs	r3, #15
 80030e4:	4013      	ands	r3, r2
 80030e6:	2b04      	cmp	r3, #4
 80030e8:	d100      	bne.n	80030ec <__aeabi_dsub+0x568>
 80030ea:	e0fc      	b.n	80032e6 <__aeabi_dsub+0x762>
 80030ec:	1d17      	adds	r7, r2, #4
 80030ee:	4297      	cmp	r7, r2
 80030f0:	41a4      	sbcs	r4, r4
 80030f2:	4264      	negs	r4, r4
 80030f4:	2502      	movs	r5, #2
 80030f6:	1864      	adds	r4, r4, r1
 80030f8:	e6ec      	b.n	8002ed4 <__aeabi_dsub+0x350>
 80030fa:	4647      	mov	r7, r8
 80030fc:	001c      	movs	r4, r3
 80030fe:	431f      	orrs	r7, r3
 8003100:	d000      	beq.n	8003104 <__aeabi_dsub+0x580>
 8003102:	e743      	b.n	8002f8c <__aeabi_dsub+0x408>
 8003104:	2600      	movs	r6, #0
 8003106:	2500      	movs	r5, #0
 8003108:	2400      	movs	r4, #0
 800310a:	e6cf      	b.n	8002eac <__aeabi_dsub+0x328>
 800310c:	08c0      	lsrs	r0, r0, #3
 800310e:	0767      	lsls	r7, r4, #29
 8003110:	4307      	orrs	r7, r0
 8003112:	08e5      	lsrs	r5, r4, #3
 8003114:	e632      	b.n	8002d7c <__aeabi_dsub+0x1f8>
 8003116:	1a87      	subs	r7, r0, r2
 8003118:	465b      	mov	r3, fp
 800311a:	42b8      	cmp	r0, r7
 800311c:	4180      	sbcs	r0, r0
 800311e:	1ae4      	subs	r4, r4, r3
 8003120:	4240      	negs	r0, r0
 8003122:	1a24      	subs	r4, r4, r0
 8003124:	0223      	lsls	r3, r4, #8
 8003126:	d428      	bmi.n	800317a <__aeabi_dsub+0x5f6>
 8003128:	0763      	lsls	r3, r4, #29
 800312a:	08ff      	lsrs	r7, r7, #3
 800312c:	431f      	orrs	r7, r3
 800312e:	08e5      	lsrs	r5, r4, #3
 8003130:	2301      	movs	r3, #1
 8003132:	e77f      	b.n	8003034 <__aeabi_dsub+0x4b0>
 8003134:	2b00      	cmp	r3, #0
 8003136:	d100      	bne.n	800313a <__aeabi_dsub+0x5b6>
 8003138:	e673      	b.n	8002e22 <__aeabi_dsub+0x29e>
 800313a:	464b      	mov	r3, r9
 800313c:	1b5f      	subs	r7, r3, r5
 800313e:	003b      	movs	r3, r7
 8003140:	2d00      	cmp	r5, #0
 8003142:	d100      	bne.n	8003146 <__aeabi_dsub+0x5c2>
 8003144:	e742      	b.n	8002fcc <__aeabi_dsub+0x448>
 8003146:	2f38      	cmp	r7, #56	@ 0x38
 8003148:	dd00      	ble.n	800314c <__aeabi_dsub+0x5c8>
 800314a:	e0ec      	b.n	8003326 <__aeabi_dsub+0x7a2>
 800314c:	2380      	movs	r3, #128	@ 0x80
 800314e:	000e      	movs	r6, r1
 8003150:	041b      	lsls	r3, r3, #16
 8003152:	431c      	orrs	r4, r3
 8003154:	2f1f      	cmp	r7, #31
 8003156:	dc25      	bgt.n	80031a4 <__aeabi_dsub+0x620>
 8003158:	2520      	movs	r5, #32
 800315a:	0023      	movs	r3, r4
 800315c:	1bed      	subs	r5, r5, r7
 800315e:	0001      	movs	r1, r0
 8003160:	40a8      	lsls	r0, r5
 8003162:	40ab      	lsls	r3, r5
 8003164:	40f9      	lsrs	r1, r7
 8003166:	1e45      	subs	r5, r0, #1
 8003168:	41a8      	sbcs	r0, r5
 800316a:	430b      	orrs	r3, r1
 800316c:	40fc      	lsrs	r4, r7
 800316e:	4318      	orrs	r0, r3
 8003170:	465b      	mov	r3, fp
 8003172:	1b1b      	subs	r3, r3, r4
 8003174:	469b      	mov	fp, r3
 8003176:	e739      	b.n	8002fec <__aeabi_dsub+0x468>
 8003178:	4666      	mov	r6, ip
 800317a:	2501      	movs	r5, #1
 800317c:	e562      	b.n	8002c44 <__aeabi_dsub+0xc0>
 800317e:	001f      	movs	r7, r3
 8003180:	4659      	mov	r1, fp
 8003182:	3f20      	subs	r7, #32
 8003184:	40f9      	lsrs	r1, r7
 8003186:	468c      	mov	ip, r1
 8003188:	2b20      	cmp	r3, #32
 800318a:	d005      	beq.n	8003198 <__aeabi_dsub+0x614>
 800318c:	2740      	movs	r7, #64	@ 0x40
 800318e:	4659      	mov	r1, fp
 8003190:	1afb      	subs	r3, r7, r3
 8003192:	4099      	lsls	r1, r3
 8003194:	430a      	orrs	r2, r1
 8003196:	4692      	mov	sl, r2
 8003198:	4657      	mov	r7, sl
 800319a:	1e7b      	subs	r3, r7, #1
 800319c:	419f      	sbcs	r7, r3
 800319e:	4663      	mov	r3, ip
 80031a0:	431f      	orrs	r7, r3
 80031a2:	e5c1      	b.n	8002d28 <__aeabi_dsub+0x1a4>
 80031a4:	003b      	movs	r3, r7
 80031a6:	0025      	movs	r5, r4
 80031a8:	3b20      	subs	r3, #32
 80031aa:	40dd      	lsrs	r5, r3
 80031ac:	2f20      	cmp	r7, #32
 80031ae:	d004      	beq.n	80031ba <__aeabi_dsub+0x636>
 80031b0:	2340      	movs	r3, #64	@ 0x40
 80031b2:	1bdb      	subs	r3, r3, r7
 80031b4:	409c      	lsls	r4, r3
 80031b6:	4320      	orrs	r0, r4
 80031b8:	4680      	mov	r8, r0
 80031ba:	4640      	mov	r0, r8
 80031bc:	1e43      	subs	r3, r0, #1
 80031be:	4198      	sbcs	r0, r3
 80031c0:	4328      	orrs	r0, r5
 80031c2:	e713      	b.n	8002fec <__aeabi_dsub+0x468>
 80031c4:	2900      	cmp	r1, #0
 80031c6:	d09d      	beq.n	8003104 <__aeabi_dsub+0x580>
 80031c8:	2601      	movs	r6, #1
 80031ca:	4663      	mov	r3, ip
 80031cc:	465c      	mov	r4, fp
 80031ce:	4690      	mov	r8, r2
 80031d0:	401e      	ands	r6, r3
 80031d2:	e6db      	b.n	8002f8c <__aeabi_dsub+0x408>
 80031d4:	1a17      	subs	r7, r2, r0
 80031d6:	465b      	mov	r3, fp
 80031d8:	42ba      	cmp	r2, r7
 80031da:	4192      	sbcs	r2, r2
 80031dc:	1b1c      	subs	r4, r3, r4
 80031de:	4252      	negs	r2, r2
 80031e0:	1aa4      	subs	r4, r4, r2
 80031e2:	0223      	lsls	r3, r4, #8
 80031e4:	d4c8      	bmi.n	8003178 <__aeabi_dsub+0x5f4>
 80031e6:	0763      	lsls	r3, r4, #29
 80031e8:	08ff      	lsrs	r7, r7, #3
 80031ea:	431f      	orrs	r7, r3
 80031ec:	4666      	mov	r6, ip
 80031ee:	2301      	movs	r3, #1
 80031f0:	08e5      	lsrs	r5, r4, #3
 80031f2:	e71f      	b.n	8003034 <__aeabi_dsub+0x4b0>
 80031f4:	001d      	movs	r5, r3
 80031f6:	2400      	movs	r4, #0
 80031f8:	2700      	movs	r7, #0
 80031fa:	e657      	b.n	8002eac <__aeabi_dsub+0x328>
 80031fc:	465c      	mov	r4, fp
 80031fe:	08d0      	lsrs	r0, r2, #3
 8003200:	e66a      	b.n	8002ed8 <__aeabi_dsub+0x354>
 8003202:	2b00      	cmp	r3, #0
 8003204:	d100      	bne.n	8003208 <__aeabi_dsub+0x684>
 8003206:	e737      	b.n	8003078 <__aeabi_dsub+0x4f4>
 8003208:	4653      	mov	r3, sl
 800320a:	08c0      	lsrs	r0, r0, #3
 800320c:	0767      	lsls	r7, r4, #29
 800320e:	4307      	orrs	r7, r0
 8003210:	08e5      	lsrs	r5, r4, #3
 8003212:	2b00      	cmp	r3, #0
 8003214:	d100      	bne.n	8003218 <__aeabi_dsub+0x694>
 8003216:	e5b1      	b.n	8002d7c <__aeabi_dsub+0x1f8>
 8003218:	2380      	movs	r3, #128	@ 0x80
 800321a:	031b      	lsls	r3, r3, #12
 800321c:	421d      	tst	r5, r3
 800321e:	d008      	beq.n	8003232 <__aeabi_dsub+0x6ae>
 8003220:	4659      	mov	r1, fp
 8003222:	08c8      	lsrs	r0, r1, #3
 8003224:	4218      	tst	r0, r3
 8003226:	d104      	bne.n	8003232 <__aeabi_dsub+0x6ae>
 8003228:	08d2      	lsrs	r2, r2, #3
 800322a:	0749      	lsls	r1, r1, #29
 800322c:	430a      	orrs	r2, r1
 800322e:	0017      	movs	r7, r2
 8003230:	0005      	movs	r5, r0
 8003232:	0f7b      	lsrs	r3, r7, #29
 8003234:	00ff      	lsls	r7, r7, #3
 8003236:	08ff      	lsrs	r7, r7, #3
 8003238:	075b      	lsls	r3, r3, #29
 800323a:	431f      	orrs	r7, r3
 800323c:	e59e      	b.n	8002d7c <__aeabi_dsub+0x1f8>
 800323e:	08c0      	lsrs	r0, r0, #3
 8003240:	0763      	lsls	r3, r4, #29
 8003242:	4318      	orrs	r0, r3
 8003244:	08e5      	lsrs	r5, r4, #3
 8003246:	2900      	cmp	r1, #0
 8003248:	d053      	beq.n	80032f2 <__aeabi_dsub+0x76e>
 800324a:	2380      	movs	r3, #128	@ 0x80
 800324c:	031b      	lsls	r3, r3, #12
 800324e:	421d      	tst	r5, r3
 8003250:	d00a      	beq.n	8003268 <__aeabi_dsub+0x6e4>
 8003252:	4659      	mov	r1, fp
 8003254:	08cc      	lsrs	r4, r1, #3
 8003256:	421c      	tst	r4, r3
 8003258:	d106      	bne.n	8003268 <__aeabi_dsub+0x6e4>
 800325a:	2601      	movs	r6, #1
 800325c:	4663      	mov	r3, ip
 800325e:	0025      	movs	r5, r4
 8003260:	08d0      	lsrs	r0, r2, #3
 8003262:	0749      	lsls	r1, r1, #29
 8003264:	4308      	orrs	r0, r1
 8003266:	401e      	ands	r6, r3
 8003268:	0f47      	lsrs	r7, r0, #29
 800326a:	00c0      	lsls	r0, r0, #3
 800326c:	08c0      	lsrs	r0, r0, #3
 800326e:	077f      	lsls	r7, r7, #29
 8003270:	4307      	orrs	r7, r0
 8003272:	e583      	b.n	8002d7c <__aeabi_dsub+0x1f8>
 8003274:	1883      	adds	r3, r0, r2
 8003276:	4293      	cmp	r3, r2
 8003278:	4192      	sbcs	r2, r2
 800327a:	445c      	add	r4, fp
 800327c:	4252      	negs	r2, r2
 800327e:	18a5      	adds	r5, r4, r2
 8003280:	022a      	lsls	r2, r5, #8
 8003282:	d500      	bpl.n	8003286 <__aeabi_dsub+0x702>
 8003284:	e724      	b.n	80030d0 <__aeabi_dsub+0x54c>
 8003286:	076f      	lsls	r7, r5, #29
 8003288:	08db      	lsrs	r3, r3, #3
 800328a:	431f      	orrs	r7, r3
 800328c:	08ed      	lsrs	r5, r5, #3
 800328e:	2301      	movs	r3, #1
 8003290:	e6d0      	b.n	8003034 <__aeabi_dsub+0x4b0>
 8003292:	46c0      	nop			@ (mov r8, r8)
 8003294:	000007ff 	.word	0x000007ff
 8003298:	000007fe 	.word	0x000007fe
 800329c:	ff7fffff 	.word	0xff7fffff
 80032a0:	465b      	mov	r3, fp
 80032a2:	08d2      	lsrs	r2, r2, #3
 80032a4:	075f      	lsls	r7, r3, #29
 80032a6:	4666      	mov	r6, ip
 80032a8:	4317      	orrs	r7, r2
 80032aa:	08dd      	lsrs	r5, r3, #3
 80032ac:	e566      	b.n	8002d7c <__aeabi_dsub+0x1f8>
 80032ae:	0025      	movs	r5, r4
 80032b0:	3b20      	subs	r3, #32
 80032b2:	40dd      	lsrs	r5, r3
 80032b4:	4663      	mov	r3, ip
 80032b6:	2b20      	cmp	r3, #32
 80032b8:	d005      	beq.n	80032c6 <__aeabi_dsub+0x742>
 80032ba:	2340      	movs	r3, #64	@ 0x40
 80032bc:	4661      	mov	r1, ip
 80032be:	1a5b      	subs	r3, r3, r1
 80032c0:	409c      	lsls	r4, r3
 80032c2:	4320      	orrs	r0, r4
 80032c4:	4680      	mov	r8, r0
 80032c6:	4647      	mov	r7, r8
 80032c8:	1e7b      	subs	r3, r7, #1
 80032ca:	419f      	sbcs	r7, r3
 80032cc:	432f      	orrs	r7, r5
 80032ce:	e5a0      	b.n	8002e12 <__aeabi_dsub+0x28e>
 80032d0:	2120      	movs	r1, #32
 80032d2:	2700      	movs	r7, #0
 80032d4:	1a09      	subs	r1, r1, r0
 80032d6:	e4d2      	b.n	8002c7e <__aeabi_dsub+0xfa>
 80032d8:	2f00      	cmp	r7, #0
 80032da:	d100      	bne.n	80032de <__aeabi_dsub+0x75a>
 80032dc:	e713      	b.n	8003106 <__aeabi_dsub+0x582>
 80032de:	465c      	mov	r4, fp
 80032e0:	0017      	movs	r7, r2
 80032e2:	2500      	movs	r5, #0
 80032e4:	e5f6      	b.n	8002ed4 <__aeabi_dsub+0x350>
 80032e6:	08d7      	lsrs	r7, r2, #3
 80032e8:	0749      	lsls	r1, r1, #29
 80032ea:	2302      	movs	r3, #2
 80032ec:	430f      	orrs	r7, r1
 80032ee:	092d      	lsrs	r5, r5, #4
 80032f0:	e6a0      	b.n	8003034 <__aeabi_dsub+0x4b0>
 80032f2:	0007      	movs	r7, r0
 80032f4:	e542      	b.n	8002d7c <__aeabi_dsub+0x1f8>
 80032f6:	465b      	mov	r3, fp
 80032f8:	2601      	movs	r6, #1
 80032fa:	075f      	lsls	r7, r3, #29
 80032fc:	08dd      	lsrs	r5, r3, #3
 80032fe:	4663      	mov	r3, ip
 8003300:	08d2      	lsrs	r2, r2, #3
 8003302:	4317      	orrs	r7, r2
 8003304:	401e      	ands	r6, r3
 8003306:	e539      	b.n	8002d7c <__aeabi_dsub+0x1f8>
 8003308:	465b      	mov	r3, fp
 800330a:	08d2      	lsrs	r2, r2, #3
 800330c:	075f      	lsls	r7, r3, #29
 800330e:	4317      	orrs	r7, r2
 8003310:	08dd      	lsrs	r5, r3, #3
 8003312:	e533      	b.n	8002d7c <__aeabi_dsub+0x1f8>
 8003314:	4a1e      	ldr	r2, [pc, #120]	@ (8003390 <__aeabi_dsub+0x80c>)
 8003316:	08db      	lsrs	r3, r3, #3
 8003318:	4022      	ands	r2, r4
 800331a:	0757      	lsls	r7, r2, #29
 800331c:	0252      	lsls	r2, r2, #9
 800331e:	2501      	movs	r5, #1
 8003320:	431f      	orrs	r7, r3
 8003322:	0b14      	lsrs	r4, r2, #12
 8003324:	e5c2      	b.n	8002eac <__aeabi_dsub+0x328>
 8003326:	000e      	movs	r6, r1
 8003328:	2001      	movs	r0, #1
 800332a:	e65f      	b.n	8002fec <__aeabi_dsub+0x468>
 800332c:	2b00      	cmp	r3, #0
 800332e:	d00d      	beq.n	800334c <__aeabi_dsub+0x7c8>
 8003330:	464b      	mov	r3, r9
 8003332:	1b5b      	subs	r3, r3, r5
 8003334:	469c      	mov	ip, r3
 8003336:	2d00      	cmp	r5, #0
 8003338:	d100      	bne.n	800333c <__aeabi_dsub+0x7b8>
 800333a:	e548      	b.n	8002dce <__aeabi_dsub+0x24a>
 800333c:	2701      	movs	r7, #1
 800333e:	2b38      	cmp	r3, #56	@ 0x38
 8003340:	dd00      	ble.n	8003344 <__aeabi_dsub+0x7c0>
 8003342:	e566      	b.n	8002e12 <__aeabi_dsub+0x28e>
 8003344:	2380      	movs	r3, #128	@ 0x80
 8003346:	041b      	lsls	r3, r3, #16
 8003348:	431c      	orrs	r4, r3
 800334a:	e550      	b.n	8002dee <__aeabi_dsub+0x26a>
 800334c:	1c6b      	adds	r3, r5, #1
 800334e:	4d11      	ldr	r5, [pc, #68]	@ (8003394 <__aeabi_dsub+0x810>)
 8003350:	422b      	tst	r3, r5
 8003352:	d000      	beq.n	8003356 <__aeabi_dsub+0x7d2>
 8003354:	e673      	b.n	800303e <__aeabi_dsub+0x4ba>
 8003356:	4659      	mov	r1, fp
 8003358:	0023      	movs	r3, r4
 800335a:	4311      	orrs	r1, r2
 800335c:	468a      	mov	sl, r1
 800335e:	4303      	orrs	r3, r0
 8003360:	e600      	b.n	8002f64 <__aeabi_dsub+0x3e0>
 8003362:	0767      	lsls	r7, r4, #29
 8003364:	08c0      	lsrs	r0, r0, #3
 8003366:	2300      	movs	r3, #0
 8003368:	4307      	orrs	r7, r0
 800336a:	08e5      	lsrs	r5, r4, #3
 800336c:	e662      	b.n	8003034 <__aeabi_dsub+0x4b0>
 800336e:	0764      	lsls	r4, r4, #29
 8003370:	08ff      	lsrs	r7, r7, #3
 8003372:	4327      	orrs	r7, r4
 8003374:	0905      	lsrs	r5, r0, #4
 8003376:	e65d      	b.n	8003034 <__aeabi_dsub+0x4b0>
 8003378:	08d2      	lsrs	r2, r2, #3
 800337a:	0749      	lsls	r1, r1, #29
 800337c:	4311      	orrs	r1, r2
 800337e:	000f      	movs	r7, r1
 8003380:	2302      	movs	r3, #2
 8003382:	092d      	lsrs	r5, r5, #4
 8003384:	e656      	b.n	8003034 <__aeabi_dsub+0x4b0>
 8003386:	0007      	movs	r7, r0
 8003388:	e5a4      	b.n	8002ed4 <__aeabi_dsub+0x350>
 800338a:	0038      	movs	r0, r7
 800338c:	e48f      	b.n	8002cae <__aeabi_dsub+0x12a>
 800338e:	46c0      	nop			@ (mov r8, r8)
 8003390:	ff7fffff 	.word	0xff7fffff
 8003394:	000007fe 	.word	0x000007fe

08003398 <__aeabi_dcmpun>:
 8003398:	b5f0      	push	{r4, r5, r6, r7, lr}
 800339a:	46c6      	mov	lr, r8
 800339c:	031e      	lsls	r6, r3, #12
 800339e:	0b36      	lsrs	r6, r6, #12
 80033a0:	46b0      	mov	r8, r6
 80033a2:	4e0d      	ldr	r6, [pc, #52]	@ (80033d8 <__aeabi_dcmpun+0x40>)
 80033a4:	030c      	lsls	r4, r1, #12
 80033a6:	004d      	lsls	r5, r1, #1
 80033a8:	005f      	lsls	r7, r3, #1
 80033aa:	b500      	push	{lr}
 80033ac:	0b24      	lsrs	r4, r4, #12
 80033ae:	0d6d      	lsrs	r5, r5, #21
 80033b0:	0d7f      	lsrs	r7, r7, #21
 80033b2:	42b5      	cmp	r5, r6
 80033b4:	d00b      	beq.n	80033ce <__aeabi_dcmpun+0x36>
 80033b6:	4908      	ldr	r1, [pc, #32]	@ (80033d8 <__aeabi_dcmpun+0x40>)
 80033b8:	2000      	movs	r0, #0
 80033ba:	428f      	cmp	r7, r1
 80033bc:	d104      	bne.n	80033c8 <__aeabi_dcmpun+0x30>
 80033be:	4646      	mov	r6, r8
 80033c0:	4316      	orrs	r6, r2
 80033c2:	0030      	movs	r0, r6
 80033c4:	1e43      	subs	r3, r0, #1
 80033c6:	4198      	sbcs	r0, r3
 80033c8:	bc80      	pop	{r7}
 80033ca:	46b8      	mov	r8, r7
 80033cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80033ce:	4304      	orrs	r4, r0
 80033d0:	2001      	movs	r0, #1
 80033d2:	2c00      	cmp	r4, #0
 80033d4:	d1f8      	bne.n	80033c8 <__aeabi_dcmpun+0x30>
 80033d6:	e7ee      	b.n	80033b6 <__aeabi_dcmpun+0x1e>
 80033d8:	000007ff 	.word	0x000007ff

080033dc <__aeabi_d2iz>:
 80033dc:	000b      	movs	r3, r1
 80033de:	0002      	movs	r2, r0
 80033e0:	b570      	push	{r4, r5, r6, lr}
 80033e2:	4d16      	ldr	r5, [pc, #88]	@ (800343c <__aeabi_d2iz+0x60>)
 80033e4:	030c      	lsls	r4, r1, #12
 80033e6:	b082      	sub	sp, #8
 80033e8:	0049      	lsls	r1, r1, #1
 80033ea:	2000      	movs	r0, #0
 80033ec:	9200      	str	r2, [sp, #0]
 80033ee:	9301      	str	r3, [sp, #4]
 80033f0:	0b24      	lsrs	r4, r4, #12
 80033f2:	0d49      	lsrs	r1, r1, #21
 80033f4:	0fde      	lsrs	r6, r3, #31
 80033f6:	42a9      	cmp	r1, r5
 80033f8:	dd04      	ble.n	8003404 <__aeabi_d2iz+0x28>
 80033fa:	4811      	ldr	r0, [pc, #68]	@ (8003440 <__aeabi_d2iz+0x64>)
 80033fc:	4281      	cmp	r1, r0
 80033fe:	dd03      	ble.n	8003408 <__aeabi_d2iz+0x2c>
 8003400:	4b10      	ldr	r3, [pc, #64]	@ (8003444 <__aeabi_d2iz+0x68>)
 8003402:	18f0      	adds	r0, r6, r3
 8003404:	b002      	add	sp, #8
 8003406:	bd70      	pop	{r4, r5, r6, pc}
 8003408:	2080      	movs	r0, #128	@ 0x80
 800340a:	0340      	lsls	r0, r0, #13
 800340c:	4320      	orrs	r0, r4
 800340e:	4c0e      	ldr	r4, [pc, #56]	@ (8003448 <__aeabi_d2iz+0x6c>)
 8003410:	1a64      	subs	r4, r4, r1
 8003412:	2c1f      	cmp	r4, #31
 8003414:	dd08      	ble.n	8003428 <__aeabi_d2iz+0x4c>
 8003416:	4b0d      	ldr	r3, [pc, #52]	@ (800344c <__aeabi_d2iz+0x70>)
 8003418:	1a5b      	subs	r3, r3, r1
 800341a:	40d8      	lsrs	r0, r3
 800341c:	0003      	movs	r3, r0
 800341e:	4258      	negs	r0, r3
 8003420:	2e00      	cmp	r6, #0
 8003422:	d1ef      	bne.n	8003404 <__aeabi_d2iz+0x28>
 8003424:	0018      	movs	r0, r3
 8003426:	e7ed      	b.n	8003404 <__aeabi_d2iz+0x28>
 8003428:	4b09      	ldr	r3, [pc, #36]	@ (8003450 <__aeabi_d2iz+0x74>)
 800342a:	9a00      	ldr	r2, [sp, #0]
 800342c:	469c      	mov	ip, r3
 800342e:	0003      	movs	r3, r0
 8003430:	4461      	add	r1, ip
 8003432:	408b      	lsls	r3, r1
 8003434:	40e2      	lsrs	r2, r4
 8003436:	4313      	orrs	r3, r2
 8003438:	e7f1      	b.n	800341e <__aeabi_d2iz+0x42>
 800343a:	46c0      	nop			@ (mov r8, r8)
 800343c:	000003fe 	.word	0x000003fe
 8003440:	0000041d 	.word	0x0000041d
 8003444:	7fffffff 	.word	0x7fffffff
 8003448:	00000433 	.word	0x00000433
 800344c:	00000413 	.word	0x00000413
 8003450:	fffffbed 	.word	0xfffffbed

08003454 <__aeabi_i2d>:
 8003454:	b570      	push	{r4, r5, r6, lr}
 8003456:	2800      	cmp	r0, #0
 8003458:	d016      	beq.n	8003488 <__aeabi_i2d+0x34>
 800345a:	17c3      	asrs	r3, r0, #31
 800345c:	18c5      	adds	r5, r0, r3
 800345e:	405d      	eors	r5, r3
 8003460:	0fc4      	lsrs	r4, r0, #31
 8003462:	0028      	movs	r0, r5
 8003464:	f000 f8ca 	bl	80035fc <__clzsi2>
 8003468:	4b10      	ldr	r3, [pc, #64]	@ (80034ac <__aeabi_i2d+0x58>)
 800346a:	1a1b      	subs	r3, r3, r0
 800346c:	055b      	lsls	r3, r3, #21
 800346e:	0d5b      	lsrs	r3, r3, #21
 8003470:	280a      	cmp	r0, #10
 8003472:	dc14      	bgt.n	800349e <__aeabi_i2d+0x4a>
 8003474:	0002      	movs	r2, r0
 8003476:	002e      	movs	r6, r5
 8003478:	3215      	adds	r2, #21
 800347a:	4096      	lsls	r6, r2
 800347c:	220b      	movs	r2, #11
 800347e:	1a12      	subs	r2, r2, r0
 8003480:	40d5      	lsrs	r5, r2
 8003482:	032d      	lsls	r5, r5, #12
 8003484:	0b2d      	lsrs	r5, r5, #12
 8003486:	e003      	b.n	8003490 <__aeabi_i2d+0x3c>
 8003488:	2400      	movs	r4, #0
 800348a:	2300      	movs	r3, #0
 800348c:	2500      	movs	r5, #0
 800348e:	2600      	movs	r6, #0
 8003490:	051b      	lsls	r3, r3, #20
 8003492:	432b      	orrs	r3, r5
 8003494:	07e4      	lsls	r4, r4, #31
 8003496:	4323      	orrs	r3, r4
 8003498:	0030      	movs	r0, r6
 800349a:	0019      	movs	r1, r3
 800349c:	bd70      	pop	{r4, r5, r6, pc}
 800349e:	380b      	subs	r0, #11
 80034a0:	4085      	lsls	r5, r0
 80034a2:	032d      	lsls	r5, r5, #12
 80034a4:	2600      	movs	r6, #0
 80034a6:	0b2d      	lsrs	r5, r5, #12
 80034a8:	e7f2      	b.n	8003490 <__aeabi_i2d+0x3c>
 80034aa:	46c0      	nop			@ (mov r8, r8)
 80034ac:	0000041e 	.word	0x0000041e

080034b0 <__aeabi_ui2d>:
 80034b0:	b510      	push	{r4, lr}
 80034b2:	1e04      	subs	r4, r0, #0
 80034b4:	d010      	beq.n	80034d8 <__aeabi_ui2d+0x28>
 80034b6:	f000 f8a1 	bl	80035fc <__clzsi2>
 80034ba:	4b0e      	ldr	r3, [pc, #56]	@ (80034f4 <__aeabi_ui2d+0x44>)
 80034bc:	1a1b      	subs	r3, r3, r0
 80034be:	055b      	lsls	r3, r3, #21
 80034c0:	0d5b      	lsrs	r3, r3, #21
 80034c2:	280a      	cmp	r0, #10
 80034c4:	dc0f      	bgt.n	80034e6 <__aeabi_ui2d+0x36>
 80034c6:	220b      	movs	r2, #11
 80034c8:	0021      	movs	r1, r4
 80034ca:	1a12      	subs	r2, r2, r0
 80034cc:	40d1      	lsrs	r1, r2
 80034ce:	3015      	adds	r0, #21
 80034d0:	030a      	lsls	r2, r1, #12
 80034d2:	4084      	lsls	r4, r0
 80034d4:	0b12      	lsrs	r2, r2, #12
 80034d6:	e001      	b.n	80034dc <__aeabi_ui2d+0x2c>
 80034d8:	2300      	movs	r3, #0
 80034da:	2200      	movs	r2, #0
 80034dc:	051b      	lsls	r3, r3, #20
 80034de:	4313      	orrs	r3, r2
 80034e0:	0020      	movs	r0, r4
 80034e2:	0019      	movs	r1, r3
 80034e4:	bd10      	pop	{r4, pc}
 80034e6:	0022      	movs	r2, r4
 80034e8:	380b      	subs	r0, #11
 80034ea:	4082      	lsls	r2, r0
 80034ec:	0312      	lsls	r2, r2, #12
 80034ee:	2400      	movs	r4, #0
 80034f0:	0b12      	lsrs	r2, r2, #12
 80034f2:	e7f3      	b.n	80034dc <__aeabi_ui2d+0x2c>
 80034f4:	0000041e 	.word	0x0000041e

080034f8 <__aeabi_d2f>:
 80034f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80034fa:	004b      	lsls	r3, r1, #1
 80034fc:	030f      	lsls	r7, r1, #12
 80034fe:	0d5b      	lsrs	r3, r3, #21
 8003500:	4c3a      	ldr	r4, [pc, #232]	@ (80035ec <__aeabi_d2f+0xf4>)
 8003502:	0f45      	lsrs	r5, r0, #29
 8003504:	b083      	sub	sp, #12
 8003506:	0a7f      	lsrs	r7, r7, #9
 8003508:	1c5e      	adds	r6, r3, #1
 800350a:	432f      	orrs	r7, r5
 800350c:	9000      	str	r0, [sp, #0]
 800350e:	9101      	str	r1, [sp, #4]
 8003510:	0fca      	lsrs	r2, r1, #31
 8003512:	00c5      	lsls	r5, r0, #3
 8003514:	4226      	tst	r6, r4
 8003516:	d00b      	beq.n	8003530 <__aeabi_d2f+0x38>
 8003518:	4935      	ldr	r1, [pc, #212]	@ (80035f0 <__aeabi_d2f+0xf8>)
 800351a:	185c      	adds	r4, r3, r1
 800351c:	2cfe      	cmp	r4, #254	@ 0xfe
 800351e:	dd13      	ble.n	8003548 <__aeabi_d2f+0x50>
 8003520:	20ff      	movs	r0, #255	@ 0xff
 8003522:	2300      	movs	r3, #0
 8003524:	05c0      	lsls	r0, r0, #23
 8003526:	4318      	orrs	r0, r3
 8003528:	07d2      	lsls	r2, r2, #31
 800352a:	4310      	orrs	r0, r2
 800352c:	b003      	add	sp, #12
 800352e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003530:	433d      	orrs	r5, r7
 8003532:	2b00      	cmp	r3, #0
 8003534:	d101      	bne.n	800353a <__aeabi_d2f+0x42>
 8003536:	2000      	movs	r0, #0
 8003538:	e7f4      	b.n	8003524 <__aeabi_d2f+0x2c>
 800353a:	2d00      	cmp	r5, #0
 800353c:	d0f0      	beq.n	8003520 <__aeabi_d2f+0x28>
 800353e:	2380      	movs	r3, #128	@ 0x80
 8003540:	03db      	lsls	r3, r3, #15
 8003542:	20ff      	movs	r0, #255	@ 0xff
 8003544:	433b      	orrs	r3, r7
 8003546:	e7ed      	b.n	8003524 <__aeabi_d2f+0x2c>
 8003548:	2c00      	cmp	r4, #0
 800354a:	dd0c      	ble.n	8003566 <__aeabi_d2f+0x6e>
 800354c:	9b00      	ldr	r3, [sp, #0]
 800354e:	00ff      	lsls	r7, r7, #3
 8003550:	019b      	lsls	r3, r3, #6
 8003552:	1e58      	subs	r0, r3, #1
 8003554:	4183      	sbcs	r3, r0
 8003556:	0f69      	lsrs	r1, r5, #29
 8003558:	433b      	orrs	r3, r7
 800355a:	430b      	orrs	r3, r1
 800355c:	0759      	lsls	r1, r3, #29
 800355e:	d127      	bne.n	80035b0 <__aeabi_d2f+0xb8>
 8003560:	08db      	lsrs	r3, r3, #3
 8003562:	b2e0      	uxtb	r0, r4
 8003564:	e7de      	b.n	8003524 <__aeabi_d2f+0x2c>
 8003566:	0021      	movs	r1, r4
 8003568:	3117      	adds	r1, #23
 800356a:	db31      	blt.n	80035d0 <__aeabi_d2f+0xd8>
 800356c:	2180      	movs	r1, #128	@ 0x80
 800356e:	201e      	movs	r0, #30
 8003570:	0409      	lsls	r1, r1, #16
 8003572:	4339      	orrs	r1, r7
 8003574:	1b00      	subs	r0, r0, r4
 8003576:	281f      	cmp	r0, #31
 8003578:	dd2d      	ble.n	80035d6 <__aeabi_d2f+0xde>
 800357a:	2602      	movs	r6, #2
 800357c:	4276      	negs	r6, r6
 800357e:	1b34      	subs	r4, r6, r4
 8003580:	000e      	movs	r6, r1
 8003582:	40e6      	lsrs	r6, r4
 8003584:	0034      	movs	r4, r6
 8003586:	2820      	cmp	r0, #32
 8003588:	d004      	beq.n	8003594 <__aeabi_d2f+0x9c>
 800358a:	481a      	ldr	r0, [pc, #104]	@ (80035f4 <__aeabi_d2f+0xfc>)
 800358c:	4684      	mov	ip, r0
 800358e:	4463      	add	r3, ip
 8003590:	4099      	lsls	r1, r3
 8003592:	430d      	orrs	r5, r1
 8003594:	002b      	movs	r3, r5
 8003596:	1e59      	subs	r1, r3, #1
 8003598:	418b      	sbcs	r3, r1
 800359a:	4323      	orrs	r3, r4
 800359c:	0759      	lsls	r1, r3, #29
 800359e:	d003      	beq.n	80035a8 <__aeabi_d2f+0xb0>
 80035a0:	210f      	movs	r1, #15
 80035a2:	4019      	ands	r1, r3
 80035a4:	2904      	cmp	r1, #4
 80035a6:	d10b      	bne.n	80035c0 <__aeabi_d2f+0xc8>
 80035a8:	019b      	lsls	r3, r3, #6
 80035aa:	2000      	movs	r0, #0
 80035ac:	0a5b      	lsrs	r3, r3, #9
 80035ae:	e7b9      	b.n	8003524 <__aeabi_d2f+0x2c>
 80035b0:	210f      	movs	r1, #15
 80035b2:	4019      	ands	r1, r3
 80035b4:	2904      	cmp	r1, #4
 80035b6:	d104      	bne.n	80035c2 <__aeabi_d2f+0xca>
 80035b8:	019b      	lsls	r3, r3, #6
 80035ba:	0a5b      	lsrs	r3, r3, #9
 80035bc:	b2e0      	uxtb	r0, r4
 80035be:	e7b1      	b.n	8003524 <__aeabi_d2f+0x2c>
 80035c0:	2400      	movs	r4, #0
 80035c2:	3304      	adds	r3, #4
 80035c4:	0159      	lsls	r1, r3, #5
 80035c6:	d5f7      	bpl.n	80035b8 <__aeabi_d2f+0xc0>
 80035c8:	3401      	adds	r4, #1
 80035ca:	2300      	movs	r3, #0
 80035cc:	b2e0      	uxtb	r0, r4
 80035ce:	e7a9      	b.n	8003524 <__aeabi_d2f+0x2c>
 80035d0:	2000      	movs	r0, #0
 80035d2:	2300      	movs	r3, #0
 80035d4:	e7a6      	b.n	8003524 <__aeabi_d2f+0x2c>
 80035d6:	4c08      	ldr	r4, [pc, #32]	@ (80035f8 <__aeabi_d2f+0x100>)
 80035d8:	191c      	adds	r4, r3, r4
 80035da:	002b      	movs	r3, r5
 80035dc:	40a5      	lsls	r5, r4
 80035de:	40c3      	lsrs	r3, r0
 80035e0:	40a1      	lsls	r1, r4
 80035e2:	1e68      	subs	r0, r5, #1
 80035e4:	4185      	sbcs	r5, r0
 80035e6:	4329      	orrs	r1, r5
 80035e8:	430b      	orrs	r3, r1
 80035ea:	e7d7      	b.n	800359c <__aeabi_d2f+0xa4>
 80035ec:	000007fe 	.word	0x000007fe
 80035f0:	fffffc80 	.word	0xfffffc80
 80035f4:	fffffca2 	.word	0xfffffca2
 80035f8:	fffffc82 	.word	0xfffffc82

080035fc <__clzsi2>:
 80035fc:	211c      	movs	r1, #28
 80035fe:	2301      	movs	r3, #1
 8003600:	041b      	lsls	r3, r3, #16
 8003602:	4298      	cmp	r0, r3
 8003604:	d301      	bcc.n	800360a <__clzsi2+0xe>
 8003606:	0c00      	lsrs	r0, r0, #16
 8003608:	3910      	subs	r1, #16
 800360a:	0a1b      	lsrs	r3, r3, #8
 800360c:	4298      	cmp	r0, r3
 800360e:	d301      	bcc.n	8003614 <__clzsi2+0x18>
 8003610:	0a00      	lsrs	r0, r0, #8
 8003612:	3908      	subs	r1, #8
 8003614:	091b      	lsrs	r3, r3, #4
 8003616:	4298      	cmp	r0, r3
 8003618:	d301      	bcc.n	800361e <__clzsi2+0x22>
 800361a:	0900      	lsrs	r0, r0, #4
 800361c:	3904      	subs	r1, #4
 800361e:	a202      	add	r2, pc, #8	@ (adr r2, 8003628 <__clzsi2+0x2c>)
 8003620:	5c10      	ldrb	r0, [r2, r0]
 8003622:	1840      	adds	r0, r0, r1
 8003624:	4770      	bx	lr
 8003626:	46c0      	nop			@ (mov r8, r8)
 8003628:	02020304 	.word	0x02020304
 800362c:	01010101 	.word	0x01010101
	...

08003638 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8003638:	b580      	push	{r7, lr}
 800363a:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800363c:	f3bf 8f4f 	dsb	sy
}
 8003640:	46c0      	nop			@ (mov r8, r8)
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003642:	4b04      	ldr	r3, [pc, #16]	@ (8003654 <__NVIC_SystemReset+0x1c>)
 8003644:	4a04      	ldr	r2, [pc, #16]	@ (8003658 <__NVIC_SystemReset+0x20>)
 8003646:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8003648:	f3bf 8f4f 	dsb	sy
}
 800364c:	46c0      	nop			@ (mov r8, r8)
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 800364e:	46c0      	nop			@ (mov r8, r8)
 8003650:	e7fd      	b.n	800364e <__NVIC_SystemReset+0x16>
 8003652:	46c0      	nop			@ (mov r8, r8)
 8003654:	e000ed00 	.word	0xe000ed00
 8003658:	05fa0004 	.word	0x05fa0004

0800365c <read_pressure_psi>:
/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/
ADC_HandleTypeDef hadc1;

int read_pressure_psi(void) {
 800365c:	b580      	push	{r7, lr}
 800365e:	b084      	sub	sp, #16
 8003660:	af00      	add	r7, sp, #0
    HAL_ADC_Start(&hadc1);
 8003662:	4b34      	ldr	r3, [pc, #208]	@ (8003734 <read_pressure_psi+0xd8>)
 8003664:	0018      	movs	r0, r3
 8003666:	f002 fbe3 	bl	8005e30 <HAL_ADC_Start>

    if (HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY) != HAL_OK) {
 800366a:	2301      	movs	r3, #1
 800366c:	425a      	negs	r2, r3
 800366e:	4b31      	ldr	r3, [pc, #196]	@ (8003734 <read_pressure_psi+0xd8>)
 8003670:	0011      	movs	r1, r2
 8003672:	0018      	movs	r0, r3
 8003674:	f002 fc2a 	bl	8005ecc <HAL_ADC_PollForConversion>
 8003678:	1e03      	subs	r3, r0, #0
 800367a:	d002      	beq.n	8003682 <read_pressure_psi+0x26>
        return -1;
 800367c:	2301      	movs	r3, #1
 800367e:	425b      	negs	r3, r3
 8003680:	e054      	b.n	800372c <read_pressure_psi+0xd0>
    }

    uint32_t adc_raw_value = HAL_ADC_GetValue(&hadc1);
 8003682:	4b2c      	ldr	r3, [pc, #176]	@ (8003734 <read_pressure_psi+0xd8>)
 8003684:	0018      	movs	r0, r3
 8003686:	f002 fcb5 	bl	8005ff4 <HAL_ADC_GetValue>
 800368a:	0003      	movs	r3, r0
 800368c:	60bb      	str	r3, [r7, #8]
    float voltage = ((adc_raw_value * 3.3f) / 4095.0f) * 2.0f;
 800368e:	68b8      	ldr	r0, [r7, #8]
 8003690:	f7fd ff4c 	bl	800152c <__aeabi_ui2f>
 8003694:	1c03      	adds	r3, r0, #0
 8003696:	4928      	ldr	r1, [pc, #160]	@ (8003738 <read_pressure_psi+0xdc>)
 8003698:	1c18      	adds	r0, r3, #0
 800369a:	f7fd fb69 	bl	8000d70 <__aeabi_fmul>
 800369e:	1c03      	adds	r3, r0, #0
 80036a0:	4926      	ldr	r1, [pc, #152]	@ (800373c <read_pressure_psi+0xe0>)
 80036a2:	1c18      	adds	r0, r3, #0
 80036a4:	f7fd f996 	bl	80009d4 <__aeabi_fdiv>
 80036a8:	1c03      	adds	r3, r0, #0
 80036aa:	1c19      	adds	r1, r3, #0
 80036ac:	1c18      	adds	r0, r3, #0
 80036ae:	f7fc ff9f 	bl	80005f0 <__aeabi_fadd>
 80036b2:	1c03      	adds	r3, r0, #0
 80036b4:	60fb      	str	r3, [r7, #12]

    if (voltage < 0.7f) voltage = 0.7f;
 80036b6:	4922      	ldr	r1, [pc, #136]	@ (8003740 <read_pressure_psi+0xe4>)
 80036b8:	68f8      	ldr	r0, [r7, #12]
 80036ba:	f7fc ff03 	bl	80004c4 <__aeabi_fcmplt>
 80036be:	1e03      	subs	r3, r0, #0
 80036c0:	d001      	beq.n	80036c6 <read_pressure_psi+0x6a>
 80036c2:	4b1f      	ldr	r3, [pc, #124]	@ (8003740 <read_pressure_psi+0xe4>)
 80036c4:	60fb      	str	r3, [r7, #12]
    if (voltage > 4.5f) voltage = 4.5f;
 80036c6:	491f      	ldr	r1, [pc, #124]	@ (8003744 <read_pressure_psi+0xe8>)
 80036c8:	68f8      	ldr	r0, [r7, #12]
 80036ca:	f7fc ff0f 	bl	80004ec <__aeabi_fcmpgt>
 80036ce:	1e03      	subs	r3, r0, #0
 80036d0:	d001      	beq.n	80036d6 <read_pressure_psi+0x7a>
 80036d2:	4b1c      	ldr	r3, [pc, #112]	@ (8003744 <read_pressure_psi+0xe8>)
 80036d4:	60fb      	str	r3, [r7, #12]

    float pressure = ((voltage - 0.7f) / 3.8f) * 150.0f;
 80036d6:	491a      	ldr	r1, [pc, #104]	@ (8003740 <read_pressure_psi+0xe4>)
 80036d8:	68f8      	ldr	r0, [r7, #12]
 80036da:	f7fd fca3 	bl	8001024 <__aeabi_fsub>
 80036de:	1c03      	adds	r3, r0, #0
 80036e0:	4919      	ldr	r1, [pc, #100]	@ (8003748 <read_pressure_psi+0xec>)
 80036e2:	1c18      	adds	r0, r3, #0
 80036e4:	f7fd f976 	bl	80009d4 <__aeabi_fdiv>
 80036e8:	1c03      	adds	r3, r0, #0
 80036ea:	4918      	ldr	r1, [pc, #96]	@ (800374c <read_pressure_psi+0xf0>)
 80036ec:	1c18      	adds	r0, r3, #0
 80036ee:	f7fd fb3f 	bl	8000d70 <__aeabi_fmul>
 80036f2:	1c03      	adds	r3, r0, #0
 80036f4:	607b      	str	r3, [r7, #4]

    // Proper rounding for both positive and negative values
    if (pressure >= 0.0f)
 80036f6:	2100      	movs	r1, #0
 80036f8:	6878      	ldr	r0, [r7, #4]
 80036fa:	f7fc ff01 	bl	8000500 <__aeabi_fcmpge>
 80036fe:	1e03      	subs	r3, r0, #0
 8003700:	d00a      	beq.n	8003718 <read_pressure_psi+0xbc>
        return (int)(pressure + 0.5f);
 8003702:	21fc      	movs	r1, #252	@ 0xfc
 8003704:	0589      	lsls	r1, r1, #22
 8003706:	6878      	ldr	r0, [r7, #4]
 8003708:	f7fc ff72 	bl	80005f0 <__aeabi_fadd>
 800370c:	1c03      	adds	r3, r0, #0
 800370e:	1c18      	adds	r0, r3, #0
 8003710:	f7fd feec 	bl	80014ec <__aeabi_f2iz>
 8003714:	0003      	movs	r3, r0
 8003716:	e009      	b.n	800372c <read_pressure_psi+0xd0>
    else
        return (int)(pressure - 0.5f);
 8003718:	21fc      	movs	r1, #252	@ 0xfc
 800371a:	0589      	lsls	r1, r1, #22
 800371c:	6878      	ldr	r0, [r7, #4]
 800371e:	f7fd fc81 	bl	8001024 <__aeabi_fsub>
 8003722:	1c03      	adds	r3, r0, #0
 8003724:	1c18      	adds	r0, r3, #0
 8003726:	f7fd fee1 	bl	80014ec <__aeabi_f2iz>
 800372a:	0003      	movs	r3, r0
}
 800372c:	0018      	movs	r0, r3
 800372e:	46bd      	mov	sp, r7
 8003730:	b004      	add	sp, #16
 8003732:	bd80      	pop	{r7, pc}
 8003734:	200001fc 	.word	0x200001fc
 8003738:	40533333 	.word	0x40533333
 800373c:	457ff000 	.word	0x457ff000
 8003740:	3f333333 	.word	0x3f333333
 8003744:	40900000 	.word	0x40900000
 8003748:	40733333 	.word	0x40733333
 800374c:	43160000 	.word	0x43160000

08003750 <read_encoder_delta>:
/* USER CODE BEGIN PV */
static uint8_t last_encoded = 0;

int read_encoder_delta(void) {
 8003750:	b590      	push	{r4, r7, lr}
 8003752:	b083      	sub	sp, #12
 8003754:	af00      	add	r7, sp, #0
    static uint8_t last_state = 0;
    static int8_t delta_accumulator = 0;

    uint8_t a = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_2);
 8003756:	1dfc      	adds	r4, r7, #7
 8003758:	23a0      	movs	r3, #160	@ 0xa0
 800375a:	05db      	lsls	r3, r3, #23
 800375c:	2104      	movs	r1, #4
 800375e:	0018      	movs	r0, r3
 8003760:	f003 f8ca 	bl	80068f8 <HAL_GPIO_ReadPin>
 8003764:	0003      	movs	r3, r0
 8003766:	7023      	strb	r3, [r4, #0]
    uint8_t b = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_3);
 8003768:	1dbc      	adds	r4, r7, #6
 800376a:	23a0      	movs	r3, #160	@ 0xa0
 800376c:	05db      	lsls	r3, r3, #23
 800376e:	2108      	movs	r1, #8
 8003770:	0018      	movs	r0, r3
 8003772:	f003 f8c1 	bl	80068f8 <HAL_GPIO_ReadPin>
 8003776:	0003      	movs	r3, r0
 8003778:	7023      	strb	r3, [r4, #0]

    uint8_t new_state = (a << 1) | b;
 800377a:	1dfb      	adds	r3, r7, #7
 800377c:	781b      	ldrb	r3, [r3, #0]
 800377e:	b25b      	sxtb	r3, r3
 8003780:	18db      	adds	r3, r3, r3
 8003782:	b25a      	sxtb	r2, r3
 8003784:	1dbb      	adds	r3, r7, #6
 8003786:	781b      	ldrb	r3, [r3, #0]
 8003788:	b25b      	sxtb	r3, r3
 800378a:	4313      	orrs	r3, r2
 800378c:	b25a      	sxtb	r2, r3
 800378e:	1d7b      	adds	r3, r7, #5
 8003790:	701a      	strb	r2, [r3, #0]

    // Only act if state actually changed
    if (new_state != last_state) {
 8003792:	4b2f      	ldr	r3, [pc, #188]	@ (8003850 <read_encoder_delta+0x100>)
 8003794:	781b      	ldrb	r3, [r3, #0]
 8003796:	1d7a      	adds	r2, r7, #5
 8003798:	7812      	ldrb	r2, [r2, #0]
 800379a:	429a      	cmp	r2, r3
 800379c:	d053      	beq.n	8003846 <read_encoder_delta+0xf6>
        // Combine old and new state into 4-bit transition code
        uint8_t transition = (last_state << 2) | new_state;
 800379e:	4b2c      	ldr	r3, [pc, #176]	@ (8003850 <read_encoder_delta+0x100>)
 80037a0:	781b      	ldrb	r3, [r3, #0]
 80037a2:	b25b      	sxtb	r3, r3
 80037a4:	009b      	lsls	r3, r3, #2
 80037a6:	b25a      	sxtb	r2, r3
 80037a8:	1d7b      	adds	r3, r7, #5
 80037aa:	781b      	ldrb	r3, [r3, #0]
 80037ac:	b25b      	sxtb	r3, r3
 80037ae:	4313      	orrs	r3, r2
 80037b0:	b25a      	sxtb	r2, r3
 80037b2:	1d3b      	adds	r3, r7, #4
 80037b4:	701a      	strb	r2, [r3, #0]
        last_state = new_state;
 80037b6:	4b26      	ldr	r3, [pc, #152]	@ (8003850 <read_encoder_delta+0x100>)
 80037b8:	1d7a      	adds	r2, r7, #5
 80037ba:	7812      	ldrb	r2, [r2, #0]
 80037bc:	701a      	strb	r2, [r3, #0]

        // Decode direction
        switch (transition) {
 80037be:	1d3b      	adds	r3, r7, #4
 80037c0:	781b      	ldrb	r3, [r3, #0]
 80037c2:	220e      	movs	r2, #14
 80037c4:	429a      	cmp	r2, r3
 80037c6:	4192      	sbcs	r2, r2
 80037c8:	4252      	negs	r2, r2
 80037ca:	b2d2      	uxtb	r2, r2
 80037cc:	2a00      	cmp	r2, #0
 80037ce:	d124      	bne.n	800381a <read_encoder_delta+0xca>
 80037d0:	2201      	movs	r2, #1
 80037d2:	409a      	lsls	r2, r3
 80037d4:	0013      	movs	r3, r2
 80037d6:	4a1f      	ldr	r2, [pc, #124]	@ (8003854 <read_encoder_delta+0x104>)
 80037d8:	401a      	ands	r2, r3
 80037da:	1e51      	subs	r1, r2, #1
 80037dc:	418a      	sbcs	r2, r1
 80037de:	b2d2      	uxtb	r2, r2
 80037e0:	2a00      	cmp	r2, #0
 80037e2:	d110      	bne.n	8003806 <read_encoder_delta+0xb6>
 80037e4:	4a1c      	ldr	r2, [pc, #112]	@ (8003858 <read_encoder_delta+0x108>)
 80037e6:	4013      	ands	r3, r2
 80037e8:	1e5a      	subs	r2, r3, #1
 80037ea:	4193      	sbcs	r3, r2
 80037ec:	b2db      	uxtb	r3, r3
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d013      	beq.n	800381a <read_encoder_delta+0xca>
            case 0b0001:
            case 0b0111:
            case 0b1110:
            case 0b1000:
                delta_accumulator++;
 80037f2:	4b1a      	ldr	r3, [pc, #104]	@ (800385c <read_encoder_delta+0x10c>)
 80037f4:	781b      	ldrb	r3, [r3, #0]
 80037f6:	b25b      	sxtb	r3, r3
 80037f8:	b2db      	uxtb	r3, r3
 80037fa:	3301      	adds	r3, #1
 80037fc:	b2db      	uxtb	r3, r3
 80037fe:	b25a      	sxtb	r2, r3
 8003800:	4b16      	ldr	r3, [pc, #88]	@ (800385c <read_encoder_delta+0x10c>)
 8003802:	701a      	strb	r2, [r3, #0]
                break;
 8003804:	e00a      	b.n	800381c <read_encoder_delta+0xcc>

            case 0b0010:
            case 0b1011:
            case 0b1101:
            case 0b0100:
                delta_accumulator--;
 8003806:	4b15      	ldr	r3, [pc, #84]	@ (800385c <read_encoder_delta+0x10c>)
 8003808:	781b      	ldrb	r3, [r3, #0]
 800380a:	b25b      	sxtb	r3, r3
 800380c:	b2db      	uxtb	r3, r3
 800380e:	3b01      	subs	r3, #1
 8003810:	b2db      	uxtb	r3, r3
 8003812:	b25a      	sxtb	r2, r3
 8003814:	4b11      	ldr	r3, [pc, #68]	@ (800385c <read_encoder_delta+0x10c>)
 8003816:	701a      	strb	r2, [r3, #0]
                break;
 8003818:	e000      	b.n	800381c <read_encoder_delta+0xcc>

            default:
                // Illegal transition or bounce; ignore
                break;
 800381a:	46c0      	nop			@ (mov r8, r8)
        }

        // Return ±1 only when 4 steps in one direction accumulated
        if (delta_accumulator >= 4) {
 800381c:	4b0f      	ldr	r3, [pc, #60]	@ (800385c <read_encoder_delta+0x10c>)
 800381e:	781b      	ldrb	r3, [r3, #0]
 8003820:	b25b      	sxtb	r3, r3
 8003822:	2b03      	cmp	r3, #3
 8003824:	dd04      	ble.n	8003830 <read_encoder_delta+0xe0>
            delta_accumulator = 0;
 8003826:	4b0d      	ldr	r3, [pc, #52]	@ (800385c <read_encoder_delta+0x10c>)
 8003828:	2200      	movs	r2, #0
 800382a:	701a      	strb	r2, [r3, #0]
            return 1;
 800382c:	2301      	movs	r3, #1
 800382e:	e00b      	b.n	8003848 <read_encoder_delta+0xf8>
        } else if (delta_accumulator <= -4) {
 8003830:	4b0a      	ldr	r3, [pc, #40]	@ (800385c <read_encoder_delta+0x10c>)
 8003832:	781b      	ldrb	r3, [r3, #0]
 8003834:	b25b      	sxtb	r3, r3
 8003836:	3303      	adds	r3, #3
 8003838:	da05      	bge.n	8003846 <read_encoder_delta+0xf6>
            delta_accumulator = 0;
 800383a:	4b08      	ldr	r3, [pc, #32]	@ (800385c <read_encoder_delta+0x10c>)
 800383c:	2200      	movs	r2, #0
 800383e:	701a      	strb	r2, [r3, #0]
            return -1;
 8003840:	2301      	movs	r3, #1
 8003842:	425b      	negs	r3, r3
 8003844:	e000      	b.n	8003848 <read_encoder_delta+0xf8>
        }
    }

    return 0;
 8003846:	2300      	movs	r3, #0
}
 8003848:	0018      	movs	r0, r3
 800384a:	46bd      	mov	sp, r7
 800384c:	b003      	add	sp, #12
 800384e:	bd90      	pop	{r4, r7, pc}
 8003850:	20000300 	.word	0x20000300
 8003854:	00002814 	.word	0x00002814
 8003858:	00004182 	.word	0x00004182
 800385c:	20000301 	.word	0x20000301

08003860 <clear_buffer>:


char OLED[4][20];
char Buffer[4][20]; // staging buffer to write to

void clear_buffer(void) {
 8003860:	b580      	push	{r7, lr}
 8003862:	b082      	sub	sp, #8
 8003864:	af00      	add	r7, sp, #0
    for (int row = 0; row < 4; row++) {
 8003866:	2300      	movs	r3, #0
 8003868:	607b      	str	r3, [r7, #4]
 800386a:	e00e      	b.n	800388a <clear_buffer+0x2a>
        memset(Buffer[row], ' ', 20);
 800386c:	687a      	ldr	r2, [r7, #4]
 800386e:	0013      	movs	r3, r2
 8003870:	009b      	lsls	r3, r3, #2
 8003872:	189b      	adds	r3, r3, r2
 8003874:	009b      	lsls	r3, r3, #2
 8003876:	4a09      	ldr	r2, [pc, #36]	@ (800389c <clear_buffer+0x3c>)
 8003878:	189b      	adds	r3, r3, r2
 800387a:	2214      	movs	r2, #20
 800387c:	2120      	movs	r1, #32
 800387e:	0018      	movs	r0, r3
 8003880:	f005 fb9e 	bl	8008fc0 <memset>
    for (int row = 0; row < 4; row++) {
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	3301      	adds	r3, #1
 8003888:	607b      	str	r3, [r7, #4]
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	2b03      	cmp	r3, #3
 800388e:	dded      	ble.n	800386c <clear_buffer+0xc>
    }
}
 8003890:	46c0      	nop			@ (mov r8, r8)
 8003892:	46c0      	nop			@ (mov r8, r8)
 8003894:	46bd      	mov	sp, r7
 8003896:	b002      	add	sp, #8
 8003898:	bd80      	pop	{r7, pc}
 800389a:	46c0      	nop			@ (mov r8, r8)
 800389c:	200002b0 	.word	0x200002b0

080038a0 <update_display_chunks>:




void update_display_chunks(char Buffer[4][20]) {
 80038a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80038a2:	b087      	sub	sp, #28
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
    for (uint8_t row = 0; row < 4; row++) {
 80038a8:	2317      	movs	r3, #23
 80038aa:	18fb      	adds	r3, r7, r3
 80038ac:	2200      	movs	r2, #0
 80038ae:	701a      	strb	r2, [r3, #0]
 80038b0:	e0a4      	b.n	80039fc <update_display_chunks+0x15c>
        uint32_t *oled_row = (uint32_t *)OLED[row];
 80038b2:	2117      	movs	r1, #23
 80038b4:	187b      	adds	r3, r7, r1
 80038b6:	781a      	ldrb	r2, [r3, #0]
 80038b8:	0013      	movs	r3, r2
 80038ba:	009b      	lsls	r3, r3, #2
 80038bc:	189b      	adds	r3, r3, r2
 80038be:	009b      	lsls	r3, r3, #2
 80038c0:	4a54      	ldr	r2, [pc, #336]	@ (8003a14 <update_display_chunks+0x174>)
 80038c2:	189b      	adds	r3, r3, r2
 80038c4:	613b      	str	r3, [r7, #16]
        uint32_t *buf_row  = (uint32_t *)Buffer[row];
 80038c6:	187b      	adds	r3, r7, r1
 80038c8:	781a      	ldrb	r2, [r3, #0]
 80038ca:	0013      	movs	r3, r2
 80038cc:	009b      	lsls	r3, r3, #2
 80038ce:	189b      	adds	r3, r3, r2
 80038d0:	009b      	lsls	r3, r3, #2
 80038d2:	001a      	movs	r2, r3
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	189b      	adds	r3, r3, r2
 80038d8:	60fb      	str	r3, [r7, #12]

        for (uint8_t chunk = 0; chunk < 5; chunk++) { // 20 chars / 4 = 5 chunks
 80038da:	2316      	movs	r3, #22
 80038dc:	18fb      	adds	r3, r7, r3
 80038de:	2200      	movs	r2, #0
 80038e0:	701a      	strb	r2, [r3, #0]
 80038e2:	e07f      	b.n	80039e4 <update_display_chunks+0x144>
            if (oled_row[chunk] != buf_row[chunk]) {
 80038e4:	2016      	movs	r0, #22
 80038e6:	183b      	adds	r3, r7, r0
 80038e8:	781b      	ldrb	r3, [r3, #0]
 80038ea:	009b      	lsls	r3, r3, #2
 80038ec:	693a      	ldr	r2, [r7, #16]
 80038ee:	18d3      	adds	r3, r2, r3
 80038f0:	681a      	ldr	r2, [r3, #0]
 80038f2:	183b      	adds	r3, r7, r0
 80038f4:	781b      	ldrb	r3, [r3, #0]
 80038f6:	009b      	lsls	r3, r3, #2
 80038f8:	68f9      	ldr	r1, [r7, #12]
 80038fa:	18cb      	adds	r3, r1, r3
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	429a      	cmp	r2, r3
 8003900:	d06a      	beq.n	80039d8 <update_display_chunks+0x138>
                // There's a difference in this chunk — do per-char check
                uint8_t base_col = chunk * 4;
 8003902:	230b      	movs	r3, #11
 8003904:	18fb      	adds	r3, r7, r3
 8003906:	183a      	adds	r2, r7, r0
 8003908:	7812      	ldrb	r2, [r2, #0]
 800390a:	0092      	lsls	r2, r2, #2
 800390c:	701a      	strb	r2, [r3, #0]

                for (uint8_t offset = 0; offset < 4; offset++) {
 800390e:	2315      	movs	r3, #21
 8003910:	18fb      	adds	r3, r7, r3
 8003912:	2200      	movs	r2, #0
 8003914:	701a      	strb	r2, [r3, #0]
 8003916:	e05a      	b.n	80039ce <update_display_chunks+0x12e>
                    uint8_t col = base_col + offset;
 8003918:	200a      	movs	r0, #10
 800391a:	183b      	adds	r3, r7, r0
 800391c:	220b      	movs	r2, #11
 800391e:	18b9      	adds	r1, r7, r2
 8003920:	2215      	movs	r2, #21
 8003922:	18ba      	adds	r2, r7, r2
 8003924:	7809      	ldrb	r1, [r1, #0]
 8003926:	7812      	ldrb	r2, [r2, #0]
 8003928:	188a      	adds	r2, r1, r2
 800392a:	701a      	strb	r2, [r3, #0]
                    if (Buffer[row][col] != OLED[row][col]) {
 800392c:	2617      	movs	r6, #23
 800392e:	19bb      	adds	r3, r7, r6
 8003930:	781a      	ldrb	r2, [r3, #0]
 8003932:	0013      	movs	r3, r2
 8003934:	009b      	lsls	r3, r3, #2
 8003936:	189b      	adds	r3, r3, r2
 8003938:	009b      	lsls	r3, r3, #2
 800393a:	001a      	movs	r2, r3
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	189a      	adds	r2, r3, r2
 8003940:	183b      	adds	r3, r7, r0
 8003942:	781b      	ldrb	r3, [r3, #0]
 8003944:	5cd1      	ldrb	r1, [r2, r3]
 8003946:	19bb      	adds	r3, r7, r6
 8003948:	781a      	ldrb	r2, [r3, #0]
 800394a:	0005      	movs	r5, r0
 800394c:	183b      	adds	r3, r7, r0
 800394e:	7818      	ldrb	r0, [r3, #0]
 8003950:	4c30      	ldr	r4, [pc, #192]	@ (8003a14 <update_display_chunks+0x174>)
 8003952:	0013      	movs	r3, r2
 8003954:	009b      	lsls	r3, r3, #2
 8003956:	189b      	adds	r3, r3, r2
 8003958:	009b      	lsls	r3, r3, #2
 800395a:	18e3      	adds	r3, r4, r3
 800395c:	5c1b      	ldrb	r3, [r3, r0]
 800395e:	4299      	cmp	r1, r3
 8003960:	d02f      	beq.n	80039c2 <update_display_chunks+0x122>
                        NHD_OLED_cursorPos(row, col);
 8003962:	002c      	movs	r4, r5
 8003964:	193b      	adds	r3, r7, r4
 8003966:	781a      	ldrb	r2, [r3, #0]
 8003968:	19bb      	adds	r3, r7, r6
 800396a:	781b      	ldrb	r3, [r3, #0]
 800396c:	0011      	movs	r1, r2
 800396e:	0018      	movs	r0, r3
 8003970:	f001 fd2c 	bl	80053cc <NHD_OLED_cursorPos>
                        NHD_OLED_sendData(Buffer[row][col]);
 8003974:	19bb      	adds	r3, r7, r6
 8003976:	781a      	ldrb	r2, [r3, #0]
 8003978:	0013      	movs	r3, r2
 800397a:	009b      	lsls	r3, r3, #2
 800397c:	189b      	adds	r3, r3, r2
 800397e:	009b      	lsls	r3, r3, #2
 8003980:	001a      	movs	r2, r3
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	189a      	adds	r2, r3, r2
 8003986:	193b      	adds	r3, r7, r4
 8003988:	781b      	ldrb	r3, [r3, #0]
 800398a:	5cd3      	ldrb	r3, [r2, r3]
 800398c:	0018      	movs	r0, r3
 800398e:	f001 fc68 	bl	8005262 <NHD_OLED_sendData>
                        OLED[row][col] = Buffer[row][col];
 8003992:	19bb      	adds	r3, r7, r6
 8003994:	781a      	ldrb	r2, [r3, #0]
 8003996:	0013      	movs	r3, r2
 8003998:	009b      	lsls	r3, r3, #2
 800399a:	189b      	adds	r3, r3, r2
 800399c:	009b      	lsls	r3, r3, #2
 800399e:	001a      	movs	r2, r3
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	1898      	adds	r0, r3, r2
 80039a4:	193b      	adds	r3, r7, r4
 80039a6:	781b      	ldrb	r3, [r3, #0]
 80039a8:	19ba      	adds	r2, r7, r6
 80039aa:	7812      	ldrb	r2, [r2, #0]
 80039ac:	1939      	adds	r1, r7, r4
 80039ae:	7809      	ldrb	r1, [r1, #0]
 80039b0:	5cc4      	ldrb	r4, [r0, r3]
 80039b2:	4818      	ldr	r0, [pc, #96]	@ (8003a14 <update_display_chunks+0x174>)
 80039b4:	0013      	movs	r3, r2
 80039b6:	009b      	lsls	r3, r3, #2
 80039b8:	189b      	adds	r3, r3, r2
 80039ba:	009b      	lsls	r3, r3, #2
 80039bc:	18c3      	adds	r3, r0, r3
 80039be:	1c22      	adds	r2, r4, #0
 80039c0:	545a      	strb	r2, [r3, r1]
                for (uint8_t offset = 0; offset < 4; offset++) {
 80039c2:	2115      	movs	r1, #21
 80039c4:	187b      	adds	r3, r7, r1
 80039c6:	781a      	ldrb	r2, [r3, #0]
 80039c8:	187b      	adds	r3, r7, r1
 80039ca:	3201      	adds	r2, #1
 80039cc:	701a      	strb	r2, [r3, #0]
 80039ce:	2315      	movs	r3, #21
 80039d0:	18fb      	adds	r3, r7, r3
 80039d2:	781b      	ldrb	r3, [r3, #0]
 80039d4:	2b03      	cmp	r3, #3
 80039d6:	d99f      	bls.n	8003918 <update_display_chunks+0x78>
        for (uint8_t chunk = 0; chunk < 5; chunk++) { // 20 chars / 4 = 5 chunks
 80039d8:	2116      	movs	r1, #22
 80039da:	187b      	adds	r3, r7, r1
 80039dc:	781a      	ldrb	r2, [r3, #0]
 80039de:	187b      	adds	r3, r7, r1
 80039e0:	3201      	adds	r2, #1
 80039e2:	701a      	strb	r2, [r3, #0]
 80039e4:	2316      	movs	r3, #22
 80039e6:	18fb      	adds	r3, r7, r3
 80039e8:	781b      	ldrb	r3, [r3, #0]
 80039ea:	2b04      	cmp	r3, #4
 80039ec:	d800      	bhi.n	80039f0 <update_display_chunks+0x150>
 80039ee:	e779      	b.n	80038e4 <update_display_chunks+0x44>
    for (uint8_t row = 0; row < 4; row++) {
 80039f0:	2117      	movs	r1, #23
 80039f2:	187b      	adds	r3, r7, r1
 80039f4:	781a      	ldrb	r2, [r3, #0]
 80039f6:	187b      	adds	r3, r7, r1
 80039f8:	3201      	adds	r2, #1
 80039fa:	701a      	strb	r2, [r3, #0]
 80039fc:	2317      	movs	r3, #23
 80039fe:	18fb      	adds	r3, r7, r3
 8003a00:	781b      	ldrb	r3, [r3, #0]
 8003a02:	2b03      	cmp	r3, #3
 8003a04:	d800      	bhi.n	8003a08 <update_display_chunks+0x168>
 8003a06:	e754      	b.n	80038b2 <update_display_chunks+0x12>
                    }
                }
            }
        }
    }
}
 8003a08:	46c0      	nop			@ (mov r8, r8)
 8003a0a:	46c0      	nop			@ (mov r8, r8)
 8003a0c:	46bd      	mov	sp, r7
 8003a0e:	b007      	add	sp, #28
 8003a10:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003a12:	46c0      	nop			@ (mov r8, r8)
 8003a14:	20000260 	.word	0x20000260

08003a18 <pad_center>:


void pad_center(char dst[20], const char *src) {
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	b086      	sub	sp, #24
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	6078      	str	r0, [r7, #4]
 8003a20:	6039      	str	r1, [r7, #0]
    int len = strlen(src);
 8003a22:	683b      	ldr	r3, [r7, #0]
 8003a24:	0018      	movs	r0, r3
 8003a26:	f7fc fb6b 	bl	8000100 <strlen>
 8003a2a:	0003      	movs	r3, r0
 8003a2c:	617b      	str	r3, [r7, #20]
    if (len > 20) len = 20;
 8003a2e:	697b      	ldr	r3, [r7, #20]
 8003a30:	2b14      	cmp	r3, #20
 8003a32:	dd01      	ble.n	8003a38 <pad_center+0x20>
 8003a34:	2314      	movs	r3, #20
 8003a36:	617b      	str	r3, [r7, #20]

    int pad_left = (20 - len) / 2;
 8003a38:	697b      	ldr	r3, [r7, #20]
 8003a3a:	2214      	movs	r2, #20
 8003a3c:	1ad3      	subs	r3, r2, r3
 8003a3e:	d500      	bpl.n	8003a42 <pad_center+0x2a>
 8003a40:	3301      	adds	r3, #1
 8003a42:	105b      	asrs	r3, r3, #1
 8003a44:	613b      	str	r3, [r7, #16]
    int pad_right = 20 - len - pad_left;
 8003a46:	697b      	ldr	r3, [r7, #20]
 8003a48:	2214      	movs	r2, #20
 8003a4a:	1ad2      	subs	r2, r2, r3
 8003a4c:	693b      	ldr	r3, [r7, #16]
 8003a4e:	1ad3      	subs	r3, r2, r3
 8003a50:	60fb      	str	r3, [r7, #12]

    memset(dst, ' ', 20);
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	2214      	movs	r2, #20
 8003a56:	2120      	movs	r1, #32
 8003a58:	0018      	movs	r0, r3
 8003a5a:	f005 fab1 	bl	8008fc0 <memset>
    memcpy(dst + pad_left, src, len);
 8003a5e:	693b      	ldr	r3, [r7, #16]
 8003a60:	687a      	ldr	r2, [r7, #4]
 8003a62:	18d3      	adds	r3, r2, r3
 8003a64:	697a      	ldr	r2, [r7, #20]
 8003a66:	6839      	ldr	r1, [r7, #0]
 8003a68:	0018      	movs	r0, r3
 8003a6a:	f005 fb00 	bl	800906e <memcpy>
}
 8003a6e:	46c0      	nop			@ (mov r8, r8)
 8003a70:	46bd      	mov	sp, r7
 8003a72:	b006      	add	sp, #24
 8003a74:	bd80      	pop	{r7, pc}

08003a76 <pad_left_20>:

    memset(dst, ' ', 20);
    memcpy(dst + (20 - len), src, len);
}

void pad_left_20(char dst[20], const char *src) {
 8003a76:	b580      	push	{r7, lr}
 8003a78:	b084      	sub	sp, #16
 8003a7a:	af00      	add	r7, sp, #0
 8003a7c:	6078      	str	r0, [r7, #4]
 8003a7e:	6039      	str	r1, [r7, #0]
    int len = strlen(src);
 8003a80:	683b      	ldr	r3, [r7, #0]
 8003a82:	0018      	movs	r0, r3
 8003a84:	f7fc fb3c 	bl	8000100 <strlen>
 8003a88:	0003      	movs	r3, r0
 8003a8a:	60fb      	str	r3, [r7, #12]
    if (len > 20) len = 20;
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	2b14      	cmp	r3, #20
 8003a90:	dd01      	ble.n	8003a96 <pad_left_20+0x20>
 8003a92:	2314      	movs	r3, #20
 8003a94:	60fb      	str	r3, [r7, #12]

    memcpy(dst, src, len);
 8003a96:	68fa      	ldr	r2, [r7, #12]
 8003a98:	6839      	ldr	r1, [r7, #0]
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	0018      	movs	r0, r3
 8003a9e:	f005 fae6 	bl	800906e <memcpy>
    if (len < 20)
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	2b13      	cmp	r3, #19
 8003aa6:	dc09      	bgt.n	8003abc <pad_left_20+0x46>
        memset(dst + len, ' ', 20 - len);
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	687a      	ldr	r2, [r7, #4]
 8003aac:	18d0      	adds	r0, r2, r3
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	2214      	movs	r2, #20
 8003ab2:	1ad3      	subs	r3, r2, r3
 8003ab4:	001a      	movs	r2, r3
 8003ab6:	2120      	movs	r1, #32
 8003ab8:	f005 fa82 	bl	8008fc0 <memset>
}
 8003abc:	46c0      	nop			@ (mov r8, r8)
 8003abe:	46bd      	mov	sp, r7
 8003ac0:	b004      	add	sp, #16
 8003ac2:	bd80      	pop	{r7, pc}

08003ac4 <enter_emergency_shutdown>:

void enter_emergency_shutdown(void) {
 8003ac4:	b580      	push	{r7, lr}
 8003ac6:	b082      	sub	sp, #8
 8003ac8:	af00      	add	r7, sp, #0
    // Immediately stop everything
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET); // valve closed
 8003aca:	2380      	movs	r3, #128	@ 0x80
 8003acc:	0059      	lsls	r1, r3, #1
 8003ace:	23a0      	movs	r3, #160	@ 0xa0
 8003ad0:	05db      	lsls	r3, r3, #23
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	0018      	movs	r0, r3
 8003ad6:	f002 ff2c 	bl	8006932 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET); // pump off
 8003ada:	4b27      	ldr	r3, [pc, #156]	@ (8003b78 <enter_emergency_shutdown+0xb4>)
 8003adc:	2200      	movs	r2, #0
 8003ade:	2104      	movs	r1, #4
 8003ae0:	0018      	movs	r0, r3
 8003ae2:	f002 ff26 	bl	8006932 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET); // LED1 off
 8003ae6:	2380      	movs	r3, #128	@ 0x80
 8003ae8:	0099      	lsls	r1, r3, #2
 8003aea:	23a0      	movs	r3, #160	@ 0xa0
 8003aec:	05db      	lsls	r3, r3, #23
 8003aee:	2200      	movs	r2, #0
 8003af0:	0018      	movs	r0, r3
 8003af2:	f002 ff1e 	bl	8006932 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET); // LED2 off
 8003af6:	2380      	movs	r3, #128	@ 0x80
 8003af8:	00d9      	lsls	r1, r3, #3
 8003afa:	23a0      	movs	r3, #160	@ 0xa0
 8003afc:	05db      	lsls	r3, r3, #23
 8003afe:	2200      	movs	r2, #0
 8003b00:	0018      	movs	r0, r3
 8003b02:	f002 ff16 	bl	8006932 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_RESET); // LED3 off
 8003b06:	4b1d      	ldr	r3, [pc, #116]	@ (8003b7c <enter_emergency_shutdown+0xb8>)
 8003b08:	2200      	movs	r2, #0
 8003b0a:	2140      	movs	r1, #64	@ 0x40
 8003b0c:	0018      	movs	r0, r3
 8003b0e:	f002 ff10 	bl	8006932 <HAL_GPIO_WritePin>

    clear_buffer();
 8003b12:	f7ff fea5 	bl	8003860 <clear_buffer>
    pad_center(Buffer[1], "!! LEAK DETECTED !!");
 8003b16:	4a1a      	ldr	r2, [pc, #104]	@ (8003b80 <enter_emergency_shutdown+0xbc>)
 8003b18:	4b1a      	ldr	r3, [pc, #104]	@ (8003b84 <enter_emergency_shutdown+0xc0>)
 8003b1a:	0011      	movs	r1, r2
 8003b1c:	0018      	movs	r0, r3
 8003b1e:	f7ff ff7b 	bl	8003a18 <pad_center>
    pad_center(Buffer[2], "Shutdown.");
 8003b22:	4a19      	ldr	r2, [pc, #100]	@ (8003b88 <enter_emergency_shutdown+0xc4>)
 8003b24:	4b19      	ldr	r3, [pc, #100]	@ (8003b8c <enter_emergency_shutdown+0xc8>)
 8003b26:	0011      	movs	r1, r2
 8003b28:	0018      	movs	r0, r3
 8003b2a:	f7ff ff75 	bl	8003a18 <pad_center>
    update_display_chunks(Buffer);
 8003b2e:	4b18      	ldr	r3, [pc, #96]	@ (8003b90 <enter_emergency_shutdown+0xcc>)
 8003b30:	0018      	movs	r0, r3
 8003b32:	f7ff feb5 	bl	80038a0 <update_display_chunks>

    uint32_t shutdown_start = HAL_GetTick();
 8003b36:	f001 fe6f 	bl	8005818 <HAL_GetTick>
 8003b3a:	0003      	movs	r3, r0
 8003b3c:	607b      	str	r3, [r7, #4]

    while (HAL_GetTick() - shutdown_start < 5000) {
 8003b3e:	e002      	b.n	8003b46 <enter_emergency_shutdown+0x82>
        HAL_Delay(10); // Wait quietly for 5 seconds
 8003b40:	200a      	movs	r0, #10
 8003b42:	f001 fe73 	bl	800582c <HAL_Delay>
    while (HAL_GetTick() - shutdown_start < 5000) {
 8003b46:	f001 fe67 	bl	8005818 <HAL_GetTick>
 8003b4a:	0002      	movs	r2, r0
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	1ad3      	subs	r3, r2, r3
 8003b50:	4a10      	ldr	r2, [pc, #64]	@ (8003b94 <enter_emergency_shutdown+0xd0>)
 8003b52:	4293      	cmp	r3, r2
 8003b54:	d9f4      	bls.n	8003b40 <enter_emergency_shutdown+0x7c>
    }

    NHD_OLED_displayOff(); // Turn off OLED after 5 sec
 8003b56:	f001 fc22 	bl	800539e <NHD_OLED_displayOff>

    // Now sit here doing nothing until a reset button (e.g., PB3) is pressed
    while (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) == GPIO_PIN_SET) {
 8003b5a:	e002      	b.n	8003b62 <enter_emergency_shutdown+0x9e>
        // Waiting for PB3 to be pressed
        HAL_Delay(10);
 8003b5c:	200a      	movs	r0, #10
 8003b5e:	f001 fe65 	bl	800582c <HAL_Delay>
    while (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) == GPIO_PIN_SET) {
 8003b62:	4b05      	ldr	r3, [pc, #20]	@ (8003b78 <enter_emergency_shutdown+0xb4>)
 8003b64:	2140      	movs	r1, #64	@ 0x40
 8003b66:	0018      	movs	r0, r3
 8003b68:	f002 fec6 	bl	80068f8 <HAL_GPIO_ReadPin>
 8003b6c:	0003      	movs	r3, r0
 8003b6e:	2b01      	cmp	r3, #1
 8003b70:	d0f4      	beq.n	8003b5c <enter_emergency_shutdown+0x98>
    }

    // Optionally: Hard reset microcontroller when button is pressed
    NVIC_SystemReset();
 8003b72:	f7ff fd61 	bl	8003638 <__NVIC_SystemReset>
 8003b76:	46c0      	nop			@ (mov r8, r8)
 8003b78:	50000400 	.word	0x50000400
 8003b7c:	50000800 	.word	0x50000800
 8003b80:	0800bc68 	.word	0x0800bc68
 8003b84:	200002c4 	.word	0x200002c4
 8003b88:	0800bc7c 	.word	0x0800bc7c
 8003b8c:	200002d8 	.word	0x200002d8
 8003b90:	200002b0 	.word	0x200002b0
 8003b94:	00001387 	.word	0x00001387

08003b98 <monitor_status>:
}

void monitor_status(void) {
 8003b98:	b580      	push	{r7, lr}
 8003b9a:	b082      	sub	sp, #8
 8003b9c:	af00      	add	r7, sp, #0
	int current_psi = read_pressure_psi();
 8003b9e:	f7ff fd5d 	bl	800365c <read_pressure_psi>
 8003ba2:	0003      	movs	r3, r0
 8003ba4:	607b      	str	r3, [r7, #4]
	if(use_sensors == 1){
 8003ba6:	4b3d      	ldr	r3, [pc, #244]	@ (8003c9c <monitor_status+0x104>)
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	2b01      	cmp	r3, #1
 8003bac:	d000      	beq.n	8003bb0 <monitor_status+0x18>
 8003bae:	e070      	b.n	8003c92 <monitor_status+0xfa>
		if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_3) == GPIO_PIN_RESET || HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_4) == GPIO_PIN_RESET || HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_15) == GPIO_PIN_RESET || current_psi > 125){
 8003bb0:	4b3b      	ldr	r3, [pc, #236]	@ (8003ca0 <monitor_status+0x108>)
 8003bb2:	2108      	movs	r1, #8
 8003bb4:	0018      	movs	r0, r3
 8003bb6:	f002 fe9f 	bl	80068f8 <HAL_GPIO_ReadPin>
 8003bba:	1e03      	subs	r3, r0, #0
 8003bbc:	d013      	beq.n	8003be6 <monitor_status+0x4e>
 8003bbe:	4b38      	ldr	r3, [pc, #224]	@ (8003ca0 <monitor_status+0x108>)
 8003bc0:	2110      	movs	r1, #16
 8003bc2:	0018      	movs	r0, r3
 8003bc4:	f002 fe98 	bl	80068f8 <HAL_GPIO_ReadPin>
 8003bc8:	1e03      	subs	r3, r0, #0
 8003bca:	d00c      	beq.n	8003be6 <monitor_status+0x4e>
 8003bcc:	2380      	movs	r3, #128	@ 0x80
 8003bce:	021a      	lsls	r2, r3, #8
 8003bd0:	23a0      	movs	r3, #160	@ 0xa0
 8003bd2:	05db      	lsls	r3, r3, #23
 8003bd4:	0011      	movs	r1, r2
 8003bd6:	0018      	movs	r0, r3
 8003bd8:	f002 fe8e 	bl	80068f8 <HAL_GPIO_ReadPin>
 8003bdc:	1e03      	subs	r3, r0, #0
 8003bde:	d002      	beq.n	8003be6 <monitor_status+0x4e>
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	2b7d      	cmp	r3, #125	@ 0x7d
 8003be4:	dd55      	ble.n	8003c92 <monitor_status+0xfa>


		// Immediately stop everything
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET); // valve closed
 8003be6:	2380      	movs	r3, #128	@ 0x80
 8003be8:	0059      	lsls	r1, r3, #1
 8003bea:	23a0      	movs	r3, #160	@ 0xa0
 8003bec:	05db      	lsls	r3, r3, #23
 8003bee:	2200      	movs	r2, #0
 8003bf0:	0018      	movs	r0, r3
 8003bf2:	f002 fe9e 	bl	8006932 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET); // pump off
 8003bf6:	4b2a      	ldr	r3, [pc, #168]	@ (8003ca0 <monitor_status+0x108>)
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	2104      	movs	r1, #4
 8003bfc:	0018      	movs	r0, r3
 8003bfe:	f002 fe98 	bl	8006932 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET); // LED1 off
 8003c02:	2380      	movs	r3, #128	@ 0x80
 8003c04:	0099      	lsls	r1, r3, #2
 8003c06:	23a0      	movs	r3, #160	@ 0xa0
 8003c08:	05db      	lsls	r3, r3, #23
 8003c0a:	2200      	movs	r2, #0
 8003c0c:	0018      	movs	r0, r3
 8003c0e:	f002 fe90 	bl	8006932 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET); // LED2 off
 8003c12:	2380      	movs	r3, #128	@ 0x80
 8003c14:	00d9      	lsls	r1, r3, #3
 8003c16:	23a0      	movs	r3, #160	@ 0xa0
 8003c18:	05db      	lsls	r3, r3, #23
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	0018      	movs	r0, r3
 8003c1e:	f002 fe88 	bl	8006932 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_RESET); // LED3 off
 8003c22:	4b20      	ldr	r3, [pc, #128]	@ (8003ca4 <monitor_status+0x10c>)
 8003c24:	2200      	movs	r2, #0
 8003c26:	2140      	movs	r1, #64	@ 0x40
 8003c28:	0018      	movs	r0, r3
 8003c2a:	f002 fe82 	bl	8006932 <HAL_GPIO_WritePin>

		clear_buffer();
 8003c2e:	f7ff fe17 	bl	8003860 <clear_buffer>
		pad_center(Buffer[1], "!! LEAK DETECTED !!");
 8003c32:	4a1d      	ldr	r2, [pc, #116]	@ (8003ca8 <monitor_status+0x110>)
 8003c34:	4b1d      	ldr	r3, [pc, #116]	@ (8003cac <monitor_status+0x114>)
 8003c36:	0011      	movs	r1, r2
 8003c38:	0018      	movs	r0, r3
 8003c3a:	f7ff feed 	bl	8003a18 <pad_center>
		pad_center(Buffer[2], "Shutdown.");
 8003c3e:	4a1c      	ldr	r2, [pc, #112]	@ (8003cb0 <monitor_status+0x118>)
 8003c40:	4b1c      	ldr	r3, [pc, #112]	@ (8003cb4 <monitor_status+0x11c>)
 8003c42:	0011      	movs	r1, r2
 8003c44:	0018      	movs	r0, r3
 8003c46:	f7ff fee7 	bl	8003a18 <pad_center>
		update_display_chunks(Buffer);
 8003c4a:	4b1b      	ldr	r3, [pc, #108]	@ (8003cb8 <monitor_status+0x120>)
 8003c4c:	0018      	movs	r0, r3
 8003c4e:	f7ff fe27 	bl	80038a0 <update_display_chunks>

		uint32_t shutdown_start = HAL_GetTick();
 8003c52:	f001 fde1 	bl	8005818 <HAL_GetTick>
 8003c56:	0003      	movs	r3, r0
 8003c58:	603b      	str	r3, [r7, #0]

		while (HAL_GetTick() - shutdown_start < 5000) {
 8003c5a:	e002      	b.n	8003c62 <monitor_status+0xca>
			HAL_Delay(10); // Wait quietly for 5 seconds
 8003c5c:	200a      	movs	r0, #10
 8003c5e:	f001 fde5 	bl	800582c <HAL_Delay>
		while (HAL_GetTick() - shutdown_start < 5000) {
 8003c62:	f001 fdd9 	bl	8005818 <HAL_GetTick>
 8003c66:	0002      	movs	r2, r0
 8003c68:	683b      	ldr	r3, [r7, #0]
 8003c6a:	1ad3      	subs	r3, r2, r3
 8003c6c:	4a13      	ldr	r2, [pc, #76]	@ (8003cbc <monitor_status+0x124>)
 8003c6e:	4293      	cmp	r3, r2
 8003c70:	d9f4      	bls.n	8003c5c <monitor_status+0xc4>
		}

		NHD_OLED_displayOff(); // Turn off OLED after 5 sec
 8003c72:	f001 fb94 	bl	800539e <NHD_OLED_displayOff>

		// Now sit here doing nothing until a reset button (e.g., PB3) is pressed
		while (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) == GPIO_PIN_SET) {
 8003c76:	e002      	b.n	8003c7e <monitor_status+0xe6>
			// Waiting for PB3 to be pressed
			HAL_Delay(10);
 8003c78:	200a      	movs	r0, #10
 8003c7a:	f001 fdd7 	bl	800582c <HAL_Delay>
		while (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) == GPIO_PIN_SET) {
 8003c7e:	4b08      	ldr	r3, [pc, #32]	@ (8003ca0 <monitor_status+0x108>)
 8003c80:	2180      	movs	r1, #128	@ 0x80
 8003c82:	0018      	movs	r0, r3
 8003c84:	f002 fe38 	bl	80068f8 <HAL_GPIO_ReadPin>
 8003c88:	0003      	movs	r3, r0
 8003c8a:	2b01      	cmp	r3, #1
 8003c8c:	d0f4      	beq.n	8003c78 <monitor_status+0xe0>
		}

		// Optionally: Hard reset microcontroller when button is pressed
		NVIC_SystemReset();
 8003c8e:	f7ff fcd3 	bl	8003638 <__NVIC_SystemReset>
		}
	}
}
 8003c92:	46c0      	nop			@ (mov r8, r8)
 8003c94:	46bd      	mov	sp, r7
 8003c96:	b002      	add	sp, #8
 8003c98:	bd80      	pop	{r7, pc}
 8003c9a:	46c0      	nop			@ (mov r8, r8)
 8003c9c:	200001f8 	.word	0x200001f8
 8003ca0:	50000400 	.word	0x50000400
 8003ca4:	50000800 	.word	0x50000800
 8003ca8:	0800bc68 	.word	0x0800bc68
 8003cac:	200002c4 	.word	0x200002c4
 8003cb0:	0800bc7c 	.word	0x0800bc7c
 8003cb4:	200002d8 	.word	0x200002d8
 8003cb8:	200002b0 	.word	0x200002b0
 8003cbc:	00001387 	.word	0x00001387

08003cc0 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8003cc0:	b5b0      	push	{r4, r5, r7, lr}
 8003cc2:	b0bc      	sub	sp, #240	@ 0xf0
 8003cc4:	af02      	add	r7, sp, #8
    uint32_t previousTick = 0;
 8003cc6:	2300      	movs	r3, #0
 8003cc8:	22e4      	movs	r2, #228	@ 0xe4
 8003cca:	18ba      	adds	r2, r7, r2
 8003ccc:	6013      	str	r3, [r2, #0]
    uint32_t lastPressureUpdate = 0;
 8003cce:	2300      	movs	r3, #0
 8003cd0:	22e0      	movs	r2, #224	@ 0xe0
 8003cd2:	18ba      	adds	r2, r7, r2
 8003cd4:	6013      	str	r3, [r2, #0]
    static int last_pressure_value = -1;

    int shots = 0;
 8003cd6:	2300      	movs	r3, #0
 8003cd8:	22dc      	movs	r2, #220	@ 0xdc
 8003cda:	18ba      	adds	r2, r7, r2
 8003cdc:	6013      	str	r3, [r2, #0]
    int page = 0;
 8003cde:	2300      	movs	r3, #0
 8003ce0:	25d8      	movs	r5, #216	@ 0xd8
 8003ce2:	197a      	adds	r2, r7, r5
 8003ce4:	6013      	str	r3, [r2, #0]
    int shot_length = 1000;
 8003ce6:	23fa      	movs	r3, #250	@ 0xfa
 8003ce8:	009b      	lsls	r3, r3, #2
 8003cea:	22d4      	movs	r2, #212	@ 0xd4
 8003cec:	18ba      	adds	r2, r7, r2
 8003cee:	6013      	str	r3, [r2, #0]
    int shot_max = 10000;
 8003cf0:	4bde      	ldr	r3, [pc, #888]	@ (800406c <main+0x3ac>)
 8003cf2:	22a4      	movs	r2, #164	@ 0xa4
 8003cf4:	18ba      	adds	r2, r7, r2
 8003cf6:	6013      	str	r3, [r2, #0]
    int shot_min = 20;
 8003cf8:	2314      	movs	r3, #20
 8003cfa:	22a0      	movs	r2, #160	@ 0xa0
 8003cfc:	18ba      	adds	r2, r7, r2
 8003cfe:	6013      	str	r3, [r2, #0]
    int pressed = 0;
 8003d00:	2300      	movs	r3, #0
 8003d02:	22d0      	movs	r2, #208	@ 0xd0
 8003d04:	18ba      	adds	r2, r7, r2
 8003d06:	6013      	str	r3, [r2, #0]
    int fire_type = 0;
 8003d08:	2300      	movs	r3, #0
 8003d0a:	22cc      	movs	r2, #204	@ 0xcc
 8003d0c:	18ba      	adds	r2, r7, r2
 8003d0e:	6013      	str	r3, [r2, #0]
    int ignore_shots_remaining = 1;
 8003d10:	2301      	movs	r3, #1
 8003d12:	22c8      	movs	r2, #200	@ 0xc8
 8003d14:	18ba      	adds	r2, r7, r2
 8003d16:	6013      	str	r3, [r2, #0]
    char message[20];
    static uint8_t refill_button_was_down = 0;
    uint8_t length;
	static uint8_t emergency_previous = 1;
	const char *settings_options[] = {
 8003d18:	2348      	movs	r3, #72	@ 0x48
 8003d1a:	18fb      	adds	r3, r7, r3
 8003d1c:	4ad4      	ldr	r2, [pc, #848]	@ (8004070 <main+0x3b0>)
 8003d1e:	ca13      	ldmia	r2!, {r0, r1, r4}
 8003d20:	c313      	stmia	r3!, {r0, r1, r4}
 8003d22:	ca03      	ldmia	r2!, {r0, r1}
 8003d24:	c303      	stmia	r3!, {r0, r1}
	    "Firing Mode",
	    "Drain Tank",
	    "Safety Monitoring",
		"Fire Bypass"
	};
	const int settings_count = sizeof(settings_options) / sizeof(settings_options[0]);
 8003d26:	2305      	movs	r3, #5
 8003d28:	229c      	movs	r2, #156	@ 0x9c
 8003d2a:	18ba      	adds	r2, r7, r2
 8003d2c:	6013      	str	r3, [r2, #0]

	int settings_selection = 0;   // Which item is selected (0 to 5)
 8003d2e:	2300      	movs	r3, #0
 8003d30:	22c4      	movs	r2, #196	@ 0xc4
 8003d32:	18ba      	adds	r2, r7, r2
 8003d34:	6013      	str	r3, [r2, #0]
	int settings_scroll = 0;      // Topmost visible option index
 8003d36:	2300      	movs	r3, #0
 8003d38:	22c0      	movs	r2, #192	@ 0xc0
 8003d3a:	18ba      	adds	r2, r7, r2
 8003d3c:	6013      	str	r3, [r2, #0]


    HAL_Init();
 8003d3e:	f001 fcef 	bl	8005720 <HAL_Init>
    SystemClock_Config();
 8003d42:	f001 f813 	bl	8004d6c <SystemClock_Config>
    MX_GPIO_Init();
 8003d46:	f001 f8c3 	bl	8004ed0 <MX_GPIO_Init>
    MX_ADC1_Init();
 8003d4a:	f001 f857 	bl	8004dfc <MX_ADC1_Init>
    HAL_ADC_Start(&hadc1);
 8003d4e:	4bc9      	ldr	r3, [pc, #804]	@ (8004074 <main+0x3b4>)
 8003d50:	0018      	movs	r0, r3
 8003d52:	f002 f86d 	bl	8005e30 <HAL_ADC_Start>

    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8003d56:	4bc8      	ldr	r3, [pc, #800]	@ (8004078 <main+0x3b8>)
 8003d58:	2200      	movs	r2, #0
 8003d5a:	2101      	movs	r1, #1
 8003d5c:	0018      	movs	r0, r3
 8003d5e:	f002 fde8 	bl	8006932 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);
 8003d62:	4bc5      	ldr	r3, [pc, #788]	@ (8004078 <main+0x3b8>)
 8003d64:	2201      	movs	r2, #1
 8003d66:	2102      	movs	r1, #2
 8003d68:	0018      	movs	r0, r3
 8003d6a:	f002 fde2 	bl	8006932 <HAL_GPIO_WritePin>
    HAL_Delay(500);
 8003d6e:	23fa      	movs	r3, #250	@ 0xfa
 8003d70:	005b      	lsls	r3, r3, #1
 8003d72:	0018      	movs	r0, r3
 8003d74:	f001 fd5a 	bl	800582c <HAL_Delay>
    NHD_OLED_begin();
 8003d78:	f001 f96c 	bl	8005054 <NHD_OLED_begin>
    NHD_OLED_textClear();
 8003d7c:	f001 fb1a 	bl	80053b4 <NHD_OLED_textClear>

    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET); // Valve CLOSED on startup
 8003d80:	2380      	movs	r3, #128	@ 0x80
 8003d82:	0059      	lsls	r1, r3, #1
 8003d84:	23a0      	movs	r3, #160	@ 0xa0
 8003d86:	05db      	lsls	r3, r3, #23
 8003d88:	2200      	movs	r2, #0
 8003d8a:	0018      	movs	r0, r3
 8003d8c:	f002 fdd1 	bl	8006932 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
 8003d90:	2380      	movs	r3, #128	@ 0x80
 8003d92:	0099      	lsls	r1, r3, #2
 8003d94:	23a0      	movs	r3, #160	@ 0xa0
 8003d96:	05db      	lsls	r3, r3, #23
 8003d98:	2201      	movs	r2, #1
 8003d9a:	0018      	movs	r0, r3
 8003d9c:	f002 fdc9 	bl	8006932 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 8003da0:	2380      	movs	r3, #128	@ 0x80
 8003da2:	00d9      	lsls	r1, r3, #3
 8003da4:	23a0      	movs	r3, #160	@ 0xa0
 8003da6:	05db      	lsls	r3, r3, #23
 8003da8:	2201      	movs	r2, #1
 8003daa:	0018      	movs	r0, r3
 8003dac:	f002 fdc1 	bl	8006932 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_SET);
 8003db0:	4bb2      	ldr	r3, [pc, #712]	@ (800407c <main+0x3bc>)
 8003db2:	2201      	movs	r2, #1
 8003db4:	2140      	movs	r1, #64	@ 0x40
 8003db6:	0018      	movs	r0, r3
 8003db8:	f002 fdbb 	bl	8006932 <HAL_GPIO_WritePin>

    // Force PB5 to be input with no pull
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003dbc:	2434      	movs	r4, #52	@ 0x34
 8003dbe:	193b      	adds	r3, r7, r4
 8003dc0:	0018      	movs	r0, r3
 8003dc2:	2314      	movs	r3, #20
 8003dc4:	001a      	movs	r2, r3
 8003dc6:	2100      	movs	r1, #0
 8003dc8:	f005 f8fa 	bl	8008fc0 <memset>
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8003dcc:	193b      	adds	r3, r7, r4
 8003dce:	2220      	movs	r2, #32
 8003dd0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003dd2:	193b      	adds	r3, r7, r4
 8003dd4:	2200      	movs	r2, #0
 8003dd6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003dd8:	193b      	adds	r3, r7, r4
 8003dda:	2200      	movs	r2, #0
 8003ddc:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003dde:	193b      	adds	r3, r7, r4
 8003de0:	4aa5      	ldr	r2, [pc, #660]	@ (8004078 <main+0x3b8>)
 8003de2:	0019      	movs	r1, r3
 8003de4:	0010      	movs	r0, r2
 8003de6:	f002 fc23 	bl	8006630 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8003dea:	0021      	movs	r1, r4
 8003dec:	187b      	adds	r3, r7, r1
 8003dee:	2280      	movs	r2, #128	@ 0x80
 8003df0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003df2:	187b      	adds	r3, r7, r1
 8003df4:	2200      	movs	r2, #0
 8003df6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003df8:	187b      	adds	r3, r7, r1
 8003dfa:	2200      	movs	r2, #0
 8003dfc:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003dfe:	187b      	adds	r3, r7, r1
 8003e00:	4a9d      	ldr	r2, [pc, #628]	@ (8004078 <main+0x3b8>)
 8003e02:	0019      	movs	r1, r3
 8003e04:	0010      	movs	r0, r2
 8003e06:	f002 fc13 	bl	8006630 <HAL_GPIO_Init>

    page = 100;
 8003e0a:	2364      	movs	r3, #100	@ 0x64
 8003e0c:	197a      	adds	r2, r7, r5
 8003e0e:	6013      	str	r3, [r2, #0]
    int power_pressed = 0;
 8003e10:	2300      	movs	r3, #0
 8003e12:	22bc      	movs	r2, #188	@ 0xbc
 8003e14:	18ba      	adds	r2, r7, r2
 8003e16:	6013      	str	r3, [r2, #0]

    while (1) {
        uint8_t button_now = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7);
 8003e18:	259b      	movs	r5, #155	@ 0x9b
 8003e1a:	197c      	adds	r4, r7, r5
 8003e1c:	4b96      	ldr	r3, [pc, #600]	@ (8004078 <main+0x3b8>)
 8003e1e:	2180      	movs	r1, #128	@ 0x80
 8003e20:	0018      	movs	r0, r3
 8003e22:	f002 fd69 	bl	80068f8 <HAL_GPIO_ReadPin>
 8003e26:	0003      	movs	r3, r0
 8003e28:	7023      	strb	r3, [r4, #0]

        if (button_now == GPIO_PIN_RESET) { // Button pressed
 8003e2a:	197b      	adds	r3, r7, r5
 8003e2c:	781b      	ldrb	r3, [r3, #0]
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d126      	bne.n	8003e80 <main+0x1c0>
            if (power_pressed == 0) { // Only act if wasn't already pressed
 8003e32:	23bc      	movs	r3, #188	@ 0xbc
 8003e34:	18fb      	adds	r3, r7, r3
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d11c      	bne.n	8003e76 <main+0x1b6>

                HAL_Delay(10); // 🔥 Add debounce delay (10ms typical)
 8003e3c:	200a      	movs	r0, #10
 8003e3e:	f001 fcf5 	bl	800582c <HAL_Delay>

                if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) == GPIO_PIN_RESET) {
 8003e42:	4b8d      	ldr	r3, [pc, #564]	@ (8004078 <main+0x3b8>)
 8003e44:	2180      	movs	r1, #128	@ 0x80
 8003e46:	0018      	movs	r0, r3
 8003e48:	f002 fd56 	bl	80068f8 <HAL_GPIO_ReadPin>
 8003e4c:	1e03      	subs	r3, r0, #0
 8003e4e:	d112      	bne.n	8003e76 <main+0x1b6>
                    // Still pressed after delay ➔ valid press
                    if (page == 100) {
 8003e50:	22d8      	movs	r2, #216	@ 0xd8
 8003e52:	18bb      	adds	r3, r7, r2
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	2b64      	cmp	r3, #100	@ 0x64
 8003e58:	d103      	bne.n	8003e62 <main+0x1a2>
                        page = 0; // Turn display ON
 8003e5a:	2300      	movs	r3, #0
 8003e5c:	18ba      	adds	r2, r7, r2
 8003e5e:	6013      	str	r3, [r2, #0]
 8003e60:	e009      	b.n	8003e76 <main+0x1b6>
                    } else {
                        page = 100; // Turn display OFF
 8003e62:	2364      	movs	r3, #100	@ 0x64
 8003e64:	22d8      	movs	r2, #216	@ 0xd8
 8003e66:	18ba      	adds	r2, r7, r2
 8003e68:	6013      	str	r3, [r2, #0]
                        clear_buffer();
 8003e6a:	f7ff fcf9 	bl	8003860 <clear_buffer>
                        update_display_chunks(Buffer);
 8003e6e:	4b84      	ldr	r3, [pc, #528]	@ (8004080 <main+0x3c0>)
 8003e70:	0018      	movs	r0, r3
 8003e72:	f7ff fd15 	bl	80038a0 <update_display_chunks>
                    }
                }
            }
            power_pressed = 1;
 8003e76:	2301      	movs	r3, #1
 8003e78:	22bc      	movs	r2, #188	@ 0xbc
 8003e7a:	18ba      	adds	r2, r7, r2
 8003e7c:	6013      	str	r3, [r2, #0]
 8003e7e:	e7cb      	b.n	8003e18 <main+0x158>
        } else {
            power_pressed = 0;
 8003e80:	2300      	movs	r3, #0
 8003e82:	22bc      	movs	r2, #188	@ 0xbc
 8003e84:	18ba      	adds	r2, r7, r2
 8003e86:	6013      	str	r3, [r2, #0]
        	if(page == 100) continue;
 8003e88:	24d8      	movs	r4, #216	@ 0xd8
 8003e8a:	193b      	adds	r3, r7, r4
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	2b64      	cmp	r3, #100	@ 0x64
 8003e90:	d101      	bne.n	8003e96 <main+0x1d6>
 8003e92:	f000 ff5a 	bl	8004d4a <main+0x108a>

			monitor_status();
 8003e96:	f7ff fe7f 	bl	8003b98 <monitor_status>


			if (!HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5)) {
 8003e9a:	4b77      	ldr	r3, [pc, #476]	@ (8004078 <main+0x3b8>)
 8003e9c:	2120      	movs	r1, #32
 8003e9e:	0018      	movs	r0, r3
 8003ea0:	f002 fd2a 	bl	80068f8 <HAL_GPIO_ReadPin>
 8003ea4:	1e03      	subs	r3, r0, #0
 8003ea6:	d115      	bne.n	8003ed4 <main+0x214>
				if (pressed != 1) {
 8003ea8:	25d0      	movs	r5, #208	@ 0xd0
 8003eaa:	197b      	adds	r3, r7, r5
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	2b01      	cmp	r3, #1
 8003eb0:	d014      	beq.n	8003edc <main+0x21c>
					page = (page == 0) ? 1 : 0;
 8003eb2:	193b      	adds	r3, r7, r4
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	425a      	negs	r2, r3
 8003eb8:	4153      	adcs	r3, r2
 8003eba:	b2db      	uxtb	r3, r3
 8003ebc:	193a      	adds	r2, r7, r4
 8003ebe:	6013      	str	r3, [r2, #0]
					clear_buffer();
 8003ec0:	f7ff fcce 	bl	8003860 <clear_buffer>
					update_display_chunks(Buffer);
 8003ec4:	4b6e      	ldr	r3, [pc, #440]	@ (8004080 <main+0x3c0>)
 8003ec6:	0018      	movs	r0, r3
 8003ec8:	f7ff fcea 	bl	80038a0 <update_display_chunks>
					pressed = 1;
 8003ecc:	2301      	movs	r3, #1
 8003ece:	197a      	adds	r2, r7, r5
 8003ed0:	6013      	str	r3, [r2, #0]
 8003ed2:	e003      	b.n	8003edc <main+0x21c>
				}
			} else {
				pressed = 0;
 8003ed4:	2300      	movs	r3, #0
 8003ed6:	22d0      	movs	r2, #208	@ 0xd0
 8003ed8:	18ba      	adds	r2, r7, r2
 8003eda:	6013      	str	r3, [r2, #0]
			}

			if (page == 0) {
 8003edc:	23d8      	movs	r3, #216	@ 0xd8
 8003ede:	18fb      	adds	r3, r7, r3
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d000      	beq.n	8003ee8 <main+0x228>
 8003ee6:	e38d      	b.n	8004604 <main+0x944>
				pad_center(Buffer[0], "Home Page");
 8003ee8:	4a66      	ldr	r2, [pc, #408]	@ (8004084 <main+0x3c4>)
 8003eea:	4b65      	ldr	r3, [pc, #404]	@ (8004080 <main+0x3c0>)
 8003eec:	0011      	movs	r1, r2
 8003eee:	0018      	movs	r0, r3
 8003ef0:	f7ff fd92 	bl	8003a18 <pad_center>

				if (HAL_GetTick() - lastPressureUpdate >= 250) {
 8003ef4:	f001 fc90 	bl	8005818 <HAL_GetTick>
 8003ef8:	0002      	movs	r2, r0
 8003efa:	24e0      	movs	r4, #224	@ 0xe0
 8003efc:	193b      	adds	r3, r7, r4
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	1ad3      	subs	r3, r2, r3
 8003f02:	2bf9      	cmp	r3, #249	@ 0xf9
 8003f04:	d909      	bls.n	8003f1a <main+0x25a>
					last_pressure_value = read_pressure_psi();
 8003f06:	f7ff fba9 	bl	800365c <read_pressure_psi>
 8003f0a:	0002      	movs	r2, r0
 8003f0c:	4b5e      	ldr	r3, [pc, #376]	@ (8004088 <main+0x3c8>)
 8003f0e:	601a      	str	r2, [r3, #0]
					lastPressureUpdate = HAL_GetTick();
 8003f10:	f001 fc82 	bl	8005818 <HAL_GetTick>
 8003f14:	0003      	movs	r3, r0
 8003f16:	193a      	adds	r2, r7, r4
 8003f18:	6013      	str	r3, [r2, #0]
				}

				snprintf(message, sizeof(message), "%d PSI", last_pressure_value);
 8003f1a:	4b5b      	ldr	r3, [pc, #364]	@ (8004088 <main+0x3c8>)
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	4a5b      	ldr	r2, [pc, #364]	@ (800408c <main+0x3cc>)
 8003f20:	245c      	movs	r4, #92	@ 0x5c
 8003f22:	1938      	adds	r0, r7, r4
 8003f24:	2114      	movs	r1, #20
 8003f26:	f004 f883 	bl	8008030 <sniprintf>
				pad_center(Buffer[1], message);
 8003f2a:	193a      	adds	r2, r7, r4
 8003f2c:	4b58      	ldr	r3, [pc, #352]	@ (8004090 <main+0x3d0>)
 8003f2e:	0011      	movs	r1, r2
 8003f30:	0018      	movs	r0, r3
 8003f32:	f7ff fd71 	bl	8003a18 <pad_center>

				snprintf(message, sizeof(message), "Shots Remaining: %d", shots);
 8003f36:	23dc      	movs	r3, #220	@ 0xdc
 8003f38:	18fb      	adds	r3, r7, r3
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	4a55      	ldr	r2, [pc, #340]	@ (8004094 <main+0x3d4>)
 8003f3e:	1938      	adds	r0, r7, r4
 8003f40:	2114      	movs	r1, #20
 8003f42:	f004 f875 	bl	8008030 <sniprintf>
				pad_center(Buffer[2], message);
 8003f46:	193a      	adds	r2, r7, r4
 8003f48:	4b53      	ldr	r3, [pc, #332]	@ (8004098 <main+0x3d8>)
 8003f4a:	0011      	movs	r1, r2
 8003f4c:	0018      	movs	r0, r3
 8003f4e:	f7ff fd63 	bl	8003a18 <pad_center>

				// trigger
				if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_RESET) {
 8003f52:	2380      	movs	r3, #128	@ 0x80
 8003f54:	011a      	lsls	r2, r3, #4
 8003f56:	23a0      	movs	r3, #160	@ 0xa0
 8003f58:	05db      	lsls	r3, r3, #23
 8003f5a:	0011      	movs	r1, r2
 8003f5c:	0018      	movs	r0, r3
 8003f5e:	f002 fccb 	bl	80068f8 <HAL_GPIO_ReadPin>
 8003f62:	1e03      	subs	r3, r0, #0
 8003f64:	d000      	beq.n	8003f68 <main+0x2a8>
 8003f66:	e168      	b.n	800423a <main+0x57a>
				    switch (fire_type) {
 8003f68:	22cc      	movs	r2, #204	@ 0xcc
 8003f6a:	18bb      	adds	r3, r7, r2
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	2b02      	cmp	r3, #2
 8003f70:	d100      	bne.n	8003f74 <main+0x2b4>
 8003f72:	e101      	b.n	8004178 <main+0x4b8>
 8003f74:	18bb      	adds	r3, r7, r2
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	2b02      	cmp	r3, #2
 8003f7a:	dd00      	ble.n	8003f7e <main+0x2be>
 8003f7c:	e15d      	b.n	800423a <main+0x57a>
 8003f7e:	18bb      	adds	r3, r7, r2
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d004      	beq.n	8003f90 <main+0x2d0>
 8003f86:	18bb      	adds	r3, r7, r2
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	2b01      	cmp	r3, #1
 8003f8c:	d068      	beq.n	8004060 <main+0x3a0>
 8003f8e:	e154      	b.n	800423a <main+0x57a>
				        case 0: // Single Shot
				            if (shots > 0 || ignore_shots_remaining) {
 8003f90:	23dc      	movs	r3, #220	@ 0xdc
 8003f92:	18fb      	adds	r3, r7, r3
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	dc04      	bgt.n	8003fa4 <main+0x2e4>
 8003f9a:	23c8      	movs	r3, #200	@ 0xc8
 8003f9c:	18fb      	adds	r3, r7, r3
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d047      	beq.n	8004034 <main+0x374>
				                HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_9);
 8003fa4:	2380      	movs	r3, #128	@ 0x80
 8003fa6:	009a      	lsls	r2, r3, #2
 8003fa8:	23a0      	movs	r3, #160	@ 0xa0
 8003faa:	05db      	lsls	r3, r3, #23
 8003fac:	0011      	movs	r1, r2
 8003fae:	0018      	movs	r0, r3
 8003fb0:	f002 fcdc 	bl	800696c <HAL_GPIO_TogglePin>
				                HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET); // valve open
 8003fb4:	2380      	movs	r3, #128	@ 0x80
 8003fb6:	0059      	lsls	r1, r3, #1
 8003fb8:	23a0      	movs	r3, #160	@ 0xa0
 8003fba:	05db      	lsls	r3, r3, #23
 8003fbc:	2201      	movs	r2, #1
 8003fbe:	0018      	movs	r0, r3
 8003fc0:	f002 fcb7 	bl	8006932 <HAL_GPIO_WritePin>
				                pad_center(Buffer[3], "Firing");
 8003fc4:	4a35      	ldr	r2, [pc, #212]	@ (800409c <main+0x3dc>)
 8003fc6:	4b36      	ldr	r3, [pc, #216]	@ (80040a0 <main+0x3e0>)
 8003fc8:	0011      	movs	r1, r2
 8003fca:	0018      	movs	r0, r3
 8003fcc:	f7ff fd24 	bl	8003a18 <pad_center>
				                update_display_chunks(Buffer);
 8003fd0:	4b2b      	ldr	r3, [pc, #172]	@ (8004080 <main+0x3c0>)
 8003fd2:	0018      	movs	r0, r3
 8003fd4:	f7ff fc64 	bl	80038a0 <update_display_chunks>
				                HAL_Delay(shot_length);
 8003fd8:	23d4      	movs	r3, #212	@ 0xd4
 8003fda:	18fb      	adds	r3, r7, r3
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	0018      	movs	r0, r3
 8003fe0:	f001 fc24 	bl	800582c <HAL_Delay>
				                HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET); // valve closed
 8003fe4:	2380      	movs	r3, #128	@ 0x80
 8003fe6:	0059      	lsls	r1, r3, #1
 8003fe8:	23a0      	movs	r3, #160	@ 0xa0
 8003fea:	05db      	lsls	r3, r3, #23
 8003fec:	2200      	movs	r2, #0
 8003fee:	0018      	movs	r0, r3
 8003ff0:	f002 fc9f 	bl	8006932 <HAL_GPIO_WritePin>
				                HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_9);
 8003ff4:	2380      	movs	r3, #128	@ 0x80
 8003ff6:	009a      	lsls	r2, r3, #2
 8003ff8:	23a0      	movs	r3, #160	@ 0xa0
 8003ffa:	05db      	lsls	r3, r3, #23
 8003ffc:	0011      	movs	r1, r2
 8003ffe:	0018      	movs	r0, r3
 8004000:	f002 fcb4 	bl	800696c <HAL_GPIO_TogglePin>
				                pad_center(Buffer[3], "Shot Fired");
 8004004:	4a27      	ldr	r2, [pc, #156]	@ (80040a4 <main+0x3e4>)
 8004006:	4b26      	ldr	r3, [pc, #152]	@ (80040a0 <main+0x3e0>)
 8004008:	0011      	movs	r1, r2
 800400a:	0018      	movs	r0, r3
 800400c:	f7ff fd04 	bl	8003a18 <pad_center>
				                update_display_chunks(Buffer);
 8004010:	4b1b      	ldr	r3, [pc, #108]	@ (8004080 <main+0x3c0>)
 8004012:	0018      	movs	r0, r3
 8004014:	f7ff fc44 	bl	80038a0 <update_display_chunks>
				                shots--;
 8004018:	22dc      	movs	r2, #220	@ 0xdc
 800401a:	18bb      	adds	r3, r7, r2
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	3b01      	subs	r3, #1
 8004020:	18b9      	adds	r1, r7, r2
 8004022:	600b      	str	r3, [r1, #0]
				                if (shots < 0) shots = 0;
 8004024:	18bb      	adds	r3, r7, r2
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	2b00      	cmp	r3, #0
 800402a:	da18      	bge.n	800405e <main+0x39e>
 800402c:	2300      	movs	r3, #0
 800402e:	18ba      	adds	r2, r7, r2
 8004030:	6013      	str	r3, [r2, #0]
 8004032:	e014      	b.n	800405e <main+0x39e>
				            } else {
				                pad_center(Buffer[3], "Out of Shots!");
 8004034:	4a1c      	ldr	r2, [pc, #112]	@ (80040a8 <main+0x3e8>)
 8004036:	4b1a      	ldr	r3, [pc, #104]	@ (80040a0 <main+0x3e0>)
 8004038:	0011      	movs	r1, r2
 800403a:	0018      	movs	r0, r3
 800403c:	f7ff fcec 	bl	8003a18 <pad_center>
				                update_display_chunks(Buffer);
 8004040:	4b0f      	ldr	r3, [pc, #60]	@ (8004080 <main+0x3c0>)
 8004042:	0018      	movs	r0, r3
 8004044:	f7ff fc2c 	bl	80038a0 <update_display_chunks>
				                HAL_Delay(1500);
 8004048:	4b18      	ldr	r3, [pc, #96]	@ (80040ac <main+0x3ec>)
 800404a:	0018      	movs	r0, r3
 800404c:	f001 fbee 	bl	800582c <HAL_Delay>
				                pad_center(Buffer[3], " ");
 8004050:	4a17      	ldr	r2, [pc, #92]	@ (80040b0 <main+0x3f0>)
 8004052:	4b13      	ldr	r3, [pc, #76]	@ (80040a0 <main+0x3e0>)
 8004054:	0011      	movs	r1, r2
 8004056:	0018      	movs	r0, r3
 8004058:	f7ff fcde 	bl	8003a18 <pad_center>
				            }
				            break;
 800405c:	e0ed      	b.n	800423a <main+0x57a>
 800405e:	e0ec      	b.n	800423a <main+0x57a>

				        case 1: // Burst Fire (3 shots)
				            for (int i = 0; i < 3; i++) {
 8004060:	2300      	movs	r3, #0
 8004062:	22b8      	movs	r2, #184	@ 0xb8
 8004064:	18ba      	adds	r2, r7, r2
 8004066:	6013      	str	r3, [r2, #0]
 8004068:	e074      	b.n	8004154 <main+0x494>
 800406a:	46c0      	nop			@ (mov r8, r8)
 800406c:	00002710 	.word	0x00002710
 8004070:	0800be7c 	.word	0x0800be7c
 8004074:	200001fc 	.word	0x200001fc
 8004078:	50000400 	.word	0x50000400
 800407c:	50000800 	.word	0x50000800
 8004080:	200002b0 	.word	0x200002b0
 8004084:	0800bc88 	.word	0x0800bc88
 8004088:	20000000 	.word	0x20000000
 800408c:	0800bc94 	.word	0x0800bc94
 8004090:	200002c4 	.word	0x200002c4
 8004094:	0800bc9c 	.word	0x0800bc9c
 8004098:	200002d8 	.word	0x200002d8
 800409c:	0800bcb0 	.word	0x0800bcb0
 80040a0:	200002ec 	.word	0x200002ec
 80040a4:	0800bcb8 	.word	0x0800bcb8
 80040a8:	0800bcc4 	.word	0x0800bcc4
 80040ac:	000005dc 	.word	0x000005dc
 80040b0:	0800bcd4 	.word	0x0800bcd4
				                if (shots <= 0 && !ignore_shots_remaining) break;
 80040b4:	23dc      	movs	r3, #220	@ 0xdc
 80040b6:	18fb      	adds	r3, r7, r3
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	dc04      	bgt.n	80040c8 <main+0x408>
 80040be:	23c8      	movs	r3, #200	@ 0xc8
 80040c0:	18fb      	adds	r3, r7, r3
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d04b      	beq.n	8004160 <main+0x4a0>
				                HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_9);
 80040c8:	2380      	movs	r3, #128	@ 0x80
 80040ca:	009a      	lsls	r2, r3, #2
 80040cc:	23a0      	movs	r3, #160	@ 0xa0
 80040ce:	05db      	lsls	r3, r3, #23
 80040d0:	0011      	movs	r1, r2
 80040d2:	0018      	movs	r0, r3
 80040d4:	f002 fc4a 	bl	800696c <HAL_GPIO_TogglePin>
				                HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET); // valve open
 80040d8:	2380      	movs	r3, #128	@ 0x80
 80040da:	0059      	lsls	r1, r3, #1
 80040dc:	23a0      	movs	r3, #160	@ 0xa0
 80040de:	05db      	lsls	r3, r3, #23
 80040e0:	2201      	movs	r2, #1
 80040e2:	0018      	movs	r0, r3
 80040e4:	f002 fc25 	bl	8006932 <HAL_GPIO_WritePin>
				                pad_center(Buffer[3], "Burst Shot");
 80040e8:	4ae2      	ldr	r2, [pc, #904]	@ (8004474 <main+0x7b4>)
 80040ea:	4be3      	ldr	r3, [pc, #908]	@ (8004478 <main+0x7b8>)
 80040ec:	0011      	movs	r1, r2
 80040ee:	0018      	movs	r0, r3
 80040f0:	f7ff fc92 	bl	8003a18 <pad_center>
				                update_display_chunks(Buffer);
 80040f4:	4be1      	ldr	r3, [pc, #900]	@ (800447c <main+0x7bc>)
 80040f6:	0018      	movs	r0, r3
 80040f8:	f7ff fbd2 	bl	80038a0 <update_display_chunks>
				                HAL_Delay(shot_length);
 80040fc:	23d4      	movs	r3, #212	@ 0xd4
 80040fe:	18fb      	adds	r3, r7, r3
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	0018      	movs	r0, r3
 8004104:	f001 fb92 	bl	800582c <HAL_Delay>
				                HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET); // valve closed
 8004108:	2380      	movs	r3, #128	@ 0x80
 800410a:	0059      	lsls	r1, r3, #1
 800410c:	23a0      	movs	r3, #160	@ 0xa0
 800410e:	05db      	lsls	r3, r3, #23
 8004110:	2200      	movs	r2, #0
 8004112:	0018      	movs	r0, r3
 8004114:	f002 fc0d 	bl	8006932 <HAL_GPIO_WritePin>
				                HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_9);
 8004118:	2380      	movs	r3, #128	@ 0x80
 800411a:	009a      	lsls	r2, r3, #2
 800411c:	23a0      	movs	r3, #160	@ 0xa0
 800411e:	05db      	lsls	r3, r3, #23
 8004120:	0011      	movs	r1, r2
 8004122:	0018      	movs	r0, r3
 8004124:	f002 fc22 	bl	800696c <HAL_GPIO_TogglePin>
				                shots--;
 8004128:	22dc      	movs	r2, #220	@ 0xdc
 800412a:	18bb      	adds	r3, r7, r2
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	3b01      	subs	r3, #1
 8004130:	18b9      	adds	r1, r7, r2
 8004132:	600b      	str	r3, [r1, #0]
				                if (shots < 0) shots = 0;
 8004134:	18bb      	adds	r3, r7, r2
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	2b00      	cmp	r3, #0
 800413a:	da02      	bge.n	8004142 <main+0x482>
 800413c:	2300      	movs	r3, #0
 800413e:	18ba      	adds	r2, r7, r2
 8004140:	6013      	str	r3, [r2, #0]
				                HAL_Delay(100); // delay between burst shots
 8004142:	2064      	movs	r0, #100	@ 0x64
 8004144:	f001 fb72 	bl	800582c <HAL_Delay>
				            for (int i = 0; i < 3; i++) {
 8004148:	22b8      	movs	r2, #184	@ 0xb8
 800414a:	18bb      	adds	r3, r7, r2
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	3301      	adds	r3, #1
 8004150:	18ba      	adds	r2, r7, r2
 8004152:	6013      	str	r3, [r2, #0]
 8004154:	23b8      	movs	r3, #184	@ 0xb8
 8004156:	18fb      	adds	r3, r7, r3
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	2b02      	cmp	r3, #2
 800415c:	ddaa      	ble.n	80040b4 <main+0x3f4>
 800415e:	e000      	b.n	8004162 <main+0x4a2>
				                if (shots <= 0 && !ignore_shots_remaining) break;
 8004160:	46c0      	nop			@ (mov r8, r8)
				            }
				            pad_center(Buffer[3], "Burst Done");
 8004162:	4ac7      	ldr	r2, [pc, #796]	@ (8004480 <main+0x7c0>)
 8004164:	4bc4      	ldr	r3, [pc, #784]	@ (8004478 <main+0x7b8>)
 8004166:	0011      	movs	r1, r2
 8004168:	0018      	movs	r0, r3
 800416a:	f7ff fc55 	bl	8003a18 <pad_center>
				            update_display_chunks(Buffer);
 800416e:	4bc3      	ldr	r3, [pc, #780]	@ (800447c <main+0x7bc>)
 8004170:	0018      	movs	r0, r3
 8004172:	f7ff fb95 	bl	80038a0 <update_display_chunks>
				            break;
 8004176:	e060      	b.n	800423a <main+0x57a>

				        case 2: // Stream (hold until trigger released)
				            pad_center(Buffer[3], "Streaming...");
 8004178:	4ac2      	ldr	r2, [pc, #776]	@ (8004484 <main+0x7c4>)
 800417a:	4bbf      	ldr	r3, [pc, #764]	@ (8004478 <main+0x7b8>)
 800417c:	0011      	movs	r1, r2
 800417e:	0018      	movs	r0, r3
 8004180:	f7ff fc4a 	bl	8003a18 <pad_center>
				            update_display_chunks(Buffer);
 8004184:	4bbd      	ldr	r3, [pc, #756]	@ (800447c <main+0x7bc>)
 8004186:	0018      	movs	r0, r3
 8004188:	f7ff fb8a 	bl	80038a0 <update_display_chunks>

				            HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_9);
 800418c:	2380      	movs	r3, #128	@ 0x80
 800418e:	009a      	lsls	r2, r3, #2
 8004190:	23a0      	movs	r3, #160	@ 0xa0
 8004192:	05db      	lsls	r3, r3, #23
 8004194:	0011      	movs	r1, r2
 8004196:	0018      	movs	r0, r3
 8004198:	f002 fbe8 	bl	800696c <HAL_GPIO_TogglePin>
				            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET); // valve open
 800419c:	2380      	movs	r3, #128	@ 0x80
 800419e:	0059      	lsls	r1, r3, #1
 80041a0:	23a0      	movs	r3, #160	@ 0xa0
 80041a2:	05db      	lsls	r3, r3, #23
 80041a4:	2201      	movs	r2, #1
 80041a6:	0018      	movs	r0, r3
 80041a8:	f002 fbc3 	bl	8006932 <HAL_GPIO_WritePin>

				            while (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_RESET) {
 80041ac:	e00c      	b.n	80041c8 <main+0x508>
				                if (shots <= 0 && !ignore_shots_remaining) break;
 80041ae:	23dc      	movs	r3, #220	@ 0xdc
 80041b0:	18fb      	adds	r3, r7, r3
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	dc04      	bgt.n	80041c2 <main+0x502>
 80041b8:	23c8      	movs	r3, #200	@ 0xc8
 80041ba:	18fb      	adds	r3, r7, r3
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d00d      	beq.n	80041de <main+0x51e>
				                HAL_Delay(10); // short loop delay
 80041c2:	200a      	movs	r0, #10
 80041c4:	f001 fb32 	bl	800582c <HAL_Delay>
				            while (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_RESET) {
 80041c8:	2380      	movs	r3, #128	@ 0x80
 80041ca:	011a      	lsls	r2, r3, #4
 80041cc:	23a0      	movs	r3, #160	@ 0xa0
 80041ce:	05db      	lsls	r3, r3, #23
 80041d0:	0011      	movs	r1, r2
 80041d2:	0018      	movs	r0, r3
 80041d4:	f002 fb90 	bl	80068f8 <HAL_GPIO_ReadPin>
 80041d8:	1e03      	subs	r3, r0, #0
 80041da:	d0e8      	beq.n	80041ae <main+0x4ee>
 80041dc:	e000      	b.n	80041e0 <main+0x520>
				                if (shots <= 0 && !ignore_shots_remaining) break;
 80041de:	46c0      	nop			@ (mov r8, r8)
				                // optionally update shots/time/pressure live here
				            }

				            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET); // valve closed
 80041e0:	2380      	movs	r3, #128	@ 0x80
 80041e2:	0059      	lsls	r1, r3, #1
 80041e4:	23a0      	movs	r3, #160	@ 0xa0
 80041e6:	05db      	lsls	r3, r3, #23
 80041e8:	2200      	movs	r2, #0
 80041ea:	0018      	movs	r0, r3
 80041ec:	f002 fba1 	bl	8006932 <HAL_GPIO_WritePin>
				            HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_9);
 80041f0:	2380      	movs	r3, #128	@ 0x80
 80041f2:	009a      	lsls	r2, r3, #2
 80041f4:	23a0      	movs	r3, #160	@ 0xa0
 80041f6:	05db      	lsls	r3, r3, #23
 80041f8:	0011      	movs	r1, r2
 80041fa:	0018      	movs	r0, r3
 80041fc:	f002 fbb6 	bl	800696c <HAL_GPIO_TogglePin>

				            pad_center(Buffer[3], "Stream Ended");
 8004200:	4aa1      	ldr	r2, [pc, #644]	@ (8004488 <main+0x7c8>)
 8004202:	4b9d      	ldr	r3, [pc, #628]	@ (8004478 <main+0x7b8>)
 8004204:	0011      	movs	r1, r2
 8004206:	0018      	movs	r0, r3
 8004208:	f7ff fc06 	bl	8003a18 <pad_center>
				            update_display_chunks(Buffer);
 800420c:	4b9b      	ldr	r3, [pc, #620]	@ (800447c <main+0x7bc>)
 800420e:	0018      	movs	r0, r3
 8004210:	f7ff fb46 	bl	80038a0 <update_display_chunks>

				            if (!ignore_shots_remaining) {
 8004214:	23c8      	movs	r3, #200	@ 0xc8
 8004216:	18fb      	adds	r3, r7, r3
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	2b00      	cmp	r3, #0
 800421c:	d10c      	bne.n	8004238 <main+0x578>
				                // Estimate how many shots to deduct based on time
				                // (Optional improvement: measure real time instead of guessing)
				                shots--;
 800421e:	22dc      	movs	r2, #220	@ 0xdc
 8004220:	18bb      	adds	r3, r7, r2
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	3b01      	subs	r3, #1
 8004226:	18b9      	adds	r1, r7, r2
 8004228:	600b      	str	r3, [r1, #0]
				                if (shots < 0) shots = 0;
 800422a:	18bb      	adds	r3, r7, r2
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	2b00      	cmp	r3, #0
 8004230:	da02      	bge.n	8004238 <main+0x578>
 8004232:	2300      	movs	r3, #0
 8004234:	18ba      	adds	r2, r7, r2
 8004236:	6013      	str	r3, [r2, #0]
				            }
				            break;
 8004238:	46c0      	nop			@ (mov r8, r8)
				    }
				}


				uint8_t refill_button = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6);
 800423a:	259a      	movs	r5, #154	@ 0x9a
 800423c:	197c      	adds	r4, r7, r5
 800423e:	4b93      	ldr	r3, [pc, #588]	@ (800448c <main+0x7cc>)
 8004240:	2140      	movs	r1, #64	@ 0x40
 8004242:	0018      	movs	r0, r3
 8004244:	f002 fb58 	bl	80068f8 <HAL_GPIO_ReadPin>
 8004248:	0003      	movs	r3, r0
 800424a:	7023      	strb	r3, [r4, #0]
				if (refill_button == GPIO_PIN_RESET && !refill_button_was_down) {
 800424c:	197b      	adds	r3, r7, r5
 800424e:	781b      	ldrb	r3, [r3, #0]
 8004250:	2b00      	cmp	r3, #0
 8004252:	d000      	beq.n	8004256 <main+0x596>
 8004254:	e1b2      	b.n	80045bc <main+0x8fc>
 8004256:	4b8e      	ldr	r3, [pc, #568]	@ (8004490 <main+0x7d0>)
 8004258:	781b      	ldrb	r3, [r3, #0]
 800425a:	2b00      	cmp	r3, #0
 800425c:	d000      	beq.n	8004260 <main+0x5a0>
 800425e:	e1ad      	b.n	80045bc <main+0x8fc>
					refill_button_was_down = 1;
 8004260:	4b8b      	ldr	r3, [pc, #556]	@ (8004490 <main+0x7d0>)
 8004262:	2201      	movs	r2, #1
 8004264:	701a      	strb	r2, [r3, #0]

					int cancelled = 0;
 8004266:	2300      	movs	r3, #0
 8004268:	22b4      	movs	r2, #180	@ 0xb4
 800426a:	18ba      	adds	r2, r7, r2
 800426c:	6013      	str	r3, [r2, #0]
					int refill_button_was_released = 0;
 800426e:	2300      	movs	r3, #0
 8004270:	22b0      	movs	r2, #176	@ 0xb0
 8004272:	18ba      	adds	r2, r7, r2
 8004274:	6013      	str	r3, [r2, #0]
					int current_psi = read_pressure_psi();
 8004276:	f7ff f9f1 	bl	800365c <read_pressure_psi>
 800427a:	0003      	movs	r3, r0
 800427c:	24ac      	movs	r4, #172	@ 0xac
 800427e:	193a      	adds	r2, r7, r4
 8004280:	6013      	str	r3, [r2, #0]

					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET); // open valve
 8004282:	2380      	movs	r3, #128	@ 0x80
 8004284:	0059      	lsls	r1, r3, #1
 8004286:	23a0      	movs	r3, #160	@ 0xa0
 8004288:	05db      	lsls	r3, r3, #23
 800428a:	2201      	movs	r2, #1
 800428c:	0018      	movs	r0, r3
 800428e:	f002 fb50 	bl	8006932 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_SET);   // pump on
 8004292:	4b7e      	ldr	r3, [pc, #504]	@ (800448c <main+0x7cc>)
 8004294:	2201      	movs	r2, #1
 8004296:	2104      	movs	r1, #4
 8004298:	0018      	movs	r0, r3
 800429a:	f002 fb4a 	bl	8006932 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_SET);   // LED on
 800429e:	4b7d      	ldr	r3, [pc, #500]	@ (8004494 <main+0x7d4>)
 80042a0:	2201      	movs	r2, #1
 80042a2:	2140      	movs	r1, #64	@ 0x40
 80042a4:	0018      	movs	r0, r3
 80042a6:	f002 fb44 	bl	8006932 <HAL_GPIO_WritePin>

					pad_center(Buffer[3], "Refill: Valve Open");
 80042aa:	4a7b      	ldr	r2, [pc, #492]	@ (8004498 <main+0x7d8>)
 80042ac:	4b72      	ldr	r3, [pc, #456]	@ (8004478 <main+0x7b8>)
 80042ae:	0011      	movs	r1, r2
 80042b0:	0018      	movs	r0, r3
 80042b2:	f7ff fbb1 	bl	8003a18 <pad_center>
					snprintf(message, sizeof(message), "%d PSI", current_psi);
 80042b6:	193b      	adds	r3, r7, r4
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	4a78      	ldr	r2, [pc, #480]	@ (800449c <main+0x7dc>)
 80042bc:	245c      	movs	r4, #92	@ 0x5c
 80042be:	1938      	adds	r0, r7, r4
 80042c0:	2114      	movs	r1, #20
 80042c2:	f003 feb5 	bl	8008030 <sniprintf>
					pad_center(Buffer[1], message);
 80042c6:	193a      	adds	r2, r7, r4
 80042c8:	4b75      	ldr	r3, [pc, #468]	@ (80044a0 <main+0x7e0>)
 80042ca:	0011      	movs	r1, r2
 80042cc:	0018      	movs	r0, r3
 80042ce:	f7ff fba3 	bl	8003a18 <pad_center>
					update_display_chunks(Buffer);
 80042d2:	4b6a      	ldr	r3, [pc, #424]	@ (800447c <main+0x7bc>)
 80042d4:	0018      	movs	r0, r3
 80042d6:	f7ff fae3 	bl	80038a0 <update_display_chunks>

					while (1) {
						monitor_status();
 80042da:	f7ff fc5d 	bl	8003b98 <monitor_status>

						if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) == GPIO_PIN_SET) refill_button_was_released = 1;
 80042de:	4b6b      	ldr	r3, [pc, #428]	@ (800448c <main+0x7cc>)
 80042e0:	2140      	movs	r1, #64	@ 0x40
 80042e2:	0018      	movs	r0, r3
 80042e4:	f002 fb08 	bl	80068f8 <HAL_GPIO_ReadPin>
 80042e8:	0003      	movs	r3, r0
 80042ea:	2b01      	cmp	r3, #1
 80042ec:	d103      	bne.n	80042f6 <main+0x636>
 80042ee:	2301      	movs	r3, #1
 80042f0:	22b0      	movs	r2, #176	@ 0xb0
 80042f2:	18ba      	adds	r2, r7, r2
 80042f4:	6013      	str	r3, [r2, #0]
						if (refill_button_was_released && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) == GPIO_PIN_RESET) {
 80042f6:	23b0      	movs	r3, #176	@ 0xb0
 80042f8:	18fb      	adds	r3, r7, r3
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d00b      	beq.n	8004318 <main+0x658>
 8004300:	4b62      	ldr	r3, [pc, #392]	@ (800448c <main+0x7cc>)
 8004302:	2140      	movs	r1, #64	@ 0x40
 8004304:	0018      	movs	r0, r3
 8004306:	f002 faf7 	bl	80068f8 <HAL_GPIO_ReadPin>
 800430a:	1e03      	subs	r3, r0, #0
 800430c:	d104      	bne.n	8004318 <main+0x658>
							cancelled = 1;
 800430e:	2301      	movs	r3, #1
 8004310:	22b4      	movs	r2, #180	@ 0xb4
 8004312:	18ba      	adds	r2, r7, r2
 8004314:	6013      	str	r3, [r2, #0]
							break;
 8004316:	e045      	b.n	80043a4 <main+0x6e4>
						}
						current_psi = read_pressure_psi();
 8004318:	f7ff f9a0 	bl	800365c <read_pressure_psi>
 800431c:	0003      	movs	r3, r0
 800431e:	24ac      	movs	r4, #172	@ 0xac
 8004320:	193a      	adds	r2, r7, r4
 8004322:	6013      	str	r3, [r2, #0]
						pad_center(Buffer[3], "Refill: Valve Open");
 8004324:	4a5c      	ldr	r2, [pc, #368]	@ (8004498 <main+0x7d8>)
 8004326:	4b54      	ldr	r3, [pc, #336]	@ (8004478 <main+0x7b8>)
 8004328:	0011      	movs	r1, r2
 800432a:	0018      	movs	r0, r3
 800432c:	f7ff fb74 	bl	8003a18 <pad_center>
						snprintf(message, sizeof(message), "%d PSI", current_psi);
 8004330:	193b      	adds	r3, r7, r4
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	4a59      	ldr	r2, [pc, #356]	@ (800449c <main+0x7dc>)
 8004336:	255c      	movs	r5, #92	@ 0x5c
 8004338:	1978      	adds	r0, r7, r5
 800433a:	2114      	movs	r1, #20
 800433c:	f003 fe78 	bl	8008030 <sniprintf>
						pad_center(Buffer[1], message);
 8004340:	197a      	adds	r2, r7, r5
 8004342:	4b57      	ldr	r3, [pc, #348]	@ (80044a0 <main+0x7e0>)
 8004344:	0011      	movs	r1, r2
 8004346:	0018      	movs	r0, r3
 8004348:	f7ff fb66 	bl	8003a18 <pad_center>
						update_display_chunks(Buffer);
 800434c:	4b4b      	ldr	r3, [pc, #300]	@ (800447c <main+0x7bc>)
 800434e:	0018      	movs	r0, r3
 8004350:	f7ff faa6 	bl	80038a0 <update_display_chunks>
						if (current_psi >= 12) {
 8004354:	193b      	adds	r3, r7, r4
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	2b0b      	cmp	r3, #11
 800435a:	dd1f      	ble.n	800439c <main+0x6dc>
							HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET); // close valve immediately
 800435c:	2380      	movs	r3, #128	@ 0x80
 800435e:	0059      	lsls	r1, r3, #1
 8004360:	23a0      	movs	r3, #160	@ 0xa0
 8004362:	05db      	lsls	r3, r3, #23
 8004364:	2200      	movs	r2, #0
 8004366:	0018      	movs	r0, r3
 8004368:	f002 fae3 	bl	8006932 <HAL_GPIO_WritePin>
							pad_center(Buffer[3], "Refill: Valve Shut");
 800436c:	4a4d      	ldr	r2, [pc, #308]	@ (80044a4 <main+0x7e4>)
 800436e:	4b42      	ldr	r3, [pc, #264]	@ (8004478 <main+0x7b8>)
 8004370:	0011      	movs	r1, r2
 8004372:	0018      	movs	r0, r3
 8004374:	f7ff fb50 	bl	8003a18 <pad_center>
							snprintf(message, sizeof(message), "%d PSI", current_psi);
 8004378:	193b      	adds	r3, r7, r4
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	4a47      	ldr	r2, [pc, #284]	@ (800449c <main+0x7dc>)
 800437e:	1978      	adds	r0, r7, r5
 8004380:	2114      	movs	r1, #20
 8004382:	f003 fe55 	bl	8008030 <sniprintf>
							pad_center(Buffer[1], message);
 8004386:	197a      	adds	r2, r7, r5
 8004388:	4b45      	ldr	r3, [pc, #276]	@ (80044a0 <main+0x7e0>)
 800438a:	0011      	movs	r1, r2
 800438c:	0018      	movs	r0, r3
 800438e:	f7ff fb43 	bl	8003a18 <pad_center>
							update_display_chunks(Buffer);
 8004392:	4b3a      	ldr	r3, [pc, #232]	@ (800447c <main+0x7bc>)
 8004394:	0018      	movs	r0, r3
 8004396:	f7ff fa83 	bl	80038a0 <update_display_chunks>
							break;
 800439a:	e003      	b.n	80043a4 <main+0x6e4>
						}
						HAL_Delay(100);
 800439c:	2064      	movs	r0, #100	@ 0x64
 800439e:	f001 fa45 	bl	800582c <HAL_Delay>
						monitor_status();
 80043a2:	e79a      	b.n	80042da <main+0x61a>
					}

					while (!cancelled && current_psi < 70) {
 80043a4:	e03f      	b.n	8004426 <main+0x766>
						monitor_status();
 80043a6:	f7ff fbf7 	bl	8003b98 <monitor_status>
						if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) == GPIO_PIN_SET) refill_button_was_released = 1;
 80043aa:	4b38      	ldr	r3, [pc, #224]	@ (800448c <main+0x7cc>)
 80043ac:	2140      	movs	r1, #64	@ 0x40
 80043ae:	0018      	movs	r0, r3
 80043b0:	f002 faa2 	bl	80068f8 <HAL_GPIO_ReadPin>
 80043b4:	0003      	movs	r3, r0
 80043b6:	2b01      	cmp	r3, #1
 80043b8:	d103      	bne.n	80043c2 <main+0x702>
 80043ba:	2301      	movs	r3, #1
 80043bc:	22b0      	movs	r2, #176	@ 0xb0
 80043be:	18ba      	adds	r2, r7, r2
 80043c0:	6013      	str	r3, [r2, #0]
						if (refill_button_was_released && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) == GPIO_PIN_RESET) {
 80043c2:	23b0      	movs	r3, #176	@ 0xb0
 80043c4:	18fb      	adds	r3, r7, r3
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d00b      	beq.n	80043e4 <main+0x724>
 80043cc:	4b2f      	ldr	r3, [pc, #188]	@ (800448c <main+0x7cc>)
 80043ce:	2140      	movs	r1, #64	@ 0x40
 80043d0:	0018      	movs	r0, r3
 80043d2:	f002 fa91 	bl	80068f8 <HAL_GPIO_ReadPin>
 80043d6:	1e03      	subs	r3, r0, #0
 80043d8:	d104      	bne.n	80043e4 <main+0x724>
							cancelled = 1;
 80043da:	2301      	movs	r3, #1
 80043dc:	22b4      	movs	r2, #180	@ 0xb4
 80043de:	18ba      	adds	r2, r7, r2
 80043e0:	6013      	str	r3, [r2, #0]
							break;
 80043e2:	e02a      	b.n	800443a <main+0x77a>
						}
						current_psi = read_pressure_psi();
 80043e4:	f7ff f93a 	bl	800365c <read_pressure_psi>
 80043e8:	0003      	movs	r3, r0
 80043ea:	24ac      	movs	r4, #172	@ 0xac
 80043ec:	193a      	adds	r2, r7, r4
 80043ee:	6013      	str	r3, [r2, #0]
						pad_center(Buffer[3], "Refill: Charging");
 80043f0:	4a2d      	ldr	r2, [pc, #180]	@ (80044a8 <main+0x7e8>)
 80043f2:	4b21      	ldr	r3, [pc, #132]	@ (8004478 <main+0x7b8>)
 80043f4:	0011      	movs	r1, r2
 80043f6:	0018      	movs	r0, r3
 80043f8:	f7ff fb0e 	bl	8003a18 <pad_center>
						snprintf(message, sizeof(message), "%d PSI", current_psi);
 80043fc:	193b      	adds	r3, r7, r4
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	4a26      	ldr	r2, [pc, #152]	@ (800449c <main+0x7dc>)
 8004402:	245c      	movs	r4, #92	@ 0x5c
 8004404:	1938      	adds	r0, r7, r4
 8004406:	2114      	movs	r1, #20
 8004408:	f003 fe12 	bl	8008030 <sniprintf>
						pad_center(Buffer[1], message);
 800440c:	193a      	adds	r2, r7, r4
 800440e:	4b24      	ldr	r3, [pc, #144]	@ (80044a0 <main+0x7e0>)
 8004410:	0011      	movs	r1, r2
 8004412:	0018      	movs	r0, r3
 8004414:	f7ff fb00 	bl	8003a18 <pad_center>
						update_display_chunks(Buffer);
 8004418:	4b18      	ldr	r3, [pc, #96]	@ (800447c <main+0x7bc>)
 800441a:	0018      	movs	r0, r3
 800441c:	f7ff fa40 	bl	80038a0 <update_display_chunks>
						HAL_Delay(100);
 8004420:	2064      	movs	r0, #100	@ 0x64
 8004422:	f001 fa03 	bl	800582c <HAL_Delay>
					while (!cancelled && current_psi < 70) {
 8004426:	23b4      	movs	r3, #180	@ 0xb4
 8004428:	18fb      	adds	r3, r7, r3
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	2b00      	cmp	r3, #0
 800442e:	d104      	bne.n	800443a <main+0x77a>
 8004430:	23ac      	movs	r3, #172	@ 0xac
 8004432:	18fb      	adds	r3, r7, r3
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	2b45      	cmp	r3, #69	@ 0x45
 8004438:	ddb5      	ble.n	80043a6 <main+0x6e6>
					}

					if (!cancelled) {
 800443a:	23b4      	movs	r3, #180	@ 0xb4
 800443c:	18fb      	adds	r3, r7, r3
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	2b00      	cmp	r3, #0
 8004442:	d000      	beq.n	8004446 <main+0x786>
 8004444:	e076      	b.n	8004534 <main+0x874>
						monitor_status();
 8004446:	f7ff fba7 	bl	8003b98 <monitor_status>
						pad_center(Buffer[3], "Refill: Final Boost");
 800444a:	4a18      	ldr	r2, [pc, #96]	@ (80044ac <main+0x7ec>)
 800444c:	4b0a      	ldr	r3, [pc, #40]	@ (8004478 <main+0x7b8>)
 800444e:	0011      	movs	r1, r2
 8004450:	0018      	movs	r0, r3
 8004452:	f7ff fae1 	bl	8003a18 <pad_center>
						update_display_chunks(Buffer);
 8004456:	4b09      	ldr	r3, [pc, #36]	@ (800447c <main+0x7bc>)
 8004458:	0018      	movs	r0, r3
 800445a:	f7ff fa21 	bl	80038a0 <update_display_chunks>
						uint32_t end_time = HAL_GetTick() + 5000;
 800445e:	f001 f9db 	bl	8005818 <HAL_GetTick>
 8004462:	0003      	movs	r3, r0
 8004464:	4a12      	ldr	r2, [pc, #72]	@ (80044b0 <main+0x7f0>)
 8004466:	4694      	mov	ip, r2
 8004468:	4463      	add	r3, ip
 800446a:	2294      	movs	r2, #148	@ 0x94
 800446c:	18ba      	adds	r2, r7, r2
 800446e:	6013      	str	r3, [r2, #0]
						while (HAL_GetTick() < end_time) {
 8004470:	e058      	b.n	8004524 <main+0x864>
 8004472:	46c0      	nop			@ (mov r8, r8)
 8004474:	0800bcd8 	.word	0x0800bcd8
 8004478:	200002ec 	.word	0x200002ec
 800447c:	200002b0 	.word	0x200002b0
 8004480:	0800bce4 	.word	0x0800bce4
 8004484:	0800bcf0 	.word	0x0800bcf0
 8004488:	0800bd00 	.word	0x0800bd00
 800448c:	50000400 	.word	0x50000400
 8004490:	20000302 	.word	0x20000302
 8004494:	50000800 	.word	0x50000800
 8004498:	0800bd10 	.word	0x0800bd10
 800449c:	0800bc94 	.word	0x0800bc94
 80044a0:	200002c4 	.word	0x200002c4
 80044a4:	0800bd24 	.word	0x0800bd24
 80044a8:	0800bd38 	.word	0x0800bd38
 80044ac:	0800bd4c 	.word	0x0800bd4c
 80044b0:	00001388 	.word	0x00001388
							if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) == GPIO_PIN_SET) refill_button_was_released = 1;
 80044b4:	4bdd      	ldr	r3, [pc, #884]	@ (800482c <main+0xb6c>)
 80044b6:	2140      	movs	r1, #64	@ 0x40
 80044b8:	0018      	movs	r0, r3
 80044ba:	f002 fa1d 	bl	80068f8 <HAL_GPIO_ReadPin>
 80044be:	0003      	movs	r3, r0
 80044c0:	2b01      	cmp	r3, #1
 80044c2:	d103      	bne.n	80044cc <main+0x80c>
 80044c4:	2301      	movs	r3, #1
 80044c6:	22b0      	movs	r2, #176	@ 0xb0
 80044c8:	18ba      	adds	r2, r7, r2
 80044ca:	6013      	str	r3, [r2, #0]
							if (refill_button_was_released && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) == GPIO_PIN_RESET) {
 80044cc:	23b0      	movs	r3, #176	@ 0xb0
 80044ce:	18fb      	adds	r3, r7, r3
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d00b      	beq.n	80044ee <main+0x82e>
 80044d6:	4bd5      	ldr	r3, [pc, #852]	@ (800482c <main+0xb6c>)
 80044d8:	2140      	movs	r1, #64	@ 0x40
 80044da:	0018      	movs	r0, r3
 80044dc:	f002 fa0c 	bl	80068f8 <HAL_GPIO_ReadPin>
 80044e0:	1e03      	subs	r3, r0, #0
 80044e2:	d104      	bne.n	80044ee <main+0x82e>
								cancelled = 1;
 80044e4:	2301      	movs	r3, #1
 80044e6:	22b4      	movs	r2, #180	@ 0xb4
 80044e8:	18ba      	adds	r2, r7, r2
 80044ea:	6013      	str	r3, [r2, #0]
								break;
 80044ec:	e022      	b.n	8004534 <main+0x874>
							}
							current_psi = read_pressure_psi();
 80044ee:	f7ff f8b5 	bl	800365c <read_pressure_psi>
 80044f2:	0003      	movs	r3, r0
 80044f4:	22ac      	movs	r2, #172	@ 0xac
 80044f6:	18b9      	adds	r1, r7, r2
 80044f8:	600b      	str	r3, [r1, #0]
							snprintf(message, sizeof(message), "%d PSI", current_psi);
 80044fa:	18bb      	adds	r3, r7, r2
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	4acc      	ldr	r2, [pc, #816]	@ (8004830 <main+0xb70>)
 8004500:	245c      	movs	r4, #92	@ 0x5c
 8004502:	1938      	adds	r0, r7, r4
 8004504:	2114      	movs	r1, #20
 8004506:	f003 fd93 	bl	8008030 <sniprintf>
							pad_center(Buffer[1], message);
 800450a:	193a      	adds	r2, r7, r4
 800450c:	4bc9      	ldr	r3, [pc, #804]	@ (8004834 <main+0xb74>)
 800450e:	0011      	movs	r1, r2
 8004510:	0018      	movs	r0, r3
 8004512:	f7ff fa81 	bl	8003a18 <pad_center>
							update_display_chunks(Buffer);
 8004516:	4bc8      	ldr	r3, [pc, #800]	@ (8004838 <main+0xb78>)
 8004518:	0018      	movs	r0, r3
 800451a:	f7ff f9c1 	bl	80038a0 <update_display_chunks>
							HAL_Delay(100);
 800451e:	2064      	movs	r0, #100	@ 0x64
 8004520:	f001 f984 	bl	800582c <HAL_Delay>
						while (HAL_GetTick() < end_time) {
 8004524:	f001 f978 	bl	8005818 <HAL_GetTick>
 8004528:	0002      	movs	r2, r0
 800452a:	2394      	movs	r3, #148	@ 0x94
 800452c:	18fb      	adds	r3, r7, r3
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	4293      	cmp	r3, r2
 8004532:	d8bf      	bhi.n	80044b4 <main+0x7f4>
						}
					}

					// Always close the valve after refill attempt
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 8004534:	2380      	movs	r3, #128	@ 0x80
 8004536:	0059      	lsls	r1, r3, #1
 8004538:	23a0      	movs	r3, #160	@ 0xa0
 800453a:	05db      	lsls	r3, r3, #23
 800453c:	2200      	movs	r2, #0
 800453e:	0018      	movs	r0, r3
 8004540:	f002 f9f7 	bl	8006932 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET);  // pump off
 8004544:	4bb9      	ldr	r3, [pc, #740]	@ (800482c <main+0xb6c>)
 8004546:	2200      	movs	r2, #0
 8004548:	2104      	movs	r1, #4
 800454a:	0018      	movs	r0, r3
 800454c:	f002 f9f1 	bl	8006932 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_RESET);  // LED off
 8004550:	4bba      	ldr	r3, [pc, #744]	@ (800483c <main+0xb7c>)
 8004552:	2200      	movs	r2, #0
 8004554:	2140      	movs	r1, #64	@ 0x40
 8004556:	0018      	movs	r0, r3
 8004558:	f002 f9eb 	bl	8006932 <HAL_GPIO_WritePin>

					if (cancelled) pad_center(Buffer[3], "Refill: Cancelled");
 800455c:	23b4      	movs	r3, #180	@ 0xb4
 800455e:	18fb      	adds	r3, r7, r3
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	2b00      	cmp	r3, #0
 8004564:	d006      	beq.n	8004574 <main+0x8b4>
 8004566:	4ab6      	ldr	r2, [pc, #728]	@ (8004840 <main+0xb80>)
 8004568:	4bb6      	ldr	r3, [pc, #728]	@ (8004844 <main+0xb84>)
 800456a:	0011      	movs	r1, r2
 800456c:	0018      	movs	r0, r3
 800456e:	f7ff fa53 	bl	8003a18 <pad_center>
 8004572:	e005      	b.n	8004580 <main+0x8c0>
					else pad_center(Buffer[3], "Refill: Complete");
 8004574:	4ab4      	ldr	r2, [pc, #720]	@ (8004848 <main+0xb88>)
 8004576:	4bb3      	ldr	r3, [pc, #716]	@ (8004844 <main+0xb84>)
 8004578:	0011      	movs	r1, r2
 800457a:	0018      	movs	r0, r3
 800457c:	f7ff fa4c 	bl	8003a18 <pad_center>

					snprintf(message, sizeof(message), "%d PSI", current_psi);
 8004580:	23ac      	movs	r3, #172	@ 0xac
 8004582:	18fb      	adds	r3, r7, r3
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	4aaa      	ldr	r2, [pc, #680]	@ (8004830 <main+0xb70>)
 8004588:	245c      	movs	r4, #92	@ 0x5c
 800458a:	1938      	adds	r0, r7, r4
 800458c:	2114      	movs	r1, #20
 800458e:	f003 fd4f 	bl	8008030 <sniprintf>
					pad_center(Buffer[1], message);
 8004592:	193a      	adds	r2, r7, r4
 8004594:	4ba7      	ldr	r3, [pc, #668]	@ (8004834 <main+0xb74>)
 8004596:	0011      	movs	r1, r2
 8004598:	0018      	movs	r0, r3
 800459a:	f7ff fa3d 	bl	8003a18 <pad_center>
					update_display_chunks(Buffer);
 800459e:	4ba6      	ldr	r3, [pc, #664]	@ (8004838 <main+0xb78>)
 80045a0:	0018      	movs	r0, r3
 80045a2:	f7ff f97d 	bl	80038a0 <update_display_chunks>

					if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) == GPIO_PIN_SET) {
 80045a6:	4ba1      	ldr	r3, [pc, #644]	@ (800482c <main+0xb6c>)
 80045a8:	2140      	movs	r1, #64	@ 0x40
 80045aa:	0018      	movs	r0, r3
 80045ac:	f002 f9a4 	bl	80068f8 <HAL_GPIO_ReadPin>
 80045b0:	0003      	movs	r3, r0
 80045b2:	2b01      	cmp	r3, #1
 80045b4:	d102      	bne.n	80045bc <main+0x8fc>
						refill_button_was_down = 0;
 80045b6:	4ba5      	ldr	r3, [pc, #660]	@ (800484c <main+0xb8c>)
 80045b8:	2200      	movs	r2, #0
 80045ba:	701a      	strb	r2, [r3, #0]
					}
				}

				if (refill_button == GPIO_PIN_SET) refill_button_was_down = 0;
 80045bc:	239a      	movs	r3, #154	@ 0x9a
 80045be:	18fb      	adds	r3, r7, r3
 80045c0:	781b      	ldrb	r3, [r3, #0]
 80045c2:	2b01      	cmp	r3, #1
 80045c4:	d102      	bne.n	80045cc <main+0x90c>
 80045c6:	4ba1      	ldr	r3, [pc, #644]	@ (800484c <main+0xb8c>)
 80045c8:	2200      	movs	r2, #0
 80045ca:	701a      	strb	r2, [r3, #0]

				if (HAL_GetTick() - previousTick >= 1000) {
 80045cc:	f001 f924 	bl	8005818 <HAL_GetTick>
 80045d0:	0002      	movs	r2, r0
 80045d2:	24e4      	movs	r4, #228	@ 0xe4
 80045d4:	193b      	adds	r3, r7, r4
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	1ad2      	subs	r2, r2, r3
 80045da:	23fa      	movs	r3, #250	@ 0xfa
 80045dc:	009b      	lsls	r3, r3, #2
 80045de:	429a      	cmp	r2, r3
 80045e0:	d30c      	bcc.n	80045fc <main+0x93c>
					HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_10);
 80045e2:	2380      	movs	r3, #128	@ 0x80
 80045e4:	00da      	lsls	r2, r3, #3
 80045e6:	23a0      	movs	r3, #160	@ 0xa0
 80045e8:	05db      	lsls	r3, r3, #23
 80045ea:	0011      	movs	r1, r2
 80045ec:	0018      	movs	r0, r3
 80045ee:	f002 f9bd 	bl	800696c <HAL_GPIO_TogglePin>
					previousTick = HAL_GetTick();
 80045f2:	f001 f911 	bl	8005818 <HAL_GetTick>
 80045f6:	0003      	movs	r3, r0
 80045f8:	193a      	adds	r2, r7, r4
 80045fa:	6013      	str	r3, [r2, #0]
				}

				update_display_chunks(Buffer);
 80045fc:	4b8e      	ldr	r3, [pc, #568]	@ (8004838 <main+0xb78>)
 80045fe:	0018      	movs	r0, r3
 8004600:	f7ff f94e 	bl	80038a0 <update_display_chunks>
			}
			if (page == 1) {
 8004604:	23d8      	movs	r3, #216	@ 0xd8
 8004606:	18fb      	adds	r3, r7, r3
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	2b01      	cmp	r3, #1
 800460c:	d000      	beq.n	8004610 <main+0x950>
 800460e:	e12b      	b.n	8004868 <main+0xba8>
			    pad_center(Buffer[0], "Settings");
 8004610:	4a8f      	ldr	r2, [pc, #572]	@ (8004850 <main+0xb90>)
 8004612:	4b89      	ldr	r3, [pc, #548]	@ (8004838 <main+0xb78>)
 8004614:	0011      	movs	r1, r2
 8004616:	0018      	movs	r0, r3
 8004618:	f7ff f9fe 	bl	8003a18 <pad_center>

			    while (1) {  // Stay here until button press
			        // Fill Buffer
			        for (int i = 0; i < 3; i++) {
 800461c:	2300      	movs	r3, #0
 800461e:	22a8      	movs	r2, #168	@ 0xa8
 8004620:	18ba      	adds	r2, r7, r2
 8004622:	6013      	str	r3, [r2, #0]
 8004624:	e05c      	b.n	80046e0 <main+0xa20>
			            int option_idx = settings_scroll + i;
 8004626:	23c0      	movs	r3, #192	@ 0xc0
 8004628:	18fb      	adds	r3, r7, r3
 800462a:	681a      	ldr	r2, [r3, #0]
 800462c:	24a8      	movs	r4, #168	@ 0xa8
 800462e:	193b      	adds	r3, r7, r4
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	18d3      	adds	r3, r2, r3
 8004634:	218c      	movs	r1, #140	@ 0x8c
 8004636:	187a      	adds	r2, r7, r1
 8004638:	6013      	str	r3, [r2, #0]
			            if (option_idx < settings_count) {
 800463a:	187b      	adds	r3, r7, r1
 800463c:	681a      	ldr	r2, [r3, #0]
 800463e:	239c      	movs	r3, #156	@ 0x9c
 8004640:	18fb      	adds	r3, r7, r3
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	429a      	cmp	r2, r3
 8004646:	da36      	bge.n	80046b6 <main+0x9f6>
			                if (option_idx == settings_selection) {
 8004648:	187b      	adds	r3, r7, r1
 800464a:	681a      	ldr	r2, [r3, #0]
 800464c:	23c4      	movs	r3, #196	@ 0xc4
 800464e:	18fb      	adds	r3, r7, r3
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	429a      	cmp	r2, r3
 8004654:	d11a      	bne.n	800468c <main+0x9cc>
			                    char temp[20];
			                    snprintf(temp, sizeof(temp), ">%s", settings_options[option_idx]);
 8004656:	2348      	movs	r3, #72	@ 0x48
 8004658:	18fb      	adds	r3, r7, r3
 800465a:	187a      	adds	r2, r7, r1
 800465c:	6812      	ldr	r2, [r2, #0]
 800465e:	0092      	lsls	r2, r2, #2
 8004660:	58d3      	ldr	r3, [r2, r3]
 8004662:	4a7c      	ldr	r2, [pc, #496]	@ (8004854 <main+0xb94>)
 8004664:	2520      	movs	r5, #32
 8004666:	1978      	adds	r0, r7, r5
 8004668:	2114      	movs	r1, #20
 800466a:	f003 fce1 	bl	8008030 <sniprintf>
			                    pad_left_20(Buffer[i + 1], temp);
 800466e:	193b      	adds	r3, r7, r4
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	1c5a      	adds	r2, r3, #1
 8004674:	0013      	movs	r3, r2
 8004676:	009b      	lsls	r3, r3, #2
 8004678:	189b      	adds	r3, r3, r2
 800467a:	009b      	lsls	r3, r3, #2
 800467c:	4a6e      	ldr	r2, [pc, #440]	@ (8004838 <main+0xb78>)
 800467e:	189b      	adds	r3, r3, r2
 8004680:	197a      	adds	r2, r7, r5
 8004682:	0011      	movs	r1, r2
 8004684:	0018      	movs	r0, r3
 8004686:	f7ff f9f6 	bl	8003a76 <pad_left_20>
 800468a:	e023      	b.n	80046d4 <main+0xa14>
			                } else {
			                    pad_left_20(Buffer[i + 1], settings_options[option_idx]);
 800468c:	23a8      	movs	r3, #168	@ 0xa8
 800468e:	18fb      	adds	r3, r7, r3
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	1c5a      	adds	r2, r3, #1
 8004694:	0013      	movs	r3, r2
 8004696:	009b      	lsls	r3, r3, #2
 8004698:	189b      	adds	r3, r3, r2
 800469a:	009b      	lsls	r3, r3, #2
 800469c:	4a66      	ldr	r2, [pc, #408]	@ (8004838 <main+0xb78>)
 800469e:	1898      	adds	r0, r3, r2
 80046a0:	2348      	movs	r3, #72	@ 0x48
 80046a2:	18fb      	adds	r3, r7, r3
 80046a4:	228c      	movs	r2, #140	@ 0x8c
 80046a6:	18ba      	adds	r2, r7, r2
 80046a8:	6812      	ldr	r2, [r2, #0]
 80046aa:	0092      	lsls	r2, r2, #2
 80046ac:	58d3      	ldr	r3, [r2, r3]
 80046ae:	0019      	movs	r1, r3
 80046b0:	f7ff f9e1 	bl	8003a76 <pad_left_20>
 80046b4:	e00e      	b.n	80046d4 <main+0xa14>
			                }
			            } else {
			                pad_left_20(Buffer[i + 1], "");
 80046b6:	23a8      	movs	r3, #168	@ 0xa8
 80046b8:	18fb      	adds	r3, r7, r3
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	1c5a      	adds	r2, r3, #1
 80046be:	0013      	movs	r3, r2
 80046c0:	009b      	lsls	r3, r3, #2
 80046c2:	189b      	adds	r3, r3, r2
 80046c4:	009b      	lsls	r3, r3, #2
 80046c6:	4a5c      	ldr	r2, [pc, #368]	@ (8004838 <main+0xb78>)
 80046c8:	189b      	adds	r3, r3, r2
 80046ca:	4a63      	ldr	r2, [pc, #396]	@ (8004858 <main+0xb98>)
 80046cc:	0011      	movs	r1, r2
 80046ce:	0018      	movs	r0, r3
 80046d0:	f7ff f9d1 	bl	8003a76 <pad_left_20>
			        for (int i = 0; i < 3; i++) {
 80046d4:	22a8      	movs	r2, #168	@ 0xa8
 80046d6:	18bb      	adds	r3, r7, r2
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	3301      	adds	r3, #1
 80046dc:	18ba      	adds	r2, r7, r2
 80046de:	6013      	str	r3, [r2, #0]
 80046e0:	23a8      	movs	r3, #168	@ 0xa8
 80046e2:	18fb      	adds	r3, r7, r3
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	2b02      	cmp	r3, #2
 80046e8:	dd9d      	ble.n	8004626 <main+0x966>
			            }
			        }

			        update_display_chunks(Buffer);
 80046ea:	4b53      	ldr	r3, [pc, #332]	@ (8004838 <main+0xb78>)
 80046ec:	0018      	movs	r0, r3
 80046ee:	f7ff f8d7 	bl	80038a0 <update_display_chunks>

			        // Handle emergency
					monitor_status();
 80046f2:	f7ff fa51 	bl	8003b98 <monitor_status>

			        // Handle encoder rotation
			        int delta = read_encoder_delta();
 80046f6:	f7ff f82b 	bl	8003750 <read_encoder_delta>
 80046fa:	0003      	movs	r3, r0
 80046fc:	2090      	movs	r0, #144	@ 0x90
 80046fe:	183a      	adds	r2, r7, r0
 8004700:	6013      	str	r3, [r2, #0]
			        if (delta != 0) {
 8004702:	183b      	adds	r3, r7, r0
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	2b00      	cmp	r3, #0
 8004708:	d04a      	beq.n	80047a0 <main+0xae0>
			            settings_selection += delta * -1;
 800470a:	21c4      	movs	r1, #196	@ 0xc4
 800470c:	187b      	adds	r3, r7, r1
 800470e:	681a      	ldr	r2, [r3, #0]
 8004710:	183b      	adds	r3, r7, r0
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	1ad3      	subs	r3, r2, r3
 8004716:	187a      	adds	r2, r7, r1
 8004718:	6013      	str	r3, [r2, #0]

			            if (settings_selection < 0) settings_selection = 0;
 800471a:	187b      	adds	r3, r7, r1
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	2b00      	cmp	r3, #0
 8004720:	da02      	bge.n	8004728 <main+0xa68>
 8004722:	2300      	movs	r3, #0
 8004724:	187a      	adds	r2, r7, r1
 8004726:	6013      	str	r3, [r2, #0]
			            if (settings_selection >= settings_count) settings_selection = settings_count - 1;
 8004728:	21c4      	movs	r1, #196	@ 0xc4
 800472a:	187b      	adds	r3, r7, r1
 800472c:	681a      	ldr	r2, [r3, #0]
 800472e:	209c      	movs	r0, #156	@ 0x9c
 8004730:	183b      	adds	r3, r7, r0
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	429a      	cmp	r2, r3
 8004736:	db04      	blt.n	8004742 <main+0xa82>
 8004738:	183b      	adds	r3, r7, r0
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	3b01      	subs	r3, #1
 800473e:	187a      	adds	r2, r7, r1
 8004740:	6013      	str	r3, [r2, #0]

			            if (settings_selection < settings_scroll) {
 8004742:	21c4      	movs	r1, #196	@ 0xc4
 8004744:	187b      	adds	r3, r7, r1
 8004746:	681a      	ldr	r2, [r3, #0]
 8004748:	20c0      	movs	r0, #192	@ 0xc0
 800474a:	183b      	adds	r3, r7, r0
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	429a      	cmp	r2, r3
 8004750:	da04      	bge.n	800475c <main+0xa9c>
			                settings_scroll = settings_selection;
 8004752:	187b      	adds	r3, r7, r1
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	183a      	adds	r2, r7, r0
 8004758:	6013      	str	r3, [r2, #0]
 800475a:	e021      	b.n	80047a0 <main+0xae0>
			            }
			            else if (settings_selection >= settings_scroll + 3) {
 800475c:	21c0      	movs	r1, #192	@ 0xc0
 800475e:	187b      	adds	r3, r7, r1
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	3302      	adds	r3, #2
 8004764:	20c4      	movs	r0, #196	@ 0xc4
 8004766:	183a      	adds	r2, r7, r0
 8004768:	6812      	ldr	r2, [r2, #0]
 800476a:	429a      	cmp	r2, r3
 800476c:	dd18      	ble.n	80047a0 <main+0xae0>
			                settings_scroll = settings_selection - 2;
 800476e:	183b      	adds	r3, r7, r0
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	3b02      	subs	r3, #2
 8004774:	187a      	adds	r2, r7, r1
 8004776:	6013      	str	r3, [r2, #0]
			                if (settings_scroll > settings_count - 3) {
 8004778:	209c      	movs	r0, #156	@ 0x9c
 800477a:	183b      	adds	r3, r7, r0
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	3b02      	subs	r3, #2
 8004780:	187a      	adds	r2, r7, r1
 8004782:	6812      	ldr	r2, [r2, #0]
 8004784:	429a      	cmp	r2, r3
 8004786:	db0b      	blt.n	80047a0 <main+0xae0>
			                    settings_scroll = settings_count - 3;
 8004788:	183b      	adds	r3, r7, r0
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	3b03      	subs	r3, #3
 800478e:	187a      	adds	r2, r7, r1
 8004790:	6013      	str	r3, [r2, #0]
			                    if (settings_scroll < 0) settings_scroll = 0;
 8004792:	187b      	adds	r3, r7, r1
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	2b00      	cmp	r3, #0
 8004798:	da02      	bge.n	80047a0 <main+0xae0>
 800479a:	2300      	movs	r3, #0
 800479c:	187a      	adds	r2, r7, r1
 800479e:	6013      	str	r3, [r2, #0]
			        }

			        // ======= Button handling: (THIS IS THE IMPORTANT PART) =======

			        // PA4 pressed (encoder button) → select setting
			        if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4) == GPIO_PIN_RESET && pressed == 0) {
 80047a0:	23a0      	movs	r3, #160	@ 0xa0
 80047a2:	05db      	lsls	r3, r3, #23
 80047a4:	2110      	movs	r1, #16
 80047a6:	0018      	movs	r0, r3
 80047a8:	f002 f8a6 	bl	80068f8 <HAL_GPIO_ReadPin>
 80047ac:	1e03      	subs	r3, r0, #0
 80047ae:	d10f      	bne.n	80047d0 <main+0xb10>
 80047b0:	22d0      	movs	r2, #208	@ 0xd0
 80047b2:	18bb      	adds	r3, r7, r2
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d10a      	bne.n	80047d0 <main+0xb10>
			            pressed = 1;
 80047ba:	2301      	movs	r3, #1
 80047bc:	18ba      	adds	r2, r7, r2
 80047be:	6013      	str	r3, [r2, #0]
			            page = settings_selection + 2; // Enter selected setting page
 80047c0:	23c4      	movs	r3, #196	@ 0xc4
 80047c2:	18fb      	adds	r3, r7, r3
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	3302      	adds	r3, #2
 80047c8:	22d8      	movs	r2, #216	@ 0xd8
 80047ca:	18ba      	adds	r2, r7, r2
 80047cc:	6013      	str	r3, [r2, #0]
			            break;
 80047ce:	e045      	b.n	800485c <main+0xb9c>
			        }

			        // PB5 pressed (exit button) → go back to home
			        if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5) == GPIO_PIN_RESET && pressed == 0) {
 80047d0:	4b16      	ldr	r3, [pc, #88]	@ (800482c <main+0xb6c>)
 80047d2:	2120      	movs	r1, #32
 80047d4:	0018      	movs	r0, r3
 80047d6:	f002 f88f 	bl	80068f8 <HAL_GPIO_ReadPin>
 80047da:	1e03      	subs	r3, r0, #0
 80047dc:	d10c      	bne.n	80047f8 <main+0xb38>
 80047de:	22d0      	movs	r2, #208	@ 0xd0
 80047e0:	18bb      	adds	r3, r7, r2
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d107      	bne.n	80047f8 <main+0xb38>
			            pressed = 1;
 80047e8:	2301      	movs	r3, #1
 80047ea:	18ba      	adds	r2, r7, r2
 80047ec:	6013      	str	r3, [r2, #0]
			            page = 0; // Back to Home Page
 80047ee:	2300      	movs	r3, #0
 80047f0:	22d8      	movs	r2, #216	@ 0xd8
 80047f2:	18ba      	adds	r2, r7, r2
 80047f4:	6013      	str	r3, [r2, #0]
			            break;
 80047f6:	e031      	b.n	800485c <main+0xb9c>
			        }

			        // Debounce release
			        if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4) == GPIO_PIN_SET && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5) == GPIO_PIN_SET) {
 80047f8:	23a0      	movs	r3, #160	@ 0xa0
 80047fa:	05db      	lsls	r3, r3, #23
 80047fc:	2110      	movs	r1, #16
 80047fe:	0018      	movs	r0, r3
 8004800:	f002 f87a 	bl	80068f8 <HAL_GPIO_ReadPin>
 8004804:	0003      	movs	r3, r0
 8004806:	2b01      	cmp	r3, #1
 8004808:	d10b      	bne.n	8004822 <main+0xb62>
 800480a:	4b08      	ldr	r3, [pc, #32]	@ (800482c <main+0xb6c>)
 800480c:	2120      	movs	r1, #32
 800480e:	0018      	movs	r0, r3
 8004810:	f002 f872 	bl	80068f8 <HAL_GPIO_ReadPin>
 8004814:	0003      	movs	r3, r0
 8004816:	2b01      	cmp	r3, #1
 8004818:	d103      	bne.n	8004822 <main+0xb62>
			            pressed = 0;
 800481a:	2300      	movs	r3, #0
 800481c:	22d0      	movs	r2, #208	@ 0xd0
 800481e:	18ba      	adds	r2, r7, r2
 8004820:	6013      	str	r3, [r2, #0]
			        }

			        HAL_Delay(1);
 8004822:	2001      	movs	r0, #1
 8004824:	f001 f802 	bl	800582c <HAL_Delay>
			    while (1) {  // Stay here until button press
 8004828:	e6f8      	b.n	800461c <main+0x95c>
 800482a:	46c0      	nop			@ (mov r8, r8)
 800482c:	50000400 	.word	0x50000400
 8004830:	0800bc94 	.word	0x0800bc94
 8004834:	200002c4 	.word	0x200002c4
 8004838:	200002b0 	.word	0x200002b0
 800483c:	50000800 	.word	0x50000800
 8004840:	0800bd60 	.word	0x0800bd60
 8004844:	200002ec 	.word	0x200002ec
 8004848:	0800bd74 	.word	0x0800bd74
 800484c:	20000302 	.word	0x20000302
 8004850:	0800bd88 	.word	0x0800bd88
 8004854:	0800bd94 	.word	0x0800bd94
 8004858:	0800bd98 	.word	0x0800bd98
			    }

			    clear_buffer();
 800485c:	f7ff f800 	bl	8003860 <clear_buffer>
			    update_display_chunks(Buffer);
 8004860:	4bb1      	ldr	r3, [pc, #708]	@ (8004b28 <main+0xe68>)
 8004862:	0018      	movs	r0, r3
 8004864:	f7ff f81c 	bl	80038a0 <update_display_chunks>
			}




			if (page == 2) {
 8004868:	23d8      	movs	r3, #216	@ 0xd8
 800486a:	18fb      	adds	r3, r7, r3
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	2b02      	cmp	r3, #2
 8004870:	d000      	beq.n	8004874 <main+0xbb4>
 8004872:	e09b      	b.n	80049ac <main+0xcec>
				pad_center(Buffer[0], "Settings: Shot Power");
 8004874:	4aad      	ldr	r2, [pc, #692]	@ (8004b2c <main+0xe6c>)
 8004876:	4bac      	ldr	r3, [pc, #688]	@ (8004b28 <main+0xe68>)
 8004878:	0011      	movs	r1, r2
 800487a:	0018      	movs	r0, r3
 800487c:	f7ff f8cc 	bl	8003a18 <pad_center>
				snprintf(message, sizeof(message), "Min: %d, Max: %d", shot_min, shot_max);
 8004880:	23a0      	movs	r3, #160	@ 0xa0
 8004882:	18fb      	adds	r3, r7, r3
 8004884:	6819      	ldr	r1, [r3, #0]
 8004886:	4aaa      	ldr	r2, [pc, #680]	@ (8004b30 <main+0xe70>)
 8004888:	245c      	movs	r4, #92	@ 0x5c
 800488a:	1938      	adds	r0, r7, r4
 800488c:	23a4      	movs	r3, #164	@ 0xa4
 800488e:	18fb      	adds	r3, r7, r3
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	9300      	str	r3, [sp, #0]
 8004894:	000b      	movs	r3, r1
 8004896:	2114      	movs	r1, #20
 8004898:	f003 fbca 	bl	8008030 <sniprintf>
				pad_left_20(Buffer[1], message);
 800489c:	193a      	adds	r2, r7, r4
 800489e:	4ba5      	ldr	r3, [pc, #660]	@ (8004b34 <main+0xe74>)
 80048a0:	0011      	movs	r1, r2
 80048a2:	0018      	movs	r0, r3
 80048a4:	f7ff f8e7 	bl	8003a76 <pad_left_20>
				snprintf(message, sizeof(message), "Current Level: %d", shot_length);
 80048a8:	23d4      	movs	r3, #212	@ 0xd4
 80048aa:	18fb      	adds	r3, r7, r3
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	4aa2      	ldr	r2, [pc, #648]	@ (8004b38 <main+0xe78>)
 80048b0:	1938      	adds	r0, r7, r4
 80048b2:	2114      	movs	r1, #20
 80048b4:	f003 fbbc 	bl	8008030 <sniprintf>
				pad_left_20(Buffer[2], message);
 80048b8:	193a      	adds	r2, r7, r4
 80048ba:	4ba0      	ldr	r3, [pc, #640]	@ (8004b3c <main+0xe7c>)
 80048bc:	0011      	movs	r1, r2
 80048be:	0018      	movs	r0, r3
 80048c0:	f7ff f8d9 	bl	8003a76 <pad_left_20>
				update_display_chunks(Buffer);
 80048c4:	4b98      	ldr	r3, [pc, #608]	@ (8004b28 <main+0xe68>)
 80048c6:	0018      	movs	r0, r3
 80048c8:	f7fe ffea 	bl	80038a0 <update_display_chunks>

				while (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4) || pressed == 1) {
 80048cc:	e054      	b.n	8004978 <main+0xcb8>
					if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4) == GPIO_PIN_SET){
 80048ce:	23a0      	movs	r3, #160	@ 0xa0
 80048d0:	05db      	lsls	r3, r3, #23
 80048d2:	2110      	movs	r1, #16
 80048d4:	0018      	movs	r0, r3
 80048d6:	f002 f80f 	bl	80068f8 <HAL_GPIO_ReadPin>
 80048da:	0003      	movs	r3, r0
 80048dc:	2b01      	cmp	r3, #1
 80048de:	d103      	bne.n	80048e8 <main+0xc28>
						pressed = 0;
 80048e0:	2300      	movs	r3, #0
 80048e2:	22d0      	movs	r2, #208	@ 0xd0
 80048e4:	18ba      	adds	r2, r7, r2
 80048e6:	6013      	str	r3, [r2, #0]
					}
					monitor_status();
 80048e8:	f7ff f956 	bl	8003b98 <monitor_status>
					int delta = read_encoder_delta();
 80048ec:	f7fe ff30 	bl	8003750 <read_encoder_delta>
 80048f0:	0003      	movs	r3, r0
 80048f2:	2288      	movs	r2, #136	@ 0x88
 80048f4:	18b9      	adds	r1, r7, r2
 80048f6:	600b      	str	r3, [r1, #0]
					if (delta != 0) {
 80048f8:	18bb      	adds	r3, r7, r2
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d038      	beq.n	8004972 <main+0xcb2>
						shot_length += delta * 20 * -1;
 8004900:	18bb      	adds	r3, r7, r2
 8004902:	681a      	ldr	r2, [r3, #0]
 8004904:	0013      	movs	r3, r2
 8004906:	071b      	lsls	r3, r3, #28
 8004908:	1a9b      	subs	r3, r3, r2
 800490a:	009b      	lsls	r3, r3, #2
 800490c:	1a9b      	subs	r3, r3, r2
 800490e:	009b      	lsls	r3, r3, #2
 8004910:	001a      	movs	r2, r3
 8004912:	21d4      	movs	r1, #212	@ 0xd4
 8004914:	187b      	adds	r3, r7, r1
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	189b      	adds	r3, r3, r2
 800491a:	187a      	adds	r2, r7, r1
 800491c:	6013      	str	r3, [r2, #0]
						if (shot_length < shot_min) shot_length = shot_min;
 800491e:	187b      	adds	r3, r7, r1
 8004920:	681a      	ldr	r2, [r3, #0]
 8004922:	20a0      	movs	r0, #160	@ 0xa0
 8004924:	183b      	adds	r3, r7, r0
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	429a      	cmp	r2, r3
 800492a:	da03      	bge.n	8004934 <main+0xc74>
 800492c:	183b      	adds	r3, r7, r0
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	187a      	adds	r2, r7, r1
 8004932:	6013      	str	r3, [r2, #0]
						if (shot_length > shot_max) shot_length = shot_max;
 8004934:	21d4      	movs	r1, #212	@ 0xd4
 8004936:	187b      	adds	r3, r7, r1
 8004938:	681a      	ldr	r2, [r3, #0]
 800493a:	20a4      	movs	r0, #164	@ 0xa4
 800493c:	183b      	adds	r3, r7, r0
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	429a      	cmp	r2, r3
 8004942:	dd03      	ble.n	800494c <main+0xc8c>
 8004944:	183b      	adds	r3, r7, r0
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	187a      	adds	r2, r7, r1
 800494a:	6013      	str	r3, [r2, #0]
						snprintf(message, sizeof(message), "Current Level: %d", shot_length);
 800494c:	23d4      	movs	r3, #212	@ 0xd4
 800494e:	18fb      	adds	r3, r7, r3
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	4a79      	ldr	r2, [pc, #484]	@ (8004b38 <main+0xe78>)
 8004954:	245c      	movs	r4, #92	@ 0x5c
 8004956:	1938      	adds	r0, r7, r4
 8004958:	2114      	movs	r1, #20
 800495a:	f003 fb69 	bl	8008030 <sniprintf>
						pad_left_20(Buffer[2], message);
 800495e:	193a      	adds	r2, r7, r4
 8004960:	4b76      	ldr	r3, [pc, #472]	@ (8004b3c <main+0xe7c>)
 8004962:	0011      	movs	r1, r2
 8004964:	0018      	movs	r0, r3
 8004966:	f7ff f886 	bl	8003a76 <pad_left_20>
						update_display_chunks(Buffer);
 800496a:	4b6f      	ldr	r3, [pc, #444]	@ (8004b28 <main+0xe68>)
 800496c:	0018      	movs	r0, r3
 800496e:	f7fe ff97 	bl	80038a0 <update_display_chunks>
					}
					HAL_Delay(1);
 8004972:	2001      	movs	r0, #1
 8004974:	f000 ff5a 	bl	800582c <HAL_Delay>
				while (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4) || pressed == 1) {
 8004978:	23a0      	movs	r3, #160	@ 0xa0
 800497a:	05db      	lsls	r3, r3, #23
 800497c:	2110      	movs	r1, #16
 800497e:	0018      	movs	r0, r3
 8004980:	f001 ffba 	bl	80068f8 <HAL_GPIO_ReadPin>
 8004984:	1e03      	subs	r3, r0, #0
 8004986:	d1a2      	bne.n	80048ce <main+0xc0e>
 8004988:	24d0      	movs	r4, #208	@ 0xd0
 800498a:	193b      	adds	r3, r7, r4
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	2b01      	cmp	r3, #1
 8004990:	d09d      	beq.n	80048ce <main+0xc0e>
				}

				page = 1;
 8004992:	2301      	movs	r3, #1
 8004994:	22d8      	movs	r2, #216	@ 0xd8
 8004996:	18ba      	adds	r2, r7, r2
 8004998:	6013      	str	r3, [r2, #0]
				clear_buffer();
 800499a:	f7fe ff61 	bl	8003860 <clear_buffer>
				update_display_chunks(Buffer);
 800499e:	4b62      	ldr	r3, [pc, #392]	@ (8004b28 <main+0xe68>)
 80049a0:	0018      	movs	r0, r3
 80049a2:	f7fe ff7d 	bl	80038a0 <update_display_chunks>
				pressed = 1;
 80049a6:	2301      	movs	r3, #1
 80049a8:	193a      	adds	r2, r7, r4
 80049aa:	6013      	str	r3, [r2, #0]
			}
			if (page == 3) {
 80049ac:	23d8      	movs	r3, #216	@ 0xd8
 80049ae:	18fb      	adds	r3, r7, r3
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	2b03      	cmp	r3, #3
 80049b4:	d000      	beq.n	80049b8 <main+0xcf8>
 80049b6:	e08e      	b.n	8004ad6 <main+0xe16>
			    const char *fire_modes[] = { "Single", "Burst", "Stream" };
 80049b8:	2514      	movs	r5, #20
 80049ba:	197b      	adds	r3, r7, r5
 80049bc:	4a60      	ldr	r2, [pc, #384]	@ (8004b40 <main+0xe80>)
 80049be:	ca13      	ldmia	r2!, {r0, r1, r4}
 80049c0:	c313      	stmia	r3!, {r0, r1, r4}
			    const int fire_mode_count = sizeof(fire_modes) / sizeof(fire_modes[0]);
 80049c2:	2303      	movs	r3, #3
 80049c4:	2284      	movs	r2, #132	@ 0x84
 80049c6:	18ba      	adds	r2, r7, r2
 80049c8:	6013      	str	r3, [r2, #0]

			    pad_center(Buffer[0], "Settings: Firing Mode");
 80049ca:	4a5e      	ldr	r2, [pc, #376]	@ (8004b44 <main+0xe84>)
 80049cc:	4b56      	ldr	r3, [pc, #344]	@ (8004b28 <main+0xe68>)
 80049ce:	0011      	movs	r1, r2
 80049d0:	0018      	movs	r0, r3
 80049d2:	f7ff f821 	bl	8003a18 <pad_center>
			    snprintf(message, sizeof(message), "Mode: %s", fire_modes[fire_type]);
 80049d6:	197b      	adds	r3, r7, r5
 80049d8:	22cc      	movs	r2, #204	@ 0xcc
 80049da:	18ba      	adds	r2, r7, r2
 80049dc:	6812      	ldr	r2, [r2, #0]
 80049de:	0092      	lsls	r2, r2, #2
 80049e0:	58d3      	ldr	r3, [r2, r3]
 80049e2:	4a59      	ldr	r2, [pc, #356]	@ (8004b48 <main+0xe88>)
 80049e4:	245c      	movs	r4, #92	@ 0x5c
 80049e6:	1938      	adds	r0, r7, r4
 80049e8:	2114      	movs	r1, #20
 80049ea:	f003 fb21 	bl	8008030 <sniprintf>
			    pad_center(Buffer[2], message);
 80049ee:	193a      	adds	r2, r7, r4
 80049f0:	4b52      	ldr	r3, [pc, #328]	@ (8004b3c <main+0xe7c>)
 80049f2:	0011      	movs	r1, r2
 80049f4:	0018      	movs	r0, r3
 80049f6:	f7ff f80f 	bl	8003a18 <pad_center>
			    update_display_chunks(Buffer);
 80049fa:	4b4b      	ldr	r3, [pc, #300]	@ (8004b28 <main+0xe68>)
 80049fc:	0018      	movs	r0, r3
 80049fe:	f7fe ff4f 	bl	80038a0 <update_display_chunks>

			    while (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4) || pressed == 1) {
 8004a02:	e04e      	b.n	8004aa2 <main+0xde2>
			        if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4) == GPIO_PIN_SET) {
 8004a04:	23a0      	movs	r3, #160	@ 0xa0
 8004a06:	05db      	lsls	r3, r3, #23
 8004a08:	2110      	movs	r1, #16
 8004a0a:	0018      	movs	r0, r3
 8004a0c:	f001 ff74 	bl	80068f8 <HAL_GPIO_ReadPin>
 8004a10:	0003      	movs	r3, r0
 8004a12:	2b01      	cmp	r3, #1
 8004a14:	d103      	bne.n	8004a1e <main+0xd5e>
			            pressed = 0;
 8004a16:	2300      	movs	r3, #0
 8004a18:	22d0      	movs	r2, #208	@ 0xd0
 8004a1a:	18ba      	adds	r2, r7, r2
 8004a1c:	6013      	str	r3, [r2, #0]
			        }

					monitor_status();
 8004a1e:	f7ff f8bb 	bl	8003b98 <monitor_status>


			        int delta = read_encoder_delta();
 8004a22:	f7fe fe95 	bl	8003750 <read_encoder_delta>
 8004a26:	0003      	movs	r3, r0
 8004a28:	2080      	movs	r0, #128	@ 0x80
 8004a2a:	183a      	adds	r2, r7, r0
 8004a2c:	6013      	str	r3, [r2, #0]
			        if (delta != 0) {
 8004a2e:	183b      	adds	r3, r7, r0
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d032      	beq.n	8004a9c <main+0xddc>
			            fire_type += delta * -1;
 8004a36:	21cc      	movs	r1, #204	@ 0xcc
 8004a38:	187b      	adds	r3, r7, r1
 8004a3a:	681a      	ldr	r2, [r3, #0]
 8004a3c:	183b      	adds	r3, r7, r0
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	1ad3      	subs	r3, r2, r3
 8004a42:	187a      	adds	r2, r7, r1
 8004a44:	6013      	str	r3, [r2, #0]

			            // Wrap within 0 to fire_mode_count - 1
			            if (fire_type < 0) fire_type = 0;
 8004a46:	187b      	adds	r3, r7, r1
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	da02      	bge.n	8004a54 <main+0xd94>
 8004a4e:	2300      	movs	r3, #0
 8004a50:	187a      	adds	r2, r7, r1
 8004a52:	6013      	str	r3, [r2, #0]
			            if (fire_type >= fire_mode_count) fire_type = fire_mode_count - 1;
 8004a54:	21cc      	movs	r1, #204	@ 0xcc
 8004a56:	187b      	adds	r3, r7, r1
 8004a58:	681a      	ldr	r2, [r3, #0]
 8004a5a:	2084      	movs	r0, #132	@ 0x84
 8004a5c:	183b      	adds	r3, r7, r0
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	429a      	cmp	r2, r3
 8004a62:	db04      	blt.n	8004a6e <main+0xdae>
 8004a64:	183b      	adds	r3, r7, r0
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	3b01      	subs	r3, #1
 8004a6a:	187a      	adds	r2, r7, r1
 8004a6c:	6013      	str	r3, [r2, #0]

			            snprintf(message, sizeof(message), "Mode: %s", fire_modes[fire_type]);
 8004a6e:	2314      	movs	r3, #20
 8004a70:	18fb      	adds	r3, r7, r3
 8004a72:	22cc      	movs	r2, #204	@ 0xcc
 8004a74:	18ba      	adds	r2, r7, r2
 8004a76:	6812      	ldr	r2, [r2, #0]
 8004a78:	0092      	lsls	r2, r2, #2
 8004a7a:	58d3      	ldr	r3, [r2, r3]
 8004a7c:	4a32      	ldr	r2, [pc, #200]	@ (8004b48 <main+0xe88>)
 8004a7e:	245c      	movs	r4, #92	@ 0x5c
 8004a80:	1938      	adds	r0, r7, r4
 8004a82:	2114      	movs	r1, #20
 8004a84:	f003 fad4 	bl	8008030 <sniprintf>
			            pad_center(Buffer[2], message);
 8004a88:	193a      	adds	r2, r7, r4
 8004a8a:	4b2c      	ldr	r3, [pc, #176]	@ (8004b3c <main+0xe7c>)
 8004a8c:	0011      	movs	r1, r2
 8004a8e:	0018      	movs	r0, r3
 8004a90:	f7fe ffc2 	bl	8003a18 <pad_center>
			            update_display_chunks(Buffer);
 8004a94:	4b24      	ldr	r3, [pc, #144]	@ (8004b28 <main+0xe68>)
 8004a96:	0018      	movs	r0, r3
 8004a98:	f7fe ff02 	bl	80038a0 <update_display_chunks>
			        }

			        HAL_Delay(1);
 8004a9c:	2001      	movs	r0, #1
 8004a9e:	f000 fec5 	bl	800582c <HAL_Delay>
			    while (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4) || pressed == 1) {
 8004aa2:	23a0      	movs	r3, #160	@ 0xa0
 8004aa4:	05db      	lsls	r3, r3, #23
 8004aa6:	2110      	movs	r1, #16
 8004aa8:	0018      	movs	r0, r3
 8004aaa:	f001 ff25 	bl	80068f8 <HAL_GPIO_ReadPin>
 8004aae:	1e03      	subs	r3, r0, #0
 8004ab0:	d1a8      	bne.n	8004a04 <main+0xd44>
 8004ab2:	24d0      	movs	r4, #208	@ 0xd0
 8004ab4:	193b      	adds	r3, r7, r4
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	2b01      	cmp	r3, #1
 8004aba:	d0a3      	beq.n	8004a04 <main+0xd44>
			    }

			    page = 1;
 8004abc:	2301      	movs	r3, #1
 8004abe:	22d8      	movs	r2, #216	@ 0xd8
 8004ac0:	18ba      	adds	r2, r7, r2
 8004ac2:	6013      	str	r3, [r2, #0]
			    clear_buffer();
 8004ac4:	f7fe fecc 	bl	8003860 <clear_buffer>
			    update_display_chunks(Buffer);
 8004ac8:	4b17      	ldr	r3, [pc, #92]	@ (8004b28 <main+0xe68>)
 8004aca:	0018      	movs	r0, r3
 8004acc:	f7fe fee8 	bl	80038a0 <update_display_chunks>
			    pressed = 1;
 8004ad0:	2301      	movs	r3, #1
 8004ad2:	193a      	adds	r2, r7, r4
 8004ad4:	6013      	str	r3, [r2, #0]
			}
			if (page == 5) {
 8004ad6:	23d8      	movs	r3, #216	@ 0xd8
 8004ad8:	18fb      	adds	r3, r7, r3
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	2b05      	cmp	r3, #5
 8004ade:	d000      	beq.n	8004ae2 <main+0xe22>
 8004ae0:	e0a0      	b.n	8004c24 <main+0xf64>
			    const char *sensor_options[] = { "Disabled", "Enabled" };
 8004ae2:	240c      	movs	r4, #12
 8004ae4:	193b      	adds	r3, r7, r4
 8004ae6:	4a19      	ldr	r2, [pc, #100]	@ (8004b4c <main+0xe8c>)
 8004ae8:	ca03      	ldmia	r2!, {r0, r1}
 8004aea:	c303      	stmia	r3!, {r0, r1}
			    const int sensor_option_count = sizeof(sensor_options) / sizeof(sensor_options[0]);
 8004aec:	2302      	movs	r3, #2
 8004aee:	67fb      	str	r3, [r7, #124]	@ 0x7c

			    pad_center(Buffer[0], "Settings: Sensors");
 8004af0:	4a17      	ldr	r2, [pc, #92]	@ (8004b50 <main+0xe90>)
 8004af2:	4b0d      	ldr	r3, [pc, #52]	@ (8004b28 <main+0xe68>)
 8004af4:	0011      	movs	r1, r2
 8004af6:	0018      	movs	r0, r3
 8004af8:	f7fe ff8e 	bl	8003a18 <pad_center>
			    snprintf(message, sizeof(message), "Status: %s", sensor_options[use_sensors]);
 8004afc:	4b15      	ldr	r3, [pc, #84]	@ (8004b54 <main+0xe94>)
 8004afe:	681a      	ldr	r2, [r3, #0]
 8004b00:	193b      	adds	r3, r7, r4
 8004b02:	0092      	lsls	r2, r2, #2
 8004b04:	58d3      	ldr	r3, [r2, r3]
 8004b06:	4a14      	ldr	r2, [pc, #80]	@ (8004b58 <main+0xe98>)
 8004b08:	245c      	movs	r4, #92	@ 0x5c
 8004b0a:	1938      	adds	r0, r7, r4
 8004b0c:	2114      	movs	r1, #20
 8004b0e:	f003 fa8f 	bl	8008030 <sniprintf>
			    pad_center(Buffer[2], message);
 8004b12:	193a      	adds	r2, r7, r4
 8004b14:	4b09      	ldr	r3, [pc, #36]	@ (8004b3c <main+0xe7c>)
 8004b16:	0011      	movs	r1, r2
 8004b18:	0018      	movs	r0, r3
 8004b1a:	f7fe ff7d 	bl	8003a18 <pad_center>
			    update_display_chunks(Buffer);
 8004b1e:	4b02      	ldr	r3, [pc, #8]	@ (8004b28 <main+0xe68>)
 8004b20:	0018      	movs	r0, r3
 8004b22:	f7fe febd 	bl	80038a0 <update_display_chunks>

			    while (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4) || pressed == 1) {
 8004b26:	e063      	b.n	8004bf0 <main+0xf30>
 8004b28:	200002b0 	.word	0x200002b0
 8004b2c:	0800bd9c 	.word	0x0800bd9c
 8004b30:	0800bdb4 	.word	0x0800bdb4
 8004b34:	200002c4 	.word	0x200002c4
 8004b38:	0800bdc8 	.word	0x0800bdc8
 8004b3c:	200002d8 	.word	0x200002d8
 8004b40:	0800bea8 	.word	0x0800bea8
 8004b44:	0800bddc 	.word	0x0800bddc
 8004b48:	0800bdf4 	.word	0x0800bdf4
 8004b4c:	0800bec8 	.word	0x0800bec8
 8004b50:	0800be00 	.word	0x0800be00
 8004b54:	200001f8 	.word	0x200001f8
 8004b58:	0800be14 	.word	0x0800be14
			        if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4) == GPIO_PIN_SET) {
 8004b5c:	23a0      	movs	r3, #160	@ 0xa0
 8004b5e:	05db      	lsls	r3, r3, #23
 8004b60:	2110      	movs	r1, #16
 8004b62:	0018      	movs	r0, r3
 8004b64:	f001 fec8 	bl	80068f8 <HAL_GPIO_ReadPin>
 8004b68:	0003      	movs	r3, r0
 8004b6a:	2b01      	cmp	r3, #1
 8004b6c:	d103      	bne.n	8004b76 <main+0xeb6>
			            pressed = 0;
 8004b6e:	2300      	movs	r3, #0
 8004b70:	22d0      	movs	r2, #208	@ 0xd0
 8004b72:	18ba      	adds	r2, r7, r2
 8004b74:	6013      	str	r3, [r2, #0]
			        }

			        if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_4) == GPIO_PIN_RESET) {
 8004b76:	4b76      	ldr	r3, [pc, #472]	@ (8004d50 <main+0x1090>)
 8004b78:	2110      	movs	r1, #16
 8004b7a:	0018      	movs	r0, r3
 8004b7c:	f001 febc 	bl	80068f8 <HAL_GPIO_ReadPin>
 8004b80:	1e03      	subs	r3, r0, #0
 8004b82:	d101      	bne.n	8004b88 <main+0xec8>
			            enter_emergency_shutdown();
 8004b84:	f7fe ff9e 	bl	8003ac4 <enter_emergency_shutdown>
			        }

			        int delta = read_encoder_delta();
 8004b88:	f7fe fde2 	bl	8003750 <read_encoder_delta>
 8004b8c:	0003      	movs	r3, r0
 8004b8e:	67bb      	str	r3, [r7, #120]	@ 0x78
			        if (delta != 0) {
 8004b90:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d029      	beq.n	8004bea <main+0xf2a>
			            use_sensors += delta * -1;
 8004b96:	4b6f      	ldr	r3, [pc, #444]	@ (8004d54 <main+0x1094>)
 8004b98:	681a      	ldr	r2, [r3, #0]
 8004b9a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004b9c:	1ad2      	subs	r2, r2, r3
 8004b9e:	4b6d      	ldr	r3, [pc, #436]	@ (8004d54 <main+0x1094>)
 8004ba0:	601a      	str	r2, [r3, #0]

			            // Clamp between 0 and 1
			            if (use_sensors < 0) use_sensors = 0;
 8004ba2:	4b6c      	ldr	r3, [pc, #432]	@ (8004d54 <main+0x1094>)
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	da02      	bge.n	8004bb0 <main+0xef0>
 8004baa:	4b6a      	ldr	r3, [pc, #424]	@ (8004d54 <main+0x1094>)
 8004bac:	2200      	movs	r2, #0
 8004bae:	601a      	str	r2, [r3, #0]
			            if (use_sensors > 1) use_sensors = 1;
 8004bb0:	4b68      	ldr	r3, [pc, #416]	@ (8004d54 <main+0x1094>)
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	2b01      	cmp	r3, #1
 8004bb6:	dd02      	ble.n	8004bbe <main+0xefe>
 8004bb8:	4b66      	ldr	r3, [pc, #408]	@ (8004d54 <main+0x1094>)
 8004bba:	2201      	movs	r2, #1
 8004bbc:	601a      	str	r2, [r3, #0]

			            snprintf(message, sizeof(message), "Status: %s", sensor_options[use_sensors]);
 8004bbe:	4b65      	ldr	r3, [pc, #404]	@ (8004d54 <main+0x1094>)
 8004bc0:	681a      	ldr	r2, [r3, #0]
 8004bc2:	230c      	movs	r3, #12
 8004bc4:	18fb      	adds	r3, r7, r3
 8004bc6:	0092      	lsls	r2, r2, #2
 8004bc8:	58d3      	ldr	r3, [r2, r3]
 8004bca:	4a63      	ldr	r2, [pc, #396]	@ (8004d58 <main+0x1098>)
 8004bcc:	245c      	movs	r4, #92	@ 0x5c
 8004bce:	1938      	adds	r0, r7, r4
 8004bd0:	2114      	movs	r1, #20
 8004bd2:	f003 fa2d 	bl	8008030 <sniprintf>
			            pad_center(Buffer[2], message);
 8004bd6:	193a      	adds	r2, r7, r4
 8004bd8:	4b60      	ldr	r3, [pc, #384]	@ (8004d5c <main+0x109c>)
 8004bda:	0011      	movs	r1, r2
 8004bdc:	0018      	movs	r0, r3
 8004bde:	f7fe ff1b 	bl	8003a18 <pad_center>
			            update_display_chunks(Buffer);
 8004be2:	4b5f      	ldr	r3, [pc, #380]	@ (8004d60 <main+0x10a0>)
 8004be4:	0018      	movs	r0, r3
 8004be6:	f7fe fe5b 	bl	80038a0 <update_display_chunks>
			        }

			        HAL_Delay(1);
 8004bea:	2001      	movs	r0, #1
 8004bec:	f000 fe1e 	bl	800582c <HAL_Delay>
			    while (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4) || pressed == 1) {
 8004bf0:	23a0      	movs	r3, #160	@ 0xa0
 8004bf2:	05db      	lsls	r3, r3, #23
 8004bf4:	2110      	movs	r1, #16
 8004bf6:	0018      	movs	r0, r3
 8004bf8:	f001 fe7e 	bl	80068f8 <HAL_GPIO_ReadPin>
 8004bfc:	1e03      	subs	r3, r0, #0
 8004bfe:	d1ad      	bne.n	8004b5c <main+0xe9c>
 8004c00:	24d0      	movs	r4, #208	@ 0xd0
 8004c02:	193b      	adds	r3, r7, r4
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	2b01      	cmp	r3, #1
 8004c08:	d0a8      	beq.n	8004b5c <main+0xe9c>
			    }

			    page = 1;
 8004c0a:	2301      	movs	r3, #1
 8004c0c:	22d8      	movs	r2, #216	@ 0xd8
 8004c0e:	18ba      	adds	r2, r7, r2
 8004c10:	6013      	str	r3, [r2, #0]
			    clear_buffer();
 8004c12:	f7fe fe25 	bl	8003860 <clear_buffer>
			    update_display_chunks(Buffer);
 8004c16:	4b52      	ldr	r3, [pc, #328]	@ (8004d60 <main+0x10a0>)
 8004c18:	0018      	movs	r0, r3
 8004c1a:	f7fe fe41 	bl	80038a0 <update_display_chunks>
			    pressed = 1;
 8004c1e:	2301      	movs	r3, #1
 8004c20:	193a      	adds	r2, r7, r4
 8004c22:	6013      	str	r3, [r2, #0]
			}
			if (page == 6) {
 8004c24:	23d8      	movs	r3, #216	@ 0xd8
 8004c26:	18fb      	adds	r3, r7, r3
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	2b06      	cmp	r3, #6
 8004c2c:	d001      	beq.n	8004c32 <main+0xf72>
 8004c2e:	f7ff f8f3 	bl	8003e18 <main+0x158>
			    const char *bypass_options[] = { "Disabled", "Enabled" };
 8004c32:	1d3b      	adds	r3, r7, #4
 8004c34:	4a4b      	ldr	r2, [pc, #300]	@ (8004d64 <main+0x10a4>)
 8004c36:	ca03      	ldmia	r2!, {r0, r1}
 8004c38:	c303      	stmia	r3!, {r0, r1}
			    const int bypass_option_count = sizeof(bypass_options) / sizeof(bypass_options[0]);
 8004c3a:	2302      	movs	r3, #2
 8004c3c:	677b      	str	r3, [r7, #116]	@ 0x74

			    pad_center(Buffer[0], "Settings: Fire Bypass");
 8004c3e:	4a4a      	ldr	r2, [pc, #296]	@ (8004d68 <main+0x10a8>)
 8004c40:	4b47      	ldr	r3, [pc, #284]	@ (8004d60 <main+0x10a0>)
 8004c42:	0011      	movs	r1, r2
 8004c44:	0018      	movs	r0, r3
 8004c46:	f7fe fee7 	bl	8003a18 <pad_center>
			    snprintf(message, sizeof(message), "Status: %s", bypass_options[ignore_shots_remaining]);
 8004c4a:	1d3b      	adds	r3, r7, #4
 8004c4c:	22c8      	movs	r2, #200	@ 0xc8
 8004c4e:	18ba      	adds	r2, r7, r2
 8004c50:	6812      	ldr	r2, [r2, #0]
 8004c52:	0092      	lsls	r2, r2, #2
 8004c54:	58d3      	ldr	r3, [r2, r3]
 8004c56:	4a40      	ldr	r2, [pc, #256]	@ (8004d58 <main+0x1098>)
 8004c58:	245c      	movs	r4, #92	@ 0x5c
 8004c5a:	1938      	adds	r0, r7, r4
 8004c5c:	2114      	movs	r1, #20
 8004c5e:	f003 f9e7 	bl	8008030 <sniprintf>
			    pad_center(Buffer[2], message);
 8004c62:	193a      	adds	r2, r7, r4
 8004c64:	4b3d      	ldr	r3, [pc, #244]	@ (8004d5c <main+0x109c>)
 8004c66:	0011      	movs	r1, r2
 8004c68:	0018      	movs	r0, r3
 8004c6a:	f7fe fed5 	bl	8003a18 <pad_center>
			    update_display_chunks(Buffer);
 8004c6e:	4b3c      	ldr	r3, [pc, #240]	@ (8004d60 <main+0x10a0>)
 8004c70:	0018      	movs	r0, r3
 8004c72:	f7fe fe15 	bl	80038a0 <update_display_chunks>

			    while (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4) || pressed == 1) {
 8004c76:	e04c      	b.n	8004d12 <main+0x1052>
			        if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4) == GPIO_PIN_SET) {
 8004c78:	23a0      	movs	r3, #160	@ 0xa0
 8004c7a:	05db      	lsls	r3, r3, #23
 8004c7c:	2110      	movs	r1, #16
 8004c7e:	0018      	movs	r0, r3
 8004c80:	f001 fe3a 	bl	80068f8 <HAL_GPIO_ReadPin>
 8004c84:	0003      	movs	r3, r0
 8004c86:	2b01      	cmp	r3, #1
 8004c88:	d103      	bne.n	8004c92 <main+0xfd2>
			            pressed = 0;
 8004c8a:	2300      	movs	r3, #0
 8004c8c:	22d0      	movs	r2, #208	@ 0xd0
 8004c8e:	18ba      	adds	r2, r7, r2
 8004c90:	6013      	str	r3, [r2, #0]
			        }

			        if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_4) == GPIO_PIN_RESET) {
 8004c92:	4b2f      	ldr	r3, [pc, #188]	@ (8004d50 <main+0x1090>)
 8004c94:	2110      	movs	r1, #16
 8004c96:	0018      	movs	r0, r3
 8004c98:	f001 fe2e 	bl	80068f8 <HAL_GPIO_ReadPin>
 8004c9c:	1e03      	subs	r3, r0, #0
 8004c9e:	d101      	bne.n	8004ca4 <main+0xfe4>
			            enter_emergency_shutdown();
 8004ca0:	f7fe ff10 	bl	8003ac4 <enter_emergency_shutdown>
			        }

			        int delta = read_encoder_delta();
 8004ca4:	f7fe fd54 	bl	8003750 <read_encoder_delta>
 8004ca8:	0003      	movs	r3, r0
 8004caa:	673b      	str	r3, [r7, #112]	@ 0x70
			        if (delta != 0) {
 8004cac:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d02c      	beq.n	8004d0c <main+0x104c>
			            ignore_shots_remaining += delta * -1;
 8004cb2:	21c8      	movs	r1, #200	@ 0xc8
 8004cb4:	187b      	adds	r3, r7, r1
 8004cb6:	681a      	ldr	r2, [r3, #0]
 8004cb8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004cba:	1ad3      	subs	r3, r2, r3
 8004cbc:	000a      	movs	r2, r1
 8004cbe:	18b9      	adds	r1, r7, r2
 8004cc0:	600b      	str	r3, [r1, #0]

			            // Clamp between 0 and 1
			            if (ignore_shots_remaining < 0) ignore_shots_remaining = 0;
 8004cc2:	18bb      	adds	r3, r7, r2
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	da02      	bge.n	8004cd0 <main+0x1010>
 8004cca:	2300      	movs	r3, #0
 8004ccc:	18ba      	adds	r2, r7, r2
 8004cce:	6013      	str	r3, [r2, #0]
			            if (ignore_shots_remaining > 1) ignore_shots_remaining = 1;
 8004cd0:	22c8      	movs	r2, #200	@ 0xc8
 8004cd2:	18bb      	adds	r3, r7, r2
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	2b01      	cmp	r3, #1
 8004cd8:	dd02      	ble.n	8004ce0 <main+0x1020>
 8004cda:	2301      	movs	r3, #1
 8004cdc:	18ba      	adds	r2, r7, r2
 8004cde:	6013      	str	r3, [r2, #0]

			            snprintf(message, sizeof(message), "Status: %s", bypass_options[ignore_shots_remaining]);
 8004ce0:	1d3b      	adds	r3, r7, #4
 8004ce2:	22c8      	movs	r2, #200	@ 0xc8
 8004ce4:	18ba      	adds	r2, r7, r2
 8004ce6:	6812      	ldr	r2, [r2, #0]
 8004ce8:	0092      	lsls	r2, r2, #2
 8004cea:	58d3      	ldr	r3, [r2, r3]
 8004cec:	4a1a      	ldr	r2, [pc, #104]	@ (8004d58 <main+0x1098>)
 8004cee:	245c      	movs	r4, #92	@ 0x5c
 8004cf0:	1938      	adds	r0, r7, r4
 8004cf2:	2114      	movs	r1, #20
 8004cf4:	f003 f99c 	bl	8008030 <sniprintf>
			            pad_center(Buffer[2], message);
 8004cf8:	193a      	adds	r2, r7, r4
 8004cfa:	4b18      	ldr	r3, [pc, #96]	@ (8004d5c <main+0x109c>)
 8004cfc:	0011      	movs	r1, r2
 8004cfe:	0018      	movs	r0, r3
 8004d00:	f7fe fe8a 	bl	8003a18 <pad_center>
			            update_display_chunks(Buffer);
 8004d04:	4b16      	ldr	r3, [pc, #88]	@ (8004d60 <main+0x10a0>)
 8004d06:	0018      	movs	r0, r3
 8004d08:	f7fe fdca 	bl	80038a0 <update_display_chunks>
			        }

			        HAL_Delay(1);
 8004d0c:	2001      	movs	r0, #1
 8004d0e:	f000 fd8d 	bl	800582c <HAL_Delay>
			    while (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4) || pressed == 1) {
 8004d12:	23a0      	movs	r3, #160	@ 0xa0
 8004d14:	05db      	lsls	r3, r3, #23
 8004d16:	2110      	movs	r1, #16
 8004d18:	0018      	movs	r0, r3
 8004d1a:	f001 fded 	bl	80068f8 <HAL_GPIO_ReadPin>
 8004d1e:	1e03      	subs	r3, r0, #0
 8004d20:	d1aa      	bne.n	8004c78 <main+0xfb8>
 8004d22:	24d0      	movs	r4, #208	@ 0xd0
 8004d24:	193b      	adds	r3, r7, r4
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	2b01      	cmp	r3, #1
 8004d2a:	d0a5      	beq.n	8004c78 <main+0xfb8>
			    }

			    page = 1;
 8004d2c:	2301      	movs	r3, #1
 8004d2e:	22d8      	movs	r2, #216	@ 0xd8
 8004d30:	18ba      	adds	r2, r7, r2
 8004d32:	6013      	str	r3, [r2, #0]
			    clear_buffer();
 8004d34:	f7fe fd94 	bl	8003860 <clear_buffer>
			    update_display_chunks(Buffer);
 8004d38:	4b09      	ldr	r3, [pc, #36]	@ (8004d60 <main+0x10a0>)
 8004d3a:	0018      	movs	r0, r3
 8004d3c:	f7fe fdb0 	bl	80038a0 <update_display_chunks>
			    pressed = 1;
 8004d40:	2301      	movs	r3, #1
 8004d42:	193a      	adds	r2, r7, r4
 8004d44:	6013      	str	r3, [r2, #0]
 8004d46:	f7ff f867 	bl	8003e18 <main+0x158>
        	if(page == 100) continue;
 8004d4a:	46c0      	nop			@ (mov r8, r8)
    while (1) {
 8004d4c:	f7ff f864 	bl	8003e18 <main+0x158>
 8004d50:	50000400 	.word	0x50000400
 8004d54:	200001f8 	.word	0x200001f8
 8004d58:	0800be14 	.word	0x0800be14
 8004d5c:	200002d8 	.word	0x200002d8
 8004d60:	200002b0 	.word	0x200002b0
 8004d64:	0800bec8 	.word	0x0800bec8
 8004d68:	0800be20 	.word	0x0800be20

08004d6c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004d6c:	b590      	push	{r4, r7, lr}
 8004d6e:	b093      	sub	sp, #76	@ 0x4c
 8004d70:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004d72:	2414      	movs	r4, #20
 8004d74:	193b      	adds	r3, r7, r4
 8004d76:	0018      	movs	r0, r3
 8004d78:	2334      	movs	r3, #52	@ 0x34
 8004d7a:	001a      	movs	r2, r3
 8004d7c:	2100      	movs	r1, #0
 8004d7e:	f004 f91f 	bl	8008fc0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004d82:	1d3b      	adds	r3, r7, #4
 8004d84:	0018      	movs	r0, r3
 8004d86:	2310      	movs	r3, #16
 8004d88:	001a      	movs	r2, r3
 8004d8a:	2100      	movs	r1, #0
 8004d8c:	f004 f918 	bl	8008fc0 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8004d90:	2380      	movs	r3, #128	@ 0x80
 8004d92:	009b      	lsls	r3, r3, #2
 8004d94:	0018      	movs	r0, r3
 8004d96:	f001 fe05 	bl	80069a4 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8004d9a:	193b      	adds	r3, r7, r4
 8004d9c:	2202      	movs	r2, #2
 8004d9e:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8004da0:	193b      	adds	r3, r7, r4
 8004da2:	2280      	movs	r2, #128	@ 0x80
 8004da4:	0052      	lsls	r2, r2, #1
 8004da6:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8004da8:	193b      	adds	r3, r7, r4
 8004daa:	2200      	movs	r2, #0
 8004dac:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8004dae:	193b      	adds	r3, r7, r4
 8004db0:	2240      	movs	r2, #64	@ 0x40
 8004db2:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8004db4:	193b      	adds	r3, r7, r4
 8004db6:	2200      	movs	r2, #0
 8004db8:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004dba:	193b      	adds	r3, r7, r4
 8004dbc:	0018      	movs	r0, r3
 8004dbe:	f001 fe31 	bl	8006a24 <HAL_RCC_OscConfig>
 8004dc2:	1e03      	subs	r3, r0, #0
 8004dc4:	d001      	beq.n	8004dca <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8004dc6:	f000 f93f 	bl	8005048 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004dca:	1d3b      	adds	r3, r7, #4
 8004dcc:	2207      	movs	r2, #7
 8004dce:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8004dd0:	1d3b      	adds	r3, r7, #4
 8004dd2:	2200      	movs	r2, #0
 8004dd4:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004dd6:	1d3b      	adds	r3, r7, #4
 8004dd8:	2200      	movs	r2, #0
 8004dda:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8004ddc:	1d3b      	adds	r3, r7, #4
 8004dde:	2200      	movs	r2, #0
 8004de0:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8004de2:	1d3b      	adds	r3, r7, #4
 8004de4:	2100      	movs	r1, #0
 8004de6:	0018      	movs	r0, r3
 8004de8:	f002 f92c 	bl	8007044 <HAL_RCC_ClockConfig>
 8004dec:	1e03      	subs	r3, r0, #0
 8004dee:	d001      	beq.n	8004df4 <SystemClock_Config+0x88>
  {
    Error_Handler();
 8004df0:	f000 f92a 	bl	8005048 <Error_Handler>
  }
}
 8004df4:	46c0      	nop			@ (mov r8, r8)
 8004df6:	46bd      	mov	sp, r7
 8004df8:	b013      	add	sp, #76	@ 0x4c
 8004dfa:	bd90      	pop	{r4, r7, pc}

08004dfc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8004dfc:	b580      	push	{r7, lr}
 8004dfe:	b084      	sub	sp, #16
 8004e00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8004e02:	1d3b      	adds	r3, r7, #4
 8004e04:	0018      	movs	r0, r3
 8004e06:	230c      	movs	r3, #12
 8004e08:	001a      	movs	r2, r3
 8004e0a:	2100      	movs	r1, #0
 8004e0c:	f004 f8d8 	bl	8008fc0 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8004e10:	4b2d      	ldr	r3, [pc, #180]	@ (8004ec8 <MX_ADC1_Init+0xcc>)
 8004e12:	4a2e      	ldr	r2, [pc, #184]	@ (8004ecc <MX_ADC1_Init+0xd0>)
 8004e14:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8004e16:	4b2c      	ldr	r3, [pc, #176]	@ (8004ec8 <MX_ADC1_Init+0xcc>)
 8004e18:	2280      	movs	r2, #128	@ 0x80
 8004e1a:	05d2      	lsls	r2, r2, #23
 8004e1c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8004e1e:	4b2a      	ldr	r3, [pc, #168]	@ (8004ec8 <MX_ADC1_Init+0xcc>)
 8004e20:	2200      	movs	r2, #0
 8004e22:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8004e24:	4b28      	ldr	r3, [pc, #160]	@ (8004ec8 <MX_ADC1_Init+0xcc>)
 8004e26:	2200      	movs	r2, #0
 8004e28:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8004e2a:	4b27      	ldr	r3, [pc, #156]	@ (8004ec8 <MX_ADC1_Init+0xcc>)
 8004e2c:	2200      	movs	r2, #0
 8004e2e:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8004e30:	4b25      	ldr	r3, [pc, #148]	@ (8004ec8 <MX_ADC1_Init+0xcc>)
 8004e32:	2204      	movs	r2, #4
 8004e34:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8004e36:	4b24      	ldr	r3, [pc, #144]	@ (8004ec8 <MX_ADC1_Init+0xcc>)
 8004e38:	2200      	movs	r2, #0
 8004e3a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 8004e3c:	4b22      	ldr	r3, [pc, #136]	@ (8004ec8 <MX_ADC1_Init+0xcc>)
 8004e3e:	2200      	movs	r2, #0
 8004e40:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8004e42:	4b21      	ldr	r3, [pc, #132]	@ (8004ec8 <MX_ADC1_Init+0xcc>)
 8004e44:	2200      	movs	r2, #0
 8004e46:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 1;
 8004e48:	4b1f      	ldr	r3, [pc, #124]	@ (8004ec8 <MX_ADC1_Init+0xcc>)
 8004e4a:	2201      	movs	r2, #1
 8004e4c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8004e4e:	4b1e      	ldr	r3, [pc, #120]	@ (8004ec8 <MX_ADC1_Init+0xcc>)
 8004e50:	2220      	movs	r2, #32
 8004e52:	2100      	movs	r1, #0
 8004e54:	5499      	strb	r1, [r3, r2]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8004e56:	4b1c      	ldr	r3, [pc, #112]	@ (8004ec8 <MX_ADC1_Init+0xcc>)
 8004e58:	2200      	movs	r2, #0
 8004e5a:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8004e5c:	4b1a      	ldr	r3, [pc, #104]	@ (8004ec8 <MX_ADC1_Init+0xcc>)
 8004e5e:	2200      	movs	r2, #0
 8004e60:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8004e62:	4b19      	ldr	r3, [pc, #100]	@ (8004ec8 <MX_ADC1_Init+0xcc>)
 8004e64:	222c      	movs	r2, #44	@ 0x2c
 8004e66:	2100      	movs	r1, #0
 8004e68:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8004e6a:	4b17      	ldr	r3, [pc, #92]	@ (8004ec8 <MX_ADC1_Init+0xcc>)
 8004e6c:	2200      	movs	r2, #0
 8004e6e:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 8004e70:	4b15      	ldr	r3, [pc, #84]	@ (8004ec8 <MX_ADC1_Init+0xcc>)
 8004e72:	2200      	movs	r2, #0
 8004e74:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 8004e76:	4b14      	ldr	r3, [pc, #80]	@ (8004ec8 <MX_ADC1_Init+0xcc>)
 8004e78:	2200      	movs	r2, #0
 8004e7a:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 8004e7c:	4b12      	ldr	r3, [pc, #72]	@ (8004ec8 <MX_ADC1_Init+0xcc>)
 8004e7e:	223c      	movs	r2, #60	@ 0x3c
 8004e80:	2100      	movs	r1, #0
 8004e82:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8004e84:	4b10      	ldr	r3, [pc, #64]	@ (8004ec8 <MX_ADC1_Init+0xcc>)
 8004e86:	2200      	movs	r2, #0
 8004e88:	64da      	str	r2, [r3, #76]	@ 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8004e8a:	4b0f      	ldr	r3, [pc, #60]	@ (8004ec8 <MX_ADC1_Init+0xcc>)
 8004e8c:	0018      	movs	r0, r3
 8004e8e:	f000 fe27 	bl	8005ae0 <HAL_ADC_Init>
 8004e92:	1e03      	subs	r3, r0, #0
 8004e94:	d001      	beq.n	8004e9a <MX_ADC1_Init+0x9e>
  {
    Error_Handler();
 8004e96:	f000 f8d7 	bl	8005048 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8004e9a:	1d3b      	adds	r3, r7, #4
 8004e9c:	2201      	movs	r2, #1
 8004e9e:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8004ea0:	1d3b      	adds	r3, r7, #4
 8004ea2:	2200      	movs	r2, #0
 8004ea4:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8004ea6:	1d3b      	adds	r3, r7, #4
 8004ea8:	2200      	movs	r2, #0
 8004eaa:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004eac:	1d3a      	adds	r2, r7, #4
 8004eae:	4b06      	ldr	r3, [pc, #24]	@ (8004ec8 <MX_ADC1_Init+0xcc>)
 8004eb0:	0011      	movs	r1, r2
 8004eb2:	0018      	movs	r0, r3
 8004eb4:	f001 f8aa 	bl	800600c <HAL_ADC_ConfigChannel>
 8004eb8:	1e03      	subs	r3, r0, #0
 8004eba:	d001      	beq.n	8004ec0 <MX_ADC1_Init+0xc4>
  {
    Error_Handler();
 8004ebc:	f000 f8c4 	bl	8005048 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8004ec0:	46c0      	nop			@ (mov r8, r8)
 8004ec2:	46bd      	mov	sp, r7
 8004ec4:	b004      	add	sp, #16
 8004ec6:	bd80      	pop	{r7, pc}
 8004ec8:	200001fc 	.word	0x200001fc
 8004ecc:	40012400 	.word	0x40012400

08004ed0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004ed0:	b590      	push	{r4, r7, lr}
 8004ed2:	b089      	sub	sp, #36	@ 0x24
 8004ed4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004ed6:	240c      	movs	r4, #12
 8004ed8:	193b      	adds	r3, r7, r4
 8004eda:	0018      	movs	r0, r3
 8004edc:	2314      	movs	r3, #20
 8004ede:	001a      	movs	r2, r3
 8004ee0:	2100      	movs	r1, #0
 8004ee2:	f004 f86d 	bl	8008fc0 <memset>
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004ee6:	4b54      	ldr	r3, [pc, #336]	@ (8005038 <MX_GPIO_Init+0x168>)
 8004ee8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004eea:	4b53      	ldr	r3, [pc, #332]	@ (8005038 <MX_GPIO_Init+0x168>)
 8004eec:	2102      	movs	r1, #2
 8004eee:	430a      	orrs	r2, r1
 8004ef0:	635a      	str	r2, [r3, #52]	@ 0x34
 8004ef2:	4b51      	ldr	r3, [pc, #324]	@ (8005038 <MX_GPIO_Init+0x168>)
 8004ef4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004ef6:	2202      	movs	r2, #2
 8004ef8:	4013      	ands	r3, r2
 8004efa:	60bb      	str	r3, [r7, #8]
 8004efc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004efe:	4b4e      	ldr	r3, [pc, #312]	@ (8005038 <MX_GPIO_Init+0x168>)
 8004f00:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004f02:	4b4d      	ldr	r3, [pc, #308]	@ (8005038 <MX_GPIO_Init+0x168>)
 8004f04:	2104      	movs	r1, #4
 8004f06:	430a      	orrs	r2, r1
 8004f08:	635a      	str	r2, [r3, #52]	@ 0x34
 8004f0a:	4b4b      	ldr	r3, [pc, #300]	@ (8005038 <MX_GPIO_Init+0x168>)
 8004f0c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004f0e:	2204      	movs	r2, #4
 8004f10:	4013      	ands	r3, r2
 8004f12:	607b      	str	r3, [r7, #4]
 8004f14:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004f16:	4b48      	ldr	r3, [pc, #288]	@ (8005038 <MX_GPIO_Init+0x168>)
 8004f18:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004f1a:	4b47      	ldr	r3, [pc, #284]	@ (8005038 <MX_GPIO_Init+0x168>)
 8004f1c:	2101      	movs	r1, #1
 8004f1e:	430a      	orrs	r2, r1
 8004f20:	635a      	str	r2, [r3, #52]	@ 0x34
 8004f22:	4b45      	ldr	r3, [pc, #276]	@ (8005038 <MX_GPIO_Init+0x168>)
 8004f24:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004f26:	2201      	movs	r2, #1
 8004f28:	4013      	ands	r3, r2
 8004f2a:	603b      	str	r3, [r7, #0]
 8004f2c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 8004f2e:	23bd      	movs	r3, #189	@ 0xbd
 8004f30:	0159      	lsls	r1, r3, #5
 8004f32:	23a0      	movs	r3, #160	@ 0xa0
 8004f34:	05db      	lsls	r3, r3, #23
 8004f36:	2200      	movs	r2, #0
 8004f38:	0018      	movs	r0, r3
 8004f3a:	f001 fcfa 	bl	8006932 <HAL_GPIO_WritePin>
                          |GPIO_PIN_10|GPIO_PIN_12, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2, GPIO_PIN_RESET);
 8004f3e:	4b3f      	ldr	r3, [pc, #252]	@ (800503c <MX_GPIO_Init+0x16c>)
 8004f40:	2200      	movs	r2, #0
 8004f42:	2107      	movs	r1, #7
 8004f44:	0018      	movs	r0, r3
 8004f46:	f001 fcf4 	bl	8006932 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_RESET);
 8004f4a:	4b3d      	ldr	r3, [pc, #244]	@ (8005040 <MX_GPIO_Init+0x170>)
 8004f4c:	2200      	movs	r2, #0
 8004f4e:	2140      	movs	r1, #64	@ 0x40
 8004f50:	0018      	movs	r0, r3
 8004f52:	f001 fcee 	bl	8006932 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB9 PB3 PB4 PB5
                           PB6 PB7 PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 8004f56:	193b      	adds	r3, r7, r4
 8004f58:	22fe      	movs	r2, #254	@ 0xfe
 8004f5a:	0092      	lsls	r2, r2, #2
 8004f5c:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004f5e:	193b      	adds	r3, r7, r4
 8004f60:	2200      	movs	r2, #0
 8004f62:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f64:	193b      	adds	r3, r7, r4
 8004f66:	2200      	movs	r2, #0
 8004f68:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004f6a:	193b      	adds	r3, r7, r4
 8004f6c:	4a33      	ldr	r2, [pc, #204]	@ (800503c <MX_GPIO_Init+0x16c>)
 8004f6e:	0019      	movs	r1, r3
 8004f70:	0010      	movs	r0, r2
 8004f72:	f001 fb5d 	bl	8006630 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8004f76:	0021      	movs	r1, r4
 8004f78:	187b      	adds	r3, r7, r1
 8004f7a:	22c0      	movs	r2, #192	@ 0xc0
 8004f7c:	0212      	lsls	r2, r2, #8
 8004f7e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004f80:	000c      	movs	r4, r1
 8004f82:	193b      	adds	r3, r7, r4
 8004f84:	2200      	movs	r2, #0
 8004f86:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f88:	193b      	adds	r3, r7, r4
 8004f8a:	2200      	movs	r2, #0
 8004f8c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004f8e:	193b      	adds	r3, r7, r4
 8004f90:	4a2b      	ldr	r2, [pc, #172]	@ (8005040 <MX_GPIO_Init+0x170>)
 8004f92:	0019      	movs	r1, r3
 8004f94:	0010      	movs	r0, r2
 8004f96:	f001 fb4b 	bl	8006630 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 PA3 PA4
                           PA6 PA11 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 8004f9a:	193b      	adds	r3, r7, r4
 8004f9c:	4a29      	ldr	r2, [pc, #164]	@ (8005044 <MX_GPIO_Init+0x174>)
 8004f9e:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_6|GPIO_PIN_11|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004fa0:	193b      	adds	r3, r7, r4
 8004fa2:	2200      	movs	r2, #0
 8004fa4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004fa6:	193b      	adds	r3, r7, r4
 8004fa8:	2200      	movs	r2, #0
 8004faa:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004fac:	193a      	adds	r2, r7, r4
 8004fae:	23a0      	movs	r3, #160	@ 0xa0
 8004fb0:	05db      	lsls	r3, r3, #23
 8004fb2:	0011      	movs	r1, r2
 8004fb4:	0018      	movs	r0, r3
 8004fb6:	f001 fb3b 	bl	8006630 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA5 PA7 PA8 PA9
                           PA10 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 8004fba:	0021      	movs	r1, r4
 8004fbc:	187b      	adds	r3, r7, r1
 8004fbe:	22bd      	movs	r2, #189	@ 0xbd
 8004fc0:	0152      	lsls	r2, r2, #5
 8004fc2:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_10|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004fc4:	000c      	movs	r4, r1
 8004fc6:	193b      	adds	r3, r7, r4
 8004fc8:	2201      	movs	r2, #1
 8004fca:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004fcc:	193b      	adds	r3, r7, r4
 8004fce:	2200      	movs	r2, #0
 8004fd0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004fd2:	193b      	adds	r3, r7, r4
 8004fd4:	2200      	movs	r2, #0
 8004fd6:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004fd8:	193a      	adds	r2, r7, r4
 8004fda:	23a0      	movs	r3, #160	@ 0xa0
 8004fdc:	05db      	lsls	r3, r3, #23
 8004fde:	0011      	movs	r1, r2
 8004fe0:	0018      	movs	r0, r3
 8004fe2:	f001 fb25 	bl	8006630 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8004fe6:	193b      	adds	r3, r7, r4
 8004fe8:	2207      	movs	r2, #7
 8004fea:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004fec:	193b      	adds	r3, r7, r4
 8004fee:	2201      	movs	r2, #1
 8004ff0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ff2:	193b      	adds	r3, r7, r4
 8004ff4:	2200      	movs	r2, #0
 8004ff6:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004ff8:	193b      	adds	r3, r7, r4
 8004ffa:	2200      	movs	r2, #0
 8004ffc:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004ffe:	193b      	adds	r3, r7, r4
 8005000:	4a0e      	ldr	r2, [pc, #56]	@ (800503c <MX_GPIO_Init+0x16c>)
 8005002:	0019      	movs	r1, r3
 8005004:	0010      	movs	r0, r2
 8005006:	f001 fb13 	bl	8006630 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 800500a:	0021      	movs	r1, r4
 800500c:	187b      	adds	r3, r7, r1
 800500e:	2240      	movs	r2, #64	@ 0x40
 8005010:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005012:	187b      	adds	r3, r7, r1
 8005014:	2201      	movs	r2, #1
 8005016:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005018:	187b      	adds	r3, r7, r1
 800501a:	2200      	movs	r2, #0
 800501c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800501e:	187b      	adds	r3, r7, r1
 8005020:	2200      	movs	r2, #0
 8005022:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005024:	187b      	adds	r3, r7, r1
 8005026:	4a06      	ldr	r2, [pc, #24]	@ (8005040 <MX_GPIO_Init+0x170>)
 8005028:	0019      	movs	r1, r3
 800502a:	0010      	movs	r0, r2
 800502c:	f001 fb00 	bl	8006630 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8005030:	46c0      	nop			@ (mov r8, r8)
 8005032:	46bd      	mov	sp, r7
 8005034:	b009      	add	sp, #36	@ 0x24
 8005036:	bd90      	pop	{r4, r7, pc}
 8005038:	40021000 	.word	0x40021000
 800503c:	50000400 	.word	0x50000400
 8005040:	50000800 	.word	0x50000800
 8005044:	0000885e 	.word	0x0000885e

08005048 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8005048:	b580      	push	{r7, lr}
 800504a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800504c:	b672      	cpsid	i
}
 800504e:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
      /* User can add his own implementation to report the HAL error return state */
      __disable_irq();
      while (1) {}
 8005050:	46c0      	nop			@ (mov r8, r8)
 8005052:	e7fd      	b.n	8005050 <Error_Handler+0x8>

08005054 <NHD_OLED_begin>:
// Parameters:
//    rows: number of rows/lines on the display.
//    columns: number of columns/characters per line on the display.
//
void NHD_OLED_begin()
{
 8005054:	b580      	push	{r7, lr}
 8005056:	af00      	add	r7, sp, #0
NHD_OLED_setupPins();
 8005058:	f000 f916 	bl	8005288 <NHD_OLED_setupPins>
NHD_OLED_setupInit();
 800505c:	f000 f93a 	bl	80052d4 <NHD_OLED_setupInit>
}
 8005060:	46c0      	nop			@ (mov r8, r8)
 8005062:	46bd      	mov	sp, r7
 8005064:	bd80      	pop	{r7, pc}

08005066 <NHD_OLED_SPIBitBang>:
// Parameters:
//   data: uint8_t to send to display
//   isCommand: command/data flag, where 0 = data and !0 = command
//
void NHD_OLED_SPIBitBang(uint8_t data, uint8_t isCommand)
{
 8005066:	b590      	push	{r4, r7, lr}
 8005068:	b085      	sub	sp, #20
 800506a:	af00      	add	r7, sp, #0
 800506c:	0002      	movs	r2, r0
 800506e:	1dfb      	adds	r3, r7, #7
 8005070:	701a      	strb	r2, [r3, #0]
 8005072:	1dbb      	adds	r3, r7, #6
 8005074:	1c0a      	adds	r2, r1, #0
 8005076:	701a      	strb	r2, [r3, #0]
uint8_t i, cb;

// If var "isCommand" is zero, we're sending a data uint8_t.
// If it's NON-zero, we're sending a command uint8_t.
if (isCommand == 0)
 8005078:	1dbb      	adds	r3, r7, #6
 800507a:	781b      	ldrb	r3, [r3, #0]
 800507c:	2b00      	cmp	r3, #0
 800507e:	d104      	bne.n	800508a <NHD_OLED_SPIBitBang+0x24>
cb = 0xFA; // Var "data" is just that, data.
 8005080:	230e      	movs	r3, #14
 8005082:	18fb      	adds	r3, r7, r3
 8005084:	22fa      	movs	r2, #250	@ 0xfa
 8005086:	701a      	strb	r2, [r3, #0]
 8005088:	e003      	b.n	8005092 <NHD_OLED_SPIBitBang+0x2c>
else
cb = 0xF8; // Var "data" is a command/control uint8_t.
 800508a:	230e      	movs	r3, #14
 800508c:	18fb      	adds	r3, r7, r3
 800508e:	22f8      	movs	r2, #248	@ 0xf8
 8005090:	701a      	strb	r2, [r3, #0]

// Send the command-or-data type specifier...
for (i = 0; i < 8; i++) {
 8005092:	230f      	movs	r3, #15
 8005094:	18fb      	adds	r3, r7, r3
 8005096:	2200      	movs	r2, #0
 8005098:	701a      	strb	r2, [r3, #0]
 800509a:	e023      	b.n	80050e4 <NHD_OLED_SPIBitBang+0x7e>
HAL_GPIO_WritePin(OLED_CLK_GPIO_Port, OLED_CLK_Pin, 0);
 800509c:	23a0      	movs	r3, #160	@ 0xa0
 800509e:	05db      	lsls	r3, r3, #23
 80050a0:	2200      	movs	r2, #0
 80050a2:	2120      	movs	r1, #32
 80050a4:	0018      	movs	r0, r3
 80050a6:	f001 fc44 	bl	8006932 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(OLED_MOSI_GPIO_Port, OLED_MOSI_Pin, (cb & 0x80) >> 7);
 80050aa:	240e      	movs	r4, #14
 80050ac:	193b      	adds	r3, r7, r4
 80050ae:	781b      	ldrb	r3, [r3, #0]
 80050b0:	09db      	lsrs	r3, r3, #7
 80050b2:	b2da      	uxtb	r2, r3
 80050b4:	23a0      	movs	r3, #160	@ 0xa0
 80050b6:	05db      	lsls	r3, r3, #23
 80050b8:	2180      	movs	r1, #128	@ 0x80
 80050ba:	0018      	movs	r0, r3
 80050bc:	f001 fc39 	bl	8006932 <HAL_GPIO_WritePin>
cb = cb << 1;
 80050c0:	193a      	adds	r2, r7, r4
 80050c2:	193b      	adds	r3, r7, r4
 80050c4:	781b      	ldrb	r3, [r3, #0]
 80050c6:	18db      	adds	r3, r3, r3
 80050c8:	7013      	strb	r3, [r2, #0]
HAL_GPIO_WritePin(OLED_CLK_GPIO_Port, OLED_CLK_Pin, 1);
 80050ca:	23a0      	movs	r3, #160	@ 0xa0
 80050cc:	05db      	lsls	r3, r3, #23
 80050ce:	2201      	movs	r2, #1
 80050d0:	2120      	movs	r1, #32
 80050d2:	0018      	movs	r0, r3
 80050d4:	f001 fc2d 	bl	8006932 <HAL_GPIO_WritePin>
for (i = 0; i < 8; i++) {
 80050d8:	210f      	movs	r1, #15
 80050da:	187b      	adds	r3, r7, r1
 80050dc:	781a      	ldrb	r2, [r3, #0]
 80050de:	187b      	adds	r3, r7, r1
 80050e0:	3201      	adds	r2, #1
 80050e2:	701a      	strb	r2, [r3, #0]
 80050e4:	220f      	movs	r2, #15
 80050e6:	18bb      	adds	r3, r7, r2
 80050e8:	781b      	ldrb	r3, [r3, #0]
 80050ea:	2b07      	cmp	r3, #7
 80050ec:	d9d6      	bls.n	800509c <NHD_OLED_SPIBitBang+0x36>
}

// Then send the lowest 4 bits of the data uint8_t, in little-endian order...
for (i = 0; i < 4; i++) {
 80050ee:	18bb      	adds	r3, r7, r2
 80050f0:	2200      	movs	r2, #0
 80050f2:	701a      	strb	r2, [r3, #0]
 80050f4:	e023      	b.n	800513e <NHD_OLED_SPIBitBang+0xd8>
HAL_GPIO_WritePin(OLED_CLK_GPIO_Port, OLED_CLK_Pin, 0);
 80050f6:	23a0      	movs	r3, #160	@ 0xa0
 80050f8:	05db      	lsls	r3, r3, #23
 80050fa:	2200      	movs	r2, #0
 80050fc:	2120      	movs	r1, #32
 80050fe:	0018      	movs	r0, r3
 8005100:	f001 fc17 	bl	8006932 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(OLED_MOSI_GPIO_Port, OLED_MOSI_Pin, (data & 0x01));
 8005104:	1dfb      	adds	r3, r7, #7
 8005106:	781b      	ldrb	r3, [r3, #0]
 8005108:	2201      	movs	r2, #1
 800510a:	4013      	ands	r3, r2
 800510c:	b2da      	uxtb	r2, r3
 800510e:	23a0      	movs	r3, #160	@ 0xa0
 8005110:	05db      	lsls	r3, r3, #23
 8005112:	2180      	movs	r1, #128	@ 0x80
 8005114:	0018      	movs	r0, r3
 8005116:	f001 fc0c 	bl	8006932 <HAL_GPIO_WritePin>
data = data >> 1;
 800511a:	1dfb      	adds	r3, r7, #7
 800511c:	1dfa      	adds	r2, r7, #7
 800511e:	7812      	ldrb	r2, [r2, #0]
 8005120:	0852      	lsrs	r2, r2, #1
 8005122:	701a      	strb	r2, [r3, #0]
HAL_GPIO_WritePin(OLED_CLK_GPIO_Port, OLED_CLK_Pin, 1);
 8005124:	23a0      	movs	r3, #160	@ 0xa0
 8005126:	05db      	lsls	r3, r3, #23
 8005128:	2201      	movs	r2, #1
 800512a:	2120      	movs	r1, #32
 800512c:	0018      	movs	r0, r3
 800512e:	f001 fc00 	bl	8006932 <HAL_GPIO_WritePin>
for (i = 0; i < 4; i++) {
 8005132:	210f      	movs	r1, #15
 8005134:	187b      	adds	r3, r7, r1
 8005136:	781a      	ldrb	r2, [r3, #0]
 8005138:	187b      	adds	r3, r7, r1
 800513a:	3201      	adds	r2, #1
 800513c:	701a      	strb	r2, [r3, #0]
 800513e:	220f      	movs	r2, #15
 8005140:	18bb      	adds	r3, r7, r2
 8005142:	781b      	ldrb	r3, [r3, #0]
 8005144:	2b03      	cmp	r3, #3
 8005146:	d9d6      	bls.n	80050f6 <NHD_OLED_SPIBitBang+0x90>
}

// Then send four zero bits...
for (i = 0; i < 4; i++) {
 8005148:	18bb      	adds	r3, r7, r2
 800514a:	2200      	movs	r2, #0
 800514c:	701a      	strb	r2, [r3, #0]
 800514e:	e01a      	b.n	8005186 <NHD_OLED_SPIBitBang+0x120>
HAL_GPIO_WritePin(OLED_CLK_GPIO_Port, OLED_CLK_Pin, 0);
 8005150:	23a0      	movs	r3, #160	@ 0xa0
 8005152:	05db      	lsls	r3, r3, #23
 8005154:	2200      	movs	r2, #0
 8005156:	2120      	movs	r1, #32
 8005158:	0018      	movs	r0, r3
 800515a:	f001 fbea 	bl	8006932 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(OLED_MOSI_GPIO_Port, OLED_MOSI_Pin, 0);
 800515e:	23a0      	movs	r3, #160	@ 0xa0
 8005160:	05db      	lsls	r3, r3, #23
 8005162:	2200      	movs	r2, #0
 8005164:	2180      	movs	r1, #128	@ 0x80
 8005166:	0018      	movs	r0, r3
 8005168:	f001 fbe3 	bl	8006932 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(OLED_CLK_GPIO_Port, OLED_CLK_Pin, 1);
 800516c:	23a0      	movs	r3, #160	@ 0xa0
 800516e:	05db      	lsls	r3, r3, #23
 8005170:	2201      	movs	r2, #1
 8005172:	2120      	movs	r1, #32
 8005174:	0018      	movs	r0, r3
 8005176:	f001 fbdc 	bl	8006932 <HAL_GPIO_WritePin>
for (i = 0; i < 4; i++) {
 800517a:	210f      	movs	r1, #15
 800517c:	187b      	adds	r3, r7, r1
 800517e:	781a      	ldrb	r2, [r3, #0]
 8005180:	187b      	adds	r3, r7, r1
 8005182:	3201      	adds	r2, #1
 8005184:	701a      	strb	r2, [r3, #0]
 8005186:	220f      	movs	r2, #15
 8005188:	18bb      	adds	r3, r7, r2
 800518a:	781b      	ldrb	r3, [r3, #0]
 800518c:	2b03      	cmp	r3, #3
 800518e:	d9df      	bls.n	8005150 <NHD_OLED_SPIBitBang+0xea>
}

// Then send the highest 4 bits of the data uint8_t, in little-endian order...
for (i = 0; i < 4; i++) {
 8005190:	18bb      	adds	r3, r7, r2
 8005192:	2200      	movs	r2, #0
 8005194:	701a      	strb	r2, [r3, #0]
 8005196:	e023      	b.n	80051e0 <NHD_OLED_SPIBitBang+0x17a>
HAL_GPIO_WritePin(OLED_CLK_GPIO_Port, OLED_CLK_Pin, 0);
 8005198:	23a0      	movs	r3, #160	@ 0xa0
 800519a:	05db      	lsls	r3, r3, #23
 800519c:	2200      	movs	r2, #0
 800519e:	2120      	movs	r1, #32
 80051a0:	0018      	movs	r0, r3
 80051a2:	f001 fbc6 	bl	8006932 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(OLED_MOSI_GPIO_Port, OLED_MOSI_Pin, (data & 0x01));
 80051a6:	1dfb      	adds	r3, r7, #7
 80051a8:	781b      	ldrb	r3, [r3, #0]
 80051aa:	2201      	movs	r2, #1
 80051ac:	4013      	ands	r3, r2
 80051ae:	b2da      	uxtb	r2, r3
 80051b0:	23a0      	movs	r3, #160	@ 0xa0
 80051b2:	05db      	lsls	r3, r3, #23
 80051b4:	2180      	movs	r1, #128	@ 0x80
 80051b6:	0018      	movs	r0, r3
 80051b8:	f001 fbbb 	bl	8006932 <HAL_GPIO_WritePin>
data = data >> 1;
 80051bc:	1dfb      	adds	r3, r7, #7
 80051be:	1dfa      	adds	r2, r7, #7
 80051c0:	7812      	ldrb	r2, [r2, #0]
 80051c2:	0852      	lsrs	r2, r2, #1
 80051c4:	701a      	strb	r2, [r3, #0]
HAL_GPIO_WritePin(OLED_CLK_GPIO_Port, OLED_CLK_Pin, 1);
 80051c6:	23a0      	movs	r3, #160	@ 0xa0
 80051c8:	05db      	lsls	r3, r3, #23
 80051ca:	2201      	movs	r2, #1
 80051cc:	2120      	movs	r1, #32
 80051ce:	0018      	movs	r0, r3
 80051d0:	f001 fbaf 	bl	8006932 <HAL_GPIO_WritePin>
for (i = 0; i < 4; i++) {
 80051d4:	210f      	movs	r1, #15
 80051d6:	187b      	adds	r3, r7, r1
 80051d8:	781a      	ldrb	r2, [r3, #0]
 80051da:	187b      	adds	r3, r7, r1
 80051dc:	3201      	adds	r2, #1
 80051de:	701a      	strb	r2, [r3, #0]
 80051e0:	220f      	movs	r2, #15
 80051e2:	18bb      	adds	r3, r7, r2
 80051e4:	781b      	ldrb	r3, [r3, #0]
 80051e6:	2b03      	cmp	r3, #3
 80051e8:	d9d6      	bls.n	8005198 <NHD_OLED_SPIBitBang+0x132>
}

// And wrap up the send with four zero bits...
for (i = 0; i < 4; i++) {
 80051ea:	18bb      	adds	r3, r7, r2
 80051ec:	2200      	movs	r2, #0
 80051ee:	701a      	strb	r2, [r3, #0]
 80051f0:	e01a      	b.n	8005228 <NHD_OLED_SPIBitBang+0x1c2>
HAL_GPIO_WritePin(OLED_CLK_GPIO_Port, OLED_CLK_Pin, 0);
 80051f2:	23a0      	movs	r3, #160	@ 0xa0
 80051f4:	05db      	lsls	r3, r3, #23
 80051f6:	2200      	movs	r2, #0
 80051f8:	2120      	movs	r1, #32
 80051fa:	0018      	movs	r0, r3
 80051fc:	f001 fb99 	bl	8006932 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(OLED_MOSI_GPIO_Port, OLED_MOSI_Pin, 0);
 8005200:	23a0      	movs	r3, #160	@ 0xa0
 8005202:	05db      	lsls	r3, r3, #23
 8005204:	2200      	movs	r2, #0
 8005206:	2180      	movs	r1, #128	@ 0x80
 8005208:	0018      	movs	r0, r3
 800520a:	f001 fb92 	bl	8006932 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(OLED_CLK_GPIO_Port, OLED_CLK_Pin, 1);
 800520e:	23a0      	movs	r3, #160	@ 0xa0
 8005210:	05db      	lsls	r3, r3, #23
 8005212:	2201      	movs	r2, #1
 8005214:	2120      	movs	r1, #32
 8005216:	0018      	movs	r0, r3
 8005218:	f001 fb8b 	bl	8006932 <HAL_GPIO_WritePin>
for (i = 0; i < 4; i++) {
 800521c:	210f      	movs	r1, #15
 800521e:	187b      	adds	r3, r7, r1
 8005220:	781a      	ldrb	r2, [r3, #0]
 8005222:	187b      	adds	r3, r7, r1
 8005224:	3201      	adds	r2, #1
 8005226:	701a      	strb	r2, [r3, #0]
 8005228:	230f      	movs	r3, #15
 800522a:	18fb      	adds	r3, r7, r3
 800522c:	781b      	ldrb	r3, [r3, #0]
 800522e:	2b03      	cmp	r3, #3
 8005230:	d9df      	bls.n	80051f2 <NHD_OLED_SPIBitBang+0x18c>
}
}
 8005232:	46c0      	nop			@ (mov r8, r8)
 8005234:	46c0      	nop			@ (mov r8, r8)
 8005236:	46bd      	mov	sp, r7
 8005238:	b005      	add	sp, #20
 800523a:	bd90      	pop	{r4, r7, pc}

0800523c <NHD_OLED_sendCommand>:
//
// Parameters:
//   command: command uint8_t to send.
//
void NHD_OLED_sendCommand(uint8_t command)
{
 800523c:	b580      	push	{r7, lr}
 800523e:	b082      	sub	sp, #8
 8005240:	af00      	add	r7, sp, #0
 8005242:	0002      	movs	r2, r0
 8005244:	1dfb      	adds	r3, r7, #7
 8005246:	701a      	strb	r2, [r3, #0]
NHD_OLED_SPIBitBang(command, 1);
 8005248:	1dfb      	adds	r3, r7, #7
 800524a:	781b      	ldrb	r3, [r3, #0]
 800524c:	2101      	movs	r1, #1
 800524e:	0018      	movs	r0, r3
 8005250:	f7ff ff09 	bl	8005066 <NHD_OLED_SPIBitBang>

HAL_Delay(1);
 8005254:	2001      	movs	r0, #1
 8005256:	f000 fae9 	bl	800582c <HAL_Delay>
}
 800525a:	46c0      	nop			@ (mov r8, r8)
 800525c:	46bd      	mov	sp, r7
 800525e:	b002      	add	sp, #8
 8005260:	bd80      	pop	{r7, pc}

08005262 <NHD_OLED_sendData>:
//
// Parameters:
//   data: command uint8_t to send.
//
void NHD_OLED_sendData(uint8_t data)
{
 8005262:	b580      	push	{r7, lr}
 8005264:	b082      	sub	sp, #8
 8005266:	af00      	add	r7, sp, #0
 8005268:	0002      	movs	r2, r0
 800526a:	1dfb      	adds	r3, r7, #7
 800526c:	701a      	strb	r2, [r3, #0]
NHD_OLED_SPIBitBang(data, 0);
 800526e:	1dfb      	adds	r3, r7, #7
 8005270:	781b      	ldrb	r3, [r3, #0]
 8005272:	2100      	movs	r1, #0
 8005274:	0018      	movs	r0, r3
 8005276:	f7ff fef6 	bl	8005066 <NHD_OLED_SPIBitBang>
HAL_Delay(1);
 800527a:	2001      	movs	r0, #1
 800527c:	f000 fad6 	bl	800582c <HAL_Delay>
}
 8005280:	46c0      	nop			@ (mov r8, r8)
 8005282:	46bd      	mov	sp, r7
 8005284:	b002      	add	sp, #8
 8005286:	bd80      	pop	{r7, pc}

08005288 <NHD_OLED_setupPins>:
//
// Parameters:
//    NONE. Define pin OLED_MOSI for data and OLED_CLK for clock in the header file.
//
void NHD_OLED_setupPins()
{
 8005288:	b580      	push	{r7, lr}
 800528a:	b086      	sub	sp, #24
 800528c:	af00      	add	r7, sp, #0
GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800528e:	1d3b      	adds	r3, r7, #4
 8005290:	0018      	movs	r0, r3
 8005292:	2314      	movs	r3, #20
 8005294:	001a      	movs	r2, r3
 8005296:	2100      	movs	r1, #0
 8005298:	f003 fe92 	bl	8008fc0 <memset>

GPIO_InitStruct.Pin = OLED_MOSI_Pin | OLED_CLK_Pin;
 800529c:	1d3b      	adds	r3, r7, #4
 800529e:	22a0      	movs	r2, #160	@ 0xa0
 80052a0:	601a      	str	r2, [r3, #0]
GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80052a2:	1d3b      	adds	r3, r7, #4
 80052a4:	2201      	movs	r2, #1
 80052a6:	605a      	str	r2, [r3, #4]
GPIO_InitStruct.Pull = GPIO_PULLUP;
 80052a8:	1d3b      	adds	r3, r7, #4
 80052aa:	2201      	movs	r2, #1
 80052ac:	609a      	str	r2, [r3, #8]
GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80052ae:	1d3b      	adds	r3, r7, #4
 80052b0:	2202      	movs	r2, #2
 80052b2:	60da      	str	r2, [r3, #12]
HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80052b4:	1d3b      	adds	r3, r7, #4
 80052b6:	4a06      	ldr	r2, [pc, #24]	@ (80052d0 <NHD_OLED_setupPins+0x48>)
 80052b8:	0019      	movs	r1, r3
 80052ba:	0010      	movs	r0, r2
 80052bc:	f001 f9b8 	bl	8006630 <HAL_GPIO_Init>

HAL_Delay(50);
 80052c0:	2032      	movs	r0, #50	@ 0x32
 80052c2:	f000 fab3 	bl	800582c <HAL_Delay>
}
 80052c6:	46c0      	nop			@ (mov r8, r8)
 80052c8:	46bd      	mov	sp, r7
 80052ca:	b006      	add	sp, #24
 80052cc:	bd80      	pop	{r7, pc}
 80052ce:	46c0      	nop			@ (mov r8, r8)
 80052d0:	50000400 	.word	0x50000400

080052d4 <NHD_OLED_setupInit>:
// Initializes and configures the display. Note that the command set provided
// below is for Newhaven's slim OLED line, and individual products may require
// different settings.
//
void NHD_OLED_setupInit()
{
 80052d4:	b580      	push	{r7, lr}
 80052d6:	af00      	add	r7, sp, #0
// Internal voltage regulator configuration
NHD_OLED_sendCommand(0x2A); // Function set select > extended command set enable (RE = 1)
 80052d8:	202a      	movs	r0, #42	@ 0x2a
 80052da:	f7ff ffaf 	bl	800523c <NHD_OLED_sendCommand>
NHD_OLED_sendCommand(0x71);     // Internal Vdd regualtor control (function selection A) - command
 80052de:	2071      	movs	r0, #113	@ 0x71
 80052e0:	f7ff ffac 	bl	800523c <NHD_OLED_sendCommand>
NHD_OLED_sendData(0x00);        // Internal Vdd regualtor control (function selection A) - value
 80052e4:	2000      	movs	r0, #0
 80052e6:	f7ff ffbc 	bl	8005262 <NHD_OLED_sendData>

// Display off
NHD_OLED_sendCommand(0x28); // Function set select > fundamental (default) command set (RE = 0)
 80052ea:	2028      	movs	r0, #40	@ 0x28
 80052ec:	f7ff ffa6 	bl	800523c <NHD_OLED_sendCommand>
NHD_OLED_sendCommand(0x08);     // Display off, cursor off, blink off
 80052f0:	2008      	movs	r0, #8
 80052f2:	f7ff ffa3 	bl	800523c <NHD_OLED_sendCommand>

// Timing configuration
NHD_OLED_sendCommand(0x2A); // Function set select > extended command set enable (RE = 1)
 80052f6:	202a      	movs	r0, #42	@ 0x2a
 80052f8:	f7ff ffa0 	bl	800523c <NHD_OLED_sendCommand>
NHD_OLED_sendCommand(0x79);  // Function set select > OLED command set enable (SD = 1)
 80052fc:	2079      	movs	r0, #121	@ 0x79
 80052fe:	f7ff ff9d 	bl	800523c <NHD_OLED_sendCommand>
NHD_OLED_sendCommand(0xD5);   // Set display clock divide ratio/oscillator frequency - command
 8005302:	20d5      	movs	r0, #213	@ 0xd5
 8005304:	f7ff ff9a 	bl	800523c <NHD_OLED_sendCommand>
NHD_OLED_sendCommand(0x70);   // Set display clock divide ratio/oscillator frequency - value
 8005308:	2070      	movs	r0, #112	@ 0x70
 800530a:	f7ff ff97 	bl	800523c <NHD_OLED_sendCommand>
NHD_OLED_sendCommand(0x78);     // Function set > OLED command set disable (SD = 0)
 800530e:	2078      	movs	r0, #120	@ 0x78
 8005310:	f7ff ff94 	bl	800523c <NHD_OLED_sendCommand>

NHD_OLED_sendCommand(0x09); // Function set select > extended command set enable (RE = 1)
 8005314:	2009      	movs	r0, #9
 8005316:	f7ff ff91 	bl	800523c <NHD_OLED_sendCommand>
NHD_OLED_sendCommand(0x06);  // Function set select > OLED command set enable (SD = 1)
 800531a:	2006      	movs	r0, #6
 800531c:	f7ff ff8e 	bl	800523c <NHD_OLED_sendCommand>
NHD_OLED_sendCommand(0x72);   // Set display clock divide ratio/oscillator frequency - command
 8005320:	2072      	movs	r0, #114	@ 0x72
 8005322:	f7ff ff8b 	bl	800523c <NHD_OLED_sendCommand>
NHD_OLED_sendData(0x00);        // Internal Vdd regualtor control (function selection A) - value
 8005326:	2000      	movs	r0, #0
 8005328:	f7ff ff9b 	bl	8005262 <NHD_OLED_sendData>

// CGROM select configuration
NHD_OLED_sendCommand(0x2A); // Function set select > extended command set enable (RE = 1)
 800532c:	202a      	movs	r0, #42	@ 0x2a
 800532e:	f7ff ff85 	bl	800523c <NHD_OLED_sendCommand>
NHD_OLED_sendCommand(0x79);     // CGROM selection (function selection B) - command
 8005332:	2079      	movs	r0, #121	@ 0x79
 8005334:	f7ff ff82 	bl	800523c <NHD_OLED_sendCommand>
NHD_OLED_sendCommand(0xDA);     // SEG pins hardware configuration - command
 8005338:	20da      	movs	r0, #218	@ 0xda
 800533a:	f7ff ff7f 	bl	800523c <NHD_OLED_sendCommand>
NHD_OLED_sendCommand(0x10); // SEG pins hardware configuration - value - NOTE: Some displays require 0x00 here.
 800533e:	2010      	movs	r0, #16
 8005340:	f7ff ff7c 	bl	800523c <NHD_OLED_sendCommand>
NHD_OLED_sendCommand(0xDC);    // VSL & GPIO control (function selection C) - command
 8005344:	20dc      	movs	r0, #220	@ 0xdc
 8005346:	f7ff ff79 	bl	800523c <NHD_OLED_sendCommand>
NHD_OLED_sendCommand(0x00);     // VSL & GPIO control (function selection C) - value
 800534a:	2000      	movs	r0, #0
 800534c:	f7ff ff76 	bl	800523c <NHD_OLED_sendCommand>
NHD_OLED_sendCommand(0x81);     // Contrast control - command
 8005350:	2081      	movs	r0, #129	@ 0x81
 8005352:	f7ff ff73 	bl	800523c <NHD_OLED_sendCommand>
NHD_OLED_sendCommand(0x7F);     // Contrast control - value
 8005356:	207f      	movs	r0, #127	@ 0x7f
 8005358:	f7ff ff70 	bl	800523c <NHD_OLED_sendCommand>
NHD_OLED_sendCommand(0xD9);     // Phase length - command
 800535c:	20d9      	movs	r0, #217	@ 0xd9
 800535e:	f7ff ff6d 	bl	800523c <NHD_OLED_sendCommand>
NHD_OLED_sendCommand(0xF1);     // Phase length - value
 8005362:	20f1      	movs	r0, #241	@ 0xf1
 8005364:	f7ff ff6a 	bl	800523c <NHD_OLED_sendCommand>
NHD_OLED_sendCommand(0xDB);     // VCOMH deselect level - command
 8005368:	20db      	movs	r0, #219	@ 0xdb
 800536a:	f7ff ff67 	bl	800523c <NHD_OLED_sendCommand>
NHD_OLED_sendCommand(0x40);     // VCOMH deselect level - value
 800536e:	2040      	movs	r0, #64	@ 0x40
 8005370:	f7ff ff64 	bl	800523c <NHD_OLED_sendCommand>
NHD_OLED_sendCommand(0x78); // Function set select > OLED command set disable (SD = 0)
 8005374:	2078      	movs	r0, #120	@ 0x78
 8005376:	f7ff ff61 	bl	800523c <NHD_OLED_sendCommand>

// Wrapping up and switching on
NHD_OLED_sendCommand(0x28); // Function set select > fundamental (default) command set (RE = 0)
 800537a:	2028      	movs	r0, #40	@ 0x28
 800537c:	f7ff ff5e 	bl	800523c <NHD_OLED_sendCommand>
NHD_OLED_sendCommand(0x01);     // Clear display
 8005380:	2001      	movs	r0, #1
 8005382:	f7ff ff5b 	bl	800523c <NHD_OLED_sendCommand>
NHD_OLED_sendCommand(0x80);   // Set DDRAM address to 0x00 (home on topmost row/line)
 8005386:	2080      	movs	r0, #128	@ 0x80
 8005388:	f7ff ff58 	bl	800523c <NHD_OLED_sendCommand>
NHD_OLED_sendCommand(0x0C);     // Display ON
 800538c:	200c      	movs	r0, #12
 800538e:	f7ff ff55 	bl	800523c <NHD_OLED_sendCommand>

HAL_Delay(100);
 8005392:	2064      	movs	r0, #100	@ 0x64
 8005394:	f000 fa4a 	bl	800582c <HAL_Delay>
}
 8005398:	46c0      	nop			@ (mov r8, r8)
 800539a:	46bd      	mov	sp, r7
 800539c:	bd80      	pop	{r7, pc}

0800539e <NHD_OLED_displayOff>:
//NHD_OLED_dispOff
//
// Switches the entire display off.
//
void NHD_OLED_displayOff()
{
 800539e:	b580      	push	{r7, lr}
 80053a0:	af00      	add	r7, sp, #0
NHD_OLED_sendCommand(0x08);
 80053a2:	2008      	movs	r0, #8
 80053a4:	f7ff ff4a 	bl	800523c <NHD_OLED_sendCommand>
HAL_Delay(10);
 80053a8:	200a      	movs	r0, #10
 80053aa:	f000 fa3f 	bl	800582c <HAL_Delay>
}
 80053ae:	46c0      	nop			@ (mov r8, r8)
 80053b0:	46bd      	mov	sp, r7
 80053b2:	bd80      	pop	{r7, pc}

080053b4 <NHD_OLED_textClear>:
// NHD_OLED_textClear
//
// Sends a "clear" command to the display.
//
void NHD_OLED_textClear()
{
 80053b4:	b580      	push	{r7, lr}
 80053b6:	af00      	add	r7, sp, #0
NHD_OLED_sendCommand(0x01);
 80053b8:	2001      	movs	r0, #1
 80053ba:	f7ff ff3f 	bl	800523c <NHD_OLED_sendCommand>
HAL_Delay(10);
 80053be:	200a      	movs	r0, #10
 80053c0:	f000 fa34 	bl	800582c <HAL_Delay>
}
 80053c4:	46c0      	nop			@ (mov r8, r8)
 80053c6:	46bd      	mov	sp, r7
 80053c8:	bd80      	pop	{r7, pc}
	...

080053cc <NHD_OLED_cursorPos>:
// Parameters:
//   row: row/line number (0-1/2/3).
//   column: column number (0-16/20).
//
void NHD_OLED_cursorPos(uint8_t row, uint8_t column)
{
 80053cc:	b580      	push	{r7, lr}
 80053ce:	b084      	sub	sp, #16
 80053d0:	af00      	add	r7, sp, #0
 80053d2:	0002      	movs	r2, r0
 80053d4:	1dfb      	adds	r3, r7, #7
 80053d6:	701a      	strb	r2, [r3, #0]
 80053d8:	1dbb      	adds	r3, r7, #6
 80053da:	1c0a      	adds	r2, r1, #0
 80053dc:	701a      	strb	r2, [r3, #0]
uint8_t row_command[4] = { 0x80, 0xA0, 0xC0, 0xE0 };
 80053de:	230c      	movs	r3, #12
 80053e0:	18fb      	adds	r3, r7, r3
 80053e2:	4a14      	ldr	r2, [pc, #80]	@ (8005434 <NHD_OLED_cursorPos+0x68>)
 80053e4:	601a      	str	r2, [r3, #0]

if (row >= OLED_DISP_ROWS)
 80053e6:	4b14      	ldr	r3, [pc, #80]	@ (8005438 <NHD_OLED_cursorPos+0x6c>)
 80053e8:	781b      	ldrb	r3, [r3, #0]
 80053ea:	1dfa      	adds	r2, r7, #7
 80053ec:	7812      	ldrb	r2, [r2, #0]
 80053ee:	429a      	cmp	r2, r3
 80053f0:	d304      	bcc.n	80053fc <NHD_OLED_cursorPos+0x30>
row = OLED_DISP_ROWS - 1;
 80053f2:	4b11      	ldr	r3, [pc, #68]	@ (8005438 <NHD_OLED_cursorPos+0x6c>)
 80053f4:	781a      	ldrb	r2, [r3, #0]
 80053f6:	1dfb      	adds	r3, r7, #7
 80053f8:	3a01      	subs	r2, #1
 80053fa:	701a      	strb	r2, [r3, #0]
if (column >= OLED_DISP_COLUMNS)
 80053fc:	4b0f      	ldr	r3, [pc, #60]	@ (800543c <NHD_OLED_cursorPos+0x70>)
 80053fe:	781b      	ldrb	r3, [r3, #0]
 8005400:	1dba      	adds	r2, r7, #6
 8005402:	7812      	ldrb	r2, [r2, #0]
 8005404:	429a      	cmp	r2, r3
 8005406:	d304      	bcc.n	8005412 <NHD_OLED_cursorPos+0x46>
column = OLED_DISP_COLUMNS - 1;
 8005408:	4b0c      	ldr	r3, [pc, #48]	@ (800543c <NHD_OLED_cursorPos+0x70>)
 800540a:	781a      	ldrb	r2, [r3, #0]
 800540c:	1dbb      	adds	r3, r7, #6
 800540e:	3a01      	subs	r2, #1
 8005410:	701a      	strb	r2, [r3, #0]

NHD_OLED_sendCommand(row_command[row] + column);
 8005412:	1dfb      	adds	r3, r7, #7
 8005414:	781b      	ldrb	r3, [r3, #0]
 8005416:	220c      	movs	r2, #12
 8005418:	18ba      	adds	r2, r7, r2
 800541a:	5cd2      	ldrb	r2, [r2, r3]
 800541c:	1dbb      	adds	r3, r7, #6
 800541e:	781b      	ldrb	r3, [r3, #0]
 8005420:	18d3      	adds	r3, r2, r3
 8005422:	b2db      	uxtb	r3, r3
 8005424:	0018      	movs	r0, r3
 8005426:	f7ff ff09 	bl	800523c <NHD_OLED_sendCommand>
}
 800542a:	46c0      	nop			@ (mov r8, r8)
 800542c:	46bd      	mov	sp, r7
 800542e:	b004      	add	sp, #16
 8005430:	bd80      	pop	{r7, pc}
 8005432:	46c0      	nop			@ (mov r8, r8)
 8005434:	e0c0a080 	.word	0xe0c0a080
 8005438:	20000004 	.word	0x20000004
 800543c:	20000005 	.word	0x20000005

08005440 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005440:	b580      	push	{r7, lr}
 8005442:	b082      	sub	sp, #8
 8005444:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005446:	4b0f      	ldr	r3, [pc, #60]	@ (8005484 <HAL_MspInit+0x44>)
 8005448:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800544a:	4b0e      	ldr	r3, [pc, #56]	@ (8005484 <HAL_MspInit+0x44>)
 800544c:	2101      	movs	r1, #1
 800544e:	430a      	orrs	r2, r1
 8005450:	641a      	str	r2, [r3, #64]	@ 0x40
 8005452:	4b0c      	ldr	r3, [pc, #48]	@ (8005484 <HAL_MspInit+0x44>)
 8005454:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005456:	2201      	movs	r2, #1
 8005458:	4013      	ands	r3, r2
 800545a:	607b      	str	r3, [r7, #4]
 800545c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800545e:	4b09      	ldr	r3, [pc, #36]	@ (8005484 <HAL_MspInit+0x44>)
 8005460:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005462:	4b08      	ldr	r3, [pc, #32]	@ (8005484 <HAL_MspInit+0x44>)
 8005464:	2180      	movs	r1, #128	@ 0x80
 8005466:	0549      	lsls	r1, r1, #21
 8005468:	430a      	orrs	r2, r1
 800546a:	63da      	str	r2, [r3, #60]	@ 0x3c
 800546c:	4b05      	ldr	r3, [pc, #20]	@ (8005484 <HAL_MspInit+0x44>)
 800546e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005470:	2380      	movs	r3, #128	@ 0x80
 8005472:	055b      	lsls	r3, r3, #21
 8005474:	4013      	ands	r3, r2
 8005476:	603b      	str	r3, [r7, #0]
 8005478:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800547a:	46c0      	nop			@ (mov r8, r8)
 800547c:	46bd      	mov	sp, r7
 800547e:	b002      	add	sp, #8
 8005480:	bd80      	pop	{r7, pc}
 8005482:	46c0      	nop			@ (mov r8, r8)
 8005484:	40021000 	.word	0x40021000

08005488 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8005488:	b590      	push	{r4, r7, lr}
 800548a:	b08b      	sub	sp, #44	@ 0x2c
 800548c:	af00      	add	r7, sp, #0
 800548e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005490:	2414      	movs	r4, #20
 8005492:	193b      	adds	r3, r7, r4
 8005494:	0018      	movs	r0, r3
 8005496:	2314      	movs	r3, #20
 8005498:	001a      	movs	r2, r3
 800549a:	2100      	movs	r1, #0
 800549c:	f003 fd90 	bl	8008fc0 <memset>
  if(hadc->Instance==ADC1)
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	4a18      	ldr	r2, [pc, #96]	@ (8005508 <HAL_ADC_MspInit+0x80>)
 80054a6:	4293      	cmp	r3, r2
 80054a8:	d129      	bne.n	80054fe <HAL_ADC_MspInit+0x76>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80054aa:	4b18      	ldr	r3, [pc, #96]	@ (800550c <HAL_ADC_MspInit+0x84>)
 80054ac:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80054ae:	4b17      	ldr	r3, [pc, #92]	@ (800550c <HAL_ADC_MspInit+0x84>)
 80054b0:	2180      	movs	r1, #128	@ 0x80
 80054b2:	0349      	lsls	r1, r1, #13
 80054b4:	430a      	orrs	r2, r1
 80054b6:	641a      	str	r2, [r3, #64]	@ 0x40
 80054b8:	4b14      	ldr	r3, [pc, #80]	@ (800550c <HAL_ADC_MspInit+0x84>)
 80054ba:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80054bc:	2380      	movs	r3, #128	@ 0x80
 80054be:	035b      	lsls	r3, r3, #13
 80054c0:	4013      	ands	r3, r2
 80054c2:	613b      	str	r3, [r7, #16]
 80054c4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80054c6:	4b11      	ldr	r3, [pc, #68]	@ (800550c <HAL_ADC_MspInit+0x84>)
 80054c8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80054ca:	4b10      	ldr	r3, [pc, #64]	@ (800550c <HAL_ADC_MspInit+0x84>)
 80054cc:	2101      	movs	r1, #1
 80054ce:	430a      	orrs	r2, r1
 80054d0:	635a      	str	r2, [r3, #52]	@ 0x34
 80054d2:	4b0e      	ldr	r3, [pc, #56]	@ (800550c <HAL_ADC_MspInit+0x84>)
 80054d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80054d6:	2201      	movs	r2, #1
 80054d8:	4013      	ands	r3, r2
 80054da:	60fb      	str	r3, [r7, #12]
 80054dc:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80054de:	193b      	adds	r3, r7, r4
 80054e0:	2201      	movs	r2, #1
 80054e2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80054e4:	193b      	adds	r3, r7, r4
 80054e6:	2203      	movs	r2, #3
 80054e8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80054ea:	193b      	adds	r3, r7, r4
 80054ec:	2200      	movs	r2, #0
 80054ee:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80054f0:	193a      	adds	r2, r7, r4
 80054f2:	23a0      	movs	r3, #160	@ 0xa0
 80054f4:	05db      	lsls	r3, r3, #23
 80054f6:	0011      	movs	r1, r2
 80054f8:	0018      	movs	r0, r3
 80054fa:	f001 f899 	bl	8006630 <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 80054fe:	46c0      	nop			@ (mov r8, r8)
 8005500:	46bd      	mov	sp, r7
 8005502:	b00b      	add	sp, #44	@ 0x2c
 8005504:	bd90      	pop	{r4, r7, pc}
 8005506:	46c0      	nop			@ (mov r8, r8)
 8005508:	40012400 	.word	0x40012400
 800550c:	40021000 	.word	0x40021000

08005510 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005510:	b580      	push	{r7, lr}
 8005512:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8005514:	46c0      	nop			@ (mov r8, r8)
 8005516:	e7fd      	b.n	8005514 <NMI_Handler+0x4>

08005518 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005518:	b580      	push	{r7, lr}
 800551a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800551c:	46c0      	nop			@ (mov r8, r8)
 800551e:	e7fd      	b.n	800551c <HardFault_Handler+0x4>

08005520 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005520:	b580      	push	{r7, lr}
 8005522:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8005524:	46c0      	nop			@ (mov r8, r8)
 8005526:	46bd      	mov	sp, r7
 8005528:	bd80      	pop	{r7, pc}

0800552a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800552a:	b580      	push	{r7, lr}
 800552c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800552e:	46c0      	nop			@ (mov r8, r8)
 8005530:	46bd      	mov	sp, r7
 8005532:	bd80      	pop	{r7, pc}

08005534 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005534:	b580      	push	{r7, lr}
 8005536:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005538:	f000 f95c 	bl	80057f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800553c:	46c0      	nop			@ (mov r8, r8)
 800553e:	46bd      	mov	sp, r7
 8005540:	bd80      	pop	{r7, pc}

08005542 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8005542:	b580      	push	{r7, lr}
 8005544:	af00      	add	r7, sp, #0
  return 1;
 8005546:	2301      	movs	r3, #1
}
 8005548:	0018      	movs	r0, r3
 800554a:	46bd      	mov	sp, r7
 800554c:	bd80      	pop	{r7, pc}

0800554e <_kill>:

int _kill(int pid, int sig)
{
 800554e:	b580      	push	{r7, lr}
 8005550:	b082      	sub	sp, #8
 8005552:	af00      	add	r7, sp, #0
 8005554:	6078      	str	r0, [r7, #4]
 8005556:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8005558:	f003 fd4c 	bl	8008ff4 <__errno>
 800555c:	0003      	movs	r3, r0
 800555e:	2216      	movs	r2, #22
 8005560:	601a      	str	r2, [r3, #0]
  return -1;
 8005562:	2301      	movs	r3, #1
 8005564:	425b      	negs	r3, r3
}
 8005566:	0018      	movs	r0, r3
 8005568:	46bd      	mov	sp, r7
 800556a:	b002      	add	sp, #8
 800556c:	bd80      	pop	{r7, pc}

0800556e <_exit>:

void _exit (int status)
{
 800556e:	b580      	push	{r7, lr}
 8005570:	b082      	sub	sp, #8
 8005572:	af00      	add	r7, sp, #0
 8005574:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8005576:	2301      	movs	r3, #1
 8005578:	425a      	negs	r2, r3
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	0011      	movs	r1, r2
 800557e:	0018      	movs	r0, r3
 8005580:	f7ff ffe5 	bl	800554e <_kill>
  while (1) {}    /* Make sure we hang here */
 8005584:	46c0      	nop			@ (mov r8, r8)
 8005586:	e7fd      	b.n	8005584 <_exit+0x16>

08005588 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8005588:	b580      	push	{r7, lr}
 800558a:	b086      	sub	sp, #24
 800558c:	af00      	add	r7, sp, #0
 800558e:	60f8      	str	r0, [r7, #12]
 8005590:	60b9      	str	r1, [r7, #8]
 8005592:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005594:	2300      	movs	r3, #0
 8005596:	617b      	str	r3, [r7, #20]
 8005598:	e00a      	b.n	80055b0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800559a:	e000      	b.n	800559e <_read+0x16>
 800559c:	bf00      	nop
 800559e:	0001      	movs	r1, r0
 80055a0:	68bb      	ldr	r3, [r7, #8]
 80055a2:	1c5a      	adds	r2, r3, #1
 80055a4:	60ba      	str	r2, [r7, #8]
 80055a6:	b2ca      	uxtb	r2, r1
 80055a8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80055aa:	697b      	ldr	r3, [r7, #20]
 80055ac:	3301      	adds	r3, #1
 80055ae:	617b      	str	r3, [r7, #20]
 80055b0:	697a      	ldr	r2, [r7, #20]
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	429a      	cmp	r2, r3
 80055b6:	dbf0      	blt.n	800559a <_read+0x12>
  }

  return len;
 80055b8:	687b      	ldr	r3, [r7, #4]
}
 80055ba:	0018      	movs	r0, r3
 80055bc:	46bd      	mov	sp, r7
 80055be:	b006      	add	sp, #24
 80055c0:	bd80      	pop	{r7, pc}

080055c2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80055c2:	b580      	push	{r7, lr}
 80055c4:	b086      	sub	sp, #24
 80055c6:	af00      	add	r7, sp, #0
 80055c8:	60f8      	str	r0, [r7, #12]
 80055ca:	60b9      	str	r1, [r7, #8]
 80055cc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80055ce:	2300      	movs	r3, #0
 80055d0:	617b      	str	r3, [r7, #20]
 80055d2:	e009      	b.n	80055e8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80055d4:	68bb      	ldr	r3, [r7, #8]
 80055d6:	1c5a      	adds	r2, r3, #1
 80055d8:	60ba      	str	r2, [r7, #8]
 80055da:	781b      	ldrb	r3, [r3, #0]
 80055dc:	0018      	movs	r0, r3
 80055de:	e000      	b.n	80055e2 <_write+0x20>
 80055e0:	bf00      	nop
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80055e2:	697b      	ldr	r3, [r7, #20]
 80055e4:	3301      	adds	r3, #1
 80055e6:	617b      	str	r3, [r7, #20]
 80055e8:	697a      	ldr	r2, [r7, #20]
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	429a      	cmp	r2, r3
 80055ee:	dbf1      	blt.n	80055d4 <_write+0x12>
  }
  return len;
 80055f0:	687b      	ldr	r3, [r7, #4]
}
 80055f2:	0018      	movs	r0, r3
 80055f4:	46bd      	mov	sp, r7
 80055f6:	b006      	add	sp, #24
 80055f8:	bd80      	pop	{r7, pc}

080055fa <_close>:

int _close(int file)
{
 80055fa:	b580      	push	{r7, lr}
 80055fc:	b082      	sub	sp, #8
 80055fe:	af00      	add	r7, sp, #0
 8005600:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8005602:	2301      	movs	r3, #1
 8005604:	425b      	negs	r3, r3
}
 8005606:	0018      	movs	r0, r3
 8005608:	46bd      	mov	sp, r7
 800560a:	b002      	add	sp, #8
 800560c:	bd80      	pop	{r7, pc}

0800560e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800560e:	b580      	push	{r7, lr}
 8005610:	b082      	sub	sp, #8
 8005612:	af00      	add	r7, sp, #0
 8005614:	6078      	str	r0, [r7, #4]
 8005616:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8005618:	683b      	ldr	r3, [r7, #0]
 800561a:	2280      	movs	r2, #128	@ 0x80
 800561c:	0192      	lsls	r2, r2, #6
 800561e:	605a      	str	r2, [r3, #4]
  return 0;
 8005620:	2300      	movs	r3, #0
}
 8005622:	0018      	movs	r0, r3
 8005624:	46bd      	mov	sp, r7
 8005626:	b002      	add	sp, #8
 8005628:	bd80      	pop	{r7, pc}

0800562a <_isatty>:

int _isatty(int file)
{
 800562a:	b580      	push	{r7, lr}
 800562c:	b082      	sub	sp, #8
 800562e:	af00      	add	r7, sp, #0
 8005630:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8005632:	2301      	movs	r3, #1
}
 8005634:	0018      	movs	r0, r3
 8005636:	46bd      	mov	sp, r7
 8005638:	b002      	add	sp, #8
 800563a:	bd80      	pop	{r7, pc}

0800563c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800563c:	b580      	push	{r7, lr}
 800563e:	b084      	sub	sp, #16
 8005640:	af00      	add	r7, sp, #0
 8005642:	60f8      	str	r0, [r7, #12]
 8005644:	60b9      	str	r1, [r7, #8]
 8005646:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8005648:	2300      	movs	r3, #0
}
 800564a:	0018      	movs	r0, r3
 800564c:	46bd      	mov	sp, r7
 800564e:	b004      	add	sp, #16
 8005650:	bd80      	pop	{r7, pc}
	...

08005654 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005654:	b580      	push	{r7, lr}
 8005656:	b086      	sub	sp, #24
 8005658:	af00      	add	r7, sp, #0
 800565a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800565c:	4a14      	ldr	r2, [pc, #80]	@ (80056b0 <_sbrk+0x5c>)
 800565e:	4b15      	ldr	r3, [pc, #84]	@ (80056b4 <_sbrk+0x60>)
 8005660:	1ad3      	subs	r3, r2, r3
 8005662:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005664:	697b      	ldr	r3, [r7, #20]
 8005666:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005668:	4b13      	ldr	r3, [pc, #76]	@ (80056b8 <_sbrk+0x64>)
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	2b00      	cmp	r3, #0
 800566e:	d102      	bne.n	8005676 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005670:	4b11      	ldr	r3, [pc, #68]	@ (80056b8 <_sbrk+0x64>)
 8005672:	4a12      	ldr	r2, [pc, #72]	@ (80056bc <_sbrk+0x68>)
 8005674:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8005676:	4b10      	ldr	r3, [pc, #64]	@ (80056b8 <_sbrk+0x64>)
 8005678:	681a      	ldr	r2, [r3, #0]
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	18d3      	adds	r3, r2, r3
 800567e:	693a      	ldr	r2, [r7, #16]
 8005680:	429a      	cmp	r2, r3
 8005682:	d207      	bcs.n	8005694 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005684:	f003 fcb6 	bl	8008ff4 <__errno>
 8005688:	0003      	movs	r3, r0
 800568a:	220c      	movs	r2, #12
 800568c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800568e:	2301      	movs	r3, #1
 8005690:	425b      	negs	r3, r3
 8005692:	e009      	b.n	80056a8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8005694:	4b08      	ldr	r3, [pc, #32]	@ (80056b8 <_sbrk+0x64>)
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800569a:	4b07      	ldr	r3, [pc, #28]	@ (80056b8 <_sbrk+0x64>)
 800569c:	681a      	ldr	r2, [r3, #0]
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	18d2      	adds	r2, r2, r3
 80056a2:	4b05      	ldr	r3, [pc, #20]	@ (80056b8 <_sbrk+0x64>)
 80056a4:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 80056a6:	68fb      	ldr	r3, [r7, #12]
}
 80056a8:	0018      	movs	r0, r3
 80056aa:	46bd      	mov	sp, r7
 80056ac:	b006      	add	sp, #24
 80056ae:	bd80      	pop	{r7, pc}
 80056b0:	20009000 	.word	0x20009000
 80056b4:	00000400 	.word	0x00000400
 80056b8:	20000304 	.word	0x20000304
 80056bc:	20000458 	.word	0x20000458

080056c0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80056c0:	b580      	push	{r7, lr}
 80056c2:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80056c4:	46c0      	nop			@ (mov r8, r8)
 80056c6:	46bd      	mov	sp, r7
 80056c8:	bd80      	pop	{r7, pc}
	...

080056cc <Reset_Handler>:
 80056cc:	480d      	ldr	r0, [pc, #52]	@ (8005704 <LoopForever+0x2>)
 80056ce:	4685      	mov	sp, r0
 80056d0:	f7ff fff6 	bl	80056c0 <SystemInit>
 80056d4:	480c      	ldr	r0, [pc, #48]	@ (8005708 <LoopForever+0x6>)
 80056d6:	490d      	ldr	r1, [pc, #52]	@ (800570c <LoopForever+0xa>)
 80056d8:	4a0d      	ldr	r2, [pc, #52]	@ (8005710 <LoopForever+0xe>)
 80056da:	2300      	movs	r3, #0
 80056dc:	e002      	b.n	80056e4 <LoopCopyDataInit>

080056de <CopyDataInit>:
 80056de:	58d4      	ldr	r4, [r2, r3]
 80056e0:	50c4      	str	r4, [r0, r3]
 80056e2:	3304      	adds	r3, #4

080056e4 <LoopCopyDataInit>:
 80056e4:	18c4      	adds	r4, r0, r3
 80056e6:	428c      	cmp	r4, r1
 80056e8:	d3f9      	bcc.n	80056de <CopyDataInit>
 80056ea:	4a0a      	ldr	r2, [pc, #40]	@ (8005714 <LoopForever+0x12>)
 80056ec:	4c0a      	ldr	r4, [pc, #40]	@ (8005718 <LoopForever+0x16>)
 80056ee:	2300      	movs	r3, #0
 80056f0:	e001      	b.n	80056f6 <LoopFillZerobss>

080056f2 <FillZerobss>:
 80056f2:	6013      	str	r3, [r2, #0]
 80056f4:	3204      	adds	r2, #4

080056f6 <LoopFillZerobss>:
 80056f6:	42a2      	cmp	r2, r4
 80056f8:	d3fb      	bcc.n	80056f2 <FillZerobss>
 80056fa:	f003 fc81 	bl	8009000 <__libc_init_array>
 80056fe:	f7fe fadf 	bl	8003cc0 <main>

08005702 <LoopForever>:
 8005702:	e7fe      	b.n	8005702 <LoopForever>
 8005704:	20009000 	.word	0x20009000
 8005708:	20000000 	.word	0x20000000
 800570c:	200001dc 	.word	0x200001dc
 8005710:	0800c400 	.word	0x0800c400
 8005714:	200001dc 	.word	0x200001dc
 8005718:	20000458 	.word	0x20000458

0800571c <ADC1_IRQHandler>:
 800571c:	e7fe      	b.n	800571c <ADC1_IRQHandler>
	...

08005720 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005720:	b580      	push	{r7, lr}
 8005722:	b082      	sub	sp, #8
 8005724:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8005726:	1dfb      	adds	r3, r7, #7
 8005728:	2200      	movs	r2, #0
 800572a:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800572c:	4b0b      	ldr	r3, [pc, #44]	@ (800575c <HAL_Init+0x3c>)
 800572e:	681a      	ldr	r2, [r3, #0]
 8005730:	4b0a      	ldr	r3, [pc, #40]	@ (800575c <HAL_Init+0x3c>)
 8005732:	2180      	movs	r1, #128	@ 0x80
 8005734:	0049      	lsls	r1, r1, #1
 8005736:	430a      	orrs	r2, r1
 8005738:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800573a:	2003      	movs	r0, #3
 800573c:	f000 f810 	bl	8005760 <HAL_InitTick>
 8005740:	1e03      	subs	r3, r0, #0
 8005742:	d003      	beq.n	800574c <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8005744:	1dfb      	adds	r3, r7, #7
 8005746:	2201      	movs	r2, #1
 8005748:	701a      	strb	r2, [r3, #0]
 800574a:	e001      	b.n	8005750 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 800574c:	f7ff fe78 	bl	8005440 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8005750:	1dfb      	adds	r3, r7, #7
 8005752:	781b      	ldrb	r3, [r3, #0]
}
 8005754:	0018      	movs	r0, r3
 8005756:	46bd      	mov	sp, r7
 8005758:	b002      	add	sp, #8
 800575a:	bd80      	pop	{r7, pc}
 800575c:	40022000 	.word	0x40022000

08005760 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005760:	b590      	push	{r4, r7, lr}
 8005762:	b085      	sub	sp, #20
 8005764:	af00      	add	r7, sp, #0
 8005766:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8005768:	230f      	movs	r3, #15
 800576a:	18fb      	adds	r3, r7, r3
 800576c:	2200      	movs	r2, #0
 800576e:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8005770:	4b1d      	ldr	r3, [pc, #116]	@ (80057e8 <HAL_InitTick+0x88>)
 8005772:	781b      	ldrb	r3, [r3, #0]
 8005774:	2b00      	cmp	r3, #0
 8005776:	d02b      	beq.n	80057d0 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8005778:	4b1c      	ldr	r3, [pc, #112]	@ (80057ec <HAL_InitTick+0x8c>)
 800577a:	681c      	ldr	r4, [r3, #0]
 800577c:	4b1a      	ldr	r3, [pc, #104]	@ (80057e8 <HAL_InitTick+0x88>)
 800577e:	781b      	ldrb	r3, [r3, #0]
 8005780:	0019      	movs	r1, r3
 8005782:	23fa      	movs	r3, #250	@ 0xfa
 8005784:	0098      	lsls	r0, r3, #2
 8005786:	f7fa fcd7 	bl	8000138 <__udivsi3>
 800578a:	0003      	movs	r3, r0
 800578c:	0019      	movs	r1, r3
 800578e:	0020      	movs	r0, r4
 8005790:	f7fa fcd2 	bl	8000138 <__udivsi3>
 8005794:	0003      	movs	r3, r0
 8005796:	0018      	movs	r0, r3
 8005798:	f000 ff3d 	bl	8006616 <HAL_SYSTICK_Config>
 800579c:	1e03      	subs	r3, r0, #0
 800579e:	d112      	bne.n	80057c6 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	2b03      	cmp	r3, #3
 80057a4:	d80a      	bhi.n	80057bc <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80057a6:	6879      	ldr	r1, [r7, #4]
 80057a8:	2301      	movs	r3, #1
 80057aa:	425b      	negs	r3, r3
 80057ac:	2200      	movs	r2, #0
 80057ae:	0018      	movs	r0, r3
 80057b0:	f000 ff1c 	bl	80065ec <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80057b4:	4b0e      	ldr	r3, [pc, #56]	@ (80057f0 <HAL_InitTick+0x90>)
 80057b6:	687a      	ldr	r2, [r7, #4]
 80057b8:	601a      	str	r2, [r3, #0]
 80057ba:	e00d      	b.n	80057d8 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 80057bc:	230f      	movs	r3, #15
 80057be:	18fb      	adds	r3, r7, r3
 80057c0:	2201      	movs	r2, #1
 80057c2:	701a      	strb	r2, [r3, #0]
 80057c4:	e008      	b.n	80057d8 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 80057c6:	230f      	movs	r3, #15
 80057c8:	18fb      	adds	r3, r7, r3
 80057ca:	2201      	movs	r2, #1
 80057cc:	701a      	strb	r2, [r3, #0]
 80057ce:	e003      	b.n	80057d8 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 80057d0:	230f      	movs	r3, #15
 80057d2:	18fb      	adds	r3, r7, r3
 80057d4:	2201      	movs	r2, #1
 80057d6:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 80057d8:	230f      	movs	r3, #15
 80057da:	18fb      	adds	r3, r7, r3
 80057dc:	781b      	ldrb	r3, [r3, #0]
}
 80057de:	0018      	movs	r0, r3
 80057e0:	46bd      	mov	sp, r7
 80057e2:	b005      	add	sp, #20
 80057e4:	bd90      	pop	{r4, r7, pc}
 80057e6:	46c0      	nop			@ (mov r8, r8)
 80057e8:	20000010 	.word	0x20000010
 80057ec:	20000008 	.word	0x20000008
 80057f0:	2000000c 	.word	0x2000000c

080057f4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80057f4:	b580      	push	{r7, lr}
 80057f6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80057f8:	4b05      	ldr	r3, [pc, #20]	@ (8005810 <HAL_IncTick+0x1c>)
 80057fa:	781b      	ldrb	r3, [r3, #0]
 80057fc:	001a      	movs	r2, r3
 80057fe:	4b05      	ldr	r3, [pc, #20]	@ (8005814 <HAL_IncTick+0x20>)
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	18d2      	adds	r2, r2, r3
 8005804:	4b03      	ldr	r3, [pc, #12]	@ (8005814 <HAL_IncTick+0x20>)
 8005806:	601a      	str	r2, [r3, #0]
}
 8005808:	46c0      	nop			@ (mov r8, r8)
 800580a:	46bd      	mov	sp, r7
 800580c:	bd80      	pop	{r7, pc}
 800580e:	46c0      	nop			@ (mov r8, r8)
 8005810:	20000010 	.word	0x20000010
 8005814:	20000308 	.word	0x20000308

08005818 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005818:	b580      	push	{r7, lr}
 800581a:	af00      	add	r7, sp, #0
  return uwTick;
 800581c:	4b02      	ldr	r3, [pc, #8]	@ (8005828 <HAL_GetTick+0x10>)
 800581e:	681b      	ldr	r3, [r3, #0]
}
 8005820:	0018      	movs	r0, r3
 8005822:	46bd      	mov	sp, r7
 8005824:	bd80      	pop	{r7, pc}
 8005826:	46c0      	nop			@ (mov r8, r8)
 8005828:	20000308 	.word	0x20000308

0800582c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800582c:	b580      	push	{r7, lr}
 800582e:	b084      	sub	sp, #16
 8005830:	af00      	add	r7, sp, #0
 8005832:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005834:	f7ff fff0 	bl	8005818 <HAL_GetTick>
 8005838:	0003      	movs	r3, r0
 800583a:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	3301      	adds	r3, #1
 8005844:	d005      	beq.n	8005852 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005846:	4b0a      	ldr	r3, [pc, #40]	@ (8005870 <HAL_Delay+0x44>)
 8005848:	781b      	ldrb	r3, [r3, #0]
 800584a:	001a      	movs	r2, r3
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	189b      	adds	r3, r3, r2
 8005850:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8005852:	46c0      	nop			@ (mov r8, r8)
 8005854:	f7ff ffe0 	bl	8005818 <HAL_GetTick>
 8005858:	0002      	movs	r2, r0
 800585a:	68bb      	ldr	r3, [r7, #8]
 800585c:	1ad3      	subs	r3, r2, r3
 800585e:	68fa      	ldr	r2, [r7, #12]
 8005860:	429a      	cmp	r2, r3
 8005862:	d8f7      	bhi.n	8005854 <HAL_Delay+0x28>
  {
  }
}
 8005864:	46c0      	nop			@ (mov r8, r8)
 8005866:	46c0      	nop			@ (mov r8, r8)
 8005868:	46bd      	mov	sp, r7
 800586a:	b004      	add	sp, #16
 800586c:	bd80      	pop	{r7, pc}
 800586e:	46c0      	nop			@ (mov r8, r8)
 8005870:	20000010 	.word	0x20000010

08005874 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8005874:	b580      	push	{r7, lr}
 8005876:	b082      	sub	sp, #8
 8005878:	af00      	add	r7, sp, #0
 800587a:	6078      	str	r0, [r7, #4]
 800587c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	4a05      	ldr	r2, [pc, #20]	@ (8005898 <LL_ADC_SetCommonPathInternalCh+0x24>)
 8005884:	401a      	ands	r2, r3
 8005886:	683b      	ldr	r3, [r7, #0]
 8005888:	431a      	orrs	r2, r3
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	601a      	str	r2, [r3, #0]
}
 800588e:	46c0      	nop			@ (mov r8, r8)
 8005890:	46bd      	mov	sp, r7
 8005892:	b002      	add	sp, #8
 8005894:	bd80      	pop	{r7, pc}
 8005896:	46c0      	nop			@ (mov r8, r8)
 8005898:	fe3fffff 	.word	0xfe3fffff

0800589c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800589c:	b580      	push	{r7, lr}
 800589e:	b082      	sub	sp, #8
 80058a0:	af00      	add	r7, sp, #0
 80058a2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681a      	ldr	r2, [r3, #0]
 80058a8:	23e0      	movs	r3, #224	@ 0xe0
 80058aa:	045b      	lsls	r3, r3, #17
 80058ac:	4013      	ands	r3, r2
}
 80058ae:	0018      	movs	r0, r3
 80058b0:	46bd      	mov	sp, r7
 80058b2:	b002      	add	sp, #8
 80058b4:	bd80      	pop	{r7, pc}

080058b6 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 80058b6:	b580      	push	{r7, lr}
 80058b8:	b084      	sub	sp, #16
 80058ba:	af00      	add	r7, sp, #0
 80058bc:	60f8      	str	r0, [r7, #12]
 80058be:	60b9      	str	r1, [r7, #8]
 80058c0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	695b      	ldr	r3, [r3, #20]
 80058c6:	68ba      	ldr	r2, [r7, #8]
 80058c8:	2104      	movs	r1, #4
 80058ca:	400a      	ands	r2, r1
 80058cc:	2107      	movs	r1, #7
 80058ce:	4091      	lsls	r1, r2
 80058d0:	000a      	movs	r2, r1
 80058d2:	43d2      	mvns	r2, r2
 80058d4:	401a      	ands	r2, r3
 80058d6:	68bb      	ldr	r3, [r7, #8]
 80058d8:	2104      	movs	r1, #4
 80058da:	400b      	ands	r3, r1
 80058dc:	6879      	ldr	r1, [r7, #4]
 80058de:	4099      	lsls	r1, r3
 80058e0:	000b      	movs	r3, r1
 80058e2:	431a      	orrs	r2, r3
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 80058e8:	46c0      	nop			@ (mov r8, r8)
 80058ea:	46bd      	mov	sp, r7
 80058ec:	b004      	add	sp, #16
 80058ee:	bd80      	pop	{r7, pc}

080058f0 <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(const ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 80058f0:	b580      	push	{r7, lr}
 80058f2:	b082      	sub	sp, #8
 80058f4:	af00      	add	r7, sp, #0
 80058f6:	6078      	str	r0, [r7, #4]
 80058f8:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	695b      	ldr	r3, [r3, #20]
 80058fe:	683a      	ldr	r2, [r7, #0]
 8005900:	2104      	movs	r1, #4
 8005902:	400a      	ands	r2, r1
 8005904:	2107      	movs	r1, #7
 8005906:	4091      	lsls	r1, r2
 8005908:	000a      	movs	r2, r1
 800590a:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 800590c:	683b      	ldr	r3, [r7, #0]
 800590e:	2104      	movs	r1, #4
 8005910:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8005912:	40da      	lsrs	r2, r3
 8005914:	0013      	movs	r3, r2
}
 8005916:	0018      	movs	r0, r3
 8005918:	46bd      	mov	sp, r7
 800591a:	b002      	add	sp, #8
 800591c:	bd80      	pop	{r7, pc}

0800591e <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 800591e:	b580      	push	{r7, lr}
 8005920:	b082      	sub	sp, #8
 8005922:	af00      	add	r7, sp, #0
 8005924:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	68da      	ldr	r2, [r3, #12]
 800592a:	23c0      	movs	r3, #192	@ 0xc0
 800592c:	011b      	lsls	r3, r3, #4
 800592e:	4013      	ands	r3, r2
 8005930:	d101      	bne.n	8005936 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8005932:	2301      	movs	r3, #1
 8005934:	e000      	b.n	8005938 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8005936:	2300      	movs	r3, #0
}
 8005938:	0018      	movs	r0, r3
 800593a:	46bd      	mov	sp, r7
 800593c:	b002      	add	sp, #8
 800593e:	bd80      	pop	{r7, pc}

08005940 <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8005940:	b580      	push	{r7, lr}
 8005942:	b084      	sub	sp, #16
 8005944:	af00      	add	r7, sp, #0
 8005946:	60f8      	str	r0, [r7, #12]
 8005948:	60b9      	str	r1, [r7, #8]
 800594a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005950:	68ba      	ldr	r2, [r7, #8]
 8005952:	211f      	movs	r1, #31
 8005954:	400a      	ands	r2, r1
 8005956:	210f      	movs	r1, #15
 8005958:	4091      	lsls	r1, r2
 800595a:	000a      	movs	r2, r1
 800595c:	43d2      	mvns	r2, r2
 800595e:	401a      	ands	r2, r3
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	0e9b      	lsrs	r3, r3, #26
 8005964:	210f      	movs	r1, #15
 8005966:	4019      	ands	r1, r3
 8005968:	68bb      	ldr	r3, [r7, #8]
 800596a:	201f      	movs	r0, #31
 800596c:	4003      	ands	r3, r0
 800596e:	4099      	lsls	r1, r3
 8005970:	000b      	movs	r3, r1
 8005972:	431a      	orrs	r2, r3
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	629a      	str	r2, [r3, #40]	@ 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8005978:	46c0      	nop			@ (mov r8, r8)
 800597a:	46bd      	mov	sp, r7
 800597c:	b004      	add	sp, #16
 800597e:	bd80      	pop	{r7, pc}

08005980 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8005980:	b580      	push	{r7, lr}
 8005982:	b082      	sub	sp, #8
 8005984:	af00      	add	r7, sp, #0
 8005986:	6078      	str	r0, [r7, #4]
 8005988:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800598e:	683b      	ldr	r3, [r7, #0]
 8005990:	035b      	lsls	r3, r3, #13
 8005992:	0b5b      	lsrs	r3, r3, #13
 8005994:	431a      	orrs	r2, r3
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800599a:	46c0      	nop			@ (mov r8, r8)
 800599c:	46bd      	mov	sp, r7
 800599e:	b002      	add	sp, #8
 80059a0:	bd80      	pop	{r7, pc}

080059a2 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 80059a2:	b580      	push	{r7, lr}
 80059a4:	b082      	sub	sp, #8
 80059a6:	af00      	add	r7, sp, #0
 80059a8:	6078      	str	r0, [r7, #4]
 80059aa:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059b0:	683a      	ldr	r2, [r7, #0]
 80059b2:	0352      	lsls	r2, r2, #13
 80059b4:	0b52      	lsrs	r2, r2, #13
 80059b6:	43d2      	mvns	r2, r2
 80059b8:	401a      	ands	r2, r3
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80059be:	46c0      	nop			@ (mov r8, r8)
 80059c0:	46bd      	mov	sp, r7
 80059c2:	b002      	add	sp, #8
 80059c4:	bd80      	pop	{r7, pc}
	...

080059c8 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 80059c8:	b580      	push	{r7, lr}
 80059ca:	b084      	sub	sp, #16
 80059cc:	af00      	add	r7, sp, #0
 80059ce:	60f8      	str	r0, [r7, #12]
 80059d0:	60b9      	str	r1, [r7, #8]
 80059d2:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	695b      	ldr	r3, [r3, #20]
 80059d8:	68ba      	ldr	r2, [r7, #8]
 80059da:	0212      	lsls	r2, r2, #8
 80059dc:	43d2      	mvns	r2, r2
 80059de:	401a      	ands	r2, r3
 80059e0:	68bb      	ldr	r3, [r7, #8]
 80059e2:	021b      	lsls	r3, r3, #8
 80059e4:	6879      	ldr	r1, [r7, #4]
 80059e6:	400b      	ands	r3, r1
 80059e8:	4904      	ldr	r1, [pc, #16]	@ (80059fc <LL_ADC_SetChannelSamplingTime+0x34>)
 80059ea:	400b      	ands	r3, r1
 80059ec:	431a      	orrs	r2, r3
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 80059f2:	46c0      	nop			@ (mov r8, r8)
 80059f4:	46bd      	mov	sp, r7
 80059f6:	b004      	add	sp, #16
 80059f8:	bd80      	pop	{r7, pc}
 80059fa:	46c0      	nop			@ (mov r8, r8)
 80059fc:	07ffff00 	.word	0x07ffff00

08005a00 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8005a00:	b580      	push	{r7, lr}
 8005a02:	b082      	sub	sp, #8
 8005a04:	af00      	add	r7, sp, #0
 8005a06:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	689b      	ldr	r3, [r3, #8]
 8005a0c:	4a05      	ldr	r2, [pc, #20]	@ (8005a24 <LL_ADC_EnableInternalRegulator+0x24>)
 8005a0e:	4013      	ands	r3, r2
 8005a10:	2280      	movs	r2, #128	@ 0x80
 8005a12:	0552      	lsls	r2, r2, #21
 8005a14:	431a      	orrs	r2, r3
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8005a1a:	46c0      	nop			@ (mov r8, r8)
 8005a1c:	46bd      	mov	sp, r7
 8005a1e:	b002      	add	sp, #8
 8005a20:	bd80      	pop	{r7, pc}
 8005a22:	46c0      	nop			@ (mov r8, r8)
 8005a24:	6fffffe8 	.word	0x6fffffe8

08005a28 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8005a28:	b580      	push	{r7, lr}
 8005a2a:	b082      	sub	sp, #8
 8005a2c:	af00      	add	r7, sp, #0
 8005a2e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	689a      	ldr	r2, [r3, #8]
 8005a34:	2380      	movs	r3, #128	@ 0x80
 8005a36:	055b      	lsls	r3, r3, #21
 8005a38:	401a      	ands	r2, r3
 8005a3a:	2380      	movs	r3, #128	@ 0x80
 8005a3c:	055b      	lsls	r3, r3, #21
 8005a3e:	429a      	cmp	r2, r3
 8005a40:	d101      	bne.n	8005a46 <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 8005a42:	2301      	movs	r3, #1
 8005a44:	e000      	b.n	8005a48 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 8005a46:	2300      	movs	r3, #0
}
 8005a48:	0018      	movs	r0, r3
 8005a4a:	46bd      	mov	sp, r7
 8005a4c:	b002      	add	sp, #8
 8005a4e:	bd80      	pop	{r7, pc}

08005a50 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8005a50:	b580      	push	{r7, lr}
 8005a52:	b082      	sub	sp, #8
 8005a54:	af00      	add	r7, sp, #0
 8005a56:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	689b      	ldr	r3, [r3, #8]
 8005a5c:	4a04      	ldr	r2, [pc, #16]	@ (8005a70 <LL_ADC_Enable+0x20>)
 8005a5e:	4013      	ands	r3, r2
 8005a60:	2201      	movs	r2, #1
 8005a62:	431a      	orrs	r2, r3
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8005a68:	46c0      	nop			@ (mov r8, r8)
 8005a6a:	46bd      	mov	sp, r7
 8005a6c:	b002      	add	sp, #8
 8005a6e:	bd80      	pop	{r7, pc}
 8005a70:	7fffffe8 	.word	0x7fffffe8

08005a74 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8005a74:	b580      	push	{r7, lr}
 8005a76:	b082      	sub	sp, #8
 8005a78:	af00      	add	r7, sp, #0
 8005a7a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	689b      	ldr	r3, [r3, #8]
 8005a80:	2201      	movs	r2, #1
 8005a82:	4013      	ands	r3, r2
 8005a84:	2b01      	cmp	r3, #1
 8005a86:	d101      	bne.n	8005a8c <LL_ADC_IsEnabled+0x18>
 8005a88:	2301      	movs	r3, #1
 8005a8a:	e000      	b.n	8005a8e <LL_ADC_IsEnabled+0x1a>
 8005a8c:	2300      	movs	r3, #0
}
 8005a8e:	0018      	movs	r0, r3
 8005a90:	46bd      	mov	sp, r7
 8005a92:	b002      	add	sp, #8
 8005a94:	bd80      	pop	{r7, pc}
	...

08005a98 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8005a98:	b580      	push	{r7, lr}
 8005a9a:	b082      	sub	sp, #8
 8005a9c:	af00      	add	r7, sp, #0
 8005a9e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	689b      	ldr	r3, [r3, #8]
 8005aa4:	4a04      	ldr	r2, [pc, #16]	@ (8005ab8 <LL_ADC_REG_StartConversion+0x20>)
 8005aa6:	4013      	ands	r3, r2
 8005aa8:	2204      	movs	r2, #4
 8005aaa:	431a      	orrs	r2, r3
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8005ab0:	46c0      	nop			@ (mov r8, r8)
 8005ab2:	46bd      	mov	sp, r7
 8005ab4:	b002      	add	sp, #8
 8005ab6:	bd80      	pop	{r7, pc}
 8005ab8:	7fffffe8 	.word	0x7fffffe8

08005abc <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8005abc:	b580      	push	{r7, lr}
 8005abe:	b082      	sub	sp, #8
 8005ac0:	af00      	add	r7, sp, #0
 8005ac2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	689b      	ldr	r3, [r3, #8]
 8005ac8:	2204      	movs	r2, #4
 8005aca:	4013      	ands	r3, r2
 8005acc:	2b04      	cmp	r3, #4
 8005ace:	d101      	bne.n	8005ad4 <LL_ADC_REG_IsConversionOngoing+0x18>
 8005ad0:	2301      	movs	r3, #1
 8005ad2:	e000      	b.n	8005ad6 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8005ad4:	2300      	movs	r3, #0
}
 8005ad6:	0018      	movs	r0, r3
 8005ad8:	46bd      	mov	sp, r7
 8005ada:	b002      	add	sp, #8
 8005adc:	bd80      	pop	{r7, pc}
	...

08005ae0 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8005ae0:	b580      	push	{r7, lr}
 8005ae2:	b088      	sub	sp, #32
 8005ae4:	af00      	add	r7, sp, #0
 8005ae6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005ae8:	231f      	movs	r3, #31
 8005aea:	18fb      	adds	r3, r7, r3
 8005aec:	2200      	movs	r2, #0
 8005aee:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_cfgr1 = 0UL;
 8005af0:	2300      	movs	r3, #0
 8005af2:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_cfgr2 = 0UL;
 8005af4:	2300      	movs	r3, #0
 8005af6:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8005af8:	2300      	movs	r3, #0
 8005afa:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d101      	bne.n	8005b06 <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 8005b02:	2301      	movs	r3, #1
 8005b04:	e17f      	b.n	8005e06 <HAL_ADC_Init+0x326>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d10a      	bne.n	8005b24 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	0018      	movs	r0, r3
 8005b12:	f7ff fcb9 	bl	8005488 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	2200      	movs	r2, #0
 8005b1a:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	2254      	movs	r2, #84	@ 0x54
 8005b20:	2100      	movs	r1, #0
 8005b22:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	0018      	movs	r0, r3
 8005b2a:	f7ff ff7d 	bl	8005a28 <LL_ADC_IsInternalRegulatorEnabled>
 8005b2e:	1e03      	subs	r3, r0, #0
 8005b30:	d115      	bne.n	8005b5e <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	0018      	movs	r0, r3
 8005b38:	f7ff ff62 	bl	8005a00 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005b3c:	4bb4      	ldr	r3, [pc, #720]	@ (8005e10 <HAL_ADC_Init+0x330>)
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	49b4      	ldr	r1, [pc, #720]	@ (8005e14 <HAL_ADC_Init+0x334>)
 8005b42:	0018      	movs	r0, r3
 8005b44:	f7fa faf8 	bl	8000138 <__udivsi3>
 8005b48:	0003      	movs	r3, r0
 8005b4a:	3301      	adds	r3, #1
 8005b4c:	005b      	lsls	r3, r3, #1
 8005b4e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8005b50:	e002      	b.n	8005b58 <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	3b01      	subs	r3, #1
 8005b56:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d1f9      	bne.n	8005b52 <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	0018      	movs	r0, r3
 8005b64:	f7ff ff60 	bl	8005a28 <LL_ADC_IsInternalRegulatorEnabled>
 8005b68:	1e03      	subs	r3, r0, #0
 8005b6a:	d10f      	bne.n	8005b8c <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b70:	2210      	movs	r2, #16
 8005b72:	431a      	orrs	r2, r3
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005b7c:	2201      	movs	r2, #1
 8005b7e:	431a      	orrs	r2, r3
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8005b84:	231f      	movs	r3, #31
 8005b86:	18fb      	adds	r3, r7, r3
 8005b88:	2201      	movs	r2, #1
 8005b8a:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	0018      	movs	r0, r3
 8005b92:	f7ff ff93 	bl	8005abc <LL_ADC_REG_IsConversionOngoing>
 8005b96:	0003      	movs	r3, r0
 8005b98:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b9e:	2210      	movs	r2, #16
 8005ba0:	4013      	ands	r3, r2
 8005ba2:	d000      	beq.n	8005ba6 <HAL_ADC_Init+0xc6>
 8005ba4:	e122      	b.n	8005dec <HAL_ADC_Init+0x30c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8005ba6:	693b      	ldr	r3, [r7, #16]
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d000      	beq.n	8005bae <HAL_ADC_Init+0xce>
 8005bac:	e11e      	b.n	8005dec <HAL_ADC_Init+0x30c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005bb2:	4a99      	ldr	r2, [pc, #612]	@ (8005e18 <HAL_ADC_Init+0x338>)
 8005bb4:	4013      	ands	r3, r2
 8005bb6:	2202      	movs	r2, #2
 8005bb8:	431a      	orrs	r2, r3
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	659a      	str	r2, [r3, #88]	@ 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	0018      	movs	r0, r3
 8005bc4:	f7ff ff56 	bl	8005a74 <LL_ADC_IsEnabled>
 8005bc8:	1e03      	subs	r3, r0, #0
 8005bca:	d000      	beq.n	8005bce <HAL_ADC_Init+0xee>
 8005bcc:	e0ad      	b.n	8005d2a <HAL_ADC_Init+0x24a>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	689a      	ldr	r2, [r3, #8]
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	7e1b      	ldrb	r3, [r3, #24]
 8005bd6:	039b      	lsls	r3, r3, #14
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 8005bd8:	431a      	orrs	r2, r3
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	7e5b      	ldrb	r3, [r3, #25]
 8005bde:	03db      	lsls	r3, r3, #15
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8005be0:	431a      	orrs	r2, r3
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	7e9b      	ldrb	r3, [r3, #26]
 8005be6:	035b      	lsls	r3, r3, #13
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8005be8:	431a      	orrs	r2, r3
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d002      	beq.n	8005bf8 <HAL_ADC_Init+0x118>
 8005bf2:	2380      	movs	r3, #128	@ 0x80
 8005bf4:	015b      	lsls	r3, r3, #5
 8005bf6:	e000      	b.n	8005bfa <HAL_ADC_Init+0x11a>
 8005bf8:	2300      	movs	r3, #0
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8005bfa:	431a      	orrs	r2, r3
                    hadc->Init.DataAlign                                           |
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	68db      	ldr	r3, [r3, #12]
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8005c00:	431a      	orrs	r2, r3
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	691b      	ldr	r3, [r3, #16]
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	da04      	bge.n	8005c14 <HAL_ADC_Init+0x134>
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	691b      	ldr	r3, [r3, #16]
 8005c0e:	005b      	lsls	r3, r3, #1
 8005c10:	085b      	lsrs	r3, r3, #1
 8005c12:	e001      	b.n	8005c18 <HAL_ADC_Init+0x138>
 8005c14:	2380      	movs	r3, #128	@ 0x80
 8005c16:	039b      	lsls	r3, r3, #14
                    hadc->Init.DataAlign                                           |
 8005c18:	431a      	orrs	r2, r3
                    ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	212c      	movs	r1, #44	@ 0x2c
 8005c1e:	5c5b      	ldrb	r3, [r3, r1]
 8005c20:	005b      	lsls	r3, r3, #1
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8005c22:	4313      	orrs	r3, r2
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 8005c24:	69ba      	ldr	r2, [r7, #24]
 8005c26:	4313      	orrs	r3, r2
 8005c28:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	2220      	movs	r2, #32
 8005c2e:	5c9b      	ldrb	r3, [r3, r2]
 8005c30:	2b01      	cmp	r3, #1
 8005c32:	d115      	bne.n	8005c60 <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	7e9b      	ldrb	r3, [r3, #26]
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d105      	bne.n	8005c48 <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmp_cfgr1 |= ADC_CFGR1_DISCEN;
 8005c3c:	69bb      	ldr	r3, [r7, #24]
 8005c3e:	2280      	movs	r2, #128	@ 0x80
 8005c40:	0252      	lsls	r2, r2, #9
 8005c42:	4313      	orrs	r3, r2
 8005c44:	61bb      	str	r3, [r7, #24]
 8005c46:	e00b      	b.n	8005c60 <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005c4c:	2220      	movs	r2, #32
 8005c4e:	431a      	orrs	r2, r3
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005c58:	2201      	movs	r2, #1
 8005c5a:	431a      	orrs	r2, r3
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d00a      	beq.n	8005c7e <HAL_ADC_Init+0x19e>
      {
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005c6c:	23e0      	movs	r3, #224	@ 0xe0
 8005c6e:	005b      	lsls	r3, r3, #1
 8005c70:	401a      	ands	r2, r3
                      hadc->Init.ExternalTrigConvEdge);
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8005c76:	4313      	orrs	r3, r2
 8005c78:	69ba      	ldr	r2, [r7, #24]
 8005c7a:	4313      	orrs	r3, r2
 8005c7c:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	68db      	ldr	r3, [r3, #12]
 8005c84:	4a65      	ldr	r2, [pc, #404]	@ (8005e1c <HAL_ADC_Init+0x33c>)
 8005c86:	4013      	ands	r3, r2
 8005c88:	0019      	movs	r1, r3
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	69ba      	ldr	r2, [r7, #24]
 8005c90:	430a      	orrs	r2, r1
 8005c92:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN     |
                 ADC_CFGR1_SCANDIR   |
                 ADC_CFGR1_DMACFG,
                 tmp_cfgr1);

      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	685b      	ldr	r3, [r3, #4]
 8005c98:	0f9b      	lsrs	r3, r3, #30
 8005c9a:	079a      	lsls	r2, r3, #30
                    hadc->Init.TriggerFrequencyMode
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8005ca0:	4313      	orrs	r3, r2
 8005ca2:	697a      	ldr	r2, [r7, #20]
 8005ca4:	4313      	orrs	r3, r2
 8005ca6:	617b      	str	r3, [r7, #20]
                   );

      if (hadc->Init.OversamplingMode == ENABLE)
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	223c      	movs	r2, #60	@ 0x3c
 8005cac:	5c9b      	ldrb	r3, [r3, r2]
 8005cae:	2b01      	cmp	r3, #1
 8005cb0:	d111      	bne.n	8005cd6 <HAL_ADC_Init+0x1f6>
      {
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	685b      	ldr	r3, [r3, #4]
 8005cb6:	0f9b      	lsrs	r3, r3, #30
 8005cb8:	079a      	lsls	r2, r3, #30
                      hadc->Init.Oversampling.Ratio         |
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8005cbe:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.RightBitShift |
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
                      hadc->Init.Oversampling.Ratio         |
 8005cc4:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.TriggeredMode
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                      hadc->Init.Oversampling.RightBitShift |
 8005cca:	431a      	orrs	r2, r3
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
 8005ccc:	697b      	ldr	r3, [r7, #20]
 8005cce:	4313      	orrs	r3, r2
 8005cd0:	2201      	movs	r2, #1
 8005cd2:	4313      	orrs	r3, r2
 8005cd4:	617b      	str	r3, [r7, #20]
                     );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	691b      	ldr	r3, [r3, #16]
 8005cdc:	4a50      	ldr	r2, [pc, #320]	@ (8005e20 <HAL_ADC_Init+0x340>)
 8005cde:	4013      	ands	r3, r2
 8005ce0:	0019      	movs	r1, r3
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	697a      	ldr	r2, [r7, #20]
 8005ce8:	430a      	orrs	r2, r1
 8005cea:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmp_cfgr2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	685a      	ldr	r2, [r3, #4]
 8005cf0:	23c0      	movs	r3, #192	@ 0xc0
 8005cf2:	061b      	lsls	r3, r3, #24
 8005cf4:	429a      	cmp	r2, r3
 8005cf6:	d018      	beq.n	8005d2a <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8005cfc:	2380      	movs	r3, #128	@ 0x80
 8005cfe:	05db      	lsls	r3, r3, #23
 8005d00:	429a      	cmp	r2, r3
 8005d02:	d012      	beq.n	8005d2a <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8005d08:	2380      	movs	r3, #128	@ 0x80
 8005d0a:	061b      	lsls	r3, r3, #24
 8005d0c:	429a      	cmp	r2, r3
 8005d0e:	d00c      	beq.n	8005d2a <HAL_ADC_Init+0x24a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 8005d10:	4b44      	ldr	r3, [pc, #272]	@ (8005e24 <HAL_ADC_Init+0x344>)
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	4a44      	ldr	r2, [pc, #272]	@ (8005e28 <HAL_ADC_Init+0x348>)
 8005d16:	4013      	ands	r3, r2
 8005d18:	0019      	movs	r1, r3
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	685a      	ldr	r2, [r3, #4]
 8005d1e:	23f0      	movs	r3, #240	@ 0xf0
 8005d20:	039b      	lsls	r3, r3, #14
 8005d22:	401a      	ands	r2, r3
 8005d24:	4b3f      	ldr	r3, [pc, #252]	@ (8005e24 <HAL_ADC_Init+0x344>)
 8005d26:	430a      	orrs	r2, r1
 8005d28:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	6818      	ldr	r0, [r3, #0]
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005d32:	001a      	movs	r2, r3
 8005d34:	2100      	movs	r1, #0
 8005d36:	f7ff fdbe 	bl	80058b6 <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	6818      	ldr	r0, [r3, #0]
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d42:	493a      	ldr	r1, [pc, #232]	@ (8005e2c <HAL_ADC_Init+0x34c>)
 8005d44:	001a      	movs	r2, r3
 8005d46:	f7ff fdb6 	bl	80058b6 <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	691b      	ldr	r3, [r3, #16]
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d109      	bne.n	8005d66 <HAL_ADC_Init+0x286>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	2110      	movs	r1, #16
 8005d5e:	4249      	negs	r1, r1
 8005d60:	430a      	orrs	r2, r1
 8005d62:	629a      	str	r2, [r3, #40]	@ 0x28
 8005d64:	e018      	b.n	8005d98 <HAL_ADC_Init+0x2b8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	691a      	ldr	r2, [r3, #16]
 8005d6a:	2380      	movs	r3, #128	@ 0x80
 8005d6c:	039b      	lsls	r3, r3, #14
 8005d6e:	429a      	cmp	r2, r3
 8005d70:	d112      	bne.n	8005d98 <HAL_ADC_Init+0x2b8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	69db      	ldr	r3, [r3, #28]
 8005d7c:	3b01      	subs	r3, #1
 8005d7e:	009b      	lsls	r3, r3, #2
 8005d80:	221c      	movs	r2, #28
 8005d82:	4013      	ands	r3, r2
 8005d84:	2210      	movs	r2, #16
 8005d86:	4252      	negs	r2, r2
 8005d88:	409a      	lsls	r2, r3
 8005d8a:	0011      	movs	r1, r2
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	430a      	orrs	r2, r1
 8005d96:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Nothing to do */
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	2100      	movs	r1, #0
 8005d9e:	0018      	movs	r0, r3
 8005da0:	f7ff fda6 	bl	80058f0 <LL_ADC_GetSamplingTimeCommonChannels>
 8005da4:	0002      	movs	r2, r0
        == hadc->Init.SamplingTimeCommon1)
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8005daa:	429a      	cmp	r2, r3
 8005dac:	d10b      	bne.n	8005dc6 <HAL_ADC_Init+0x2e6>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	2200      	movs	r2, #0
 8005db2:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005db8:	2203      	movs	r2, #3
 8005dba:	4393      	bics	r3, r2
 8005dbc:	2201      	movs	r2, #1
 8005dbe:	431a      	orrs	r2, r3
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	659a      	str	r2, [r3, #88]	@ 0x58
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8005dc4:	e01c      	b.n	8005e00 <HAL_ADC_Init+0x320>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005dca:	2212      	movs	r2, #18
 8005dcc:	4393      	bics	r3, r2
 8005dce:	2210      	movs	r2, #16
 8005dd0:	431a      	orrs	r2, r3
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005dda:	2201      	movs	r2, #1
 8005ddc:	431a      	orrs	r2, r3
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	65da      	str	r2, [r3, #92]	@ 0x5c

      tmp_hal_status = HAL_ERROR;
 8005de2:	231f      	movs	r3, #31
 8005de4:	18fb      	adds	r3, r7, r3
 8005de6:	2201      	movs	r2, #1
 8005de8:	701a      	strb	r2, [r3, #0]
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8005dea:	e009      	b.n	8005e00 <HAL_ADC_Init+0x320>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005df0:	2210      	movs	r2, #16
 8005df2:	431a      	orrs	r2, r3
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8005df8:	231f      	movs	r3, #31
 8005dfa:	18fb      	adds	r3, r7, r3
 8005dfc:	2201      	movs	r2, #1
 8005dfe:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8005e00:	231f      	movs	r3, #31
 8005e02:	18fb      	adds	r3, r7, r3
 8005e04:	781b      	ldrb	r3, [r3, #0]
}
 8005e06:	0018      	movs	r0, r3
 8005e08:	46bd      	mov	sp, r7
 8005e0a:	b008      	add	sp, #32
 8005e0c:	bd80      	pop	{r7, pc}
 8005e0e:	46c0      	nop			@ (mov r8, r8)
 8005e10:	20000008 	.word	0x20000008
 8005e14:	00030d40 	.word	0x00030d40
 8005e18:	fffffefd 	.word	0xfffffefd
 8005e1c:	ffde0201 	.word	0xffde0201
 8005e20:	1ffffc02 	.word	0x1ffffc02
 8005e24:	40012708 	.word	0x40012708
 8005e28:	ffc3ffff 	.word	0xffc3ffff
 8005e2c:	07ffff04 	.word	0x07ffff04

08005e30 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8005e30:	b5b0      	push	{r4, r5, r7, lr}
 8005e32:	b084      	sub	sp, #16
 8005e34:	af00      	add	r7, sp, #0
 8005e36:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	0018      	movs	r0, r3
 8005e3e:	f7ff fe3d 	bl	8005abc <LL_ADC_REG_IsConversionOngoing>
 8005e42:	1e03      	subs	r3, r0, #0
 8005e44:	d135      	bne.n	8005eb2 <HAL_ADC_Start+0x82>
  {
    __HAL_LOCK(hadc);
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	2254      	movs	r2, #84	@ 0x54
 8005e4a:	5c9b      	ldrb	r3, [r3, r2]
 8005e4c:	2b01      	cmp	r3, #1
 8005e4e:	d101      	bne.n	8005e54 <HAL_ADC_Start+0x24>
 8005e50:	2302      	movs	r3, #2
 8005e52:	e035      	b.n	8005ec0 <HAL_ADC_Start+0x90>
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	2254      	movs	r2, #84	@ 0x54
 8005e58:	2101      	movs	r1, #1
 8005e5a:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8005e5c:	250f      	movs	r5, #15
 8005e5e:	197c      	adds	r4, r7, r5
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	0018      	movs	r0, r3
 8005e64:	f000 faaa 	bl	80063bc <ADC_Enable>
 8005e68:	0003      	movs	r3, r0
 8005e6a:	7023      	strb	r3, [r4, #0]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8005e6c:	197b      	adds	r3, r7, r5
 8005e6e:	781b      	ldrb	r3, [r3, #0]
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d119      	bne.n	8005ea8 <HAL_ADC_Start+0x78>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005e78:	4a13      	ldr	r2, [pc, #76]	@ (8005ec8 <HAL_ADC_Start+0x98>)
 8005e7a:	4013      	ands	r3, r2
 8005e7c:	2280      	movs	r2, #128	@ 0x80
 8005e7e:	0052      	lsls	r2, r2, #1
 8005e80:	431a      	orrs	r2, r3
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	2200      	movs	r2, #0
 8005e8a:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	221c      	movs	r2, #28
 8005e92:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	2254      	movs	r2, #84	@ 0x54
 8005e98:	2100      	movs	r1, #0
 8005e9a:	5499      	strb	r1, [r3, r2]
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	0018      	movs	r0, r3
 8005ea2:	f7ff fdf9 	bl	8005a98 <LL_ADC_REG_StartConversion>
 8005ea6:	e008      	b.n	8005eba <HAL_ADC_Start+0x8a>
    }
    else
    {
      __HAL_UNLOCK(hadc);
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	2254      	movs	r2, #84	@ 0x54
 8005eac:	2100      	movs	r1, #0
 8005eae:	5499      	strb	r1, [r3, r2]
 8005eb0:	e003      	b.n	8005eba <HAL_ADC_Start+0x8a>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8005eb2:	230f      	movs	r3, #15
 8005eb4:	18fb      	adds	r3, r7, r3
 8005eb6:	2202      	movs	r2, #2
 8005eb8:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8005eba:	230f      	movs	r3, #15
 8005ebc:	18fb      	adds	r3, r7, r3
 8005ebe:	781b      	ldrb	r3, [r3, #0]
}
 8005ec0:	0018      	movs	r0, r3
 8005ec2:	46bd      	mov	sp, r7
 8005ec4:	b004      	add	sp, #16
 8005ec6:	bdb0      	pop	{r4, r5, r7, pc}
 8005ec8:	fffff0fe 	.word	0xfffff0fe

08005ecc <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8005ecc:	b580      	push	{r7, lr}
 8005ece:	b084      	sub	sp, #16
 8005ed0:	af00      	add	r7, sp, #0
 8005ed2:	6078      	str	r0, [r7, #4]
 8005ed4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	695b      	ldr	r3, [r3, #20]
 8005eda:	2b08      	cmp	r3, #8
 8005edc:	d102      	bne.n	8005ee4 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_flag_end = ADC_FLAG_EOS;
 8005ede:	2308      	movs	r3, #8
 8005ee0:	60fb      	str	r3, [r7, #12]
 8005ee2:	e00f      	b.n	8005f04 <HAL_ADC_PollForConversion+0x38>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) != 0UL)
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	68db      	ldr	r3, [r3, #12]
 8005eea:	2201      	movs	r2, #1
 8005eec:	4013      	ands	r3, r2
 8005eee:	d007      	beq.n	8005f00 <HAL_ADC_PollForConversion+0x34>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005ef4:	2220      	movs	r2, #32
 8005ef6:	431a      	orrs	r2, r3
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 8005efc:	2301      	movs	r3, #1
 8005efe:	e072      	b.n	8005fe6 <HAL_ADC_PollForConversion+0x11a>
    }
    else
    {
      tmp_flag_end = (ADC_FLAG_EOC);
 8005f00:	2304      	movs	r3, #4
 8005f02:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8005f04:	f7ff fc88 	bl	8005818 <HAL_GetTick>
 8005f08:	0003      	movs	r3, r0
 8005f0a:	60bb      	str	r3, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8005f0c:	e01f      	b.n	8005f4e <HAL_ADC_PollForConversion+0x82>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8005f0e:	683b      	ldr	r3, [r7, #0]
 8005f10:	3301      	adds	r3, #1
 8005f12:	d01c      	beq.n	8005f4e <HAL_ADC_PollForConversion+0x82>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8005f14:	f7ff fc80 	bl	8005818 <HAL_GetTick>
 8005f18:	0002      	movs	r2, r0
 8005f1a:	68bb      	ldr	r3, [r7, #8]
 8005f1c:	1ad3      	subs	r3, r2, r3
 8005f1e:	683a      	ldr	r2, [r7, #0]
 8005f20:	429a      	cmp	r2, r3
 8005f22:	d302      	bcc.n	8005f2a <HAL_ADC_PollForConversion+0x5e>
 8005f24:	683b      	ldr	r3, [r7, #0]
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d111      	bne.n	8005f4e <HAL_ADC_PollForConversion+0x82>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	68fa      	ldr	r2, [r7, #12]
 8005f32:	4013      	ands	r3, r2
 8005f34:	d10b      	bne.n	8005f4e <HAL_ADC_PollForConversion+0x82>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005f3a:	2204      	movs	r2, #4
 8005f3c:	431a      	orrs	r2, r3
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	659a      	str	r2, [r3, #88]	@ 0x58

          __HAL_UNLOCK(hadc);
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	2254      	movs	r2, #84	@ 0x54
 8005f46:	2100      	movs	r1, #0
 8005f48:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8005f4a:	2303      	movs	r3, #3
 8005f4c:	e04b      	b.n	8005fe6 <HAL_ADC_PollForConversion+0x11a>
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	68fa      	ldr	r2, [r7, #12]
 8005f56:	4013      	ands	r3, r2
 8005f58:	d0d9      	beq.n	8005f0e <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005f5e:	2280      	movs	r2, #128	@ 0x80
 8005f60:	0092      	lsls	r2, r2, #2
 8005f62:	431a      	orrs	r2, r3
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	0018      	movs	r0, r3
 8005f6e:	f7ff fcd6 	bl	800591e <LL_ADC_REG_IsTriggerSourceSWStart>
 8005f72:	1e03      	subs	r3, r0, #0
 8005f74:	d02e      	beq.n	8005fd4 <HAL_ADC_PollForConversion+0x108>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	7e9b      	ldrb	r3, [r3, #26]
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d12a      	bne.n	8005fd4 <HAL_ADC_PollForConversion+0x108>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	2208      	movs	r2, #8
 8005f86:	4013      	ands	r3, r2
 8005f88:	2b08      	cmp	r3, #8
 8005f8a:	d123      	bne.n	8005fd4 <HAL_ADC_PollForConversion+0x108>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	0018      	movs	r0, r3
 8005f92:	f7ff fd93 	bl	8005abc <LL_ADC_REG_IsConversionOngoing>
 8005f96:	1e03      	subs	r3, r0, #0
 8005f98:	d110      	bne.n	8005fbc <HAL_ADC_PollForConversion+0xf0>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	685a      	ldr	r2, [r3, #4]
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	210c      	movs	r1, #12
 8005fa6:	438a      	bics	r2, r1
 8005fa8:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005fae:	4a10      	ldr	r2, [pc, #64]	@ (8005ff0 <HAL_ADC_PollForConversion+0x124>)
 8005fb0:	4013      	ands	r3, r2
 8005fb2:	2201      	movs	r2, #1
 8005fb4:	431a      	orrs	r2, r3
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	659a      	str	r2, [r3, #88]	@ 0x58
 8005fba:	e00b      	b.n	8005fd4 <HAL_ADC_PollForConversion+0x108>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005fc0:	2220      	movs	r2, #32
 8005fc2:	431a      	orrs	r2, r3
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	659a      	str	r2, [r3, #88]	@ 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005fcc:	2201      	movs	r2, #1
 8005fce:	431a      	orrs	r2, r3
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	7e1b      	ldrb	r3, [r3, #24]
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d103      	bne.n	8005fe4 <HAL_ADC_PollForConversion+0x118>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	220c      	movs	r2, #12
 8005fe2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005fe4:	2300      	movs	r3, #0
}
 8005fe6:	0018      	movs	r0, r3
 8005fe8:	46bd      	mov	sp, r7
 8005fea:	b004      	add	sp, #16
 8005fec:	bd80      	pop	{r7, pc}
 8005fee:	46c0      	nop			@ (mov r8, r8)
 8005ff0:	fffffefe 	.word	0xfffffefe

08005ff4 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 8005ff4:	b580      	push	{r7, lr}
 8005ff6:	b082      	sub	sp, #8
 8005ff8:	af00      	add	r7, sp, #0
 8005ffa:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8006002:	0018      	movs	r0, r3
 8006004:	46bd      	mov	sp, r7
 8006006:	b002      	add	sp, #8
 8006008:	bd80      	pop	{r7, pc}
	...

0800600c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 800600c:	b580      	push	{r7, lr}
 800600e:	b086      	sub	sp, #24
 8006010:	af00      	add	r7, sp, #0
 8006012:	6078      	str	r0, [r7, #4]
 8006014:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006016:	2317      	movs	r3, #23
 8006018:	18fb      	adds	r3, r7, r3
 800601a:	2200      	movs	r2, #0
 800601c:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800601e:	2300      	movs	r3, #0
 8006020:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	2254      	movs	r2, #84	@ 0x54
 8006026:	5c9b      	ldrb	r3, [r3, r2]
 8006028:	2b01      	cmp	r3, #1
 800602a:	d101      	bne.n	8006030 <HAL_ADC_ConfigChannel+0x24>
 800602c:	2302      	movs	r3, #2
 800602e:	e1c0      	b.n	80063b2 <HAL_ADC_ConfigChannel+0x3a6>
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	2254      	movs	r2, #84	@ 0x54
 8006034:	2101      	movs	r1, #1
 8006036:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	0018      	movs	r0, r3
 800603e:	f7ff fd3d 	bl	8005abc <LL_ADC_REG_IsConversionOngoing>
 8006042:	1e03      	subs	r3, r0, #0
 8006044:	d000      	beq.n	8006048 <HAL_ADC_ConfigChannel+0x3c>
 8006046:	e1a3      	b.n	8006390 <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 8006048:	683b      	ldr	r3, [r7, #0]
 800604a:	685b      	ldr	r3, [r3, #4]
 800604c:	2b02      	cmp	r3, #2
 800604e:	d100      	bne.n	8006052 <HAL_ADC_ConfigChannel+0x46>
 8006050:	e143      	b.n	80062da <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	691a      	ldr	r2, [r3, #16]
 8006056:	2380      	movs	r3, #128	@ 0x80
 8006058:	061b      	lsls	r3, r3, #24
 800605a:	429a      	cmp	r2, r3
 800605c:	d004      	beq.n	8006068 <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8006062:	4ac1      	ldr	r2, [pc, #772]	@ (8006368 <HAL_ADC_ConfigChannel+0x35c>)
 8006064:	4293      	cmp	r3, r2
 8006066:	d108      	bne.n	800607a <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681a      	ldr	r2, [r3, #0]
 800606c:	683b      	ldr	r3, [r7, #0]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	0019      	movs	r1, r3
 8006072:	0010      	movs	r0, r2
 8006074:	f7ff fc84 	bl	8005980 <LL_ADC_REG_SetSequencerChAdd>
 8006078:	e0c9      	b.n	800620e <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800607e:	683b      	ldr	r3, [r7, #0]
 8006080:	685b      	ldr	r3, [r3, #4]
 8006082:	211f      	movs	r1, #31
 8006084:	400b      	ands	r3, r1
 8006086:	210f      	movs	r1, #15
 8006088:	4099      	lsls	r1, r3
 800608a:	000b      	movs	r3, r1
 800608c:	43db      	mvns	r3, r3
 800608e:	4013      	ands	r3, r2
 8006090:	0019      	movs	r1, r3
 8006092:	683b      	ldr	r3, [r7, #0]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	035b      	lsls	r3, r3, #13
 8006098:	0b5b      	lsrs	r3, r3, #13
 800609a:	d105      	bne.n	80060a8 <HAL_ADC_ConfigChannel+0x9c>
 800609c:	683b      	ldr	r3, [r7, #0]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	0e9b      	lsrs	r3, r3, #26
 80060a2:	221f      	movs	r2, #31
 80060a4:	4013      	ands	r3, r2
 80060a6:	e098      	b.n	80061da <HAL_ADC_ConfigChannel+0x1ce>
 80060a8:	683b      	ldr	r3, [r7, #0]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	2201      	movs	r2, #1
 80060ae:	4013      	ands	r3, r2
 80060b0:	d000      	beq.n	80060b4 <HAL_ADC_ConfigChannel+0xa8>
 80060b2:	e091      	b.n	80061d8 <HAL_ADC_ConfigChannel+0x1cc>
 80060b4:	683b      	ldr	r3, [r7, #0]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	2202      	movs	r2, #2
 80060ba:	4013      	ands	r3, r2
 80060bc:	d000      	beq.n	80060c0 <HAL_ADC_ConfigChannel+0xb4>
 80060be:	e089      	b.n	80061d4 <HAL_ADC_ConfigChannel+0x1c8>
 80060c0:	683b      	ldr	r3, [r7, #0]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	2204      	movs	r2, #4
 80060c6:	4013      	ands	r3, r2
 80060c8:	d000      	beq.n	80060cc <HAL_ADC_ConfigChannel+0xc0>
 80060ca:	e081      	b.n	80061d0 <HAL_ADC_ConfigChannel+0x1c4>
 80060cc:	683b      	ldr	r3, [r7, #0]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	2208      	movs	r2, #8
 80060d2:	4013      	ands	r3, r2
 80060d4:	d000      	beq.n	80060d8 <HAL_ADC_ConfigChannel+0xcc>
 80060d6:	e079      	b.n	80061cc <HAL_ADC_ConfigChannel+0x1c0>
 80060d8:	683b      	ldr	r3, [r7, #0]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	2210      	movs	r2, #16
 80060de:	4013      	ands	r3, r2
 80060e0:	d000      	beq.n	80060e4 <HAL_ADC_ConfigChannel+0xd8>
 80060e2:	e071      	b.n	80061c8 <HAL_ADC_ConfigChannel+0x1bc>
 80060e4:	683b      	ldr	r3, [r7, #0]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	2220      	movs	r2, #32
 80060ea:	4013      	ands	r3, r2
 80060ec:	d000      	beq.n	80060f0 <HAL_ADC_ConfigChannel+0xe4>
 80060ee:	e069      	b.n	80061c4 <HAL_ADC_ConfigChannel+0x1b8>
 80060f0:	683b      	ldr	r3, [r7, #0]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	2240      	movs	r2, #64	@ 0x40
 80060f6:	4013      	ands	r3, r2
 80060f8:	d000      	beq.n	80060fc <HAL_ADC_ConfigChannel+0xf0>
 80060fa:	e061      	b.n	80061c0 <HAL_ADC_ConfigChannel+0x1b4>
 80060fc:	683b      	ldr	r3, [r7, #0]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	2280      	movs	r2, #128	@ 0x80
 8006102:	4013      	ands	r3, r2
 8006104:	d000      	beq.n	8006108 <HAL_ADC_ConfigChannel+0xfc>
 8006106:	e059      	b.n	80061bc <HAL_ADC_ConfigChannel+0x1b0>
 8006108:	683b      	ldr	r3, [r7, #0]
 800610a:	681a      	ldr	r2, [r3, #0]
 800610c:	2380      	movs	r3, #128	@ 0x80
 800610e:	005b      	lsls	r3, r3, #1
 8006110:	4013      	ands	r3, r2
 8006112:	d151      	bne.n	80061b8 <HAL_ADC_ConfigChannel+0x1ac>
 8006114:	683b      	ldr	r3, [r7, #0]
 8006116:	681a      	ldr	r2, [r3, #0]
 8006118:	2380      	movs	r3, #128	@ 0x80
 800611a:	009b      	lsls	r3, r3, #2
 800611c:	4013      	ands	r3, r2
 800611e:	d149      	bne.n	80061b4 <HAL_ADC_ConfigChannel+0x1a8>
 8006120:	683b      	ldr	r3, [r7, #0]
 8006122:	681a      	ldr	r2, [r3, #0]
 8006124:	2380      	movs	r3, #128	@ 0x80
 8006126:	00db      	lsls	r3, r3, #3
 8006128:	4013      	ands	r3, r2
 800612a:	d141      	bne.n	80061b0 <HAL_ADC_ConfigChannel+0x1a4>
 800612c:	683b      	ldr	r3, [r7, #0]
 800612e:	681a      	ldr	r2, [r3, #0]
 8006130:	2380      	movs	r3, #128	@ 0x80
 8006132:	011b      	lsls	r3, r3, #4
 8006134:	4013      	ands	r3, r2
 8006136:	d139      	bne.n	80061ac <HAL_ADC_ConfigChannel+0x1a0>
 8006138:	683b      	ldr	r3, [r7, #0]
 800613a:	681a      	ldr	r2, [r3, #0]
 800613c:	2380      	movs	r3, #128	@ 0x80
 800613e:	015b      	lsls	r3, r3, #5
 8006140:	4013      	ands	r3, r2
 8006142:	d131      	bne.n	80061a8 <HAL_ADC_ConfigChannel+0x19c>
 8006144:	683b      	ldr	r3, [r7, #0]
 8006146:	681a      	ldr	r2, [r3, #0]
 8006148:	2380      	movs	r3, #128	@ 0x80
 800614a:	019b      	lsls	r3, r3, #6
 800614c:	4013      	ands	r3, r2
 800614e:	d129      	bne.n	80061a4 <HAL_ADC_ConfigChannel+0x198>
 8006150:	683b      	ldr	r3, [r7, #0]
 8006152:	681a      	ldr	r2, [r3, #0]
 8006154:	2380      	movs	r3, #128	@ 0x80
 8006156:	01db      	lsls	r3, r3, #7
 8006158:	4013      	ands	r3, r2
 800615a:	d121      	bne.n	80061a0 <HAL_ADC_ConfigChannel+0x194>
 800615c:	683b      	ldr	r3, [r7, #0]
 800615e:	681a      	ldr	r2, [r3, #0]
 8006160:	2380      	movs	r3, #128	@ 0x80
 8006162:	021b      	lsls	r3, r3, #8
 8006164:	4013      	ands	r3, r2
 8006166:	d119      	bne.n	800619c <HAL_ADC_ConfigChannel+0x190>
 8006168:	683b      	ldr	r3, [r7, #0]
 800616a:	681a      	ldr	r2, [r3, #0]
 800616c:	2380      	movs	r3, #128	@ 0x80
 800616e:	025b      	lsls	r3, r3, #9
 8006170:	4013      	ands	r3, r2
 8006172:	d111      	bne.n	8006198 <HAL_ADC_ConfigChannel+0x18c>
 8006174:	683b      	ldr	r3, [r7, #0]
 8006176:	681a      	ldr	r2, [r3, #0]
 8006178:	2380      	movs	r3, #128	@ 0x80
 800617a:	029b      	lsls	r3, r3, #10
 800617c:	4013      	ands	r3, r2
 800617e:	d109      	bne.n	8006194 <HAL_ADC_ConfigChannel+0x188>
 8006180:	683b      	ldr	r3, [r7, #0]
 8006182:	681a      	ldr	r2, [r3, #0]
 8006184:	2380      	movs	r3, #128	@ 0x80
 8006186:	02db      	lsls	r3, r3, #11
 8006188:	4013      	ands	r3, r2
 800618a:	d001      	beq.n	8006190 <HAL_ADC_ConfigChannel+0x184>
 800618c:	2312      	movs	r3, #18
 800618e:	e024      	b.n	80061da <HAL_ADC_ConfigChannel+0x1ce>
 8006190:	2300      	movs	r3, #0
 8006192:	e022      	b.n	80061da <HAL_ADC_ConfigChannel+0x1ce>
 8006194:	2311      	movs	r3, #17
 8006196:	e020      	b.n	80061da <HAL_ADC_ConfigChannel+0x1ce>
 8006198:	2310      	movs	r3, #16
 800619a:	e01e      	b.n	80061da <HAL_ADC_ConfigChannel+0x1ce>
 800619c:	230f      	movs	r3, #15
 800619e:	e01c      	b.n	80061da <HAL_ADC_ConfigChannel+0x1ce>
 80061a0:	230e      	movs	r3, #14
 80061a2:	e01a      	b.n	80061da <HAL_ADC_ConfigChannel+0x1ce>
 80061a4:	230d      	movs	r3, #13
 80061a6:	e018      	b.n	80061da <HAL_ADC_ConfigChannel+0x1ce>
 80061a8:	230c      	movs	r3, #12
 80061aa:	e016      	b.n	80061da <HAL_ADC_ConfigChannel+0x1ce>
 80061ac:	230b      	movs	r3, #11
 80061ae:	e014      	b.n	80061da <HAL_ADC_ConfigChannel+0x1ce>
 80061b0:	230a      	movs	r3, #10
 80061b2:	e012      	b.n	80061da <HAL_ADC_ConfigChannel+0x1ce>
 80061b4:	2309      	movs	r3, #9
 80061b6:	e010      	b.n	80061da <HAL_ADC_ConfigChannel+0x1ce>
 80061b8:	2308      	movs	r3, #8
 80061ba:	e00e      	b.n	80061da <HAL_ADC_ConfigChannel+0x1ce>
 80061bc:	2307      	movs	r3, #7
 80061be:	e00c      	b.n	80061da <HAL_ADC_ConfigChannel+0x1ce>
 80061c0:	2306      	movs	r3, #6
 80061c2:	e00a      	b.n	80061da <HAL_ADC_ConfigChannel+0x1ce>
 80061c4:	2305      	movs	r3, #5
 80061c6:	e008      	b.n	80061da <HAL_ADC_ConfigChannel+0x1ce>
 80061c8:	2304      	movs	r3, #4
 80061ca:	e006      	b.n	80061da <HAL_ADC_ConfigChannel+0x1ce>
 80061cc:	2303      	movs	r3, #3
 80061ce:	e004      	b.n	80061da <HAL_ADC_ConfigChannel+0x1ce>
 80061d0:	2302      	movs	r3, #2
 80061d2:	e002      	b.n	80061da <HAL_ADC_ConfigChannel+0x1ce>
 80061d4:	2301      	movs	r3, #1
 80061d6:	e000      	b.n	80061da <HAL_ADC_ConfigChannel+0x1ce>
 80061d8:	2300      	movs	r3, #0
 80061da:	683a      	ldr	r2, [r7, #0]
 80061dc:	6852      	ldr	r2, [r2, #4]
 80061de:	201f      	movs	r0, #31
 80061e0:	4002      	ands	r2, r0
 80061e2:	4093      	lsls	r3, r2
 80061e4:	000a      	movs	r2, r1
 80061e6:	431a      	orrs	r2, r3
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	661a      	str	r2, [r3, #96]	@ 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 80061ec:	683b      	ldr	r3, [r7, #0]
 80061ee:	685b      	ldr	r3, [r3, #4]
 80061f0:	089b      	lsrs	r3, r3, #2
 80061f2:	1c5a      	adds	r2, r3, #1
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	69db      	ldr	r3, [r3, #28]
 80061f8:	429a      	cmp	r2, r3
 80061fa:	d808      	bhi.n	800620e <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	6818      	ldr	r0, [r3, #0]
 8006200:	683b      	ldr	r3, [r7, #0]
 8006202:	6859      	ldr	r1, [r3, #4]
 8006204:	683b      	ldr	r3, [r7, #0]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	001a      	movs	r2, r3
 800620a:	f7ff fb99 	bl	8005940 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	6818      	ldr	r0, [r3, #0]
 8006212:	683b      	ldr	r3, [r7, #0]
 8006214:	6819      	ldr	r1, [r3, #0]
 8006216:	683b      	ldr	r3, [r7, #0]
 8006218:	689b      	ldr	r3, [r3, #8]
 800621a:	001a      	movs	r2, r3
 800621c:	f7ff fbd4 	bl	80059c8 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8006220:	683b      	ldr	r3, [r7, #0]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	2b00      	cmp	r3, #0
 8006226:	db00      	blt.n	800622a <HAL_ADC_ConfigChannel+0x21e>
 8006228:	e0bc      	b.n	80063a4 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800622a:	4b50      	ldr	r3, [pc, #320]	@ (800636c <HAL_ADC_ConfigChannel+0x360>)
 800622c:	0018      	movs	r0, r3
 800622e:	f7ff fb35 	bl	800589c <LL_ADC_GetCommonPathInternalCh>
 8006232:	0003      	movs	r3, r0
 8006234:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8006236:	683b      	ldr	r3, [r7, #0]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	4a4d      	ldr	r2, [pc, #308]	@ (8006370 <HAL_ADC_ConfigChannel+0x364>)
 800623c:	4293      	cmp	r3, r2
 800623e:	d122      	bne.n	8006286 <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8006240:	693a      	ldr	r2, [r7, #16]
 8006242:	2380      	movs	r3, #128	@ 0x80
 8006244:	041b      	lsls	r3, r3, #16
 8006246:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8006248:	d11d      	bne.n	8006286 <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800624a:	693b      	ldr	r3, [r7, #16]
 800624c:	2280      	movs	r2, #128	@ 0x80
 800624e:	0412      	lsls	r2, r2, #16
 8006250:	4313      	orrs	r3, r2
 8006252:	4a46      	ldr	r2, [pc, #280]	@ (800636c <HAL_ADC_ConfigChannel+0x360>)
 8006254:	0019      	movs	r1, r3
 8006256:	0010      	movs	r0, r2
 8006258:	f7ff fb0c 	bl	8005874 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800625c:	4b45      	ldr	r3, [pc, #276]	@ (8006374 <HAL_ADC_ConfigChannel+0x368>)
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	4945      	ldr	r1, [pc, #276]	@ (8006378 <HAL_ADC_ConfigChannel+0x36c>)
 8006262:	0018      	movs	r0, r3
 8006264:	f7f9 ff68 	bl	8000138 <__udivsi3>
 8006268:	0003      	movs	r3, r0
 800626a:	1c5a      	adds	r2, r3, #1
 800626c:	0013      	movs	r3, r2
 800626e:	005b      	lsls	r3, r3, #1
 8006270:	189b      	adds	r3, r3, r2
 8006272:	009b      	lsls	r3, r3, #2
 8006274:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8006276:	e002      	b.n	800627e <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	3b01      	subs	r3, #1
 800627c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	2b00      	cmp	r3, #0
 8006282:	d1f9      	bne.n	8006278 <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8006284:	e08e      	b.n	80063a4 <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8006286:	683b      	ldr	r3, [r7, #0]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	4a3c      	ldr	r2, [pc, #240]	@ (800637c <HAL_ADC_ConfigChannel+0x370>)
 800628c:	4293      	cmp	r3, r2
 800628e:	d10e      	bne.n	80062ae <HAL_ADC_ConfigChannel+0x2a2>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8006290:	693a      	ldr	r2, [r7, #16]
 8006292:	2380      	movs	r3, #128	@ 0x80
 8006294:	045b      	lsls	r3, r3, #17
 8006296:	4013      	ands	r3, r2
 8006298:	d109      	bne.n	80062ae <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800629a:	693b      	ldr	r3, [r7, #16]
 800629c:	2280      	movs	r2, #128	@ 0x80
 800629e:	0452      	lsls	r2, r2, #17
 80062a0:	4313      	orrs	r3, r2
 80062a2:	4a32      	ldr	r2, [pc, #200]	@ (800636c <HAL_ADC_ConfigChannel+0x360>)
 80062a4:	0019      	movs	r1, r3
 80062a6:	0010      	movs	r0, r2
 80062a8:	f7ff fae4 	bl	8005874 <LL_ADC_SetCommonPathInternalCh>
 80062ac:	e07a      	b.n	80063a4 <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 80062ae:	683b      	ldr	r3, [r7, #0]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	4a33      	ldr	r2, [pc, #204]	@ (8006380 <HAL_ADC_ConfigChannel+0x374>)
 80062b4:	4293      	cmp	r3, r2
 80062b6:	d000      	beq.n	80062ba <HAL_ADC_ConfigChannel+0x2ae>
 80062b8:	e074      	b.n	80063a4 <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80062ba:	693a      	ldr	r2, [r7, #16]
 80062bc:	2380      	movs	r3, #128	@ 0x80
 80062be:	03db      	lsls	r3, r3, #15
 80062c0:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 80062c2:	d000      	beq.n	80062c6 <HAL_ADC_ConfigChannel+0x2ba>
 80062c4:	e06e      	b.n	80063a4 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80062c6:	693b      	ldr	r3, [r7, #16]
 80062c8:	2280      	movs	r2, #128	@ 0x80
 80062ca:	03d2      	lsls	r2, r2, #15
 80062cc:	4313      	orrs	r3, r2
 80062ce:	4a27      	ldr	r2, [pc, #156]	@ (800636c <HAL_ADC_ConfigChannel+0x360>)
 80062d0:	0019      	movs	r1, r3
 80062d2:	0010      	movs	r0, r2
 80062d4:	f7ff face 	bl	8005874 <LL_ADC_SetCommonPathInternalCh>
 80062d8:	e064      	b.n	80063a4 <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	691a      	ldr	r2, [r3, #16]
 80062de:	2380      	movs	r3, #128	@ 0x80
 80062e0:	061b      	lsls	r3, r3, #24
 80062e2:	429a      	cmp	r2, r3
 80062e4:	d004      	beq.n	80062f0 <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80062ea:	4a1f      	ldr	r2, [pc, #124]	@ (8006368 <HAL_ADC_ConfigChannel+0x35c>)
 80062ec:	4293      	cmp	r3, r2
 80062ee:	d107      	bne.n	8006300 <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681a      	ldr	r2, [r3, #0]
 80062f4:	683b      	ldr	r3, [r7, #0]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	0019      	movs	r1, r3
 80062fa:	0010      	movs	r0, r2
 80062fc:	f7ff fb51 	bl	80059a2 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8006300:	683b      	ldr	r3, [r7, #0]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	2b00      	cmp	r3, #0
 8006306:	da4d      	bge.n	80063a4 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8006308:	4b18      	ldr	r3, [pc, #96]	@ (800636c <HAL_ADC_ConfigChannel+0x360>)
 800630a:	0018      	movs	r0, r3
 800630c:	f7ff fac6 	bl	800589c <LL_ADC_GetCommonPathInternalCh>
 8006310:	0003      	movs	r3, r0
 8006312:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8006314:	683b      	ldr	r3, [r7, #0]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	4a15      	ldr	r2, [pc, #84]	@ (8006370 <HAL_ADC_ConfigChannel+0x364>)
 800631a:	4293      	cmp	r3, r2
 800631c:	d108      	bne.n	8006330 <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800631e:	693b      	ldr	r3, [r7, #16]
 8006320:	4a18      	ldr	r2, [pc, #96]	@ (8006384 <HAL_ADC_ConfigChannel+0x378>)
 8006322:	4013      	ands	r3, r2
 8006324:	4a11      	ldr	r2, [pc, #68]	@ (800636c <HAL_ADC_ConfigChannel+0x360>)
 8006326:	0019      	movs	r1, r3
 8006328:	0010      	movs	r0, r2
 800632a:	f7ff faa3 	bl	8005874 <LL_ADC_SetCommonPathInternalCh>
 800632e:	e039      	b.n	80063a4 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8006330:	683b      	ldr	r3, [r7, #0]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	4a11      	ldr	r2, [pc, #68]	@ (800637c <HAL_ADC_ConfigChannel+0x370>)
 8006336:	4293      	cmp	r3, r2
 8006338:	d108      	bne.n	800634c <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800633a:	693b      	ldr	r3, [r7, #16]
 800633c:	4a12      	ldr	r2, [pc, #72]	@ (8006388 <HAL_ADC_ConfigChannel+0x37c>)
 800633e:	4013      	ands	r3, r2
 8006340:	4a0a      	ldr	r2, [pc, #40]	@ (800636c <HAL_ADC_ConfigChannel+0x360>)
 8006342:	0019      	movs	r1, r3
 8006344:	0010      	movs	r0, r2
 8006346:	f7ff fa95 	bl	8005874 <LL_ADC_SetCommonPathInternalCh>
 800634a:	e02b      	b.n	80063a4 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 800634c:	683b      	ldr	r3, [r7, #0]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	4a0b      	ldr	r2, [pc, #44]	@ (8006380 <HAL_ADC_ConfigChannel+0x374>)
 8006352:	4293      	cmp	r3, r2
 8006354:	d126      	bne.n	80063a4 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8006356:	693b      	ldr	r3, [r7, #16]
 8006358:	4a0c      	ldr	r2, [pc, #48]	@ (800638c <HAL_ADC_ConfigChannel+0x380>)
 800635a:	4013      	ands	r3, r2
 800635c:	4a03      	ldr	r2, [pc, #12]	@ (800636c <HAL_ADC_ConfigChannel+0x360>)
 800635e:	0019      	movs	r1, r3
 8006360:	0010      	movs	r0, r2
 8006362:	f7ff fa87 	bl	8005874 <LL_ADC_SetCommonPathInternalCh>
 8006366:	e01d      	b.n	80063a4 <HAL_ADC_ConfigChannel+0x398>
 8006368:	80000004 	.word	0x80000004
 800636c:	40012708 	.word	0x40012708
 8006370:	b0001000 	.word	0xb0001000
 8006374:	20000008 	.word	0x20000008
 8006378:	00030d40 	.word	0x00030d40
 800637c:	b8004000 	.word	0xb8004000
 8006380:	b4002000 	.word	0xb4002000
 8006384:	ff7fffff 	.word	0xff7fffff
 8006388:	feffffff 	.word	0xfeffffff
 800638c:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006394:	2220      	movs	r2, #32
 8006396:	431a      	orrs	r2, r3
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 800639c:	2317      	movs	r3, #23
 800639e:	18fb      	adds	r3, r7, r3
 80063a0:	2201      	movs	r2, #1
 80063a2:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	2254      	movs	r2, #84	@ 0x54
 80063a8:	2100      	movs	r1, #0
 80063aa:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 80063ac:	2317      	movs	r3, #23
 80063ae:	18fb      	adds	r3, r7, r3
 80063b0:	781b      	ldrb	r3, [r3, #0]
}
 80063b2:	0018      	movs	r0, r3
 80063b4:	46bd      	mov	sp, r7
 80063b6:	b006      	add	sp, #24
 80063b8:	bd80      	pop	{r7, pc}
 80063ba:	46c0      	nop			@ (mov r8, r8)

080063bc <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80063bc:	b580      	push	{r7, lr}
 80063be:	b084      	sub	sp, #16
 80063c0:	af00      	add	r7, sp, #0
 80063c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80063c4:	2300      	movs	r3, #0
 80063c6:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	0018      	movs	r0, r3
 80063ce:	f7ff fb51 	bl	8005a74 <LL_ADC_IsEnabled>
 80063d2:	1e03      	subs	r3, r0, #0
 80063d4:	d000      	beq.n	80063d8 <ADC_Enable+0x1c>
 80063d6:	e069      	b.n	80064ac <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	689b      	ldr	r3, [r3, #8]
 80063de:	4a36      	ldr	r2, [pc, #216]	@ (80064b8 <ADC_Enable+0xfc>)
 80063e0:	4013      	ands	r3, r2
 80063e2:	d00d      	beq.n	8006400 <ADC_Enable+0x44>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80063e8:	2210      	movs	r2, #16
 80063ea:	431a      	orrs	r2, r3
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80063f4:	2201      	movs	r2, #1
 80063f6:	431a      	orrs	r2, r3
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	65da      	str	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 80063fc:	2301      	movs	r3, #1
 80063fe:	e056      	b.n	80064ae <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	0018      	movs	r0, r3
 8006406:	f7ff fb23 	bl	8005a50 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR)
 800640a:	4b2c      	ldr	r3, [pc, #176]	@ (80064bc <ADC_Enable+0x100>)
 800640c:	0018      	movs	r0, r3
 800640e:	f7ff fa45 	bl	800589c <LL_ADC_GetCommonPathInternalCh>
 8006412:	0002      	movs	r2, r0
 8006414:	2380      	movs	r3, #128	@ 0x80
 8006416:	041b      	lsls	r3, r3, #16
 8006418:	4013      	ands	r3, r2
 800641a:	d00f      	beq.n	800643c <ADC_Enable+0x80>
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL)
                         * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800641c:	4b28      	ldr	r3, [pc, #160]	@ (80064c0 <ADC_Enable+0x104>)
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	4928      	ldr	r1, [pc, #160]	@ (80064c4 <ADC_Enable+0x108>)
 8006422:	0018      	movs	r0, r3
 8006424:	f7f9 fe88 	bl	8000138 <__udivsi3>
 8006428:	0003      	movs	r3, r0
 800642a:	3301      	adds	r3, #1
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL)
 800642c:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800642e:	e002      	b.n	8006436 <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 8006430:	68bb      	ldr	r3, [r7, #8]
 8006432:	3b01      	subs	r3, #1
 8006434:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8006436:	68bb      	ldr	r3, [r7, #8]
 8006438:	2b00      	cmp	r3, #0
 800643a:	d1f9      	bne.n	8006430 <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	7e5b      	ldrb	r3, [r3, #25]
 8006440:	2b01      	cmp	r3, #1
 8006442:	d033      	beq.n	80064ac <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8006444:	f7ff f9e8 	bl	8005818 <HAL_GetTick>
 8006448:	0003      	movs	r3, r0
 800644a:	60fb      	str	r3, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800644c:	e027      	b.n	800649e <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	0018      	movs	r0, r3
 8006454:	f7ff fb0e 	bl	8005a74 <LL_ADC_IsEnabled>
 8006458:	1e03      	subs	r3, r0, #0
 800645a:	d104      	bne.n	8006466 <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	0018      	movs	r0, r3
 8006462:	f7ff faf5 	bl	8005a50 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8006466:	f7ff f9d7 	bl	8005818 <HAL_GetTick>
 800646a:	0002      	movs	r2, r0
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	1ad3      	subs	r3, r2, r3
 8006470:	2b02      	cmp	r3, #2
 8006472:	d914      	bls.n	800649e <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	2201      	movs	r2, #1
 800647c:	4013      	ands	r3, r2
 800647e:	2b01      	cmp	r3, #1
 8006480:	d00d      	beq.n	800649e <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006486:	2210      	movs	r2, #16
 8006488:	431a      	orrs	r2, r3
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	659a      	str	r2, [r3, #88]	@ 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006492:	2201      	movs	r2, #1
 8006494:	431a      	orrs	r2, r3
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	65da      	str	r2, [r3, #92]	@ 0x5c

            return HAL_ERROR;
 800649a:	2301      	movs	r3, #1
 800649c:	e007      	b.n	80064ae <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	2201      	movs	r2, #1
 80064a6:	4013      	ands	r3, r2
 80064a8:	2b01      	cmp	r3, #1
 80064aa:	d1d0      	bne.n	800644e <ADC_Enable+0x92>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80064ac:	2300      	movs	r3, #0
}
 80064ae:	0018      	movs	r0, r3
 80064b0:	46bd      	mov	sp, r7
 80064b2:	b004      	add	sp, #16
 80064b4:	bd80      	pop	{r7, pc}
 80064b6:	46c0      	nop			@ (mov r8, r8)
 80064b8:	80000017 	.word	0x80000017
 80064bc:	40012708 	.word	0x40012708
 80064c0:	20000008 	.word	0x20000008
 80064c4:	00030d40 	.word	0x00030d40

080064c8 <__NVIC_SetPriority>:
{
 80064c8:	b590      	push	{r4, r7, lr}
 80064ca:	b083      	sub	sp, #12
 80064cc:	af00      	add	r7, sp, #0
 80064ce:	0002      	movs	r2, r0
 80064d0:	6039      	str	r1, [r7, #0]
 80064d2:	1dfb      	adds	r3, r7, #7
 80064d4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80064d6:	1dfb      	adds	r3, r7, #7
 80064d8:	781b      	ldrb	r3, [r3, #0]
 80064da:	2b7f      	cmp	r3, #127	@ 0x7f
 80064dc:	d828      	bhi.n	8006530 <__NVIC_SetPriority+0x68>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80064de:	4a2f      	ldr	r2, [pc, #188]	@ (800659c <__NVIC_SetPriority+0xd4>)
 80064e0:	1dfb      	adds	r3, r7, #7
 80064e2:	781b      	ldrb	r3, [r3, #0]
 80064e4:	b25b      	sxtb	r3, r3
 80064e6:	089b      	lsrs	r3, r3, #2
 80064e8:	33c0      	adds	r3, #192	@ 0xc0
 80064ea:	009b      	lsls	r3, r3, #2
 80064ec:	589b      	ldr	r3, [r3, r2]
 80064ee:	1dfa      	adds	r2, r7, #7
 80064f0:	7812      	ldrb	r2, [r2, #0]
 80064f2:	0011      	movs	r1, r2
 80064f4:	2203      	movs	r2, #3
 80064f6:	400a      	ands	r2, r1
 80064f8:	00d2      	lsls	r2, r2, #3
 80064fa:	21ff      	movs	r1, #255	@ 0xff
 80064fc:	4091      	lsls	r1, r2
 80064fe:	000a      	movs	r2, r1
 8006500:	43d2      	mvns	r2, r2
 8006502:	401a      	ands	r2, r3
 8006504:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8006506:	683b      	ldr	r3, [r7, #0]
 8006508:	019b      	lsls	r3, r3, #6
 800650a:	22ff      	movs	r2, #255	@ 0xff
 800650c:	401a      	ands	r2, r3
 800650e:	1dfb      	adds	r3, r7, #7
 8006510:	781b      	ldrb	r3, [r3, #0]
 8006512:	0018      	movs	r0, r3
 8006514:	2303      	movs	r3, #3
 8006516:	4003      	ands	r3, r0
 8006518:	00db      	lsls	r3, r3, #3
 800651a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800651c:	481f      	ldr	r0, [pc, #124]	@ (800659c <__NVIC_SetPriority+0xd4>)
 800651e:	1dfb      	adds	r3, r7, #7
 8006520:	781b      	ldrb	r3, [r3, #0]
 8006522:	b25b      	sxtb	r3, r3
 8006524:	089b      	lsrs	r3, r3, #2
 8006526:	430a      	orrs	r2, r1
 8006528:	33c0      	adds	r3, #192	@ 0xc0
 800652a:	009b      	lsls	r3, r3, #2
 800652c:	501a      	str	r2, [r3, r0]
}
 800652e:	e031      	b.n	8006594 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8006530:	4a1b      	ldr	r2, [pc, #108]	@ (80065a0 <__NVIC_SetPriority+0xd8>)
 8006532:	1dfb      	adds	r3, r7, #7
 8006534:	781b      	ldrb	r3, [r3, #0]
 8006536:	0019      	movs	r1, r3
 8006538:	230f      	movs	r3, #15
 800653a:	400b      	ands	r3, r1
 800653c:	3b08      	subs	r3, #8
 800653e:	089b      	lsrs	r3, r3, #2
 8006540:	3306      	adds	r3, #6
 8006542:	009b      	lsls	r3, r3, #2
 8006544:	18d3      	adds	r3, r2, r3
 8006546:	3304      	adds	r3, #4
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	1dfa      	adds	r2, r7, #7
 800654c:	7812      	ldrb	r2, [r2, #0]
 800654e:	0011      	movs	r1, r2
 8006550:	2203      	movs	r2, #3
 8006552:	400a      	ands	r2, r1
 8006554:	00d2      	lsls	r2, r2, #3
 8006556:	21ff      	movs	r1, #255	@ 0xff
 8006558:	4091      	lsls	r1, r2
 800655a:	000a      	movs	r2, r1
 800655c:	43d2      	mvns	r2, r2
 800655e:	401a      	ands	r2, r3
 8006560:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8006562:	683b      	ldr	r3, [r7, #0]
 8006564:	019b      	lsls	r3, r3, #6
 8006566:	22ff      	movs	r2, #255	@ 0xff
 8006568:	401a      	ands	r2, r3
 800656a:	1dfb      	adds	r3, r7, #7
 800656c:	781b      	ldrb	r3, [r3, #0]
 800656e:	0018      	movs	r0, r3
 8006570:	2303      	movs	r3, #3
 8006572:	4003      	ands	r3, r0
 8006574:	00db      	lsls	r3, r3, #3
 8006576:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8006578:	4809      	ldr	r0, [pc, #36]	@ (80065a0 <__NVIC_SetPriority+0xd8>)
 800657a:	1dfb      	adds	r3, r7, #7
 800657c:	781b      	ldrb	r3, [r3, #0]
 800657e:	001c      	movs	r4, r3
 8006580:	230f      	movs	r3, #15
 8006582:	4023      	ands	r3, r4
 8006584:	3b08      	subs	r3, #8
 8006586:	089b      	lsrs	r3, r3, #2
 8006588:	430a      	orrs	r2, r1
 800658a:	3306      	adds	r3, #6
 800658c:	009b      	lsls	r3, r3, #2
 800658e:	18c3      	adds	r3, r0, r3
 8006590:	3304      	adds	r3, #4
 8006592:	601a      	str	r2, [r3, #0]
}
 8006594:	46c0      	nop			@ (mov r8, r8)
 8006596:	46bd      	mov	sp, r7
 8006598:	b003      	add	sp, #12
 800659a:	bd90      	pop	{r4, r7, pc}
 800659c:	e000e100 	.word	0xe000e100
 80065a0:	e000ed00 	.word	0xe000ed00

080065a4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80065a4:	b580      	push	{r7, lr}
 80065a6:	b082      	sub	sp, #8
 80065a8:	af00      	add	r7, sp, #0
 80065aa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	1e5a      	subs	r2, r3, #1
 80065b0:	2380      	movs	r3, #128	@ 0x80
 80065b2:	045b      	lsls	r3, r3, #17
 80065b4:	429a      	cmp	r2, r3
 80065b6:	d301      	bcc.n	80065bc <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80065b8:	2301      	movs	r3, #1
 80065ba:	e010      	b.n	80065de <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80065bc:	4b0a      	ldr	r3, [pc, #40]	@ (80065e8 <SysTick_Config+0x44>)
 80065be:	687a      	ldr	r2, [r7, #4]
 80065c0:	3a01      	subs	r2, #1
 80065c2:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80065c4:	2301      	movs	r3, #1
 80065c6:	425b      	negs	r3, r3
 80065c8:	2103      	movs	r1, #3
 80065ca:	0018      	movs	r0, r3
 80065cc:	f7ff ff7c 	bl	80064c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80065d0:	4b05      	ldr	r3, [pc, #20]	@ (80065e8 <SysTick_Config+0x44>)
 80065d2:	2200      	movs	r2, #0
 80065d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80065d6:	4b04      	ldr	r3, [pc, #16]	@ (80065e8 <SysTick_Config+0x44>)
 80065d8:	2207      	movs	r2, #7
 80065da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80065dc:	2300      	movs	r3, #0
}
 80065de:	0018      	movs	r0, r3
 80065e0:	46bd      	mov	sp, r7
 80065e2:	b002      	add	sp, #8
 80065e4:	bd80      	pop	{r7, pc}
 80065e6:	46c0      	nop			@ (mov r8, r8)
 80065e8:	e000e010 	.word	0xe000e010

080065ec <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80065ec:	b580      	push	{r7, lr}
 80065ee:	b084      	sub	sp, #16
 80065f0:	af00      	add	r7, sp, #0
 80065f2:	60b9      	str	r1, [r7, #8]
 80065f4:	607a      	str	r2, [r7, #4]
 80065f6:	210f      	movs	r1, #15
 80065f8:	187b      	adds	r3, r7, r1
 80065fa:	1c02      	adds	r2, r0, #0
 80065fc:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 80065fe:	68ba      	ldr	r2, [r7, #8]
 8006600:	187b      	adds	r3, r7, r1
 8006602:	781b      	ldrb	r3, [r3, #0]
 8006604:	b25b      	sxtb	r3, r3
 8006606:	0011      	movs	r1, r2
 8006608:	0018      	movs	r0, r3
 800660a:	f7ff ff5d 	bl	80064c8 <__NVIC_SetPriority>
}
 800660e:	46c0      	nop			@ (mov r8, r8)
 8006610:	46bd      	mov	sp, r7
 8006612:	b004      	add	sp, #16
 8006614:	bd80      	pop	{r7, pc}

08006616 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006616:	b580      	push	{r7, lr}
 8006618:	b082      	sub	sp, #8
 800661a:	af00      	add	r7, sp, #0
 800661c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	0018      	movs	r0, r3
 8006622:	f7ff ffbf 	bl	80065a4 <SysTick_Config>
 8006626:	0003      	movs	r3, r0
}
 8006628:	0018      	movs	r0, r3
 800662a:	46bd      	mov	sp, r7
 800662c:	b002      	add	sp, #8
 800662e:	bd80      	pop	{r7, pc}

08006630 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006630:	b580      	push	{r7, lr}
 8006632:	b086      	sub	sp, #24
 8006634:	af00      	add	r7, sp, #0
 8006636:	6078      	str	r0, [r7, #4]
 8006638:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800663a:	2300      	movs	r3, #0
 800663c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800663e:	e147      	b.n	80068d0 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8006640:	683b      	ldr	r3, [r7, #0]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	2101      	movs	r1, #1
 8006646:	697a      	ldr	r2, [r7, #20]
 8006648:	4091      	lsls	r1, r2
 800664a:	000a      	movs	r2, r1
 800664c:	4013      	ands	r3, r2
 800664e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	2b00      	cmp	r3, #0
 8006654:	d100      	bne.n	8006658 <HAL_GPIO_Init+0x28>
 8006656:	e138      	b.n	80068ca <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006658:	683b      	ldr	r3, [r7, #0]
 800665a:	685b      	ldr	r3, [r3, #4]
 800665c:	2203      	movs	r2, #3
 800665e:	4013      	ands	r3, r2
 8006660:	2b01      	cmp	r3, #1
 8006662:	d005      	beq.n	8006670 <HAL_GPIO_Init+0x40>
 8006664:	683b      	ldr	r3, [r7, #0]
 8006666:	685b      	ldr	r3, [r3, #4]
 8006668:	2203      	movs	r2, #3
 800666a:	4013      	ands	r3, r2
 800666c:	2b02      	cmp	r3, #2
 800666e:	d130      	bne.n	80066d2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	689b      	ldr	r3, [r3, #8]
 8006674:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8006676:	697b      	ldr	r3, [r7, #20]
 8006678:	005b      	lsls	r3, r3, #1
 800667a:	2203      	movs	r2, #3
 800667c:	409a      	lsls	r2, r3
 800667e:	0013      	movs	r3, r2
 8006680:	43da      	mvns	r2, r3
 8006682:	693b      	ldr	r3, [r7, #16]
 8006684:	4013      	ands	r3, r2
 8006686:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8006688:	683b      	ldr	r3, [r7, #0]
 800668a:	68da      	ldr	r2, [r3, #12]
 800668c:	697b      	ldr	r3, [r7, #20]
 800668e:	005b      	lsls	r3, r3, #1
 8006690:	409a      	lsls	r2, r3
 8006692:	0013      	movs	r3, r2
 8006694:	693a      	ldr	r2, [r7, #16]
 8006696:	4313      	orrs	r3, r2
 8006698:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	693a      	ldr	r2, [r7, #16]
 800669e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	685b      	ldr	r3, [r3, #4]
 80066a4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80066a6:	2201      	movs	r2, #1
 80066a8:	697b      	ldr	r3, [r7, #20]
 80066aa:	409a      	lsls	r2, r3
 80066ac:	0013      	movs	r3, r2
 80066ae:	43da      	mvns	r2, r3
 80066b0:	693b      	ldr	r3, [r7, #16]
 80066b2:	4013      	ands	r3, r2
 80066b4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80066b6:	683b      	ldr	r3, [r7, #0]
 80066b8:	685b      	ldr	r3, [r3, #4]
 80066ba:	091b      	lsrs	r3, r3, #4
 80066bc:	2201      	movs	r2, #1
 80066be:	401a      	ands	r2, r3
 80066c0:	697b      	ldr	r3, [r7, #20]
 80066c2:	409a      	lsls	r2, r3
 80066c4:	0013      	movs	r3, r2
 80066c6:	693a      	ldr	r2, [r7, #16]
 80066c8:	4313      	orrs	r3, r2
 80066ca:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	693a      	ldr	r2, [r7, #16]
 80066d0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80066d2:	683b      	ldr	r3, [r7, #0]
 80066d4:	685b      	ldr	r3, [r3, #4]
 80066d6:	2203      	movs	r2, #3
 80066d8:	4013      	ands	r3, r2
 80066da:	2b03      	cmp	r3, #3
 80066dc:	d017      	beq.n	800670e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	68db      	ldr	r3, [r3, #12]
 80066e2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80066e4:	697b      	ldr	r3, [r7, #20]
 80066e6:	005b      	lsls	r3, r3, #1
 80066e8:	2203      	movs	r2, #3
 80066ea:	409a      	lsls	r2, r3
 80066ec:	0013      	movs	r3, r2
 80066ee:	43da      	mvns	r2, r3
 80066f0:	693b      	ldr	r3, [r7, #16]
 80066f2:	4013      	ands	r3, r2
 80066f4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80066f6:	683b      	ldr	r3, [r7, #0]
 80066f8:	689a      	ldr	r2, [r3, #8]
 80066fa:	697b      	ldr	r3, [r7, #20]
 80066fc:	005b      	lsls	r3, r3, #1
 80066fe:	409a      	lsls	r2, r3
 8006700:	0013      	movs	r3, r2
 8006702:	693a      	ldr	r2, [r7, #16]
 8006704:	4313      	orrs	r3, r2
 8006706:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	693a      	ldr	r2, [r7, #16]
 800670c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800670e:	683b      	ldr	r3, [r7, #0]
 8006710:	685b      	ldr	r3, [r3, #4]
 8006712:	2203      	movs	r2, #3
 8006714:	4013      	ands	r3, r2
 8006716:	2b02      	cmp	r3, #2
 8006718:	d123      	bne.n	8006762 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800671a:	697b      	ldr	r3, [r7, #20]
 800671c:	08da      	lsrs	r2, r3, #3
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	3208      	adds	r2, #8
 8006722:	0092      	lsls	r2, r2, #2
 8006724:	58d3      	ldr	r3, [r2, r3]
 8006726:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8006728:	697b      	ldr	r3, [r7, #20]
 800672a:	2207      	movs	r2, #7
 800672c:	4013      	ands	r3, r2
 800672e:	009b      	lsls	r3, r3, #2
 8006730:	220f      	movs	r2, #15
 8006732:	409a      	lsls	r2, r3
 8006734:	0013      	movs	r3, r2
 8006736:	43da      	mvns	r2, r3
 8006738:	693b      	ldr	r3, [r7, #16]
 800673a:	4013      	ands	r3, r2
 800673c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800673e:	683b      	ldr	r3, [r7, #0]
 8006740:	691a      	ldr	r2, [r3, #16]
 8006742:	697b      	ldr	r3, [r7, #20]
 8006744:	2107      	movs	r1, #7
 8006746:	400b      	ands	r3, r1
 8006748:	009b      	lsls	r3, r3, #2
 800674a:	409a      	lsls	r2, r3
 800674c:	0013      	movs	r3, r2
 800674e:	693a      	ldr	r2, [r7, #16]
 8006750:	4313      	orrs	r3, r2
 8006752:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8006754:	697b      	ldr	r3, [r7, #20]
 8006756:	08da      	lsrs	r2, r3, #3
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	3208      	adds	r2, #8
 800675c:	0092      	lsls	r2, r2, #2
 800675e:	6939      	ldr	r1, [r7, #16]
 8006760:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8006768:	697b      	ldr	r3, [r7, #20]
 800676a:	005b      	lsls	r3, r3, #1
 800676c:	2203      	movs	r2, #3
 800676e:	409a      	lsls	r2, r3
 8006770:	0013      	movs	r3, r2
 8006772:	43da      	mvns	r2, r3
 8006774:	693b      	ldr	r3, [r7, #16]
 8006776:	4013      	ands	r3, r2
 8006778:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800677a:	683b      	ldr	r3, [r7, #0]
 800677c:	685b      	ldr	r3, [r3, #4]
 800677e:	2203      	movs	r2, #3
 8006780:	401a      	ands	r2, r3
 8006782:	697b      	ldr	r3, [r7, #20]
 8006784:	005b      	lsls	r3, r3, #1
 8006786:	409a      	lsls	r2, r3
 8006788:	0013      	movs	r3, r2
 800678a:	693a      	ldr	r2, [r7, #16]
 800678c:	4313      	orrs	r3, r2
 800678e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	693a      	ldr	r2, [r7, #16]
 8006794:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8006796:	683b      	ldr	r3, [r7, #0]
 8006798:	685a      	ldr	r2, [r3, #4]
 800679a:	23c0      	movs	r3, #192	@ 0xc0
 800679c:	029b      	lsls	r3, r3, #10
 800679e:	4013      	ands	r3, r2
 80067a0:	d100      	bne.n	80067a4 <HAL_GPIO_Init+0x174>
 80067a2:	e092      	b.n	80068ca <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 80067a4:	4a50      	ldr	r2, [pc, #320]	@ (80068e8 <HAL_GPIO_Init+0x2b8>)
 80067a6:	697b      	ldr	r3, [r7, #20]
 80067a8:	089b      	lsrs	r3, r3, #2
 80067aa:	3318      	adds	r3, #24
 80067ac:	009b      	lsls	r3, r3, #2
 80067ae:	589b      	ldr	r3, [r3, r2]
 80067b0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 80067b2:	697b      	ldr	r3, [r7, #20]
 80067b4:	2203      	movs	r2, #3
 80067b6:	4013      	ands	r3, r2
 80067b8:	00db      	lsls	r3, r3, #3
 80067ba:	220f      	movs	r2, #15
 80067bc:	409a      	lsls	r2, r3
 80067be:	0013      	movs	r3, r2
 80067c0:	43da      	mvns	r2, r3
 80067c2:	693b      	ldr	r3, [r7, #16]
 80067c4:	4013      	ands	r3, r2
 80067c6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 80067c8:	687a      	ldr	r2, [r7, #4]
 80067ca:	23a0      	movs	r3, #160	@ 0xa0
 80067cc:	05db      	lsls	r3, r3, #23
 80067ce:	429a      	cmp	r2, r3
 80067d0:	d013      	beq.n	80067fa <HAL_GPIO_Init+0x1ca>
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	4a45      	ldr	r2, [pc, #276]	@ (80068ec <HAL_GPIO_Init+0x2bc>)
 80067d6:	4293      	cmp	r3, r2
 80067d8:	d00d      	beq.n	80067f6 <HAL_GPIO_Init+0x1c6>
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	4a44      	ldr	r2, [pc, #272]	@ (80068f0 <HAL_GPIO_Init+0x2c0>)
 80067de:	4293      	cmp	r3, r2
 80067e0:	d007      	beq.n	80067f2 <HAL_GPIO_Init+0x1c2>
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	4a43      	ldr	r2, [pc, #268]	@ (80068f4 <HAL_GPIO_Init+0x2c4>)
 80067e6:	4293      	cmp	r3, r2
 80067e8:	d101      	bne.n	80067ee <HAL_GPIO_Init+0x1be>
 80067ea:	2303      	movs	r3, #3
 80067ec:	e006      	b.n	80067fc <HAL_GPIO_Init+0x1cc>
 80067ee:	2305      	movs	r3, #5
 80067f0:	e004      	b.n	80067fc <HAL_GPIO_Init+0x1cc>
 80067f2:	2302      	movs	r3, #2
 80067f4:	e002      	b.n	80067fc <HAL_GPIO_Init+0x1cc>
 80067f6:	2301      	movs	r3, #1
 80067f8:	e000      	b.n	80067fc <HAL_GPIO_Init+0x1cc>
 80067fa:	2300      	movs	r3, #0
 80067fc:	697a      	ldr	r2, [r7, #20]
 80067fe:	2103      	movs	r1, #3
 8006800:	400a      	ands	r2, r1
 8006802:	00d2      	lsls	r2, r2, #3
 8006804:	4093      	lsls	r3, r2
 8006806:	693a      	ldr	r2, [r7, #16]
 8006808:	4313      	orrs	r3, r2
 800680a:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 800680c:	4936      	ldr	r1, [pc, #216]	@ (80068e8 <HAL_GPIO_Init+0x2b8>)
 800680e:	697b      	ldr	r3, [r7, #20]
 8006810:	089b      	lsrs	r3, r3, #2
 8006812:	3318      	adds	r3, #24
 8006814:	009b      	lsls	r3, r3, #2
 8006816:	693a      	ldr	r2, [r7, #16]
 8006818:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800681a:	4b33      	ldr	r3, [pc, #204]	@ (80068e8 <HAL_GPIO_Init+0x2b8>)
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	43da      	mvns	r2, r3
 8006824:	693b      	ldr	r3, [r7, #16]
 8006826:	4013      	ands	r3, r2
 8006828:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800682a:	683b      	ldr	r3, [r7, #0]
 800682c:	685a      	ldr	r2, [r3, #4]
 800682e:	2380      	movs	r3, #128	@ 0x80
 8006830:	035b      	lsls	r3, r3, #13
 8006832:	4013      	ands	r3, r2
 8006834:	d003      	beq.n	800683e <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8006836:	693a      	ldr	r2, [r7, #16]
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	4313      	orrs	r3, r2
 800683c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800683e:	4b2a      	ldr	r3, [pc, #168]	@ (80068e8 <HAL_GPIO_Init+0x2b8>)
 8006840:	693a      	ldr	r2, [r7, #16]
 8006842:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8006844:	4b28      	ldr	r3, [pc, #160]	@ (80068e8 <HAL_GPIO_Init+0x2b8>)
 8006846:	685b      	ldr	r3, [r3, #4]
 8006848:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	43da      	mvns	r2, r3
 800684e:	693b      	ldr	r3, [r7, #16]
 8006850:	4013      	ands	r3, r2
 8006852:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8006854:	683b      	ldr	r3, [r7, #0]
 8006856:	685a      	ldr	r2, [r3, #4]
 8006858:	2380      	movs	r3, #128	@ 0x80
 800685a:	039b      	lsls	r3, r3, #14
 800685c:	4013      	ands	r3, r2
 800685e:	d003      	beq.n	8006868 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8006860:	693a      	ldr	r2, [r7, #16]
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	4313      	orrs	r3, r2
 8006866:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8006868:	4b1f      	ldr	r3, [pc, #124]	@ (80068e8 <HAL_GPIO_Init+0x2b8>)
 800686a:	693a      	ldr	r2, [r7, #16]
 800686c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800686e:	4a1e      	ldr	r2, [pc, #120]	@ (80068e8 <HAL_GPIO_Init+0x2b8>)
 8006870:	2384      	movs	r3, #132	@ 0x84
 8006872:	58d3      	ldr	r3, [r2, r3]
 8006874:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	43da      	mvns	r2, r3
 800687a:	693b      	ldr	r3, [r7, #16]
 800687c:	4013      	ands	r3, r2
 800687e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8006880:	683b      	ldr	r3, [r7, #0]
 8006882:	685a      	ldr	r2, [r3, #4]
 8006884:	2380      	movs	r3, #128	@ 0x80
 8006886:	029b      	lsls	r3, r3, #10
 8006888:	4013      	ands	r3, r2
 800688a:	d003      	beq.n	8006894 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 800688c:	693a      	ldr	r2, [r7, #16]
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	4313      	orrs	r3, r2
 8006892:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8006894:	4914      	ldr	r1, [pc, #80]	@ (80068e8 <HAL_GPIO_Init+0x2b8>)
 8006896:	2284      	movs	r2, #132	@ 0x84
 8006898:	693b      	ldr	r3, [r7, #16]
 800689a:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 800689c:	4a12      	ldr	r2, [pc, #72]	@ (80068e8 <HAL_GPIO_Init+0x2b8>)
 800689e:	2380      	movs	r3, #128	@ 0x80
 80068a0:	58d3      	ldr	r3, [r2, r3]
 80068a2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	43da      	mvns	r2, r3
 80068a8:	693b      	ldr	r3, [r7, #16]
 80068aa:	4013      	ands	r3, r2
 80068ac:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80068ae:	683b      	ldr	r3, [r7, #0]
 80068b0:	685a      	ldr	r2, [r3, #4]
 80068b2:	2380      	movs	r3, #128	@ 0x80
 80068b4:	025b      	lsls	r3, r3, #9
 80068b6:	4013      	ands	r3, r2
 80068b8:	d003      	beq.n	80068c2 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 80068ba:	693a      	ldr	r2, [r7, #16]
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	4313      	orrs	r3, r2
 80068c0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80068c2:	4909      	ldr	r1, [pc, #36]	@ (80068e8 <HAL_GPIO_Init+0x2b8>)
 80068c4:	2280      	movs	r2, #128	@ 0x80
 80068c6:	693b      	ldr	r3, [r7, #16]
 80068c8:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 80068ca:	697b      	ldr	r3, [r7, #20]
 80068cc:	3301      	adds	r3, #1
 80068ce:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80068d0:	683b      	ldr	r3, [r7, #0]
 80068d2:	681a      	ldr	r2, [r3, #0]
 80068d4:	697b      	ldr	r3, [r7, #20]
 80068d6:	40da      	lsrs	r2, r3
 80068d8:	1e13      	subs	r3, r2, #0
 80068da:	d000      	beq.n	80068de <HAL_GPIO_Init+0x2ae>
 80068dc:	e6b0      	b.n	8006640 <HAL_GPIO_Init+0x10>
  }
}
 80068de:	46c0      	nop			@ (mov r8, r8)
 80068e0:	46c0      	nop			@ (mov r8, r8)
 80068e2:	46bd      	mov	sp, r7
 80068e4:	b006      	add	sp, #24
 80068e6:	bd80      	pop	{r7, pc}
 80068e8:	40021800 	.word	0x40021800
 80068ec:	50000400 	.word	0x50000400
 80068f0:	50000800 	.word	0x50000800
 80068f4:	50000c00 	.word	0x50000c00

080068f8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80068f8:	b580      	push	{r7, lr}
 80068fa:	b084      	sub	sp, #16
 80068fc:	af00      	add	r7, sp, #0
 80068fe:	6078      	str	r0, [r7, #4]
 8006900:	000a      	movs	r2, r1
 8006902:	1cbb      	adds	r3, r7, #2
 8006904:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	691b      	ldr	r3, [r3, #16]
 800690a:	1cba      	adds	r2, r7, #2
 800690c:	8812      	ldrh	r2, [r2, #0]
 800690e:	4013      	ands	r3, r2
 8006910:	d004      	beq.n	800691c <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8006912:	230f      	movs	r3, #15
 8006914:	18fb      	adds	r3, r7, r3
 8006916:	2201      	movs	r2, #1
 8006918:	701a      	strb	r2, [r3, #0]
 800691a:	e003      	b.n	8006924 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800691c:	230f      	movs	r3, #15
 800691e:	18fb      	adds	r3, r7, r3
 8006920:	2200      	movs	r2, #0
 8006922:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8006924:	230f      	movs	r3, #15
 8006926:	18fb      	adds	r3, r7, r3
 8006928:	781b      	ldrb	r3, [r3, #0]
}
 800692a:	0018      	movs	r0, r3
 800692c:	46bd      	mov	sp, r7
 800692e:	b004      	add	sp, #16
 8006930:	bd80      	pop	{r7, pc}

08006932 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006932:	b580      	push	{r7, lr}
 8006934:	b082      	sub	sp, #8
 8006936:	af00      	add	r7, sp, #0
 8006938:	6078      	str	r0, [r7, #4]
 800693a:	0008      	movs	r0, r1
 800693c:	0011      	movs	r1, r2
 800693e:	1cbb      	adds	r3, r7, #2
 8006940:	1c02      	adds	r2, r0, #0
 8006942:	801a      	strh	r2, [r3, #0]
 8006944:	1c7b      	adds	r3, r7, #1
 8006946:	1c0a      	adds	r2, r1, #0
 8006948:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800694a:	1c7b      	adds	r3, r7, #1
 800694c:	781b      	ldrb	r3, [r3, #0]
 800694e:	2b00      	cmp	r3, #0
 8006950:	d004      	beq.n	800695c <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8006952:	1cbb      	adds	r3, r7, #2
 8006954:	881a      	ldrh	r2, [r3, #0]
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800695a:	e003      	b.n	8006964 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800695c:	1cbb      	adds	r3, r7, #2
 800695e:	881a      	ldrh	r2, [r3, #0]
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8006964:	46c0      	nop			@ (mov r8, r8)
 8006966:	46bd      	mov	sp, r7
 8006968:	b002      	add	sp, #8
 800696a:	bd80      	pop	{r7, pc}

0800696c <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800696c:	b580      	push	{r7, lr}
 800696e:	b084      	sub	sp, #16
 8006970:	af00      	add	r7, sp, #0
 8006972:	6078      	str	r0, [r7, #4]
 8006974:	000a      	movs	r2, r1
 8006976:	1cbb      	adds	r3, r7, #2
 8006978:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	695b      	ldr	r3, [r3, #20]
 800697e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8006980:	1cbb      	adds	r3, r7, #2
 8006982:	881b      	ldrh	r3, [r3, #0]
 8006984:	68fa      	ldr	r2, [r7, #12]
 8006986:	4013      	ands	r3, r2
 8006988:	041a      	lsls	r2, r3, #16
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	43db      	mvns	r3, r3
 800698e:	1cb9      	adds	r1, r7, #2
 8006990:	8809      	ldrh	r1, [r1, #0]
 8006992:	400b      	ands	r3, r1
 8006994:	431a      	orrs	r2, r3
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	619a      	str	r2, [r3, #24]
}
 800699a:	46c0      	nop			@ (mov r8, r8)
 800699c:	46bd      	mov	sp, r7
 800699e:	b004      	add	sp, #16
 80069a0:	bd80      	pop	{r7, pc}
	...

080069a4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80069a4:	b580      	push	{r7, lr}
 80069a6:	b084      	sub	sp, #16
 80069a8:	af00      	add	r7, sp, #0
 80069aa:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80069ac:	4b19      	ldr	r3, [pc, #100]	@ (8006a14 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	4a19      	ldr	r2, [pc, #100]	@ (8006a18 <HAL_PWREx_ControlVoltageScaling+0x74>)
 80069b2:	4013      	ands	r3, r2
 80069b4:	0019      	movs	r1, r3
 80069b6:	4b17      	ldr	r3, [pc, #92]	@ (8006a14 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80069b8:	687a      	ldr	r2, [r7, #4]
 80069ba:	430a      	orrs	r2, r1
 80069bc:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80069be:	687a      	ldr	r2, [r7, #4]
 80069c0:	2380      	movs	r3, #128	@ 0x80
 80069c2:	009b      	lsls	r3, r3, #2
 80069c4:	429a      	cmp	r2, r3
 80069c6:	d11f      	bne.n	8006a08 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 80069c8:	4b14      	ldr	r3, [pc, #80]	@ (8006a1c <HAL_PWREx_ControlVoltageScaling+0x78>)
 80069ca:	681a      	ldr	r2, [r3, #0]
 80069cc:	0013      	movs	r3, r2
 80069ce:	005b      	lsls	r3, r3, #1
 80069d0:	189b      	adds	r3, r3, r2
 80069d2:	005b      	lsls	r3, r3, #1
 80069d4:	4912      	ldr	r1, [pc, #72]	@ (8006a20 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 80069d6:	0018      	movs	r0, r3
 80069d8:	f7f9 fbae 	bl	8000138 <__udivsi3>
 80069dc:	0003      	movs	r3, r0
 80069de:	3301      	adds	r3, #1
 80069e0:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80069e2:	e008      	b.n	80069f6 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d003      	beq.n	80069f2 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	3b01      	subs	r3, #1
 80069ee:	60fb      	str	r3, [r7, #12]
 80069f0:	e001      	b.n	80069f6 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 80069f2:	2303      	movs	r3, #3
 80069f4:	e009      	b.n	8006a0a <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80069f6:	4b07      	ldr	r3, [pc, #28]	@ (8006a14 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80069f8:	695a      	ldr	r2, [r3, #20]
 80069fa:	2380      	movs	r3, #128	@ 0x80
 80069fc:	00db      	lsls	r3, r3, #3
 80069fe:	401a      	ands	r2, r3
 8006a00:	2380      	movs	r3, #128	@ 0x80
 8006a02:	00db      	lsls	r3, r3, #3
 8006a04:	429a      	cmp	r2, r3
 8006a06:	d0ed      	beq.n	80069e4 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8006a08:	2300      	movs	r3, #0
}
 8006a0a:	0018      	movs	r0, r3
 8006a0c:	46bd      	mov	sp, r7
 8006a0e:	b004      	add	sp, #16
 8006a10:	bd80      	pop	{r7, pc}
 8006a12:	46c0      	nop			@ (mov r8, r8)
 8006a14:	40007000 	.word	0x40007000
 8006a18:	fffff9ff 	.word	0xfffff9ff
 8006a1c:	20000008 	.word	0x20000008
 8006a20:	000f4240 	.word	0x000f4240

08006a24 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006a24:	b580      	push	{r7, lr}
 8006a26:	b088      	sub	sp, #32
 8006a28:	af00      	add	r7, sp, #0
 8006a2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d101      	bne.n	8006a36 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006a32:	2301      	movs	r3, #1
 8006a34:	e2f3      	b.n	800701e <HAL_RCC_OscConfig+0x5fa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	2201      	movs	r2, #1
 8006a3c:	4013      	ands	r3, r2
 8006a3e:	d100      	bne.n	8006a42 <HAL_RCC_OscConfig+0x1e>
 8006a40:	e07c      	b.n	8006b3c <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006a42:	4bc3      	ldr	r3, [pc, #780]	@ (8006d50 <HAL_RCC_OscConfig+0x32c>)
 8006a44:	689b      	ldr	r3, [r3, #8]
 8006a46:	2238      	movs	r2, #56	@ 0x38
 8006a48:	4013      	ands	r3, r2
 8006a4a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006a4c:	4bc0      	ldr	r3, [pc, #768]	@ (8006d50 <HAL_RCC_OscConfig+0x32c>)
 8006a4e:	68db      	ldr	r3, [r3, #12]
 8006a50:	2203      	movs	r2, #3
 8006a52:	4013      	ands	r3, r2
 8006a54:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8006a56:	69bb      	ldr	r3, [r7, #24]
 8006a58:	2b10      	cmp	r3, #16
 8006a5a:	d102      	bne.n	8006a62 <HAL_RCC_OscConfig+0x3e>
 8006a5c:	697b      	ldr	r3, [r7, #20]
 8006a5e:	2b03      	cmp	r3, #3
 8006a60:	d002      	beq.n	8006a68 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8006a62:	69bb      	ldr	r3, [r7, #24]
 8006a64:	2b08      	cmp	r3, #8
 8006a66:	d10b      	bne.n	8006a80 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006a68:	4bb9      	ldr	r3, [pc, #740]	@ (8006d50 <HAL_RCC_OscConfig+0x32c>)
 8006a6a:	681a      	ldr	r2, [r3, #0]
 8006a6c:	2380      	movs	r3, #128	@ 0x80
 8006a6e:	029b      	lsls	r3, r3, #10
 8006a70:	4013      	ands	r3, r2
 8006a72:	d062      	beq.n	8006b3a <HAL_RCC_OscConfig+0x116>
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	685b      	ldr	r3, [r3, #4]
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d15e      	bne.n	8006b3a <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8006a7c:	2301      	movs	r3, #1
 8006a7e:	e2ce      	b.n	800701e <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	685a      	ldr	r2, [r3, #4]
 8006a84:	2380      	movs	r3, #128	@ 0x80
 8006a86:	025b      	lsls	r3, r3, #9
 8006a88:	429a      	cmp	r2, r3
 8006a8a:	d107      	bne.n	8006a9c <HAL_RCC_OscConfig+0x78>
 8006a8c:	4bb0      	ldr	r3, [pc, #704]	@ (8006d50 <HAL_RCC_OscConfig+0x32c>)
 8006a8e:	681a      	ldr	r2, [r3, #0]
 8006a90:	4baf      	ldr	r3, [pc, #700]	@ (8006d50 <HAL_RCC_OscConfig+0x32c>)
 8006a92:	2180      	movs	r1, #128	@ 0x80
 8006a94:	0249      	lsls	r1, r1, #9
 8006a96:	430a      	orrs	r2, r1
 8006a98:	601a      	str	r2, [r3, #0]
 8006a9a:	e020      	b.n	8006ade <HAL_RCC_OscConfig+0xba>
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	685a      	ldr	r2, [r3, #4]
 8006aa0:	23a0      	movs	r3, #160	@ 0xa0
 8006aa2:	02db      	lsls	r3, r3, #11
 8006aa4:	429a      	cmp	r2, r3
 8006aa6:	d10e      	bne.n	8006ac6 <HAL_RCC_OscConfig+0xa2>
 8006aa8:	4ba9      	ldr	r3, [pc, #676]	@ (8006d50 <HAL_RCC_OscConfig+0x32c>)
 8006aaa:	681a      	ldr	r2, [r3, #0]
 8006aac:	4ba8      	ldr	r3, [pc, #672]	@ (8006d50 <HAL_RCC_OscConfig+0x32c>)
 8006aae:	2180      	movs	r1, #128	@ 0x80
 8006ab0:	02c9      	lsls	r1, r1, #11
 8006ab2:	430a      	orrs	r2, r1
 8006ab4:	601a      	str	r2, [r3, #0]
 8006ab6:	4ba6      	ldr	r3, [pc, #664]	@ (8006d50 <HAL_RCC_OscConfig+0x32c>)
 8006ab8:	681a      	ldr	r2, [r3, #0]
 8006aba:	4ba5      	ldr	r3, [pc, #660]	@ (8006d50 <HAL_RCC_OscConfig+0x32c>)
 8006abc:	2180      	movs	r1, #128	@ 0x80
 8006abe:	0249      	lsls	r1, r1, #9
 8006ac0:	430a      	orrs	r2, r1
 8006ac2:	601a      	str	r2, [r3, #0]
 8006ac4:	e00b      	b.n	8006ade <HAL_RCC_OscConfig+0xba>
 8006ac6:	4ba2      	ldr	r3, [pc, #648]	@ (8006d50 <HAL_RCC_OscConfig+0x32c>)
 8006ac8:	681a      	ldr	r2, [r3, #0]
 8006aca:	4ba1      	ldr	r3, [pc, #644]	@ (8006d50 <HAL_RCC_OscConfig+0x32c>)
 8006acc:	49a1      	ldr	r1, [pc, #644]	@ (8006d54 <HAL_RCC_OscConfig+0x330>)
 8006ace:	400a      	ands	r2, r1
 8006ad0:	601a      	str	r2, [r3, #0]
 8006ad2:	4b9f      	ldr	r3, [pc, #636]	@ (8006d50 <HAL_RCC_OscConfig+0x32c>)
 8006ad4:	681a      	ldr	r2, [r3, #0]
 8006ad6:	4b9e      	ldr	r3, [pc, #632]	@ (8006d50 <HAL_RCC_OscConfig+0x32c>)
 8006ad8:	499f      	ldr	r1, [pc, #636]	@ (8006d58 <HAL_RCC_OscConfig+0x334>)
 8006ada:	400a      	ands	r2, r1
 8006adc:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	685b      	ldr	r3, [r3, #4]
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d014      	beq.n	8006b10 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ae6:	f7fe fe97 	bl	8005818 <HAL_GetTick>
 8006aea:	0003      	movs	r3, r0
 8006aec:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006aee:	e008      	b.n	8006b02 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006af0:	f7fe fe92 	bl	8005818 <HAL_GetTick>
 8006af4:	0002      	movs	r2, r0
 8006af6:	693b      	ldr	r3, [r7, #16]
 8006af8:	1ad3      	subs	r3, r2, r3
 8006afa:	2b64      	cmp	r3, #100	@ 0x64
 8006afc:	d901      	bls.n	8006b02 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8006afe:	2303      	movs	r3, #3
 8006b00:	e28d      	b.n	800701e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006b02:	4b93      	ldr	r3, [pc, #588]	@ (8006d50 <HAL_RCC_OscConfig+0x32c>)
 8006b04:	681a      	ldr	r2, [r3, #0]
 8006b06:	2380      	movs	r3, #128	@ 0x80
 8006b08:	029b      	lsls	r3, r3, #10
 8006b0a:	4013      	ands	r3, r2
 8006b0c:	d0f0      	beq.n	8006af0 <HAL_RCC_OscConfig+0xcc>
 8006b0e:	e015      	b.n	8006b3c <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b10:	f7fe fe82 	bl	8005818 <HAL_GetTick>
 8006b14:	0003      	movs	r3, r0
 8006b16:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006b18:	e008      	b.n	8006b2c <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006b1a:	f7fe fe7d 	bl	8005818 <HAL_GetTick>
 8006b1e:	0002      	movs	r2, r0
 8006b20:	693b      	ldr	r3, [r7, #16]
 8006b22:	1ad3      	subs	r3, r2, r3
 8006b24:	2b64      	cmp	r3, #100	@ 0x64
 8006b26:	d901      	bls.n	8006b2c <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8006b28:	2303      	movs	r3, #3
 8006b2a:	e278      	b.n	800701e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006b2c:	4b88      	ldr	r3, [pc, #544]	@ (8006d50 <HAL_RCC_OscConfig+0x32c>)
 8006b2e:	681a      	ldr	r2, [r3, #0]
 8006b30:	2380      	movs	r3, #128	@ 0x80
 8006b32:	029b      	lsls	r3, r3, #10
 8006b34:	4013      	ands	r3, r2
 8006b36:	d1f0      	bne.n	8006b1a <HAL_RCC_OscConfig+0xf6>
 8006b38:	e000      	b.n	8006b3c <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006b3a:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	2202      	movs	r2, #2
 8006b42:	4013      	ands	r3, r2
 8006b44:	d100      	bne.n	8006b48 <HAL_RCC_OscConfig+0x124>
 8006b46:	e099      	b.n	8006c7c <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006b48:	4b81      	ldr	r3, [pc, #516]	@ (8006d50 <HAL_RCC_OscConfig+0x32c>)
 8006b4a:	689b      	ldr	r3, [r3, #8]
 8006b4c:	2238      	movs	r2, #56	@ 0x38
 8006b4e:	4013      	ands	r3, r2
 8006b50:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006b52:	4b7f      	ldr	r3, [pc, #508]	@ (8006d50 <HAL_RCC_OscConfig+0x32c>)
 8006b54:	68db      	ldr	r3, [r3, #12]
 8006b56:	2203      	movs	r2, #3
 8006b58:	4013      	ands	r3, r2
 8006b5a:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8006b5c:	69bb      	ldr	r3, [r7, #24]
 8006b5e:	2b10      	cmp	r3, #16
 8006b60:	d102      	bne.n	8006b68 <HAL_RCC_OscConfig+0x144>
 8006b62:	697b      	ldr	r3, [r7, #20]
 8006b64:	2b02      	cmp	r3, #2
 8006b66:	d002      	beq.n	8006b6e <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8006b68:	69bb      	ldr	r3, [r7, #24]
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d135      	bne.n	8006bda <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006b6e:	4b78      	ldr	r3, [pc, #480]	@ (8006d50 <HAL_RCC_OscConfig+0x32c>)
 8006b70:	681a      	ldr	r2, [r3, #0]
 8006b72:	2380      	movs	r3, #128	@ 0x80
 8006b74:	00db      	lsls	r3, r3, #3
 8006b76:	4013      	ands	r3, r2
 8006b78:	d005      	beq.n	8006b86 <HAL_RCC_OscConfig+0x162>
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	68db      	ldr	r3, [r3, #12]
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d101      	bne.n	8006b86 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8006b82:	2301      	movs	r3, #1
 8006b84:	e24b      	b.n	800701e <HAL_RCC_OscConfig+0x5fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006b86:	4b72      	ldr	r3, [pc, #456]	@ (8006d50 <HAL_RCC_OscConfig+0x32c>)
 8006b88:	685b      	ldr	r3, [r3, #4]
 8006b8a:	4a74      	ldr	r2, [pc, #464]	@ (8006d5c <HAL_RCC_OscConfig+0x338>)
 8006b8c:	4013      	ands	r3, r2
 8006b8e:	0019      	movs	r1, r3
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	695b      	ldr	r3, [r3, #20]
 8006b94:	021a      	lsls	r2, r3, #8
 8006b96:	4b6e      	ldr	r3, [pc, #440]	@ (8006d50 <HAL_RCC_OscConfig+0x32c>)
 8006b98:	430a      	orrs	r2, r1
 8006b9a:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006b9c:	69bb      	ldr	r3, [r7, #24]
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d112      	bne.n	8006bc8 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8006ba2:	4b6b      	ldr	r3, [pc, #428]	@ (8006d50 <HAL_RCC_OscConfig+0x32c>)
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	4a6e      	ldr	r2, [pc, #440]	@ (8006d60 <HAL_RCC_OscConfig+0x33c>)
 8006ba8:	4013      	ands	r3, r2
 8006baa:	0019      	movs	r1, r3
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	691a      	ldr	r2, [r3, #16]
 8006bb0:	4b67      	ldr	r3, [pc, #412]	@ (8006d50 <HAL_RCC_OscConfig+0x32c>)
 8006bb2:	430a      	orrs	r2, r1
 8006bb4:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8006bb6:	4b66      	ldr	r3, [pc, #408]	@ (8006d50 <HAL_RCC_OscConfig+0x32c>)
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	0adb      	lsrs	r3, r3, #11
 8006bbc:	2207      	movs	r2, #7
 8006bbe:	4013      	ands	r3, r2
 8006bc0:	4a68      	ldr	r2, [pc, #416]	@ (8006d64 <HAL_RCC_OscConfig+0x340>)
 8006bc2:	40da      	lsrs	r2, r3
 8006bc4:	4b68      	ldr	r3, [pc, #416]	@ (8006d68 <HAL_RCC_OscConfig+0x344>)
 8006bc6:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8006bc8:	4b68      	ldr	r3, [pc, #416]	@ (8006d6c <HAL_RCC_OscConfig+0x348>)
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	0018      	movs	r0, r3
 8006bce:	f7fe fdc7 	bl	8005760 <HAL_InitTick>
 8006bd2:	1e03      	subs	r3, r0, #0
 8006bd4:	d051      	beq.n	8006c7a <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8006bd6:	2301      	movs	r3, #1
 8006bd8:	e221      	b.n	800701e <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	68db      	ldr	r3, [r3, #12]
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d030      	beq.n	8006c44 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8006be2:	4b5b      	ldr	r3, [pc, #364]	@ (8006d50 <HAL_RCC_OscConfig+0x32c>)
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	4a5e      	ldr	r2, [pc, #376]	@ (8006d60 <HAL_RCC_OscConfig+0x33c>)
 8006be8:	4013      	ands	r3, r2
 8006bea:	0019      	movs	r1, r3
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	691a      	ldr	r2, [r3, #16]
 8006bf0:	4b57      	ldr	r3, [pc, #348]	@ (8006d50 <HAL_RCC_OscConfig+0x32c>)
 8006bf2:	430a      	orrs	r2, r1
 8006bf4:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8006bf6:	4b56      	ldr	r3, [pc, #344]	@ (8006d50 <HAL_RCC_OscConfig+0x32c>)
 8006bf8:	681a      	ldr	r2, [r3, #0]
 8006bfa:	4b55      	ldr	r3, [pc, #340]	@ (8006d50 <HAL_RCC_OscConfig+0x32c>)
 8006bfc:	2180      	movs	r1, #128	@ 0x80
 8006bfe:	0049      	lsls	r1, r1, #1
 8006c00:	430a      	orrs	r2, r1
 8006c02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c04:	f7fe fe08 	bl	8005818 <HAL_GetTick>
 8006c08:	0003      	movs	r3, r0
 8006c0a:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006c0c:	e008      	b.n	8006c20 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006c0e:	f7fe fe03 	bl	8005818 <HAL_GetTick>
 8006c12:	0002      	movs	r2, r0
 8006c14:	693b      	ldr	r3, [r7, #16]
 8006c16:	1ad3      	subs	r3, r2, r3
 8006c18:	2b02      	cmp	r3, #2
 8006c1a:	d901      	bls.n	8006c20 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8006c1c:	2303      	movs	r3, #3
 8006c1e:	e1fe      	b.n	800701e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006c20:	4b4b      	ldr	r3, [pc, #300]	@ (8006d50 <HAL_RCC_OscConfig+0x32c>)
 8006c22:	681a      	ldr	r2, [r3, #0]
 8006c24:	2380      	movs	r3, #128	@ 0x80
 8006c26:	00db      	lsls	r3, r3, #3
 8006c28:	4013      	ands	r3, r2
 8006c2a:	d0f0      	beq.n	8006c0e <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006c2c:	4b48      	ldr	r3, [pc, #288]	@ (8006d50 <HAL_RCC_OscConfig+0x32c>)
 8006c2e:	685b      	ldr	r3, [r3, #4]
 8006c30:	4a4a      	ldr	r2, [pc, #296]	@ (8006d5c <HAL_RCC_OscConfig+0x338>)
 8006c32:	4013      	ands	r3, r2
 8006c34:	0019      	movs	r1, r3
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	695b      	ldr	r3, [r3, #20]
 8006c3a:	021a      	lsls	r2, r3, #8
 8006c3c:	4b44      	ldr	r3, [pc, #272]	@ (8006d50 <HAL_RCC_OscConfig+0x32c>)
 8006c3e:	430a      	orrs	r2, r1
 8006c40:	605a      	str	r2, [r3, #4]
 8006c42:	e01b      	b.n	8006c7c <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8006c44:	4b42      	ldr	r3, [pc, #264]	@ (8006d50 <HAL_RCC_OscConfig+0x32c>)
 8006c46:	681a      	ldr	r2, [r3, #0]
 8006c48:	4b41      	ldr	r3, [pc, #260]	@ (8006d50 <HAL_RCC_OscConfig+0x32c>)
 8006c4a:	4949      	ldr	r1, [pc, #292]	@ (8006d70 <HAL_RCC_OscConfig+0x34c>)
 8006c4c:	400a      	ands	r2, r1
 8006c4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c50:	f7fe fde2 	bl	8005818 <HAL_GetTick>
 8006c54:	0003      	movs	r3, r0
 8006c56:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006c58:	e008      	b.n	8006c6c <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006c5a:	f7fe fddd 	bl	8005818 <HAL_GetTick>
 8006c5e:	0002      	movs	r2, r0
 8006c60:	693b      	ldr	r3, [r7, #16]
 8006c62:	1ad3      	subs	r3, r2, r3
 8006c64:	2b02      	cmp	r3, #2
 8006c66:	d901      	bls.n	8006c6c <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8006c68:	2303      	movs	r3, #3
 8006c6a:	e1d8      	b.n	800701e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006c6c:	4b38      	ldr	r3, [pc, #224]	@ (8006d50 <HAL_RCC_OscConfig+0x32c>)
 8006c6e:	681a      	ldr	r2, [r3, #0]
 8006c70:	2380      	movs	r3, #128	@ 0x80
 8006c72:	00db      	lsls	r3, r3, #3
 8006c74:	4013      	ands	r3, r2
 8006c76:	d1f0      	bne.n	8006c5a <HAL_RCC_OscConfig+0x236>
 8006c78:	e000      	b.n	8006c7c <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006c7a:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	2208      	movs	r2, #8
 8006c82:	4013      	ands	r3, r2
 8006c84:	d047      	beq.n	8006d16 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8006c86:	4b32      	ldr	r3, [pc, #200]	@ (8006d50 <HAL_RCC_OscConfig+0x32c>)
 8006c88:	689b      	ldr	r3, [r3, #8]
 8006c8a:	2238      	movs	r2, #56	@ 0x38
 8006c8c:	4013      	ands	r3, r2
 8006c8e:	2b18      	cmp	r3, #24
 8006c90:	d10a      	bne.n	8006ca8 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8006c92:	4b2f      	ldr	r3, [pc, #188]	@ (8006d50 <HAL_RCC_OscConfig+0x32c>)
 8006c94:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006c96:	2202      	movs	r2, #2
 8006c98:	4013      	ands	r3, r2
 8006c9a:	d03c      	beq.n	8006d16 <HAL_RCC_OscConfig+0x2f2>
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	699b      	ldr	r3, [r3, #24]
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d138      	bne.n	8006d16 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8006ca4:	2301      	movs	r3, #1
 8006ca6:	e1ba      	b.n	800701e <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	699b      	ldr	r3, [r3, #24]
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d019      	beq.n	8006ce4 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8006cb0:	4b27      	ldr	r3, [pc, #156]	@ (8006d50 <HAL_RCC_OscConfig+0x32c>)
 8006cb2:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8006cb4:	4b26      	ldr	r3, [pc, #152]	@ (8006d50 <HAL_RCC_OscConfig+0x32c>)
 8006cb6:	2101      	movs	r1, #1
 8006cb8:	430a      	orrs	r2, r1
 8006cba:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006cbc:	f7fe fdac 	bl	8005818 <HAL_GetTick>
 8006cc0:	0003      	movs	r3, r0
 8006cc2:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006cc4:	e008      	b.n	8006cd8 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006cc6:	f7fe fda7 	bl	8005818 <HAL_GetTick>
 8006cca:	0002      	movs	r2, r0
 8006ccc:	693b      	ldr	r3, [r7, #16]
 8006cce:	1ad3      	subs	r3, r2, r3
 8006cd0:	2b02      	cmp	r3, #2
 8006cd2:	d901      	bls.n	8006cd8 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8006cd4:	2303      	movs	r3, #3
 8006cd6:	e1a2      	b.n	800701e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006cd8:	4b1d      	ldr	r3, [pc, #116]	@ (8006d50 <HAL_RCC_OscConfig+0x32c>)
 8006cda:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006cdc:	2202      	movs	r2, #2
 8006cde:	4013      	ands	r3, r2
 8006ce0:	d0f1      	beq.n	8006cc6 <HAL_RCC_OscConfig+0x2a2>
 8006ce2:	e018      	b.n	8006d16 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8006ce4:	4b1a      	ldr	r3, [pc, #104]	@ (8006d50 <HAL_RCC_OscConfig+0x32c>)
 8006ce6:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8006ce8:	4b19      	ldr	r3, [pc, #100]	@ (8006d50 <HAL_RCC_OscConfig+0x32c>)
 8006cea:	2101      	movs	r1, #1
 8006cec:	438a      	bics	r2, r1
 8006cee:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006cf0:	f7fe fd92 	bl	8005818 <HAL_GetTick>
 8006cf4:	0003      	movs	r3, r0
 8006cf6:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006cf8:	e008      	b.n	8006d0c <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006cfa:	f7fe fd8d 	bl	8005818 <HAL_GetTick>
 8006cfe:	0002      	movs	r2, r0
 8006d00:	693b      	ldr	r3, [r7, #16]
 8006d02:	1ad3      	subs	r3, r2, r3
 8006d04:	2b02      	cmp	r3, #2
 8006d06:	d901      	bls.n	8006d0c <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8006d08:	2303      	movs	r3, #3
 8006d0a:	e188      	b.n	800701e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006d0c:	4b10      	ldr	r3, [pc, #64]	@ (8006d50 <HAL_RCC_OscConfig+0x32c>)
 8006d0e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006d10:	2202      	movs	r2, #2
 8006d12:	4013      	ands	r3, r2
 8006d14:	d1f1      	bne.n	8006cfa <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	2204      	movs	r2, #4
 8006d1c:	4013      	ands	r3, r2
 8006d1e:	d100      	bne.n	8006d22 <HAL_RCC_OscConfig+0x2fe>
 8006d20:	e0c6      	b.n	8006eb0 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006d22:	231f      	movs	r3, #31
 8006d24:	18fb      	adds	r3, r7, r3
 8006d26:	2200      	movs	r2, #0
 8006d28:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8006d2a:	4b09      	ldr	r3, [pc, #36]	@ (8006d50 <HAL_RCC_OscConfig+0x32c>)
 8006d2c:	689b      	ldr	r3, [r3, #8]
 8006d2e:	2238      	movs	r2, #56	@ 0x38
 8006d30:	4013      	ands	r3, r2
 8006d32:	2b20      	cmp	r3, #32
 8006d34:	d11e      	bne.n	8006d74 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8006d36:	4b06      	ldr	r3, [pc, #24]	@ (8006d50 <HAL_RCC_OscConfig+0x32c>)
 8006d38:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006d3a:	2202      	movs	r2, #2
 8006d3c:	4013      	ands	r3, r2
 8006d3e:	d100      	bne.n	8006d42 <HAL_RCC_OscConfig+0x31e>
 8006d40:	e0b6      	b.n	8006eb0 <HAL_RCC_OscConfig+0x48c>
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	689b      	ldr	r3, [r3, #8]
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d000      	beq.n	8006d4c <HAL_RCC_OscConfig+0x328>
 8006d4a:	e0b1      	b.n	8006eb0 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8006d4c:	2301      	movs	r3, #1
 8006d4e:	e166      	b.n	800701e <HAL_RCC_OscConfig+0x5fa>
 8006d50:	40021000 	.word	0x40021000
 8006d54:	fffeffff 	.word	0xfffeffff
 8006d58:	fffbffff 	.word	0xfffbffff
 8006d5c:	ffff80ff 	.word	0xffff80ff
 8006d60:	ffffc7ff 	.word	0xffffc7ff
 8006d64:	00f42400 	.word	0x00f42400
 8006d68:	20000008 	.word	0x20000008
 8006d6c:	2000000c 	.word	0x2000000c
 8006d70:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8006d74:	4bac      	ldr	r3, [pc, #688]	@ (8007028 <HAL_RCC_OscConfig+0x604>)
 8006d76:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006d78:	2380      	movs	r3, #128	@ 0x80
 8006d7a:	055b      	lsls	r3, r3, #21
 8006d7c:	4013      	ands	r3, r2
 8006d7e:	d101      	bne.n	8006d84 <HAL_RCC_OscConfig+0x360>
 8006d80:	2301      	movs	r3, #1
 8006d82:	e000      	b.n	8006d86 <HAL_RCC_OscConfig+0x362>
 8006d84:	2300      	movs	r3, #0
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d011      	beq.n	8006dae <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8006d8a:	4ba7      	ldr	r3, [pc, #668]	@ (8007028 <HAL_RCC_OscConfig+0x604>)
 8006d8c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006d8e:	4ba6      	ldr	r3, [pc, #664]	@ (8007028 <HAL_RCC_OscConfig+0x604>)
 8006d90:	2180      	movs	r1, #128	@ 0x80
 8006d92:	0549      	lsls	r1, r1, #21
 8006d94:	430a      	orrs	r2, r1
 8006d96:	63da      	str	r2, [r3, #60]	@ 0x3c
 8006d98:	4ba3      	ldr	r3, [pc, #652]	@ (8007028 <HAL_RCC_OscConfig+0x604>)
 8006d9a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006d9c:	2380      	movs	r3, #128	@ 0x80
 8006d9e:	055b      	lsls	r3, r3, #21
 8006da0:	4013      	ands	r3, r2
 8006da2:	60fb      	str	r3, [r7, #12]
 8006da4:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8006da6:	231f      	movs	r3, #31
 8006da8:	18fb      	adds	r3, r7, r3
 8006daa:	2201      	movs	r2, #1
 8006dac:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006dae:	4b9f      	ldr	r3, [pc, #636]	@ (800702c <HAL_RCC_OscConfig+0x608>)
 8006db0:	681a      	ldr	r2, [r3, #0]
 8006db2:	2380      	movs	r3, #128	@ 0x80
 8006db4:	005b      	lsls	r3, r3, #1
 8006db6:	4013      	ands	r3, r2
 8006db8:	d11a      	bne.n	8006df0 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006dba:	4b9c      	ldr	r3, [pc, #624]	@ (800702c <HAL_RCC_OscConfig+0x608>)
 8006dbc:	681a      	ldr	r2, [r3, #0]
 8006dbe:	4b9b      	ldr	r3, [pc, #620]	@ (800702c <HAL_RCC_OscConfig+0x608>)
 8006dc0:	2180      	movs	r1, #128	@ 0x80
 8006dc2:	0049      	lsls	r1, r1, #1
 8006dc4:	430a      	orrs	r2, r1
 8006dc6:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8006dc8:	f7fe fd26 	bl	8005818 <HAL_GetTick>
 8006dcc:	0003      	movs	r3, r0
 8006dce:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006dd0:	e008      	b.n	8006de4 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006dd2:	f7fe fd21 	bl	8005818 <HAL_GetTick>
 8006dd6:	0002      	movs	r2, r0
 8006dd8:	693b      	ldr	r3, [r7, #16]
 8006dda:	1ad3      	subs	r3, r2, r3
 8006ddc:	2b02      	cmp	r3, #2
 8006dde:	d901      	bls.n	8006de4 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8006de0:	2303      	movs	r3, #3
 8006de2:	e11c      	b.n	800701e <HAL_RCC_OscConfig+0x5fa>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006de4:	4b91      	ldr	r3, [pc, #580]	@ (800702c <HAL_RCC_OscConfig+0x608>)
 8006de6:	681a      	ldr	r2, [r3, #0]
 8006de8:	2380      	movs	r3, #128	@ 0x80
 8006dea:	005b      	lsls	r3, r3, #1
 8006dec:	4013      	ands	r3, r2
 8006dee:	d0f0      	beq.n	8006dd2 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	689b      	ldr	r3, [r3, #8]
 8006df4:	2b01      	cmp	r3, #1
 8006df6:	d106      	bne.n	8006e06 <HAL_RCC_OscConfig+0x3e2>
 8006df8:	4b8b      	ldr	r3, [pc, #556]	@ (8007028 <HAL_RCC_OscConfig+0x604>)
 8006dfa:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8006dfc:	4b8a      	ldr	r3, [pc, #552]	@ (8007028 <HAL_RCC_OscConfig+0x604>)
 8006dfe:	2101      	movs	r1, #1
 8006e00:	430a      	orrs	r2, r1
 8006e02:	65da      	str	r2, [r3, #92]	@ 0x5c
 8006e04:	e01c      	b.n	8006e40 <HAL_RCC_OscConfig+0x41c>
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	689b      	ldr	r3, [r3, #8]
 8006e0a:	2b05      	cmp	r3, #5
 8006e0c:	d10c      	bne.n	8006e28 <HAL_RCC_OscConfig+0x404>
 8006e0e:	4b86      	ldr	r3, [pc, #536]	@ (8007028 <HAL_RCC_OscConfig+0x604>)
 8006e10:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8006e12:	4b85      	ldr	r3, [pc, #532]	@ (8007028 <HAL_RCC_OscConfig+0x604>)
 8006e14:	2104      	movs	r1, #4
 8006e16:	430a      	orrs	r2, r1
 8006e18:	65da      	str	r2, [r3, #92]	@ 0x5c
 8006e1a:	4b83      	ldr	r3, [pc, #524]	@ (8007028 <HAL_RCC_OscConfig+0x604>)
 8006e1c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8006e1e:	4b82      	ldr	r3, [pc, #520]	@ (8007028 <HAL_RCC_OscConfig+0x604>)
 8006e20:	2101      	movs	r1, #1
 8006e22:	430a      	orrs	r2, r1
 8006e24:	65da      	str	r2, [r3, #92]	@ 0x5c
 8006e26:	e00b      	b.n	8006e40 <HAL_RCC_OscConfig+0x41c>
 8006e28:	4b7f      	ldr	r3, [pc, #508]	@ (8007028 <HAL_RCC_OscConfig+0x604>)
 8006e2a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8006e2c:	4b7e      	ldr	r3, [pc, #504]	@ (8007028 <HAL_RCC_OscConfig+0x604>)
 8006e2e:	2101      	movs	r1, #1
 8006e30:	438a      	bics	r2, r1
 8006e32:	65da      	str	r2, [r3, #92]	@ 0x5c
 8006e34:	4b7c      	ldr	r3, [pc, #496]	@ (8007028 <HAL_RCC_OscConfig+0x604>)
 8006e36:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8006e38:	4b7b      	ldr	r3, [pc, #492]	@ (8007028 <HAL_RCC_OscConfig+0x604>)
 8006e3a:	2104      	movs	r1, #4
 8006e3c:	438a      	bics	r2, r1
 8006e3e:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	689b      	ldr	r3, [r3, #8]
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d014      	beq.n	8006e72 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e48:	f7fe fce6 	bl	8005818 <HAL_GetTick>
 8006e4c:	0003      	movs	r3, r0
 8006e4e:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006e50:	e009      	b.n	8006e66 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006e52:	f7fe fce1 	bl	8005818 <HAL_GetTick>
 8006e56:	0002      	movs	r2, r0
 8006e58:	693b      	ldr	r3, [r7, #16]
 8006e5a:	1ad3      	subs	r3, r2, r3
 8006e5c:	4a74      	ldr	r2, [pc, #464]	@ (8007030 <HAL_RCC_OscConfig+0x60c>)
 8006e5e:	4293      	cmp	r3, r2
 8006e60:	d901      	bls.n	8006e66 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8006e62:	2303      	movs	r3, #3
 8006e64:	e0db      	b.n	800701e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006e66:	4b70      	ldr	r3, [pc, #448]	@ (8007028 <HAL_RCC_OscConfig+0x604>)
 8006e68:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006e6a:	2202      	movs	r2, #2
 8006e6c:	4013      	ands	r3, r2
 8006e6e:	d0f0      	beq.n	8006e52 <HAL_RCC_OscConfig+0x42e>
 8006e70:	e013      	b.n	8006e9a <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e72:	f7fe fcd1 	bl	8005818 <HAL_GetTick>
 8006e76:	0003      	movs	r3, r0
 8006e78:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006e7a:	e009      	b.n	8006e90 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006e7c:	f7fe fccc 	bl	8005818 <HAL_GetTick>
 8006e80:	0002      	movs	r2, r0
 8006e82:	693b      	ldr	r3, [r7, #16]
 8006e84:	1ad3      	subs	r3, r2, r3
 8006e86:	4a6a      	ldr	r2, [pc, #424]	@ (8007030 <HAL_RCC_OscConfig+0x60c>)
 8006e88:	4293      	cmp	r3, r2
 8006e8a:	d901      	bls.n	8006e90 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8006e8c:	2303      	movs	r3, #3
 8006e8e:	e0c6      	b.n	800701e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006e90:	4b65      	ldr	r3, [pc, #404]	@ (8007028 <HAL_RCC_OscConfig+0x604>)
 8006e92:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006e94:	2202      	movs	r2, #2
 8006e96:	4013      	ands	r3, r2
 8006e98:	d1f0      	bne.n	8006e7c <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8006e9a:	231f      	movs	r3, #31
 8006e9c:	18fb      	adds	r3, r7, r3
 8006e9e:	781b      	ldrb	r3, [r3, #0]
 8006ea0:	2b01      	cmp	r3, #1
 8006ea2:	d105      	bne.n	8006eb0 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8006ea4:	4b60      	ldr	r3, [pc, #384]	@ (8007028 <HAL_RCC_OscConfig+0x604>)
 8006ea6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006ea8:	4b5f      	ldr	r3, [pc, #380]	@ (8007028 <HAL_RCC_OscConfig+0x604>)
 8006eaa:	4962      	ldr	r1, [pc, #392]	@ (8007034 <HAL_RCC_OscConfig+0x610>)
 8006eac:	400a      	ands	r2, r1
 8006eae:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	69db      	ldr	r3, [r3, #28]
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d100      	bne.n	8006eba <HAL_RCC_OscConfig+0x496>
 8006eb8:	e0b0      	b.n	800701c <HAL_RCC_OscConfig+0x5f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006eba:	4b5b      	ldr	r3, [pc, #364]	@ (8007028 <HAL_RCC_OscConfig+0x604>)
 8006ebc:	689b      	ldr	r3, [r3, #8]
 8006ebe:	2238      	movs	r2, #56	@ 0x38
 8006ec0:	4013      	ands	r3, r2
 8006ec2:	2b10      	cmp	r3, #16
 8006ec4:	d100      	bne.n	8006ec8 <HAL_RCC_OscConfig+0x4a4>
 8006ec6:	e078      	b.n	8006fba <HAL_RCC_OscConfig+0x596>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	69db      	ldr	r3, [r3, #28]
 8006ecc:	2b02      	cmp	r3, #2
 8006ece:	d153      	bne.n	8006f78 <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006ed0:	4b55      	ldr	r3, [pc, #340]	@ (8007028 <HAL_RCC_OscConfig+0x604>)
 8006ed2:	681a      	ldr	r2, [r3, #0]
 8006ed4:	4b54      	ldr	r3, [pc, #336]	@ (8007028 <HAL_RCC_OscConfig+0x604>)
 8006ed6:	4958      	ldr	r1, [pc, #352]	@ (8007038 <HAL_RCC_OscConfig+0x614>)
 8006ed8:	400a      	ands	r2, r1
 8006eda:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006edc:	f7fe fc9c 	bl	8005818 <HAL_GetTick>
 8006ee0:	0003      	movs	r3, r0
 8006ee2:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006ee4:	e008      	b.n	8006ef8 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006ee6:	f7fe fc97 	bl	8005818 <HAL_GetTick>
 8006eea:	0002      	movs	r2, r0
 8006eec:	693b      	ldr	r3, [r7, #16]
 8006eee:	1ad3      	subs	r3, r2, r3
 8006ef0:	2b02      	cmp	r3, #2
 8006ef2:	d901      	bls.n	8006ef8 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8006ef4:	2303      	movs	r3, #3
 8006ef6:	e092      	b.n	800701e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006ef8:	4b4b      	ldr	r3, [pc, #300]	@ (8007028 <HAL_RCC_OscConfig+0x604>)
 8006efa:	681a      	ldr	r2, [r3, #0]
 8006efc:	2380      	movs	r3, #128	@ 0x80
 8006efe:	049b      	lsls	r3, r3, #18
 8006f00:	4013      	ands	r3, r2
 8006f02:	d1f0      	bne.n	8006ee6 <HAL_RCC_OscConfig+0x4c2>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else /* !RCC_PLLQ_SUPPORT */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006f04:	4b48      	ldr	r3, [pc, #288]	@ (8007028 <HAL_RCC_OscConfig+0x604>)
 8006f06:	68db      	ldr	r3, [r3, #12]
 8006f08:	4a4c      	ldr	r2, [pc, #304]	@ (800703c <HAL_RCC_OscConfig+0x618>)
 8006f0a:	4013      	ands	r3, r2
 8006f0c:	0019      	movs	r1, r3
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	6a1a      	ldr	r2, [r3, #32]
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f16:	431a      	orrs	r2, r3
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f1c:	021b      	lsls	r3, r3, #8
 8006f1e:	431a      	orrs	r2, r3
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f24:	431a      	orrs	r2, r3
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006f2a:	431a      	orrs	r2, r3
 8006f2c:	4b3e      	ldr	r3, [pc, #248]	@ (8007028 <HAL_RCC_OscConfig+0x604>)
 8006f2e:	430a      	orrs	r2, r1
 8006f30:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006f32:	4b3d      	ldr	r3, [pc, #244]	@ (8007028 <HAL_RCC_OscConfig+0x604>)
 8006f34:	681a      	ldr	r2, [r3, #0]
 8006f36:	4b3c      	ldr	r3, [pc, #240]	@ (8007028 <HAL_RCC_OscConfig+0x604>)
 8006f38:	2180      	movs	r1, #128	@ 0x80
 8006f3a:	0449      	lsls	r1, r1, #17
 8006f3c:	430a      	orrs	r2, r1
 8006f3e:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8006f40:	4b39      	ldr	r3, [pc, #228]	@ (8007028 <HAL_RCC_OscConfig+0x604>)
 8006f42:	68da      	ldr	r2, [r3, #12]
 8006f44:	4b38      	ldr	r3, [pc, #224]	@ (8007028 <HAL_RCC_OscConfig+0x604>)
 8006f46:	2180      	movs	r1, #128	@ 0x80
 8006f48:	0549      	lsls	r1, r1, #21
 8006f4a:	430a      	orrs	r2, r1
 8006f4c:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f4e:	f7fe fc63 	bl	8005818 <HAL_GetTick>
 8006f52:	0003      	movs	r3, r0
 8006f54:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006f56:	e008      	b.n	8006f6a <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006f58:	f7fe fc5e 	bl	8005818 <HAL_GetTick>
 8006f5c:	0002      	movs	r2, r0
 8006f5e:	693b      	ldr	r3, [r7, #16]
 8006f60:	1ad3      	subs	r3, r2, r3
 8006f62:	2b02      	cmp	r3, #2
 8006f64:	d901      	bls.n	8006f6a <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 8006f66:	2303      	movs	r3, #3
 8006f68:	e059      	b.n	800701e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006f6a:	4b2f      	ldr	r3, [pc, #188]	@ (8007028 <HAL_RCC_OscConfig+0x604>)
 8006f6c:	681a      	ldr	r2, [r3, #0]
 8006f6e:	2380      	movs	r3, #128	@ 0x80
 8006f70:	049b      	lsls	r3, r3, #18
 8006f72:	4013      	ands	r3, r2
 8006f74:	d0f0      	beq.n	8006f58 <HAL_RCC_OscConfig+0x534>
 8006f76:	e051      	b.n	800701c <HAL_RCC_OscConfig+0x5f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006f78:	4b2b      	ldr	r3, [pc, #172]	@ (8007028 <HAL_RCC_OscConfig+0x604>)
 8006f7a:	681a      	ldr	r2, [r3, #0]
 8006f7c:	4b2a      	ldr	r3, [pc, #168]	@ (8007028 <HAL_RCC_OscConfig+0x604>)
 8006f7e:	492e      	ldr	r1, [pc, #184]	@ (8007038 <HAL_RCC_OscConfig+0x614>)
 8006f80:	400a      	ands	r2, r1
 8006f82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f84:	f7fe fc48 	bl	8005818 <HAL_GetTick>
 8006f88:	0003      	movs	r3, r0
 8006f8a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006f8c:	e008      	b.n	8006fa0 <HAL_RCC_OscConfig+0x57c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006f8e:	f7fe fc43 	bl	8005818 <HAL_GetTick>
 8006f92:	0002      	movs	r2, r0
 8006f94:	693b      	ldr	r3, [r7, #16]
 8006f96:	1ad3      	subs	r3, r2, r3
 8006f98:	2b02      	cmp	r3, #2
 8006f9a:	d901      	bls.n	8006fa0 <HAL_RCC_OscConfig+0x57c>
          {
            return HAL_TIMEOUT;
 8006f9c:	2303      	movs	r3, #3
 8006f9e:	e03e      	b.n	800701e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006fa0:	4b21      	ldr	r3, [pc, #132]	@ (8007028 <HAL_RCC_OscConfig+0x604>)
 8006fa2:	681a      	ldr	r2, [r3, #0]
 8006fa4:	2380      	movs	r3, #128	@ 0x80
 8006fa6:	049b      	lsls	r3, r3, #18
 8006fa8:	4013      	ands	r3, r2
 8006faa:	d1f0      	bne.n	8006f8e <HAL_RCC_OscConfig+0x56a>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 8006fac:	4b1e      	ldr	r3, [pc, #120]	@ (8007028 <HAL_RCC_OscConfig+0x604>)
 8006fae:	68da      	ldr	r2, [r3, #12]
 8006fb0:	4b1d      	ldr	r3, [pc, #116]	@ (8007028 <HAL_RCC_OscConfig+0x604>)
 8006fb2:	4923      	ldr	r1, [pc, #140]	@ (8007040 <HAL_RCC_OscConfig+0x61c>)
 8006fb4:	400a      	ands	r2, r1
 8006fb6:	60da      	str	r2, [r3, #12]
 8006fb8:	e030      	b.n	800701c <HAL_RCC_OscConfig+0x5f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	69db      	ldr	r3, [r3, #28]
 8006fbe:	2b01      	cmp	r3, #1
 8006fc0:	d101      	bne.n	8006fc6 <HAL_RCC_OscConfig+0x5a2>
      {
        return HAL_ERROR;
 8006fc2:	2301      	movs	r3, #1
 8006fc4:	e02b      	b.n	800701e <HAL_RCC_OscConfig+0x5fa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8006fc6:	4b18      	ldr	r3, [pc, #96]	@ (8007028 <HAL_RCC_OscConfig+0x604>)
 8006fc8:	68db      	ldr	r3, [r3, #12]
 8006fca:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006fcc:	697b      	ldr	r3, [r7, #20]
 8006fce:	2203      	movs	r2, #3
 8006fd0:	401a      	ands	r2, r3
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	6a1b      	ldr	r3, [r3, #32]
 8006fd6:	429a      	cmp	r2, r3
 8006fd8:	d11e      	bne.n	8007018 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006fda:	697b      	ldr	r3, [r7, #20]
 8006fdc:	2270      	movs	r2, #112	@ 0x70
 8006fde:	401a      	ands	r2, r3
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006fe4:	429a      	cmp	r2, r3
 8006fe6:	d117      	bne.n	8007018 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006fe8:	697a      	ldr	r2, [r7, #20]
 8006fea:	23fe      	movs	r3, #254	@ 0xfe
 8006fec:	01db      	lsls	r3, r3, #7
 8006fee:	401a      	ands	r2, r3
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ff4:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006ff6:	429a      	cmp	r2, r3
 8006ff8:	d10e      	bne.n	8007018 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8006ffa:	697a      	ldr	r2, [r7, #20]
 8006ffc:	23f8      	movs	r3, #248	@ 0xf8
 8006ffe:	039b      	lsls	r3, r3, #14
 8007000:	401a      	ands	r2, r3
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007006:	429a      	cmp	r2, r3
 8007008:	d106      	bne.n	8007018 <HAL_RCC_OscConfig+0x5f4>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 800700a:	697b      	ldr	r3, [r7, #20]
 800700c:	0f5b      	lsrs	r3, r3, #29
 800700e:	075a      	lsls	r2, r3, #29
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8007014:	429a      	cmp	r2, r3
 8007016:	d001      	beq.n	800701c <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_ERROR;
 8007018:	2301      	movs	r3, #1
 800701a:	e000      	b.n	800701e <HAL_RCC_OscConfig+0x5fa>
        }
      }
    }
  }
  return HAL_OK;
 800701c:	2300      	movs	r3, #0
}
 800701e:	0018      	movs	r0, r3
 8007020:	46bd      	mov	sp, r7
 8007022:	b008      	add	sp, #32
 8007024:	bd80      	pop	{r7, pc}
 8007026:	46c0      	nop			@ (mov r8, r8)
 8007028:	40021000 	.word	0x40021000
 800702c:	40007000 	.word	0x40007000
 8007030:	00001388 	.word	0x00001388
 8007034:	efffffff 	.word	0xefffffff
 8007038:	feffffff 	.word	0xfeffffff
 800703c:	1fc1808c 	.word	0x1fc1808c
 8007040:	effefffc 	.word	0xeffefffc

08007044 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007044:	b580      	push	{r7, lr}
 8007046:	b084      	sub	sp, #16
 8007048:	af00      	add	r7, sp, #0
 800704a:	6078      	str	r0, [r7, #4]
 800704c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	2b00      	cmp	r3, #0
 8007052:	d101      	bne.n	8007058 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007054:	2301      	movs	r3, #1
 8007056:	e0e9      	b.n	800722c <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007058:	4b76      	ldr	r3, [pc, #472]	@ (8007234 <HAL_RCC_ClockConfig+0x1f0>)
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	2207      	movs	r2, #7
 800705e:	4013      	ands	r3, r2
 8007060:	683a      	ldr	r2, [r7, #0]
 8007062:	429a      	cmp	r2, r3
 8007064:	d91e      	bls.n	80070a4 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007066:	4b73      	ldr	r3, [pc, #460]	@ (8007234 <HAL_RCC_ClockConfig+0x1f0>)
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	2207      	movs	r2, #7
 800706c:	4393      	bics	r3, r2
 800706e:	0019      	movs	r1, r3
 8007070:	4b70      	ldr	r3, [pc, #448]	@ (8007234 <HAL_RCC_ClockConfig+0x1f0>)
 8007072:	683a      	ldr	r2, [r7, #0]
 8007074:	430a      	orrs	r2, r1
 8007076:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8007078:	f7fe fbce 	bl	8005818 <HAL_GetTick>
 800707c:	0003      	movs	r3, r0
 800707e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8007080:	e009      	b.n	8007096 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007082:	f7fe fbc9 	bl	8005818 <HAL_GetTick>
 8007086:	0002      	movs	r2, r0
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	1ad3      	subs	r3, r2, r3
 800708c:	4a6a      	ldr	r2, [pc, #424]	@ (8007238 <HAL_RCC_ClockConfig+0x1f4>)
 800708e:	4293      	cmp	r3, r2
 8007090:	d901      	bls.n	8007096 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8007092:	2303      	movs	r3, #3
 8007094:	e0ca      	b.n	800722c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8007096:	4b67      	ldr	r3, [pc, #412]	@ (8007234 <HAL_RCC_ClockConfig+0x1f0>)
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	2207      	movs	r2, #7
 800709c:	4013      	ands	r3, r2
 800709e:	683a      	ldr	r2, [r7, #0]
 80070a0:	429a      	cmp	r2, r3
 80070a2:	d1ee      	bne.n	8007082 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	2202      	movs	r2, #2
 80070aa:	4013      	ands	r3, r2
 80070ac:	d015      	beq.n	80070da <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	2204      	movs	r2, #4
 80070b4:	4013      	ands	r3, r2
 80070b6:	d006      	beq.n	80070c6 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80070b8:	4b60      	ldr	r3, [pc, #384]	@ (800723c <HAL_RCC_ClockConfig+0x1f8>)
 80070ba:	689a      	ldr	r2, [r3, #8]
 80070bc:	4b5f      	ldr	r3, [pc, #380]	@ (800723c <HAL_RCC_ClockConfig+0x1f8>)
 80070be:	21e0      	movs	r1, #224	@ 0xe0
 80070c0:	01c9      	lsls	r1, r1, #7
 80070c2:	430a      	orrs	r2, r1
 80070c4:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80070c6:	4b5d      	ldr	r3, [pc, #372]	@ (800723c <HAL_RCC_ClockConfig+0x1f8>)
 80070c8:	689b      	ldr	r3, [r3, #8]
 80070ca:	4a5d      	ldr	r2, [pc, #372]	@ (8007240 <HAL_RCC_ClockConfig+0x1fc>)
 80070cc:	4013      	ands	r3, r2
 80070ce:	0019      	movs	r1, r3
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	689a      	ldr	r2, [r3, #8]
 80070d4:	4b59      	ldr	r3, [pc, #356]	@ (800723c <HAL_RCC_ClockConfig+0x1f8>)
 80070d6:	430a      	orrs	r2, r1
 80070d8:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	2201      	movs	r2, #1
 80070e0:	4013      	ands	r3, r2
 80070e2:	d057      	beq.n	8007194 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	685b      	ldr	r3, [r3, #4]
 80070e8:	2b01      	cmp	r3, #1
 80070ea:	d107      	bne.n	80070fc <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80070ec:	4b53      	ldr	r3, [pc, #332]	@ (800723c <HAL_RCC_ClockConfig+0x1f8>)
 80070ee:	681a      	ldr	r2, [r3, #0]
 80070f0:	2380      	movs	r3, #128	@ 0x80
 80070f2:	029b      	lsls	r3, r3, #10
 80070f4:	4013      	ands	r3, r2
 80070f6:	d12b      	bne.n	8007150 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80070f8:	2301      	movs	r3, #1
 80070fa:	e097      	b.n	800722c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	685b      	ldr	r3, [r3, #4]
 8007100:	2b02      	cmp	r3, #2
 8007102:	d107      	bne.n	8007114 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007104:	4b4d      	ldr	r3, [pc, #308]	@ (800723c <HAL_RCC_ClockConfig+0x1f8>)
 8007106:	681a      	ldr	r2, [r3, #0]
 8007108:	2380      	movs	r3, #128	@ 0x80
 800710a:	049b      	lsls	r3, r3, #18
 800710c:	4013      	ands	r3, r2
 800710e:	d11f      	bne.n	8007150 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8007110:	2301      	movs	r3, #1
 8007112:	e08b      	b.n	800722c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	685b      	ldr	r3, [r3, #4]
 8007118:	2b00      	cmp	r3, #0
 800711a:	d107      	bne.n	800712c <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800711c:	4b47      	ldr	r3, [pc, #284]	@ (800723c <HAL_RCC_ClockConfig+0x1f8>)
 800711e:	681a      	ldr	r2, [r3, #0]
 8007120:	2380      	movs	r3, #128	@ 0x80
 8007122:	00db      	lsls	r3, r3, #3
 8007124:	4013      	ands	r3, r2
 8007126:	d113      	bne.n	8007150 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8007128:	2301      	movs	r3, #1
 800712a:	e07f      	b.n	800722c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	685b      	ldr	r3, [r3, #4]
 8007130:	2b03      	cmp	r3, #3
 8007132:	d106      	bne.n	8007142 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8007134:	4b41      	ldr	r3, [pc, #260]	@ (800723c <HAL_RCC_ClockConfig+0x1f8>)
 8007136:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007138:	2202      	movs	r2, #2
 800713a:	4013      	ands	r3, r2
 800713c:	d108      	bne.n	8007150 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800713e:	2301      	movs	r3, #1
 8007140:	e074      	b.n	800722c <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007142:	4b3e      	ldr	r3, [pc, #248]	@ (800723c <HAL_RCC_ClockConfig+0x1f8>)
 8007144:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007146:	2202      	movs	r2, #2
 8007148:	4013      	ands	r3, r2
 800714a:	d101      	bne.n	8007150 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800714c:	2301      	movs	r3, #1
 800714e:	e06d      	b.n	800722c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007150:	4b3a      	ldr	r3, [pc, #232]	@ (800723c <HAL_RCC_ClockConfig+0x1f8>)
 8007152:	689b      	ldr	r3, [r3, #8]
 8007154:	2207      	movs	r2, #7
 8007156:	4393      	bics	r3, r2
 8007158:	0019      	movs	r1, r3
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	685a      	ldr	r2, [r3, #4]
 800715e:	4b37      	ldr	r3, [pc, #220]	@ (800723c <HAL_RCC_ClockConfig+0x1f8>)
 8007160:	430a      	orrs	r2, r1
 8007162:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007164:	f7fe fb58 	bl	8005818 <HAL_GetTick>
 8007168:	0003      	movs	r3, r0
 800716a:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800716c:	e009      	b.n	8007182 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800716e:	f7fe fb53 	bl	8005818 <HAL_GetTick>
 8007172:	0002      	movs	r2, r0
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	1ad3      	subs	r3, r2, r3
 8007178:	4a2f      	ldr	r2, [pc, #188]	@ (8007238 <HAL_RCC_ClockConfig+0x1f4>)
 800717a:	4293      	cmp	r3, r2
 800717c:	d901      	bls.n	8007182 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 800717e:	2303      	movs	r3, #3
 8007180:	e054      	b.n	800722c <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007182:	4b2e      	ldr	r3, [pc, #184]	@ (800723c <HAL_RCC_ClockConfig+0x1f8>)
 8007184:	689b      	ldr	r3, [r3, #8]
 8007186:	2238      	movs	r2, #56	@ 0x38
 8007188:	401a      	ands	r2, r3
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	685b      	ldr	r3, [r3, #4]
 800718e:	00db      	lsls	r3, r3, #3
 8007190:	429a      	cmp	r2, r3
 8007192:	d1ec      	bne.n	800716e <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007194:	4b27      	ldr	r3, [pc, #156]	@ (8007234 <HAL_RCC_ClockConfig+0x1f0>)
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	2207      	movs	r2, #7
 800719a:	4013      	ands	r3, r2
 800719c:	683a      	ldr	r2, [r7, #0]
 800719e:	429a      	cmp	r2, r3
 80071a0:	d21e      	bcs.n	80071e0 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80071a2:	4b24      	ldr	r3, [pc, #144]	@ (8007234 <HAL_RCC_ClockConfig+0x1f0>)
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	2207      	movs	r2, #7
 80071a8:	4393      	bics	r3, r2
 80071aa:	0019      	movs	r1, r3
 80071ac:	4b21      	ldr	r3, [pc, #132]	@ (8007234 <HAL_RCC_ClockConfig+0x1f0>)
 80071ae:	683a      	ldr	r2, [r7, #0]
 80071b0:	430a      	orrs	r2, r1
 80071b2:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80071b4:	f7fe fb30 	bl	8005818 <HAL_GetTick>
 80071b8:	0003      	movs	r3, r0
 80071ba:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80071bc:	e009      	b.n	80071d2 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80071be:	f7fe fb2b 	bl	8005818 <HAL_GetTick>
 80071c2:	0002      	movs	r2, r0
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	1ad3      	subs	r3, r2, r3
 80071c8:	4a1b      	ldr	r2, [pc, #108]	@ (8007238 <HAL_RCC_ClockConfig+0x1f4>)
 80071ca:	4293      	cmp	r3, r2
 80071cc:	d901      	bls.n	80071d2 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 80071ce:	2303      	movs	r3, #3
 80071d0:	e02c      	b.n	800722c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80071d2:	4b18      	ldr	r3, [pc, #96]	@ (8007234 <HAL_RCC_ClockConfig+0x1f0>)
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	2207      	movs	r2, #7
 80071d8:	4013      	ands	r3, r2
 80071da:	683a      	ldr	r2, [r7, #0]
 80071dc:	429a      	cmp	r2, r3
 80071de:	d1ee      	bne.n	80071be <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	2204      	movs	r2, #4
 80071e6:	4013      	ands	r3, r2
 80071e8:	d009      	beq.n	80071fe <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80071ea:	4b14      	ldr	r3, [pc, #80]	@ (800723c <HAL_RCC_ClockConfig+0x1f8>)
 80071ec:	689b      	ldr	r3, [r3, #8]
 80071ee:	4a15      	ldr	r2, [pc, #84]	@ (8007244 <HAL_RCC_ClockConfig+0x200>)
 80071f0:	4013      	ands	r3, r2
 80071f2:	0019      	movs	r1, r3
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	68da      	ldr	r2, [r3, #12]
 80071f8:	4b10      	ldr	r3, [pc, #64]	@ (800723c <HAL_RCC_ClockConfig+0x1f8>)
 80071fa:	430a      	orrs	r2, r1
 80071fc:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80071fe:	f000 f829 	bl	8007254 <HAL_RCC_GetSysClockFreq>
 8007202:	0001      	movs	r1, r0
 8007204:	4b0d      	ldr	r3, [pc, #52]	@ (800723c <HAL_RCC_ClockConfig+0x1f8>)
 8007206:	689b      	ldr	r3, [r3, #8]
 8007208:	0a1b      	lsrs	r3, r3, #8
 800720a:	220f      	movs	r2, #15
 800720c:	401a      	ands	r2, r3
 800720e:	4b0e      	ldr	r3, [pc, #56]	@ (8007248 <HAL_RCC_ClockConfig+0x204>)
 8007210:	0092      	lsls	r2, r2, #2
 8007212:	58d3      	ldr	r3, [r2, r3]
 8007214:	221f      	movs	r2, #31
 8007216:	4013      	ands	r3, r2
 8007218:	000a      	movs	r2, r1
 800721a:	40da      	lsrs	r2, r3
 800721c:	4b0b      	ldr	r3, [pc, #44]	@ (800724c <HAL_RCC_ClockConfig+0x208>)
 800721e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8007220:	4b0b      	ldr	r3, [pc, #44]	@ (8007250 <HAL_RCC_ClockConfig+0x20c>)
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	0018      	movs	r0, r3
 8007226:	f7fe fa9b 	bl	8005760 <HAL_InitTick>
 800722a:	0003      	movs	r3, r0
}
 800722c:	0018      	movs	r0, r3
 800722e:	46bd      	mov	sp, r7
 8007230:	b004      	add	sp, #16
 8007232:	bd80      	pop	{r7, pc}
 8007234:	40022000 	.word	0x40022000
 8007238:	00001388 	.word	0x00001388
 800723c:	40021000 	.word	0x40021000
 8007240:	fffff0ff 	.word	0xfffff0ff
 8007244:	ffff8fff 	.word	0xffff8fff
 8007248:	0800bf8c 	.word	0x0800bf8c
 800724c:	20000008 	.word	0x20000008
 8007250:	2000000c 	.word	0x2000000c

08007254 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007254:	b580      	push	{r7, lr}
 8007256:	b086      	sub	sp, #24
 8007258:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800725a:	4b3c      	ldr	r3, [pc, #240]	@ (800734c <HAL_RCC_GetSysClockFreq+0xf8>)
 800725c:	689b      	ldr	r3, [r3, #8]
 800725e:	2238      	movs	r2, #56	@ 0x38
 8007260:	4013      	ands	r3, r2
 8007262:	d10f      	bne.n	8007284 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8007264:	4b39      	ldr	r3, [pc, #228]	@ (800734c <HAL_RCC_GetSysClockFreq+0xf8>)
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	0adb      	lsrs	r3, r3, #11
 800726a:	2207      	movs	r2, #7
 800726c:	4013      	ands	r3, r2
 800726e:	2201      	movs	r2, #1
 8007270:	409a      	lsls	r2, r3
 8007272:	0013      	movs	r3, r2
 8007274:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8007276:	6839      	ldr	r1, [r7, #0]
 8007278:	4835      	ldr	r0, [pc, #212]	@ (8007350 <HAL_RCC_GetSysClockFreq+0xfc>)
 800727a:	f7f8 ff5d 	bl	8000138 <__udivsi3>
 800727e:	0003      	movs	r3, r0
 8007280:	613b      	str	r3, [r7, #16]
 8007282:	e05d      	b.n	8007340 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8007284:	4b31      	ldr	r3, [pc, #196]	@ (800734c <HAL_RCC_GetSysClockFreq+0xf8>)
 8007286:	689b      	ldr	r3, [r3, #8]
 8007288:	2238      	movs	r2, #56	@ 0x38
 800728a:	4013      	ands	r3, r2
 800728c:	2b08      	cmp	r3, #8
 800728e:	d102      	bne.n	8007296 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8007290:	4b30      	ldr	r3, [pc, #192]	@ (8007354 <HAL_RCC_GetSysClockFreq+0x100>)
 8007292:	613b      	str	r3, [r7, #16]
 8007294:	e054      	b.n	8007340 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007296:	4b2d      	ldr	r3, [pc, #180]	@ (800734c <HAL_RCC_GetSysClockFreq+0xf8>)
 8007298:	689b      	ldr	r3, [r3, #8]
 800729a:	2238      	movs	r2, #56	@ 0x38
 800729c:	4013      	ands	r3, r2
 800729e:	2b10      	cmp	r3, #16
 80072a0:	d138      	bne.n	8007314 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80072a2:	4b2a      	ldr	r3, [pc, #168]	@ (800734c <HAL_RCC_GetSysClockFreq+0xf8>)
 80072a4:	68db      	ldr	r3, [r3, #12]
 80072a6:	2203      	movs	r2, #3
 80072a8:	4013      	ands	r3, r2
 80072aa:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80072ac:	4b27      	ldr	r3, [pc, #156]	@ (800734c <HAL_RCC_GetSysClockFreq+0xf8>)
 80072ae:	68db      	ldr	r3, [r3, #12]
 80072b0:	091b      	lsrs	r3, r3, #4
 80072b2:	2207      	movs	r2, #7
 80072b4:	4013      	ands	r3, r2
 80072b6:	3301      	adds	r3, #1
 80072b8:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	2b03      	cmp	r3, #3
 80072be:	d10d      	bne.n	80072dc <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80072c0:	68b9      	ldr	r1, [r7, #8]
 80072c2:	4824      	ldr	r0, [pc, #144]	@ (8007354 <HAL_RCC_GetSysClockFreq+0x100>)
 80072c4:	f7f8 ff38 	bl	8000138 <__udivsi3>
 80072c8:	0003      	movs	r3, r0
 80072ca:	0019      	movs	r1, r3
 80072cc:	4b1f      	ldr	r3, [pc, #124]	@ (800734c <HAL_RCC_GetSysClockFreq+0xf8>)
 80072ce:	68db      	ldr	r3, [r3, #12]
 80072d0:	0a1b      	lsrs	r3, r3, #8
 80072d2:	227f      	movs	r2, #127	@ 0x7f
 80072d4:	4013      	ands	r3, r2
 80072d6:	434b      	muls	r3, r1
 80072d8:	617b      	str	r3, [r7, #20]
        break;
 80072da:	e00d      	b.n	80072f8 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 80072dc:	68b9      	ldr	r1, [r7, #8]
 80072de:	481c      	ldr	r0, [pc, #112]	@ (8007350 <HAL_RCC_GetSysClockFreq+0xfc>)
 80072e0:	f7f8 ff2a 	bl	8000138 <__udivsi3>
 80072e4:	0003      	movs	r3, r0
 80072e6:	0019      	movs	r1, r3
 80072e8:	4b18      	ldr	r3, [pc, #96]	@ (800734c <HAL_RCC_GetSysClockFreq+0xf8>)
 80072ea:	68db      	ldr	r3, [r3, #12]
 80072ec:	0a1b      	lsrs	r3, r3, #8
 80072ee:	227f      	movs	r2, #127	@ 0x7f
 80072f0:	4013      	ands	r3, r2
 80072f2:	434b      	muls	r3, r1
 80072f4:	617b      	str	r3, [r7, #20]
        break;
 80072f6:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 80072f8:	4b14      	ldr	r3, [pc, #80]	@ (800734c <HAL_RCC_GetSysClockFreq+0xf8>)
 80072fa:	68db      	ldr	r3, [r3, #12]
 80072fc:	0f5b      	lsrs	r3, r3, #29
 80072fe:	2207      	movs	r2, #7
 8007300:	4013      	ands	r3, r2
 8007302:	3301      	adds	r3, #1
 8007304:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8007306:	6879      	ldr	r1, [r7, #4]
 8007308:	6978      	ldr	r0, [r7, #20]
 800730a:	f7f8 ff15 	bl	8000138 <__udivsi3>
 800730e:	0003      	movs	r3, r0
 8007310:	613b      	str	r3, [r7, #16]
 8007312:	e015      	b.n	8007340 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8007314:	4b0d      	ldr	r3, [pc, #52]	@ (800734c <HAL_RCC_GetSysClockFreq+0xf8>)
 8007316:	689b      	ldr	r3, [r3, #8]
 8007318:	2238      	movs	r2, #56	@ 0x38
 800731a:	4013      	ands	r3, r2
 800731c:	2b20      	cmp	r3, #32
 800731e:	d103      	bne.n	8007328 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8007320:	2380      	movs	r3, #128	@ 0x80
 8007322:	021b      	lsls	r3, r3, #8
 8007324:	613b      	str	r3, [r7, #16]
 8007326:	e00b      	b.n	8007340 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8007328:	4b08      	ldr	r3, [pc, #32]	@ (800734c <HAL_RCC_GetSysClockFreq+0xf8>)
 800732a:	689b      	ldr	r3, [r3, #8]
 800732c:	2238      	movs	r2, #56	@ 0x38
 800732e:	4013      	ands	r3, r2
 8007330:	2b18      	cmp	r3, #24
 8007332:	d103      	bne.n	800733c <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8007334:	23fa      	movs	r3, #250	@ 0xfa
 8007336:	01db      	lsls	r3, r3, #7
 8007338:	613b      	str	r3, [r7, #16]
 800733a:	e001      	b.n	8007340 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 800733c:	2300      	movs	r3, #0
 800733e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8007340:	693b      	ldr	r3, [r7, #16]
}
 8007342:	0018      	movs	r0, r3
 8007344:	46bd      	mov	sp, r7
 8007346:	b006      	add	sp, #24
 8007348:	bd80      	pop	{r7, pc}
 800734a:	46c0      	nop			@ (mov r8, r8)
 800734c:	40021000 	.word	0x40021000
 8007350:	00f42400 	.word	0x00f42400
 8007354:	007a1200 	.word	0x007a1200

08007358 <__cvt>:
 8007358:	b5f0      	push	{r4, r5, r6, r7, lr}
 800735a:	001f      	movs	r7, r3
 800735c:	2300      	movs	r3, #0
 800735e:	0016      	movs	r6, r2
 8007360:	b08b      	sub	sp, #44	@ 0x2c
 8007362:	429f      	cmp	r7, r3
 8007364:	da04      	bge.n	8007370 <__cvt+0x18>
 8007366:	2180      	movs	r1, #128	@ 0x80
 8007368:	0609      	lsls	r1, r1, #24
 800736a:	187b      	adds	r3, r7, r1
 800736c:	001f      	movs	r7, r3
 800736e:	232d      	movs	r3, #45	@ 0x2d
 8007370:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8007372:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 8007374:	7013      	strb	r3, [r2, #0]
 8007376:	2320      	movs	r3, #32
 8007378:	2203      	movs	r2, #3
 800737a:	439d      	bics	r5, r3
 800737c:	2d46      	cmp	r5, #70	@ 0x46
 800737e:	d007      	beq.n	8007390 <__cvt+0x38>
 8007380:	002b      	movs	r3, r5
 8007382:	3b45      	subs	r3, #69	@ 0x45
 8007384:	4259      	negs	r1, r3
 8007386:	414b      	adcs	r3, r1
 8007388:	9910      	ldr	r1, [sp, #64]	@ 0x40
 800738a:	3a01      	subs	r2, #1
 800738c:	18cb      	adds	r3, r1, r3
 800738e:	9310      	str	r3, [sp, #64]	@ 0x40
 8007390:	ab09      	add	r3, sp, #36	@ 0x24
 8007392:	9304      	str	r3, [sp, #16]
 8007394:	ab08      	add	r3, sp, #32
 8007396:	9303      	str	r3, [sp, #12]
 8007398:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800739a:	9200      	str	r2, [sp, #0]
 800739c:	9302      	str	r3, [sp, #8]
 800739e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80073a0:	0032      	movs	r2, r6
 80073a2:	9301      	str	r3, [sp, #4]
 80073a4:	003b      	movs	r3, r7
 80073a6:	f001 fefb 	bl	80091a0 <_dtoa_r>
 80073aa:	0004      	movs	r4, r0
 80073ac:	2d47      	cmp	r5, #71	@ 0x47
 80073ae:	d11b      	bne.n	80073e8 <__cvt+0x90>
 80073b0:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80073b2:	07db      	lsls	r3, r3, #31
 80073b4:	d511      	bpl.n	80073da <__cvt+0x82>
 80073b6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80073b8:	18c3      	adds	r3, r0, r3
 80073ba:	9307      	str	r3, [sp, #28]
 80073bc:	2200      	movs	r2, #0
 80073be:	2300      	movs	r3, #0
 80073c0:	0030      	movs	r0, r6
 80073c2:	0039      	movs	r1, r7
 80073c4:	f7f9 f83e 	bl	8000444 <__aeabi_dcmpeq>
 80073c8:	2800      	cmp	r0, #0
 80073ca:	d001      	beq.n	80073d0 <__cvt+0x78>
 80073cc:	9b07      	ldr	r3, [sp, #28]
 80073ce:	9309      	str	r3, [sp, #36]	@ 0x24
 80073d0:	2230      	movs	r2, #48	@ 0x30
 80073d2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80073d4:	9907      	ldr	r1, [sp, #28]
 80073d6:	428b      	cmp	r3, r1
 80073d8:	d320      	bcc.n	800741c <__cvt+0xc4>
 80073da:	0020      	movs	r0, r4
 80073dc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80073de:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 80073e0:	1b1b      	subs	r3, r3, r4
 80073e2:	6013      	str	r3, [r2, #0]
 80073e4:	b00b      	add	sp, #44	@ 0x2c
 80073e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80073e8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80073ea:	18c3      	adds	r3, r0, r3
 80073ec:	9307      	str	r3, [sp, #28]
 80073ee:	2d46      	cmp	r5, #70	@ 0x46
 80073f0:	d1e4      	bne.n	80073bc <__cvt+0x64>
 80073f2:	7803      	ldrb	r3, [r0, #0]
 80073f4:	2b30      	cmp	r3, #48	@ 0x30
 80073f6:	d10c      	bne.n	8007412 <__cvt+0xba>
 80073f8:	2200      	movs	r2, #0
 80073fa:	2300      	movs	r3, #0
 80073fc:	0030      	movs	r0, r6
 80073fe:	0039      	movs	r1, r7
 8007400:	f7f9 f820 	bl	8000444 <__aeabi_dcmpeq>
 8007404:	2800      	cmp	r0, #0
 8007406:	d104      	bne.n	8007412 <__cvt+0xba>
 8007408:	2301      	movs	r3, #1
 800740a:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 800740c:	1a9b      	subs	r3, r3, r2
 800740e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8007410:	6013      	str	r3, [r2, #0]
 8007412:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8007414:	9a07      	ldr	r2, [sp, #28]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	18d3      	adds	r3, r2, r3
 800741a:	e7ce      	b.n	80073ba <__cvt+0x62>
 800741c:	1c59      	adds	r1, r3, #1
 800741e:	9109      	str	r1, [sp, #36]	@ 0x24
 8007420:	701a      	strb	r2, [r3, #0]
 8007422:	e7d6      	b.n	80073d2 <__cvt+0x7a>

08007424 <__exponent>:
 8007424:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007426:	232b      	movs	r3, #43	@ 0x2b
 8007428:	b085      	sub	sp, #20
 800742a:	0005      	movs	r5, r0
 800742c:	1e0c      	subs	r4, r1, #0
 800742e:	7002      	strb	r2, [r0, #0]
 8007430:	da01      	bge.n	8007436 <__exponent+0x12>
 8007432:	424c      	negs	r4, r1
 8007434:	3302      	adds	r3, #2
 8007436:	706b      	strb	r3, [r5, #1]
 8007438:	2c09      	cmp	r4, #9
 800743a:	dd2c      	ble.n	8007496 <__exponent+0x72>
 800743c:	ab02      	add	r3, sp, #8
 800743e:	1dde      	adds	r6, r3, #7
 8007440:	0020      	movs	r0, r4
 8007442:	210a      	movs	r1, #10
 8007444:	f7f8 ffe8 	bl	8000418 <__aeabi_idivmod>
 8007448:	0037      	movs	r7, r6
 800744a:	3130      	adds	r1, #48	@ 0x30
 800744c:	3e01      	subs	r6, #1
 800744e:	0020      	movs	r0, r4
 8007450:	7031      	strb	r1, [r6, #0]
 8007452:	210a      	movs	r1, #10
 8007454:	9401      	str	r4, [sp, #4]
 8007456:	f7f8 fef9 	bl	800024c <__divsi3>
 800745a:	9b01      	ldr	r3, [sp, #4]
 800745c:	0004      	movs	r4, r0
 800745e:	2b63      	cmp	r3, #99	@ 0x63
 8007460:	dcee      	bgt.n	8007440 <__exponent+0x1c>
 8007462:	1eba      	subs	r2, r7, #2
 8007464:	1ca8      	adds	r0, r5, #2
 8007466:	0001      	movs	r1, r0
 8007468:	0013      	movs	r3, r2
 800746a:	3430      	adds	r4, #48	@ 0x30
 800746c:	7014      	strb	r4, [r2, #0]
 800746e:	ac02      	add	r4, sp, #8
 8007470:	3407      	adds	r4, #7
 8007472:	429c      	cmp	r4, r3
 8007474:	d80a      	bhi.n	800748c <__exponent+0x68>
 8007476:	2300      	movs	r3, #0
 8007478:	4294      	cmp	r4, r2
 800747a:	d303      	bcc.n	8007484 <__exponent+0x60>
 800747c:	3309      	adds	r3, #9
 800747e:	aa02      	add	r2, sp, #8
 8007480:	189b      	adds	r3, r3, r2
 8007482:	1bdb      	subs	r3, r3, r7
 8007484:	18c0      	adds	r0, r0, r3
 8007486:	1b40      	subs	r0, r0, r5
 8007488:	b005      	add	sp, #20
 800748a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800748c:	781c      	ldrb	r4, [r3, #0]
 800748e:	3301      	adds	r3, #1
 8007490:	700c      	strb	r4, [r1, #0]
 8007492:	3101      	adds	r1, #1
 8007494:	e7eb      	b.n	800746e <__exponent+0x4a>
 8007496:	2330      	movs	r3, #48	@ 0x30
 8007498:	18e4      	adds	r4, r4, r3
 800749a:	70ab      	strb	r3, [r5, #2]
 800749c:	1d28      	adds	r0, r5, #4
 800749e:	70ec      	strb	r4, [r5, #3]
 80074a0:	e7f1      	b.n	8007486 <__exponent+0x62>
	...

080074a4 <_printf_float>:
 80074a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80074a6:	b097      	sub	sp, #92	@ 0x5c
 80074a8:	000d      	movs	r5, r1
 80074aa:	920a      	str	r2, [sp, #40]	@ 0x28
 80074ac:	9c1c      	ldr	r4, [sp, #112]	@ 0x70
 80074ae:	930b      	str	r3, [sp, #44]	@ 0x2c
 80074b0:	9009      	str	r0, [sp, #36]	@ 0x24
 80074b2:	f001 fdcd 	bl	8009050 <_localeconv_r>
 80074b6:	6803      	ldr	r3, [r0, #0]
 80074b8:	0018      	movs	r0, r3
 80074ba:	930d      	str	r3, [sp, #52]	@ 0x34
 80074bc:	f7f8 fe20 	bl	8000100 <strlen>
 80074c0:	2300      	movs	r3, #0
 80074c2:	900f      	str	r0, [sp, #60]	@ 0x3c
 80074c4:	9314      	str	r3, [sp, #80]	@ 0x50
 80074c6:	7e2b      	ldrb	r3, [r5, #24]
 80074c8:	2207      	movs	r2, #7
 80074ca:	930c      	str	r3, [sp, #48]	@ 0x30
 80074cc:	682b      	ldr	r3, [r5, #0]
 80074ce:	930e      	str	r3, [sp, #56]	@ 0x38
 80074d0:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80074d2:	6823      	ldr	r3, [r4, #0]
 80074d4:	05c9      	lsls	r1, r1, #23
 80074d6:	d545      	bpl.n	8007564 <_printf_float+0xc0>
 80074d8:	189b      	adds	r3, r3, r2
 80074da:	4393      	bics	r3, r2
 80074dc:	001a      	movs	r2, r3
 80074de:	3208      	adds	r2, #8
 80074e0:	6022      	str	r2, [r4, #0]
 80074e2:	2201      	movs	r2, #1
 80074e4:	681e      	ldr	r6, [r3, #0]
 80074e6:	685f      	ldr	r7, [r3, #4]
 80074e8:	007b      	lsls	r3, r7, #1
 80074ea:	085b      	lsrs	r3, r3, #1
 80074ec:	9311      	str	r3, [sp, #68]	@ 0x44
 80074ee:	9610      	str	r6, [sp, #64]	@ 0x40
 80074f0:	64ae      	str	r6, [r5, #72]	@ 0x48
 80074f2:	64ef      	str	r7, [r5, #76]	@ 0x4c
 80074f4:	9810      	ldr	r0, [sp, #64]	@ 0x40
 80074f6:	9911      	ldr	r1, [sp, #68]	@ 0x44
 80074f8:	4ba7      	ldr	r3, [pc, #668]	@ (8007798 <_printf_float+0x2f4>)
 80074fa:	4252      	negs	r2, r2
 80074fc:	f7fb ff4c 	bl	8003398 <__aeabi_dcmpun>
 8007500:	2800      	cmp	r0, #0
 8007502:	d131      	bne.n	8007568 <_printf_float+0xc4>
 8007504:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8007506:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8007508:	2201      	movs	r2, #1
 800750a:	4ba3      	ldr	r3, [pc, #652]	@ (8007798 <_printf_float+0x2f4>)
 800750c:	4252      	negs	r2, r2
 800750e:	f7f8 ffa9 	bl	8000464 <__aeabi_dcmple>
 8007512:	2800      	cmp	r0, #0
 8007514:	d128      	bne.n	8007568 <_printf_float+0xc4>
 8007516:	2200      	movs	r2, #0
 8007518:	2300      	movs	r3, #0
 800751a:	0030      	movs	r0, r6
 800751c:	0039      	movs	r1, r7
 800751e:	f7f8 ff97 	bl	8000450 <__aeabi_dcmplt>
 8007522:	2800      	cmp	r0, #0
 8007524:	d003      	beq.n	800752e <_printf_float+0x8a>
 8007526:	002b      	movs	r3, r5
 8007528:	222d      	movs	r2, #45	@ 0x2d
 800752a:	3343      	adds	r3, #67	@ 0x43
 800752c:	701a      	strb	r2, [r3, #0]
 800752e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007530:	4f9a      	ldr	r7, [pc, #616]	@ (800779c <_printf_float+0x2f8>)
 8007532:	2b47      	cmp	r3, #71	@ 0x47
 8007534:	d800      	bhi.n	8007538 <_printf_float+0x94>
 8007536:	4f9a      	ldr	r7, [pc, #616]	@ (80077a0 <_printf_float+0x2fc>)
 8007538:	2303      	movs	r3, #3
 800753a:	2400      	movs	r4, #0
 800753c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800753e:	612b      	str	r3, [r5, #16]
 8007540:	3301      	adds	r3, #1
 8007542:	439a      	bics	r2, r3
 8007544:	602a      	str	r2, [r5, #0]
 8007546:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007548:	0029      	movs	r1, r5
 800754a:	9300      	str	r3, [sp, #0]
 800754c:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800754e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007550:	aa15      	add	r2, sp, #84	@ 0x54
 8007552:	f000 f9e5 	bl	8007920 <_printf_common>
 8007556:	3001      	adds	r0, #1
 8007558:	d000      	beq.n	800755c <_printf_float+0xb8>
 800755a:	e09e      	b.n	800769a <_printf_float+0x1f6>
 800755c:	2001      	movs	r0, #1
 800755e:	4240      	negs	r0, r0
 8007560:	b017      	add	sp, #92	@ 0x5c
 8007562:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007564:	3307      	adds	r3, #7
 8007566:	e7b8      	b.n	80074da <_printf_float+0x36>
 8007568:	0032      	movs	r2, r6
 800756a:	003b      	movs	r3, r7
 800756c:	0030      	movs	r0, r6
 800756e:	0039      	movs	r1, r7
 8007570:	f7fb ff12 	bl	8003398 <__aeabi_dcmpun>
 8007574:	2800      	cmp	r0, #0
 8007576:	d00b      	beq.n	8007590 <_printf_float+0xec>
 8007578:	2f00      	cmp	r7, #0
 800757a:	da03      	bge.n	8007584 <_printf_float+0xe0>
 800757c:	002b      	movs	r3, r5
 800757e:	222d      	movs	r2, #45	@ 0x2d
 8007580:	3343      	adds	r3, #67	@ 0x43
 8007582:	701a      	strb	r2, [r3, #0]
 8007584:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007586:	4f87      	ldr	r7, [pc, #540]	@ (80077a4 <_printf_float+0x300>)
 8007588:	2b47      	cmp	r3, #71	@ 0x47
 800758a:	d8d5      	bhi.n	8007538 <_printf_float+0x94>
 800758c:	4f86      	ldr	r7, [pc, #536]	@ (80077a8 <_printf_float+0x304>)
 800758e:	e7d3      	b.n	8007538 <_printf_float+0x94>
 8007590:	2220      	movs	r2, #32
 8007592:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8007594:	686b      	ldr	r3, [r5, #4]
 8007596:	4394      	bics	r4, r2
 8007598:	1c5a      	adds	r2, r3, #1
 800759a:	d146      	bne.n	800762a <_printf_float+0x186>
 800759c:	3307      	adds	r3, #7
 800759e:	606b      	str	r3, [r5, #4]
 80075a0:	2380      	movs	r3, #128	@ 0x80
 80075a2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80075a4:	00db      	lsls	r3, r3, #3
 80075a6:	4313      	orrs	r3, r2
 80075a8:	2200      	movs	r2, #0
 80075aa:	602b      	str	r3, [r5, #0]
 80075ac:	9206      	str	r2, [sp, #24]
 80075ae:	aa14      	add	r2, sp, #80	@ 0x50
 80075b0:	9205      	str	r2, [sp, #20]
 80075b2:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80075b4:	a90a      	add	r1, sp, #40	@ 0x28
 80075b6:	9204      	str	r2, [sp, #16]
 80075b8:	aa13      	add	r2, sp, #76	@ 0x4c
 80075ba:	9203      	str	r2, [sp, #12]
 80075bc:	2223      	movs	r2, #35	@ 0x23
 80075be:	1852      	adds	r2, r2, r1
 80075c0:	9202      	str	r2, [sp, #8]
 80075c2:	9301      	str	r3, [sp, #4]
 80075c4:	686b      	ldr	r3, [r5, #4]
 80075c6:	0032      	movs	r2, r6
 80075c8:	9300      	str	r3, [sp, #0]
 80075ca:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80075cc:	003b      	movs	r3, r7
 80075ce:	f7ff fec3 	bl	8007358 <__cvt>
 80075d2:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80075d4:	0007      	movs	r7, r0
 80075d6:	2c47      	cmp	r4, #71	@ 0x47
 80075d8:	d12d      	bne.n	8007636 <_printf_float+0x192>
 80075da:	1cd3      	adds	r3, r2, #3
 80075dc:	db02      	blt.n	80075e4 <_printf_float+0x140>
 80075de:	686b      	ldr	r3, [r5, #4]
 80075e0:	429a      	cmp	r2, r3
 80075e2:	dd47      	ble.n	8007674 <_printf_float+0x1d0>
 80075e4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80075e6:	3b02      	subs	r3, #2
 80075e8:	b2db      	uxtb	r3, r3
 80075ea:	930c      	str	r3, [sp, #48]	@ 0x30
 80075ec:	0028      	movs	r0, r5
 80075ee:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 80075f0:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80075f2:	3901      	subs	r1, #1
 80075f4:	3050      	adds	r0, #80	@ 0x50
 80075f6:	9113      	str	r1, [sp, #76]	@ 0x4c
 80075f8:	f7ff ff14 	bl	8007424 <__exponent>
 80075fc:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80075fe:	0004      	movs	r4, r0
 8007600:	1813      	adds	r3, r2, r0
 8007602:	612b      	str	r3, [r5, #16]
 8007604:	2a01      	cmp	r2, #1
 8007606:	dc02      	bgt.n	800760e <_printf_float+0x16a>
 8007608:	682a      	ldr	r2, [r5, #0]
 800760a:	07d2      	lsls	r2, r2, #31
 800760c:	d501      	bpl.n	8007612 <_printf_float+0x16e>
 800760e:	3301      	adds	r3, #1
 8007610:	612b      	str	r3, [r5, #16]
 8007612:	2323      	movs	r3, #35	@ 0x23
 8007614:	aa0a      	add	r2, sp, #40	@ 0x28
 8007616:	189b      	adds	r3, r3, r2
 8007618:	781b      	ldrb	r3, [r3, #0]
 800761a:	2b00      	cmp	r3, #0
 800761c:	d100      	bne.n	8007620 <_printf_float+0x17c>
 800761e:	e792      	b.n	8007546 <_printf_float+0xa2>
 8007620:	002b      	movs	r3, r5
 8007622:	222d      	movs	r2, #45	@ 0x2d
 8007624:	3343      	adds	r3, #67	@ 0x43
 8007626:	701a      	strb	r2, [r3, #0]
 8007628:	e78d      	b.n	8007546 <_printf_float+0xa2>
 800762a:	2c47      	cmp	r4, #71	@ 0x47
 800762c:	d1b8      	bne.n	80075a0 <_printf_float+0xfc>
 800762e:	2b00      	cmp	r3, #0
 8007630:	d1b6      	bne.n	80075a0 <_printf_float+0xfc>
 8007632:	3301      	adds	r3, #1
 8007634:	e7b3      	b.n	800759e <_printf_float+0xfa>
 8007636:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007638:	2b65      	cmp	r3, #101	@ 0x65
 800763a:	d9d7      	bls.n	80075ec <_printf_float+0x148>
 800763c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800763e:	2b66      	cmp	r3, #102	@ 0x66
 8007640:	d11a      	bne.n	8007678 <_printf_float+0x1d4>
 8007642:	686b      	ldr	r3, [r5, #4]
 8007644:	2a00      	cmp	r2, #0
 8007646:	dd09      	ble.n	800765c <_printf_float+0x1b8>
 8007648:	612a      	str	r2, [r5, #16]
 800764a:	2b00      	cmp	r3, #0
 800764c:	d102      	bne.n	8007654 <_printf_float+0x1b0>
 800764e:	6829      	ldr	r1, [r5, #0]
 8007650:	07c9      	lsls	r1, r1, #31
 8007652:	d50b      	bpl.n	800766c <_printf_float+0x1c8>
 8007654:	3301      	adds	r3, #1
 8007656:	189b      	adds	r3, r3, r2
 8007658:	612b      	str	r3, [r5, #16]
 800765a:	e007      	b.n	800766c <_printf_float+0x1c8>
 800765c:	2b00      	cmp	r3, #0
 800765e:	d103      	bne.n	8007668 <_printf_float+0x1c4>
 8007660:	2201      	movs	r2, #1
 8007662:	6829      	ldr	r1, [r5, #0]
 8007664:	4211      	tst	r1, r2
 8007666:	d000      	beq.n	800766a <_printf_float+0x1c6>
 8007668:	1c9a      	adds	r2, r3, #2
 800766a:	612a      	str	r2, [r5, #16]
 800766c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800766e:	2400      	movs	r4, #0
 8007670:	65ab      	str	r3, [r5, #88]	@ 0x58
 8007672:	e7ce      	b.n	8007612 <_printf_float+0x16e>
 8007674:	2367      	movs	r3, #103	@ 0x67
 8007676:	930c      	str	r3, [sp, #48]	@ 0x30
 8007678:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800767a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800767c:	4299      	cmp	r1, r3
 800767e:	db06      	blt.n	800768e <_printf_float+0x1ea>
 8007680:	682b      	ldr	r3, [r5, #0]
 8007682:	6129      	str	r1, [r5, #16]
 8007684:	07db      	lsls	r3, r3, #31
 8007686:	d5f1      	bpl.n	800766c <_printf_float+0x1c8>
 8007688:	3101      	adds	r1, #1
 800768a:	6129      	str	r1, [r5, #16]
 800768c:	e7ee      	b.n	800766c <_printf_float+0x1c8>
 800768e:	2201      	movs	r2, #1
 8007690:	2900      	cmp	r1, #0
 8007692:	dce0      	bgt.n	8007656 <_printf_float+0x1b2>
 8007694:	1892      	adds	r2, r2, r2
 8007696:	1a52      	subs	r2, r2, r1
 8007698:	e7dd      	b.n	8007656 <_printf_float+0x1b2>
 800769a:	682a      	ldr	r2, [r5, #0]
 800769c:	0553      	lsls	r3, r2, #21
 800769e:	d408      	bmi.n	80076b2 <_printf_float+0x20e>
 80076a0:	692b      	ldr	r3, [r5, #16]
 80076a2:	003a      	movs	r2, r7
 80076a4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80076a6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80076a8:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 80076aa:	47a0      	blx	r4
 80076ac:	3001      	adds	r0, #1
 80076ae:	d129      	bne.n	8007704 <_printf_float+0x260>
 80076b0:	e754      	b.n	800755c <_printf_float+0xb8>
 80076b2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80076b4:	2b65      	cmp	r3, #101	@ 0x65
 80076b6:	d800      	bhi.n	80076ba <_printf_float+0x216>
 80076b8:	e0db      	b.n	8007872 <_printf_float+0x3ce>
 80076ba:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 80076bc:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 80076be:	2200      	movs	r2, #0
 80076c0:	2300      	movs	r3, #0
 80076c2:	f7f8 febf 	bl	8000444 <__aeabi_dcmpeq>
 80076c6:	2800      	cmp	r0, #0
 80076c8:	d033      	beq.n	8007732 <_printf_float+0x28e>
 80076ca:	2301      	movs	r3, #1
 80076cc:	4a37      	ldr	r2, [pc, #220]	@ (80077ac <_printf_float+0x308>)
 80076ce:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80076d0:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80076d2:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 80076d4:	47a0      	blx	r4
 80076d6:	3001      	adds	r0, #1
 80076d8:	d100      	bne.n	80076dc <_printf_float+0x238>
 80076da:	e73f      	b.n	800755c <_printf_float+0xb8>
 80076dc:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 80076de:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80076e0:	42b3      	cmp	r3, r6
 80076e2:	db02      	blt.n	80076ea <_printf_float+0x246>
 80076e4:	682b      	ldr	r3, [r5, #0]
 80076e6:	07db      	lsls	r3, r3, #31
 80076e8:	d50c      	bpl.n	8007704 <_printf_float+0x260>
 80076ea:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 80076ec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80076ee:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80076f0:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80076f2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80076f4:	47a0      	blx	r4
 80076f6:	2400      	movs	r4, #0
 80076f8:	3001      	adds	r0, #1
 80076fa:	d100      	bne.n	80076fe <_printf_float+0x25a>
 80076fc:	e72e      	b.n	800755c <_printf_float+0xb8>
 80076fe:	1e73      	subs	r3, r6, #1
 8007700:	42a3      	cmp	r3, r4
 8007702:	dc0a      	bgt.n	800771a <_printf_float+0x276>
 8007704:	682b      	ldr	r3, [r5, #0]
 8007706:	079b      	lsls	r3, r3, #30
 8007708:	d500      	bpl.n	800770c <_printf_float+0x268>
 800770a:	e106      	b.n	800791a <_printf_float+0x476>
 800770c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800770e:	68e8      	ldr	r0, [r5, #12]
 8007710:	4298      	cmp	r0, r3
 8007712:	db00      	blt.n	8007716 <_printf_float+0x272>
 8007714:	e724      	b.n	8007560 <_printf_float+0xbc>
 8007716:	0018      	movs	r0, r3
 8007718:	e722      	b.n	8007560 <_printf_float+0xbc>
 800771a:	002a      	movs	r2, r5
 800771c:	2301      	movs	r3, #1
 800771e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007720:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007722:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8007724:	321a      	adds	r2, #26
 8007726:	47b8      	blx	r7
 8007728:	3001      	adds	r0, #1
 800772a:	d100      	bne.n	800772e <_printf_float+0x28a>
 800772c:	e716      	b.n	800755c <_printf_float+0xb8>
 800772e:	3401      	adds	r4, #1
 8007730:	e7e5      	b.n	80076fe <_printf_float+0x25a>
 8007732:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8007734:	2b00      	cmp	r3, #0
 8007736:	dc3b      	bgt.n	80077b0 <_printf_float+0x30c>
 8007738:	2301      	movs	r3, #1
 800773a:	4a1c      	ldr	r2, [pc, #112]	@ (80077ac <_printf_float+0x308>)
 800773c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800773e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007740:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8007742:	47a0      	blx	r4
 8007744:	3001      	adds	r0, #1
 8007746:	d100      	bne.n	800774a <_printf_float+0x2a6>
 8007748:	e708      	b.n	800755c <_printf_float+0xb8>
 800774a:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 800774c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800774e:	4333      	orrs	r3, r6
 8007750:	d102      	bne.n	8007758 <_printf_float+0x2b4>
 8007752:	682b      	ldr	r3, [r5, #0]
 8007754:	07db      	lsls	r3, r3, #31
 8007756:	d5d5      	bpl.n	8007704 <_printf_float+0x260>
 8007758:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800775a:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800775c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800775e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007760:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8007762:	47a0      	blx	r4
 8007764:	2300      	movs	r3, #0
 8007766:	3001      	adds	r0, #1
 8007768:	d100      	bne.n	800776c <_printf_float+0x2c8>
 800776a:	e6f7      	b.n	800755c <_printf_float+0xb8>
 800776c:	930c      	str	r3, [sp, #48]	@ 0x30
 800776e:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8007770:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8007772:	425b      	negs	r3, r3
 8007774:	4293      	cmp	r3, r2
 8007776:	dc01      	bgt.n	800777c <_printf_float+0x2d8>
 8007778:	0033      	movs	r3, r6
 800777a:	e792      	b.n	80076a2 <_printf_float+0x1fe>
 800777c:	002a      	movs	r2, r5
 800777e:	2301      	movs	r3, #1
 8007780:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007782:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007784:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8007786:	321a      	adds	r2, #26
 8007788:	47a0      	blx	r4
 800778a:	3001      	adds	r0, #1
 800778c:	d100      	bne.n	8007790 <_printf_float+0x2ec>
 800778e:	e6e5      	b.n	800755c <_printf_float+0xb8>
 8007790:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007792:	3301      	adds	r3, #1
 8007794:	e7ea      	b.n	800776c <_printf_float+0x2c8>
 8007796:	46c0      	nop			@ (mov r8, r8)
 8007798:	7fefffff 	.word	0x7fefffff
 800779c:	0800bfd0 	.word	0x0800bfd0
 80077a0:	0800bfcc 	.word	0x0800bfcc
 80077a4:	0800bfd8 	.word	0x0800bfd8
 80077a8:	0800bfd4 	.word	0x0800bfd4
 80077ac:	0800bfdc 	.word	0x0800bfdc
 80077b0:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80077b2:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 80077b4:	930c      	str	r3, [sp, #48]	@ 0x30
 80077b6:	429e      	cmp	r6, r3
 80077b8:	dd00      	ble.n	80077bc <_printf_float+0x318>
 80077ba:	001e      	movs	r6, r3
 80077bc:	2e00      	cmp	r6, #0
 80077be:	dc31      	bgt.n	8007824 <_printf_float+0x380>
 80077c0:	43f3      	mvns	r3, r6
 80077c2:	2400      	movs	r4, #0
 80077c4:	17db      	asrs	r3, r3, #31
 80077c6:	4033      	ands	r3, r6
 80077c8:	930e      	str	r3, [sp, #56]	@ 0x38
 80077ca:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 80077cc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80077ce:	1af3      	subs	r3, r6, r3
 80077d0:	42a3      	cmp	r3, r4
 80077d2:	dc30      	bgt.n	8007836 <_printf_float+0x392>
 80077d4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80077d6:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80077d8:	429a      	cmp	r2, r3
 80077da:	dc38      	bgt.n	800784e <_printf_float+0x3aa>
 80077dc:	682b      	ldr	r3, [r5, #0]
 80077de:	07db      	lsls	r3, r3, #31
 80077e0:	d435      	bmi.n	800784e <_printf_float+0x3aa>
 80077e2:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 80077e4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80077e6:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80077e8:	1b9b      	subs	r3, r3, r6
 80077ea:	1b14      	subs	r4, r2, r4
 80077ec:	429c      	cmp	r4, r3
 80077ee:	dd00      	ble.n	80077f2 <_printf_float+0x34e>
 80077f0:	001c      	movs	r4, r3
 80077f2:	2c00      	cmp	r4, #0
 80077f4:	dc34      	bgt.n	8007860 <_printf_float+0x3bc>
 80077f6:	43e3      	mvns	r3, r4
 80077f8:	2600      	movs	r6, #0
 80077fa:	17db      	asrs	r3, r3, #31
 80077fc:	401c      	ands	r4, r3
 80077fe:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8007800:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8007802:	1ad3      	subs	r3, r2, r3
 8007804:	1b1b      	subs	r3, r3, r4
 8007806:	42b3      	cmp	r3, r6
 8007808:	dc00      	bgt.n	800780c <_printf_float+0x368>
 800780a:	e77b      	b.n	8007704 <_printf_float+0x260>
 800780c:	002a      	movs	r2, r5
 800780e:	2301      	movs	r3, #1
 8007810:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007812:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007814:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8007816:	321a      	adds	r2, #26
 8007818:	47b8      	blx	r7
 800781a:	3001      	adds	r0, #1
 800781c:	d100      	bne.n	8007820 <_printf_float+0x37c>
 800781e:	e69d      	b.n	800755c <_printf_float+0xb8>
 8007820:	3601      	adds	r6, #1
 8007822:	e7ec      	b.n	80077fe <_printf_float+0x35a>
 8007824:	0033      	movs	r3, r6
 8007826:	003a      	movs	r2, r7
 8007828:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800782a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800782c:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800782e:	47a0      	blx	r4
 8007830:	3001      	adds	r0, #1
 8007832:	d1c5      	bne.n	80077c0 <_printf_float+0x31c>
 8007834:	e692      	b.n	800755c <_printf_float+0xb8>
 8007836:	002a      	movs	r2, r5
 8007838:	2301      	movs	r3, #1
 800783a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800783c:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800783e:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8007840:	321a      	adds	r2, #26
 8007842:	47b0      	blx	r6
 8007844:	3001      	adds	r0, #1
 8007846:	d100      	bne.n	800784a <_printf_float+0x3a6>
 8007848:	e688      	b.n	800755c <_printf_float+0xb8>
 800784a:	3401      	adds	r4, #1
 800784c:	e7bd      	b.n	80077ca <_printf_float+0x326>
 800784e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007850:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8007852:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007854:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007856:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8007858:	47a0      	blx	r4
 800785a:	3001      	adds	r0, #1
 800785c:	d1c1      	bne.n	80077e2 <_printf_float+0x33e>
 800785e:	e67d      	b.n	800755c <_printf_float+0xb8>
 8007860:	19ba      	adds	r2, r7, r6
 8007862:	0023      	movs	r3, r4
 8007864:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007866:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007868:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800786a:	47b0      	blx	r6
 800786c:	3001      	adds	r0, #1
 800786e:	d1c2      	bne.n	80077f6 <_printf_float+0x352>
 8007870:	e674      	b.n	800755c <_printf_float+0xb8>
 8007872:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8007874:	930c      	str	r3, [sp, #48]	@ 0x30
 8007876:	2b01      	cmp	r3, #1
 8007878:	dc02      	bgt.n	8007880 <_printf_float+0x3dc>
 800787a:	2301      	movs	r3, #1
 800787c:	421a      	tst	r2, r3
 800787e:	d039      	beq.n	80078f4 <_printf_float+0x450>
 8007880:	2301      	movs	r3, #1
 8007882:	003a      	movs	r2, r7
 8007884:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007886:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007888:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800788a:	47b0      	blx	r6
 800788c:	3001      	adds	r0, #1
 800788e:	d100      	bne.n	8007892 <_printf_float+0x3ee>
 8007890:	e664      	b.n	800755c <_printf_float+0xb8>
 8007892:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007894:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8007896:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007898:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800789a:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800789c:	47b0      	blx	r6
 800789e:	3001      	adds	r0, #1
 80078a0:	d100      	bne.n	80078a4 <_printf_float+0x400>
 80078a2:	e65b      	b.n	800755c <_printf_float+0xb8>
 80078a4:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 80078a6:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 80078a8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80078aa:	2200      	movs	r2, #0
 80078ac:	3b01      	subs	r3, #1
 80078ae:	930c      	str	r3, [sp, #48]	@ 0x30
 80078b0:	2300      	movs	r3, #0
 80078b2:	f7f8 fdc7 	bl	8000444 <__aeabi_dcmpeq>
 80078b6:	2800      	cmp	r0, #0
 80078b8:	d11a      	bne.n	80078f0 <_printf_float+0x44c>
 80078ba:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80078bc:	1c7a      	adds	r2, r7, #1
 80078be:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80078c0:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80078c2:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 80078c4:	47b0      	blx	r6
 80078c6:	3001      	adds	r0, #1
 80078c8:	d10e      	bne.n	80078e8 <_printf_float+0x444>
 80078ca:	e647      	b.n	800755c <_printf_float+0xb8>
 80078cc:	002a      	movs	r2, r5
 80078ce:	2301      	movs	r3, #1
 80078d0:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80078d2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80078d4:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 80078d6:	321a      	adds	r2, #26
 80078d8:	47b8      	blx	r7
 80078da:	3001      	adds	r0, #1
 80078dc:	d100      	bne.n	80078e0 <_printf_float+0x43c>
 80078de:	e63d      	b.n	800755c <_printf_float+0xb8>
 80078e0:	3601      	adds	r6, #1
 80078e2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80078e4:	429e      	cmp	r6, r3
 80078e6:	dbf1      	blt.n	80078cc <_printf_float+0x428>
 80078e8:	002a      	movs	r2, r5
 80078ea:	0023      	movs	r3, r4
 80078ec:	3250      	adds	r2, #80	@ 0x50
 80078ee:	e6d9      	b.n	80076a4 <_printf_float+0x200>
 80078f0:	2600      	movs	r6, #0
 80078f2:	e7f6      	b.n	80078e2 <_printf_float+0x43e>
 80078f4:	003a      	movs	r2, r7
 80078f6:	e7e2      	b.n	80078be <_printf_float+0x41a>
 80078f8:	002a      	movs	r2, r5
 80078fa:	2301      	movs	r3, #1
 80078fc:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80078fe:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007900:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8007902:	3219      	adds	r2, #25
 8007904:	47b0      	blx	r6
 8007906:	3001      	adds	r0, #1
 8007908:	d100      	bne.n	800790c <_printf_float+0x468>
 800790a:	e627      	b.n	800755c <_printf_float+0xb8>
 800790c:	3401      	adds	r4, #1
 800790e:	68eb      	ldr	r3, [r5, #12]
 8007910:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8007912:	1a9b      	subs	r3, r3, r2
 8007914:	42a3      	cmp	r3, r4
 8007916:	dcef      	bgt.n	80078f8 <_printf_float+0x454>
 8007918:	e6f8      	b.n	800770c <_printf_float+0x268>
 800791a:	2400      	movs	r4, #0
 800791c:	e7f7      	b.n	800790e <_printf_float+0x46a>
 800791e:	46c0      	nop			@ (mov r8, r8)

08007920 <_printf_common>:
 8007920:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007922:	0016      	movs	r6, r2
 8007924:	9301      	str	r3, [sp, #4]
 8007926:	688a      	ldr	r2, [r1, #8]
 8007928:	690b      	ldr	r3, [r1, #16]
 800792a:	000c      	movs	r4, r1
 800792c:	9000      	str	r0, [sp, #0]
 800792e:	4293      	cmp	r3, r2
 8007930:	da00      	bge.n	8007934 <_printf_common+0x14>
 8007932:	0013      	movs	r3, r2
 8007934:	0022      	movs	r2, r4
 8007936:	6033      	str	r3, [r6, #0]
 8007938:	3243      	adds	r2, #67	@ 0x43
 800793a:	7812      	ldrb	r2, [r2, #0]
 800793c:	2a00      	cmp	r2, #0
 800793e:	d001      	beq.n	8007944 <_printf_common+0x24>
 8007940:	3301      	adds	r3, #1
 8007942:	6033      	str	r3, [r6, #0]
 8007944:	6823      	ldr	r3, [r4, #0]
 8007946:	069b      	lsls	r3, r3, #26
 8007948:	d502      	bpl.n	8007950 <_printf_common+0x30>
 800794a:	6833      	ldr	r3, [r6, #0]
 800794c:	3302      	adds	r3, #2
 800794e:	6033      	str	r3, [r6, #0]
 8007950:	6822      	ldr	r2, [r4, #0]
 8007952:	2306      	movs	r3, #6
 8007954:	0015      	movs	r5, r2
 8007956:	401d      	ands	r5, r3
 8007958:	421a      	tst	r2, r3
 800795a:	d027      	beq.n	80079ac <_printf_common+0x8c>
 800795c:	0023      	movs	r3, r4
 800795e:	3343      	adds	r3, #67	@ 0x43
 8007960:	781b      	ldrb	r3, [r3, #0]
 8007962:	1e5a      	subs	r2, r3, #1
 8007964:	4193      	sbcs	r3, r2
 8007966:	6822      	ldr	r2, [r4, #0]
 8007968:	0692      	lsls	r2, r2, #26
 800796a:	d430      	bmi.n	80079ce <_printf_common+0xae>
 800796c:	0022      	movs	r2, r4
 800796e:	9901      	ldr	r1, [sp, #4]
 8007970:	9800      	ldr	r0, [sp, #0]
 8007972:	9d08      	ldr	r5, [sp, #32]
 8007974:	3243      	adds	r2, #67	@ 0x43
 8007976:	47a8      	blx	r5
 8007978:	3001      	adds	r0, #1
 800797a:	d025      	beq.n	80079c8 <_printf_common+0xa8>
 800797c:	2206      	movs	r2, #6
 800797e:	6823      	ldr	r3, [r4, #0]
 8007980:	2500      	movs	r5, #0
 8007982:	4013      	ands	r3, r2
 8007984:	2b04      	cmp	r3, #4
 8007986:	d105      	bne.n	8007994 <_printf_common+0x74>
 8007988:	6833      	ldr	r3, [r6, #0]
 800798a:	68e5      	ldr	r5, [r4, #12]
 800798c:	1aed      	subs	r5, r5, r3
 800798e:	43eb      	mvns	r3, r5
 8007990:	17db      	asrs	r3, r3, #31
 8007992:	401d      	ands	r5, r3
 8007994:	68a3      	ldr	r3, [r4, #8]
 8007996:	6922      	ldr	r2, [r4, #16]
 8007998:	4293      	cmp	r3, r2
 800799a:	dd01      	ble.n	80079a0 <_printf_common+0x80>
 800799c:	1a9b      	subs	r3, r3, r2
 800799e:	18ed      	adds	r5, r5, r3
 80079a0:	2600      	movs	r6, #0
 80079a2:	42b5      	cmp	r5, r6
 80079a4:	d120      	bne.n	80079e8 <_printf_common+0xc8>
 80079a6:	2000      	movs	r0, #0
 80079a8:	e010      	b.n	80079cc <_printf_common+0xac>
 80079aa:	3501      	adds	r5, #1
 80079ac:	68e3      	ldr	r3, [r4, #12]
 80079ae:	6832      	ldr	r2, [r6, #0]
 80079b0:	1a9b      	subs	r3, r3, r2
 80079b2:	42ab      	cmp	r3, r5
 80079b4:	ddd2      	ble.n	800795c <_printf_common+0x3c>
 80079b6:	0022      	movs	r2, r4
 80079b8:	2301      	movs	r3, #1
 80079ba:	9901      	ldr	r1, [sp, #4]
 80079bc:	9800      	ldr	r0, [sp, #0]
 80079be:	9f08      	ldr	r7, [sp, #32]
 80079c0:	3219      	adds	r2, #25
 80079c2:	47b8      	blx	r7
 80079c4:	3001      	adds	r0, #1
 80079c6:	d1f0      	bne.n	80079aa <_printf_common+0x8a>
 80079c8:	2001      	movs	r0, #1
 80079ca:	4240      	negs	r0, r0
 80079cc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80079ce:	2030      	movs	r0, #48	@ 0x30
 80079d0:	18e1      	adds	r1, r4, r3
 80079d2:	3143      	adds	r1, #67	@ 0x43
 80079d4:	7008      	strb	r0, [r1, #0]
 80079d6:	0021      	movs	r1, r4
 80079d8:	1c5a      	adds	r2, r3, #1
 80079da:	3145      	adds	r1, #69	@ 0x45
 80079dc:	7809      	ldrb	r1, [r1, #0]
 80079de:	18a2      	adds	r2, r4, r2
 80079e0:	3243      	adds	r2, #67	@ 0x43
 80079e2:	3302      	adds	r3, #2
 80079e4:	7011      	strb	r1, [r2, #0]
 80079e6:	e7c1      	b.n	800796c <_printf_common+0x4c>
 80079e8:	0022      	movs	r2, r4
 80079ea:	2301      	movs	r3, #1
 80079ec:	9901      	ldr	r1, [sp, #4]
 80079ee:	9800      	ldr	r0, [sp, #0]
 80079f0:	9f08      	ldr	r7, [sp, #32]
 80079f2:	321a      	adds	r2, #26
 80079f4:	47b8      	blx	r7
 80079f6:	3001      	adds	r0, #1
 80079f8:	d0e6      	beq.n	80079c8 <_printf_common+0xa8>
 80079fa:	3601      	adds	r6, #1
 80079fc:	e7d1      	b.n	80079a2 <_printf_common+0x82>
	...

08007a00 <_printf_i>:
 8007a00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007a02:	b08b      	sub	sp, #44	@ 0x2c
 8007a04:	9206      	str	r2, [sp, #24]
 8007a06:	000a      	movs	r2, r1
 8007a08:	3243      	adds	r2, #67	@ 0x43
 8007a0a:	9307      	str	r3, [sp, #28]
 8007a0c:	9005      	str	r0, [sp, #20]
 8007a0e:	9203      	str	r2, [sp, #12]
 8007a10:	7e0a      	ldrb	r2, [r1, #24]
 8007a12:	000c      	movs	r4, r1
 8007a14:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8007a16:	2a78      	cmp	r2, #120	@ 0x78
 8007a18:	d809      	bhi.n	8007a2e <_printf_i+0x2e>
 8007a1a:	2a62      	cmp	r2, #98	@ 0x62
 8007a1c:	d80b      	bhi.n	8007a36 <_printf_i+0x36>
 8007a1e:	2a00      	cmp	r2, #0
 8007a20:	d100      	bne.n	8007a24 <_printf_i+0x24>
 8007a22:	e0ba      	b.n	8007b9a <_printf_i+0x19a>
 8007a24:	497a      	ldr	r1, [pc, #488]	@ (8007c10 <_printf_i+0x210>)
 8007a26:	9104      	str	r1, [sp, #16]
 8007a28:	2a58      	cmp	r2, #88	@ 0x58
 8007a2a:	d100      	bne.n	8007a2e <_printf_i+0x2e>
 8007a2c:	e08e      	b.n	8007b4c <_printf_i+0x14c>
 8007a2e:	0025      	movs	r5, r4
 8007a30:	3542      	adds	r5, #66	@ 0x42
 8007a32:	702a      	strb	r2, [r5, #0]
 8007a34:	e022      	b.n	8007a7c <_printf_i+0x7c>
 8007a36:	0010      	movs	r0, r2
 8007a38:	3863      	subs	r0, #99	@ 0x63
 8007a3a:	2815      	cmp	r0, #21
 8007a3c:	d8f7      	bhi.n	8007a2e <_printf_i+0x2e>
 8007a3e:	f7f8 fb71 	bl	8000124 <__gnu_thumb1_case_shi>
 8007a42:	0016      	.short	0x0016
 8007a44:	fff6001f 	.word	0xfff6001f
 8007a48:	fff6fff6 	.word	0xfff6fff6
 8007a4c:	001ffff6 	.word	0x001ffff6
 8007a50:	fff6fff6 	.word	0xfff6fff6
 8007a54:	fff6fff6 	.word	0xfff6fff6
 8007a58:	0036009f 	.word	0x0036009f
 8007a5c:	fff6007e 	.word	0xfff6007e
 8007a60:	00b0fff6 	.word	0x00b0fff6
 8007a64:	0036fff6 	.word	0x0036fff6
 8007a68:	fff6fff6 	.word	0xfff6fff6
 8007a6c:	0082      	.short	0x0082
 8007a6e:	0025      	movs	r5, r4
 8007a70:	681a      	ldr	r2, [r3, #0]
 8007a72:	3542      	adds	r5, #66	@ 0x42
 8007a74:	1d11      	adds	r1, r2, #4
 8007a76:	6019      	str	r1, [r3, #0]
 8007a78:	6813      	ldr	r3, [r2, #0]
 8007a7a:	702b      	strb	r3, [r5, #0]
 8007a7c:	2301      	movs	r3, #1
 8007a7e:	e09e      	b.n	8007bbe <_printf_i+0x1be>
 8007a80:	6818      	ldr	r0, [r3, #0]
 8007a82:	6809      	ldr	r1, [r1, #0]
 8007a84:	1d02      	adds	r2, r0, #4
 8007a86:	060d      	lsls	r5, r1, #24
 8007a88:	d50b      	bpl.n	8007aa2 <_printf_i+0xa2>
 8007a8a:	6806      	ldr	r6, [r0, #0]
 8007a8c:	601a      	str	r2, [r3, #0]
 8007a8e:	2e00      	cmp	r6, #0
 8007a90:	da03      	bge.n	8007a9a <_printf_i+0x9a>
 8007a92:	232d      	movs	r3, #45	@ 0x2d
 8007a94:	9a03      	ldr	r2, [sp, #12]
 8007a96:	4276      	negs	r6, r6
 8007a98:	7013      	strb	r3, [r2, #0]
 8007a9a:	4b5d      	ldr	r3, [pc, #372]	@ (8007c10 <_printf_i+0x210>)
 8007a9c:	270a      	movs	r7, #10
 8007a9e:	9304      	str	r3, [sp, #16]
 8007aa0:	e018      	b.n	8007ad4 <_printf_i+0xd4>
 8007aa2:	6806      	ldr	r6, [r0, #0]
 8007aa4:	601a      	str	r2, [r3, #0]
 8007aa6:	0649      	lsls	r1, r1, #25
 8007aa8:	d5f1      	bpl.n	8007a8e <_printf_i+0x8e>
 8007aaa:	b236      	sxth	r6, r6
 8007aac:	e7ef      	b.n	8007a8e <_printf_i+0x8e>
 8007aae:	6808      	ldr	r0, [r1, #0]
 8007ab0:	6819      	ldr	r1, [r3, #0]
 8007ab2:	c940      	ldmia	r1!, {r6}
 8007ab4:	0605      	lsls	r5, r0, #24
 8007ab6:	d402      	bmi.n	8007abe <_printf_i+0xbe>
 8007ab8:	0640      	lsls	r0, r0, #25
 8007aba:	d500      	bpl.n	8007abe <_printf_i+0xbe>
 8007abc:	b2b6      	uxth	r6, r6
 8007abe:	6019      	str	r1, [r3, #0]
 8007ac0:	4b53      	ldr	r3, [pc, #332]	@ (8007c10 <_printf_i+0x210>)
 8007ac2:	270a      	movs	r7, #10
 8007ac4:	9304      	str	r3, [sp, #16]
 8007ac6:	2a6f      	cmp	r2, #111	@ 0x6f
 8007ac8:	d100      	bne.n	8007acc <_printf_i+0xcc>
 8007aca:	3f02      	subs	r7, #2
 8007acc:	0023      	movs	r3, r4
 8007ace:	2200      	movs	r2, #0
 8007ad0:	3343      	adds	r3, #67	@ 0x43
 8007ad2:	701a      	strb	r2, [r3, #0]
 8007ad4:	6863      	ldr	r3, [r4, #4]
 8007ad6:	60a3      	str	r3, [r4, #8]
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	db06      	blt.n	8007aea <_printf_i+0xea>
 8007adc:	2104      	movs	r1, #4
 8007ade:	6822      	ldr	r2, [r4, #0]
 8007ae0:	9d03      	ldr	r5, [sp, #12]
 8007ae2:	438a      	bics	r2, r1
 8007ae4:	6022      	str	r2, [r4, #0]
 8007ae6:	4333      	orrs	r3, r6
 8007ae8:	d00c      	beq.n	8007b04 <_printf_i+0x104>
 8007aea:	9d03      	ldr	r5, [sp, #12]
 8007aec:	0030      	movs	r0, r6
 8007aee:	0039      	movs	r1, r7
 8007af0:	f7f8 fba8 	bl	8000244 <__aeabi_uidivmod>
 8007af4:	9b04      	ldr	r3, [sp, #16]
 8007af6:	3d01      	subs	r5, #1
 8007af8:	5c5b      	ldrb	r3, [r3, r1]
 8007afa:	702b      	strb	r3, [r5, #0]
 8007afc:	0033      	movs	r3, r6
 8007afe:	0006      	movs	r6, r0
 8007b00:	429f      	cmp	r7, r3
 8007b02:	d9f3      	bls.n	8007aec <_printf_i+0xec>
 8007b04:	2f08      	cmp	r7, #8
 8007b06:	d109      	bne.n	8007b1c <_printf_i+0x11c>
 8007b08:	6823      	ldr	r3, [r4, #0]
 8007b0a:	07db      	lsls	r3, r3, #31
 8007b0c:	d506      	bpl.n	8007b1c <_printf_i+0x11c>
 8007b0e:	6862      	ldr	r2, [r4, #4]
 8007b10:	6923      	ldr	r3, [r4, #16]
 8007b12:	429a      	cmp	r2, r3
 8007b14:	dc02      	bgt.n	8007b1c <_printf_i+0x11c>
 8007b16:	2330      	movs	r3, #48	@ 0x30
 8007b18:	3d01      	subs	r5, #1
 8007b1a:	702b      	strb	r3, [r5, #0]
 8007b1c:	9b03      	ldr	r3, [sp, #12]
 8007b1e:	1b5b      	subs	r3, r3, r5
 8007b20:	6123      	str	r3, [r4, #16]
 8007b22:	9b07      	ldr	r3, [sp, #28]
 8007b24:	0021      	movs	r1, r4
 8007b26:	9300      	str	r3, [sp, #0]
 8007b28:	9805      	ldr	r0, [sp, #20]
 8007b2a:	9b06      	ldr	r3, [sp, #24]
 8007b2c:	aa09      	add	r2, sp, #36	@ 0x24
 8007b2e:	f7ff fef7 	bl	8007920 <_printf_common>
 8007b32:	3001      	adds	r0, #1
 8007b34:	d148      	bne.n	8007bc8 <_printf_i+0x1c8>
 8007b36:	2001      	movs	r0, #1
 8007b38:	4240      	negs	r0, r0
 8007b3a:	b00b      	add	sp, #44	@ 0x2c
 8007b3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007b3e:	2220      	movs	r2, #32
 8007b40:	6809      	ldr	r1, [r1, #0]
 8007b42:	430a      	orrs	r2, r1
 8007b44:	6022      	str	r2, [r4, #0]
 8007b46:	2278      	movs	r2, #120	@ 0x78
 8007b48:	4932      	ldr	r1, [pc, #200]	@ (8007c14 <_printf_i+0x214>)
 8007b4a:	9104      	str	r1, [sp, #16]
 8007b4c:	0021      	movs	r1, r4
 8007b4e:	3145      	adds	r1, #69	@ 0x45
 8007b50:	700a      	strb	r2, [r1, #0]
 8007b52:	6819      	ldr	r1, [r3, #0]
 8007b54:	6822      	ldr	r2, [r4, #0]
 8007b56:	c940      	ldmia	r1!, {r6}
 8007b58:	0610      	lsls	r0, r2, #24
 8007b5a:	d402      	bmi.n	8007b62 <_printf_i+0x162>
 8007b5c:	0650      	lsls	r0, r2, #25
 8007b5e:	d500      	bpl.n	8007b62 <_printf_i+0x162>
 8007b60:	b2b6      	uxth	r6, r6
 8007b62:	6019      	str	r1, [r3, #0]
 8007b64:	07d3      	lsls	r3, r2, #31
 8007b66:	d502      	bpl.n	8007b6e <_printf_i+0x16e>
 8007b68:	2320      	movs	r3, #32
 8007b6a:	4313      	orrs	r3, r2
 8007b6c:	6023      	str	r3, [r4, #0]
 8007b6e:	2e00      	cmp	r6, #0
 8007b70:	d001      	beq.n	8007b76 <_printf_i+0x176>
 8007b72:	2710      	movs	r7, #16
 8007b74:	e7aa      	b.n	8007acc <_printf_i+0xcc>
 8007b76:	2220      	movs	r2, #32
 8007b78:	6823      	ldr	r3, [r4, #0]
 8007b7a:	4393      	bics	r3, r2
 8007b7c:	6023      	str	r3, [r4, #0]
 8007b7e:	e7f8      	b.n	8007b72 <_printf_i+0x172>
 8007b80:	681a      	ldr	r2, [r3, #0]
 8007b82:	680d      	ldr	r5, [r1, #0]
 8007b84:	1d10      	adds	r0, r2, #4
 8007b86:	6949      	ldr	r1, [r1, #20]
 8007b88:	6018      	str	r0, [r3, #0]
 8007b8a:	6813      	ldr	r3, [r2, #0]
 8007b8c:	062e      	lsls	r6, r5, #24
 8007b8e:	d501      	bpl.n	8007b94 <_printf_i+0x194>
 8007b90:	6019      	str	r1, [r3, #0]
 8007b92:	e002      	b.n	8007b9a <_printf_i+0x19a>
 8007b94:	066d      	lsls	r5, r5, #25
 8007b96:	d5fb      	bpl.n	8007b90 <_printf_i+0x190>
 8007b98:	8019      	strh	r1, [r3, #0]
 8007b9a:	2300      	movs	r3, #0
 8007b9c:	9d03      	ldr	r5, [sp, #12]
 8007b9e:	6123      	str	r3, [r4, #16]
 8007ba0:	e7bf      	b.n	8007b22 <_printf_i+0x122>
 8007ba2:	681a      	ldr	r2, [r3, #0]
 8007ba4:	1d11      	adds	r1, r2, #4
 8007ba6:	6019      	str	r1, [r3, #0]
 8007ba8:	6815      	ldr	r5, [r2, #0]
 8007baa:	2100      	movs	r1, #0
 8007bac:	0028      	movs	r0, r5
 8007bae:	6862      	ldr	r2, [r4, #4]
 8007bb0:	f001 fa52 	bl	8009058 <memchr>
 8007bb4:	2800      	cmp	r0, #0
 8007bb6:	d001      	beq.n	8007bbc <_printf_i+0x1bc>
 8007bb8:	1b40      	subs	r0, r0, r5
 8007bba:	6060      	str	r0, [r4, #4]
 8007bbc:	6863      	ldr	r3, [r4, #4]
 8007bbe:	6123      	str	r3, [r4, #16]
 8007bc0:	2300      	movs	r3, #0
 8007bc2:	9a03      	ldr	r2, [sp, #12]
 8007bc4:	7013      	strb	r3, [r2, #0]
 8007bc6:	e7ac      	b.n	8007b22 <_printf_i+0x122>
 8007bc8:	002a      	movs	r2, r5
 8007bca:	6923      	ldr	r3, [r4, #16]
 8007bcc:	9906      	ldr	r1, [sp, #24]
 8007bce:	9805      	ldr	r0, [sp, #20]
 8007bd0:	9d07      	ldr	r5, [sp, #28]
 8007bd2:	47a8      	blx	r5
 8007bd4:	3001      	adds	r0, #1
 8007bd6:	d0ae      	beq.n	8007b36 <_printf_i+0x136>
 8007bd8:	6823      	ldr	r3, [r4, #0]
 8007bda:	079b      	lsls	r3, r3, #30
 8007bdc:	d415      	bmi.n	8007c0a <_printf_i+0x20a>
 8007bde:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007be0:	68e0      	ldr	r0, [r4, #12]
 8007be2:	4298      	cmp	r0, r3
 8007be4:	daa9      	bge.n	8007b3a <_printf_i+0x13a>
 8007be6:	0018      	movs	r0, r3
 8007be8:	e7a7      	b.n	8007b3a <_printf_i+0x13a>
 8007bea:	0022      	movs	r2, r4
 8007bec:	2301      	movs	r3, #1
 8007bee:	9906      	ldr	r1, [sp, #24]
 8007bf0:	9805      	ldr	r0, [sp, #20]
 8007bf2:	9e07      	ldr	r6, [sp, #28]
 8007bf4:	3219      	adds	r2, #25
 8007bf6:	47b0      	blx	r6
 8007bf8:	3001      	adds	r0, #1
 8007bfa:	d09c      	beq.n	8007b36 <_printf_i+0x136>
 8007bfc:	3501      	adds	r5, #1
 8007bfe:	68e3      	ldr	r3, [r4, #12]
 8007c00:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007c02:	1a9b      	subs	r3, r3, r2
 8007c04:	42ab      	cmp	r3, r5
 8007c06:	dcf0      	bgt.n	8007bea <_printf_i+0x1ea>
 8007c08:	e7e9      	b.n	8007bde <_printf_i+0x1de>
 8007c0a:	2500      	movs	r5, #0
 8007c0c:	e7f7      	b.n	8007bfe <_printf_i+0x1fe>
 8007c0e:	46c0      	nop			@ (mov r8, r8)
 8007c10:	0800bfde 	.word	0x0800bfde
 8007c14:	0800bfef 	.word	0x0800bfef

08007c18 <_scanf_float>:
 8007c18:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007c1a:	b08b      	sub	sp, #44	@ 0x2c
 8007c1c:	0016      	movs	r6, r2
 8007c1e:	9003      	str	r0, [sp, #12]
 8007c20:	22ae      	movs	r2, #174	@ 0xae
 8007c22:	2000      	movs	r0, #0
 8007c24:	9307      	str	r3, [sp, #28]
 8007c26:	688b      	ldr	r3, [r1, #8]
 8007c28:	000c      	movs	r4, r1
 8007c2a:	1e59      	subs	r1, r3, #1
 8007c2c:	0052      	lsls	r2, r2, #1
 8007c2e:	9006      	str	r0, [sp, #24]
 8007c30:	4291      	cmp	r1, r2
 8007c32:	d905      	bls.n	8007c40 <_scanf_float+0x28>
 8007c34:	3b5e      	subs	r3, #94	@ 0x5e
 8007c36:	3bff      	subs	r3, #255	@ 0xff
 8007c38:	9306      	str	r3, [sp, #24]
 8007c3a:	235e      	movs	r3, #94	@ 0x5e
 8007c3c:	33ff      	adds	r3, #255	@ 0xff
 8007c3e:	60a3      	str	r3, [r4, #8]
 8007c40:	23f0      	movs	r3, #240	@ 0xf0
 8007c42:	6822      	ldr	r2, [r4, #0]
 8007c44:	00db      	lsls	r3, r3, #3
 8007c46:	4313      	orrs	r3, r2
 8007c48:	6023      	str	r3, [r4, #0]
 8007c4a:	0023      	movs	r3, r4
 8007c4c:	2500      	movs	r5, #0
 8007c4e:	331c      	adds	r3, #28
 8007c50:	001f      	movs	r7, r3
 8007c52:	9304      	str	r3, [sp, #16]
 8007c54:	9502      	str	r5, [sp, #8]
 8007c56:	9509      	str	r5, [sp, #36]	@ 0x24
 8007c58:	9508      	str	r5, [sp, #32]
 8007c5a:	9501      	str	r5, [sp, #4]
 8007c5c:	9505      	str	r5, [sp, #20]
 8007c5e:	68a2      	ldr	r2, [r4, #8]
 8007c60:	2a00      	cmp	r2, #0
 8007c62:	d00a      	beq.n	8007c7a <_scanf_float+0x62>
 8007c64:	6833      	ldr	r3, [r6, #0]
 8007c66:	781b      	ldrb	r3, [r3, #0]
 8007c68:	2b4e      	cmp	r3, #78	@ 0x4e
 8007c6a:	d844      	bhi.n	8007cf6 <_scanf_float+0xde>
 8007c6c:	0018      	movs	r0, r3
 8007c6e:	2b40      	cmp	r3, #64	@ 0x40
 8007c70:	d82c      	bhi.n	8007ccc <_scanf_float+0xb4>
 8007c72:	382b      	subs	r0, #43	@ 0x2b
 8007c74:	b2c1      	uxtb	r1, r0
 8007c76:	290e      	cmp	r1, #14
 8007c78:	d92a      	bls.n	8007cd0 <_scanf_float+0xb8>
 8007c7a:	9b01      	ldr	r3, [sp, #4]
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d003      	beq.n	8007c88 <_scanf_float+0x70>
 8007c80:	6823      	ldr	r3, [r4, #0]
 8007c82:	4aa6      	ldr	r2, [pc, #664]	@ (8007f1c <_scanf_float+0x304>)
 8007c84:	4013      	ands	r3, r2
 8007c86:	6023      	str	r3, [r4, #0]
 8007c88:	9b02      	ldr	r3, [sp, #8]
 8007c8a:	3b01      	subs	r3, #1
 8007c8c:	2b01      	cmp	r3, #1
 8007c8e:	d900      	bls.n	8007c92 <_scanf_float+0x7a>
 8007c90:	e0fe      	b.n	8007e90 <_scanf_float+0x278>
 8007c92:	25be      	movs	r5, #190	@ 0xbe
 8007c94:	006d      	lsls	r5, r5, #1
 8007c96:	9b04      	ldr	r3, [sp, #16]
 8007c98:	429f      	cmp	r7, r3
 8007c9a:	d900      	bls.n	8007c9e <_scanf_float+0x86>
 8007c9c:	e0ee      	b.n	8007e7c <_scanf_float+0x264>
 8007c9e:	2001      	movs	r0, #1
 8007ca0:	b00b      	add	sp, #44	@ 0x2c
 8007ca2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007ca4:	0018      	movs	r0, r3
 8007ca6:	3861      	subs	r0, #97	@ 0x61
 8007ca8:	280d      	cmp	r0, #13
 8007caa:	d8e6      	bhi.n	8007c7a <_scanf_float+0x62>
 8007cac:	f7f8 fa3a 	bl	8000124 <__gnu_thumb1_case_shi>
 8007cb0:	ffe50089 	.word	0xffe50089
 8007cb4:	ffe5ffe5 	.word	0xffe5ffe5
 8007cb8:	00a700bb 	.word	0x00a700bb
 8007cbc:	ffe5ffe5 	.word	0xffe5ffe5
 8007cc0:	ffe5008f 	.word	0xffe5008f
 8007cc4:	ffe5ffe5 	.word	0xffe5ffe5
 8007cc8:	006bffe5 	.word	0x006bffe5
 8007ccc:	3841      	subs	r0, #65	@ 0x41
 8007cce:	e7eb      	b.n	8007ca8 <_scanf_float+0x90>
 8007cd0:	280e      	cmp	r0, #14
 8007cd2:	d8d2      	bhi.n	8007c7a <_scanf_float+0x62>
 8007cd4:	f7f8 fa26 	bl	8000124 <__gnu_thumb1_case_shi>
 8007cd8:	ffd1004f 	.word	0xffd1004f
 8007cdc:	009d004f 	.word	0x009d004f
 8007ce0:	0021ffd1 	.word	0x0021ffd1
 8007ce4:	00410041 	.word	0x00410041
 8007ce8:	00410041 	.word	0x00410041
 8007cec:	00410041 	.word	0x00410041
 8007cf0:	00410041 	.word	0x00410041
 8007cf4:	0041      	.short	0x0041
 8007cf6:	2b6e      	cmp	r3, #110	@ 0x6e
 8007cf8:	d80a      	bhi.n	8007d10 <_scanf_float+0xf8>
 8007cfa:	2b60      	cmp	r3, #96	@ 0x60
 8007cfc:	d8d2      	bhi.n	8007ca4 <_scanf_float+0x8c>
 8007cfe:	2b54      	cmp	r3, #84	@ 0x54
 8007d00:	d100      	bne.n	8007d04 <_scanf_float+0xec>
 8007d02:	e081      	b.n	8007e08 <_scanf_float+0x1f0>
 8007d04:	2b59      	cmp	r3, #89	@ 0x59
 8007d06:	d1b8      	bne.n	8007c7a <_scanf_float+0x62>
 8007d08:	2d07      	cmp	r5, #7
 8007d0a:	d1b6      	bne.n	8007c7a <_scanf_float+0x62>
 8007d0c:	2508      	movs	r5, #8
 8007d0e:	e02f      	b.n	8007d70 <_scanf_float+0x158>
 8007d10:	2b74      	cmp	r3, #116	@ 0x74
 8007d12:	d079      	beq.n	8007e08 <_scanf_float+0x1f0>
 8007d14:	2b79      	cmp	r3, #121	@ 0x79
 8007d16:	d0f7      	beq.n	8007d08 <_scanf_float+0xf0>
 8007d18:	e7af      	b.n	8007c7a <_scanf_float+0x62>
 8007d1a:	6821      	ldr	r1, [r4, #0]
 8007d1c:	05c8      	lsls	r0, r1, #23
 8007d1e:	d51c      	bpl.n	8007d5a <_scanf_float+0x142>
 8007d20:	2380      	movs	r3, #128	@ 0x80
 8007d22:	4399      	bics	r1, r3
 8007d24:	9b01      	ldr	r3, [sp, #4]
 8007d26:	6021      	str	r1, [r4, #0]
 8007d28:	3301      	adds	r3, #1
 8007d2a:	9301      	str	r3, [sp, #4]
 8007d2c:	9b06      	ldr	r3, [sp, #24]
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d003      	beq.n	8007d3a <_scanf_float+0x122>
 8007d32:	3b01      	subs	r3, #1
 8007d34:	3201      	adds	r2, #1
 8007d36:	9306      	str	r3, [sp, #24]
 8007d38:	60a2      	str	r2, [r4, #8]
 8007d3a:	68a3      	ldr	r3, [r4, #8]
 8007d3c:	3b01      	subs	r3, #1
 8007d3e:	60a3      	str	r3, [r4, #8]
 8007d40:	6923      	ldr	r3, [r4, #16]
 8007d42:	3301      	adds	r3, #1
 8007d44:	6123      	str	r3, [r4, #16]
 8007d46:	6873      	ldr	r3, [r6, #4]
 8007d48:	3b01      	subs	r3, #1
 8007d4a:	6073      	str	r3, [r6, #4]
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	dc00      	bgt.n	8007d52 <_scanf_float+0x13a>
 8007d50:	e08a      	b.n	8007e68 <_scanf_float+0x250>
 8007d52:	6833      	ldr	r3, [r6, #0]
 8007d54:	3301      	adds	r3, #1
 8007d56:	6033      	str	r3, [r6, #0]
 8007d58:	e781      	b.n	8007c5e <_scanf_float+0x46>
 8007d5a:	9a02      	ldr	r2, [sp, #8]
 8007d5c:	1951      	adds	r1, r2, r5
 8007d5e:	2900      	cmp	r1, #0
 8007d60:	d000      	beq.n	8007d64 <_scanf_float+0x14c>
 8007d62:	e78a      	b.n	8007c7a <_scanf_float+0x62>
 8007d64:	000d      	movs	r5, r1
 8007d66:	6822      	ldr	r2, [r4, #0]
 8007d68:	486d      	ldr	r0, [pc, #436]	@ (8007f20 <_scanf_float+0x308>)
 8007d6a:	9102      	str	r1, [sp, #8]
 8007d6c:	4002      	ands	r2, r0
 8007d6e:	6022      	str	r2, [r4, #0]
 8007d70:	703b      	strb	r3, [r7, #0]
 8007d72:	3701      	adds	r7, #1
 8007d74:	e7e1      	b.n	8007d3a <_scanf_float+0x122>
 8007d76:	2180      	movs	r1, #128	@ 0x80
 8007d78:	6822      	ldr	r2, [r4, #0]
 8007d7a:	420a      	tst	r2, r1
 8007d7c:	d100      	bne.n	8007d80 <_scanf_float+0x168>
 8007d7e:	e77c      	b.n	8007c7a <_scanf_float+0x62>
 8007d80:	438a      	bics	r2, r1
 8007d82:	6022      	str	r2, [r4, #0]
 8007d84:	e7f4      	b.n	8007d70 <_scanf_float+0x158>
 8007d86:	9a02      	ldr	r2, [sp, #8]
 8007d88:	2a00      	cmp	r2, #0
 8007d8a:	d10f      	bne.n	8007dac <_scanf_float+0x194>
 8007d8c:	9a01      	ldr	r2, [sp, #4]
 8007d8e:	2a00      	cmp	r2, #0
 8007d90:	d10f      	bne.n	8007db2 <_scanf_float+0x19a>
 8007d92:	6822      	ldr	r2, [r4, #0]
 8007d94:	21e0      	movs	r1, #224	@ 0xe0
 8007d96:	0010      	movs	r0, r2
 8007d98:	00c9      	lsls	r1, r1, #3
 8007d9a:	4008      	ands	r0, r1
 8007d9c:	4288      	cmp	r0, r1
 8007d9e:	d108      	bne.n	8007db2 <_scanf_float+0x19a>
 8007da0:	4960      	ldr	r1, [pc, #384]	@ (8007f24 <_scanf_float+0x30c>)
 8007da2:	400a      	ands	r2, r1
 8007da4:	6022      	str	r2, [r4, #0]
 8007da6:	2201      	movs	r2, #1
 8007da8:	9202      	str	r2, [sp, #8]
 8007daa:	e7e1      	b.n	8007d70 <_scanf_float+0x158>
 8007dac:	9a02      	ldr	r2, [sp, #8]
 8007dae:	2a02      	cmp	r2, #2
 8007db0:	d058      	beq.n	8007e64 <_scanf_float+0x24c>
 8007db2:	2d01      	cmp	r5, #1
 8007db4:	d002      	beq.n	8007dbc <_scanf_float+0x1a4>
 8007db6:	2d04      	cmp	r5, #4
 8007db8:	d000      	beq.n	8007dbc <_scanf_float+0x1a4>
 8007dba:	e75e      	b.n	8007c7a <_scanf_float+0x62>
 8007dbc:	3501      	adds	r5, #1
 8007dbe:	b2ed      	uxtb	r5, r5
 8007dc0:	e7d6      	b.n	8007d70 <_scanf_float+0x158>
 8007dc2:	9a02      	ldr	r2, [sp, #8]
 8007dc4:	2a01      	cmp	r2, #1
 8007dc6:	d000      	beq.n	8007dca <_scanf_float+0x1b2>
 8007dc8:	e757      	b.n	8007c7a <_scanf_float+0x62>
 8007dca:	2202      	movs	r2, #2
 8007dcc:	e7ec      	b.n	8007da8 <_scanf_float+0x190>
 8007dce:	2d00      	cmp	r5, #0
 8007dd0:	d110      	bne.n	8007df4 <_scanf_float+0x1dc>
 8007dd2:	9a01      	ldr	r2, [sp, #4]
 8007dd4:	2a00      	cmp	r2, #0
 8007dd6:	d000      	beq.n	8007dda <_scanf_float+0x1c2>
 8007dd8:	e752      	b.n	8007c80 <_scanf_float+0x68>
 8007dda:	6822      	ldr	r2, [r4, #0]
 8007ddc:	21e0      	movs	r1, #224	@ 0xe0
 8007dde:	0010      	movs	r0, r2
 8007de0:	00c9      	lsls	r1, r1, #3
 8007de2:	4008      	ands	r0, r1
 8007de4:	4288      	cmp	r0, r1
 8007de6:	d000      	beq.n	8007dea <_scanf_float+0x1d2>
 8007de8:	e11b      	b.n	8008022 <_scanf_float+0x40a>
 8007dea:	494e      	ldr	r1, [pc, #312]	@ (8007f24 <_scanf_float+0x30c>)
 8007dec:	3501      	adds	r5, #1
 8007dee:	400a      	ands	r2, r1
 8007df0:	6022      	str	r2, [r4, #0]
 8007df2:	e7bd      	b.n	8007d70 <_scanf_float+0x158>
 8007df4:	21fd      	movs	r1, #253	@ 0xfd
 8007df6:	1eea      	subs	r2, r5, #3
 8007df8:	420a      	tst	r2, r1
 8007dfa:	d0df      	beq.n	8007dbc <_scanf_float+0x1a4>
 8007dfc:	e73d      	b.n	8007c7a <_scanf_float+0x62>
 8007dfe:	2d02      	cmp	r5, #2
 8007e00:	d000      	beq.n	8007e04 <_scanf_float+0x1ec>
 8007e02:	e73a      	b.n	8007c7a <_scanf_float+0x62>
 8007e04:	2503      	movs	r5, #3
 8007e06:	e7b3      	b.n	8007d70 <_scanf_float+0x158>
 8007e08:	2d06      	cmp	r5, #6
 8007e0a:	d000      	beq.n	8007e0e <_scanf_float+0x1f6>
 8007e0c:	e735      	b.n	8007c7a <_scanf_float+0x62>
 8007e0e:	2507      	movs	r5, #7
 8007e10:	e7ae      	b.n	8007d70 <_scanf_float+0x158>
 8007e12:	6822      	ldr	r2, [r4, #0]
 8007e14:	0591      	lsls	r1, r2, #22
 8007e16:	d400      	bmi.n	8007e1a <_scanf_float+0x202>
 8007e18:	e72f      	b.n	8007c7a <_scanf_float+0x62>
 8007e1a:	4943      	ldr	r1, [pc, #268]	@ (8007f28 <_scanf_float+0x310>)
 8007e1c:	400a      	ands	r2, r1
 8007e1e:	6022      	str	r2, [r4, #0]
 8007e20:	9a01      	ldr	r2, [sp, #4]
 8007e22:	9205      	str	r2, [sp, #20]
 8007e24:	e7a4      	b.n	8007d70 <_scanf_float+0x158>
 8007e26:	21a0      	movs	r1, #160	@ 0xa0
 8007e28:	2080      	movs	r0, #128	@ 0x80
 8007e2a:	6822      	ldr	r2, [r4, #0]
 8007e2c:	00c9      	lsls	r1, r1, #3
 8007e2e:	4011      	ands	r1, r2
 8007e30:	00c0      	lsls	r0, r0, #3
 8007e32:	4281      	cmp	r1, r0
 8007e34:	d006      	beq.n	8007e44 <_scanf_float+0x22c>
 8007e36:	4202      	tst	r2, r0
 8007e38:	d100      	bne.n	8007e3c <_scanf_float+0x224>
 8007e3a:	e71e      	b.n	8007c7a <_scanf_float+0x62>
 8007e3c:	9901      	ldr	r1, [sp, #4]
 8007e3e:	2900      	cmp	r1, #0
 8007e40:	d100      	bne.n	8007e44 <_scanf_float+0x22c>
 8007e42:	e0ee      	b.n	8008022 <_scanf_float+0x40a>
 8007e44:	0591      	lsls	r1, r2, #22
 8007e46:	d404      	bmi.n	8007e52 <_scanf_float+0x23a>
 8007e48:	9901      	ldr	r1, [sp, #4]
 8007e4a:	9805      	ldr	r0, [sp, #20]
 8007e4c:	9709      	str	r7, [sp, #36]	@ 0x24
 8007e4e:	1a09      	subs	r1, r1, r0
 8007e50:	9108      	str	r1, [sp, #32]
 8007e52:	4934      	ldr	r1, [pc, #208]	@ (8007f24 <_scanf_float+0x30c>)
 8007e54:	400a      	ands	r2, r1
 8007e56:	21c0      	movs	r1, #192	@ 0xc0
 8007e58:	0049      	lsls	r1, r1, #1
 8007e5a:	430a      	orrs	r2, r1
 8007e5c:	6022      	str	r2, [r4, #0]
 8007e5e:	2200      	movs	r2, #0
 8007e60:	9201      	str	r2, [sp, #4]
 8007e62:	e785      	b.n	8007d70 <_scanf_float+0x158>
 8007e64:	2203      	movs	r2, #3
 8007e66:	e79f      	b.n	8007da8 <_scanf_float+0x190>
 8007e68:	23c0      	movs	r3, #192	@ 0xc0
 8007e6a:	005b      	lsls	r3, r3, #1
 8007e6c:	0031      	movs	r1, r6
 8007e6e:	58e3      	ldr	r3, [r4, r3]
 8007e70:	9803      	ldr	r0, [sp, #12]
 8007e72:	4798      	blx	r3
 8007e74:	2800      	cmp	r0, #0
 8007e76:	d100      	bne.n	8007e7a <_scanf_float+0x262>
 8007e78:	e6f1      	b.n	8007c5e <_scanf_float+0x46>
 8007e7a:	e6fe      	b.n	8007c7a <_scanf_float+0x62>
 8007e7c:	3f01      	subs	r7, #1
 8007e7e:	5963      	ldr	r3, [r4, r5]
 8007e80:	0032      	movs	r2, r6
 8007e82:	7839      	ldrb	r1, [r7, #0]
 8007e84:	9803      	ldr	r0, [sp, #12]
 8007e86:	4798      	blx	r3
 8007e88:	6923      	ldr	r3, [r4, #16]
 8007e8a:	3b01      	subs	r3, #1
 8007e8c:	6123      	str	r3, [r4, #16]
 8007e8e:	e702      	b.n	8007c96 <_scanf_float+0x7e>
 8007e90:	1e6b      	subs	r3, r5, #1
 8007e92:	2b06      	cmp	r3, #6
 8007e94:	d80e      	bhi.n	8007eb4 <_scanf_float+0x29c>
 8007e96:	9702      	str	r7, [sp, #8]
 8007e98:	2d02      	cmp	r5, #2
 8007e9a:	d920      	bls.n	8007ede <_scanf_float+0x2c6>
 8007e9c:	1beb      	subs	r3, r5, r7
 8007e9e:	b2db      	uxtb	r3, r3
 8007ea0:	9306      	str	r3, [sp, #24]
 8007ea2:	9b02      	ldr	r3, [sp, #8]
 8007ea4:	9a06      	ldr	r2, [sp, #24]
 8007ea6:	189b      	adds	r3, r3, r2
 8007ea8:	b2db      	uxtb	r3, r3
 8007eaa:	2b03      	cmp	r3, #3
 8007eac:	d127      	bne.n	8007efe <_scanf_float+0x2e6>
 8007eae:	3d03      	subs	r5, #3
 8007eb0:	b2ed      	uxtb	r5, r5
 8007eb2:	1b7f      	subs	r7, r7, r5
 8007eb4:	6823      	ldr	r3, [r4, #0]
 8007eb6:	05da      	lsls	r2, r3, #23
 8007eb8:	d553      	bpl.n	8007f62 <_scanf_float+0x34a>
 8007eba:	055b      	lsls	r3, r3, #21
 8007ebc:	d536      	bpl.n	8007f2c <_scanf_float+0x314>
 8007ebe:	25be      	movs	r5, #190	@ 0xbe
 8007ec0:	006d      	lsls	r5, r5, #1
 8007ec2:	9b04      	ldr	r3, [sp, #16]
 8007ec4:	429f      	cmp	r7, r3
 8007ec6:	d800      	bhi.n	8007eca <_scanf_float+0x2b2>
 8007ec8:	e6e9      	b.n	8007c9e <_scanf_float+0x86>
 8007eca:	3f01      	subs	r7, #1
 8007ecc:	5963      	ldr	r3, [r4, r5]
 8007ece:	0032      	movs	r2, r6
 8007ed0:	7839      	ldrb	r1, [r7, #0]
 8007ed2:	9803      	ldr	r0, [sp, #12]
 8007ed4:	4798      	blx	r3
 8007ed6:	6923      	ldr	r3, [r4, #16]
 8007ed8:	3b01      	subs	r3, #1
 8007eda:	6123      	str	r3, [r4, #16]
 8007edc:	e7f1      	b.n	8007ec2 <_scanf_float+0x2aa>
 8007ede:	25be      	movs	r5, #190	@ 0xbe
 8007ee0:	006d      	lsls	r5, r5, #1
 8007ee2:	9b04      	ldr	r3, [sp, #16]
 8007ee4:	429f      	cmp	r7, r3
 8007ee6:	d800      	bhi.n	8007eea <_scanf_float+0x2d2>
 8007ee8:	e6d9      	b.n	8007c9e <_scanf_float+0x86>
 8007eea:	3f01      	subs	r7, #1
 8007eec:	5963      	ldr	r3, [r4, r5]
 8007eee:	0032      	movs	r2, r6
 8007ef0:	7839      	ldrb	r1, [r7, #0]
 8007ef2:	9803      	ldr	r0, [sp, #12]
 8007ef4:	4798      	blx	r3
 8007ef6:	6923      	ldr	r3, [r4, #16]
 8007ef8:	3b01      	subs	r3, #1
 8007efa:	6123      	str	r3, [r4, #16]
 8007efc:	e7f1      	b.n	8007ee2 <_scanf_float+0x2ca>
 8007efe:	9b02      	ldr	r3, [sp, #8]
 8007f00:	0032      	movs	r2, r6
 8007f02:	3b01      	subs	r3, #1
 8007f04:	7819      	ldrb	r1, [r3, #0]
 8007f06:	9302      	str	r3, [sp, #8]
 8007f08:	23be      	movs	r3, #190	@ 0xbe
 8007f0a:	005b      	lsls	r3, r3, #1
 8007f0c:	58e3      	ldr	r3, [r4, r3]
 8007f0e:	9803      	ldr	r0, [sp, #12]
 8007f10:	4798      	blx	r3
 8007f12:	6923      	ldr	r3, [r4, #16]
 8007f14:	3b01      	subs	r3, #1
 8007f16:	6123      	str	r3, [r4, #16]
 8007f18:	e7c3      	b.n	8007ea2 <_scanf_float+0x28a>
 8007f1a:	46c0      	nop			@ (mov r8, r8)
 8007f1c:	fffffeff 	.word	0xfffffeff
 8007f20:	fffffe7f 	.word	0xfffffe7f
 8007f24:	fffff87f 	.word	0xfffff87f
 8007f28:	fffffd7f 	.word	0xfffffd7f
 8007f2c:	6923      	ldr	r3, [r4, #16]
 8007f2e:	1e7d      	subs	r5, r7, #1
 8007f30:	7829      	ldrb	r1, [r5, #0]
 8007f32:	3b01      	subs	r3, #1
 8007f34:	6123      	str	r3, [r4, #16]
 8007f36:	2965      	cmp	r1, #101	@ 0x65
 8007f38:	d00c      	beq.n	8007f54 <_scanf_float+0x33c>
 8007f3a:	2945      	cmp	r1, #69	@ 0x45
 8007f3c:	d00a      	beq.n	8007f54 <_scanf_float+0x33c>
 8007f3e:	23be      	movs	r3, #190	@ 0xbe
 8007f40:	005b      	lsls	r3, r3, #1
 8007f42:	58e3      	ldr	r3, [r4, r3]
 8007f44:	0032      	movs	r2, r6
 8007f46:	9803      	ldr	r0, [sp, #12]
 8007f48:	4798      	blx	r3
 8007f4a:	6923      	ldr	r3, [r4, #16]
 8007f4c:	1ebd      	subs	r5, r7, #2
 8007f4e:	3b01      	subs	r3, #1
 8007f50:	7829      	ldrb	r1, [r5, #0]
 8007f52:	6123      	str	r3, [r4, #16]
 8007f54:	23be      	movs	r3, #190	@ 0xbe
 8007f56:	005b      	lsls	r3, r3, #1
 8007f58:	0032      	movs	r2, r6
 8007f5a:	58e3      	ldr	r3, [r4, r3]
 8007f5c:	9803      	ldr	r0, [sp, #12]
 8007f5e:	4798      	blx	r3
 8007f60:	002f      	movs	r7, r5
 8007f62:	6821      	ldr	r1, [r4, #0]
 8007f64:	2310      	movs	r3, #16
 8007f66:	000a      	movs	r2, r1
 8007f68:	401a      	ands	r2, r3
 8007f6a:	4219      	tst	r1, r3
 8007f6c:	d001      	beq.n	8007f72 <_scanf_float+0x35a>
 8007f6e:	2000      	movs	r0, #0
 8007f70:	e696      	b.n	8007ca0 <_scanf_float+0x88>
 8007f72:	21c0      	movs	r1, #192	@ 0xc0
 8007f74:	703a      	strb	r2, [r7, #0]
 8007f76:	6823      	ldr	r3, [r4, #0]
 8007f78:	00c9      	lsls	r1, r1, #3
 8007f7a:	400b      	ands	r3, r1
 8007f7c:	2180      	movs	r1, #128	@ 0x80
 8007f7e:	00c9      	lsls	r1, r1, #3
 8007f80:	428b      	cmp	r3, r1
 8007f82:	d126      	bne.n	8007fd2 <_scanf_float+0x3ba>
 8007f84:	9b05      	ldr	r3, [sp, #20]
 8007f86:	9a01      	ldr	r2, [sp, #4]
 8007f88:	4293      	cmp	r3, r2
 8007f8a:	d00c      	beq.n	8007fa6 <_scanf_float+0x38e>
 8007f8c:	1a9a      	subs	r2, r3, r2
 8007f8e:	0023      	movs	r3, r4
 8007f90:	3370      	adds	r3, #112	@ 0x70
 8007f92:	33ff      	adds	r3, #255	@ 0xff
 8007f94:	429f      	cmp	r7, r3
 8007f96:	d302      	bcc.n	8007f9e <_scanf_float+0x386>
 8007f98:	0027      	movs	r7, r4
 8007f9a:	376f      	adds	r7, #111	@ 0x6f
 8007f9c:	37ff      	adds	r7, #255	@ 0xff
 8007f9e:	0038      	movs	r0, r7
 8007fa0:	4921      	ldr	r1, [pc, #132]	@ (8008028 <_scanf_float+0x410>)
 8007fa2:	f000 f87b 	bl	800809c <siprintf>
 8007fa6:	2200      	movs	r2, #0
 8007fa8:	9904      	ldr	r1, [sp, #16]
 8007faa:	9803      	ldr	r0, [sp, #12]
 8007fac:	f000 ff56 	bl	8008e5c <_strtod_r>
 8007fb0:	9b07      	ldr	r3, [sp, #28]
 8007fb2:	6822      	ldr	r2, [r4, #0]
 8007fb4:	0006      	movs	r6, r0
 8007fb6:	000f      	movs	r7, r1
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	0791      	lsls	r1, r2, #30
 8007fbc:	d516      	bpl.n	8007fec <_scanf_float+0x3d4>
 8007fbe:	9907      	ldr	r1, [sp, #28]
 8007fc0:	1d1a      	adds	r2, r3, #4
 8007fc2:	600a      	str	r2, [r1, #0]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	601e      	str	r6, [r3, #0]
 8007fc8:	605f      	str	r7, [r3, #4]
 8007fca:	68e3      	ldr	r3, [r4, #12]
 8007fcc:	3301      	adds	r3, #1
 8007fce:	60e3      	str	r3, [r4, #12]
 8007fd0:	e7cd      	b.n	8007f6e <_scanf_float+0x356>
 8007fd2:	9b08      	ldr	r3, [sp, #32]
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d0e6      	beq.n	8007fa6 <_scanf_float+0x38e>
 8007fd8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007fda:	9803      	ldr	r0, [sp, #12]
 8007fdc:	1c59      	adds	r1, r3, #1
 8007fde:	230a      	movs	r3, #10
 8007fe0:	f000 ffce 	bl	8008f80 <_strtol_r>
 8007fe4:	9b08      	ldr	r3, [sp, #32]
 8007fe6:	9f09      	ldr	r7, [sp, #36]	@ 0x24
 8007fe8:	1ac2      	subs	r2, r0, r3
 8007fea:	e7d0      	b.n	8007f8e <_scanf_float+0x376>
 8007fec:	1d19      	adds	r1, r3, #4
 8007fee:	0752      	lsls	r2, r2, #29
 8007ff0:	d502      	bpl.n	8007ff8 <_scanf_float+0x3e0>
 8007ff2:	9a07      	ldr	r2, [sp, #28]
 8007ff4:	6011      	str	r1, [r2, #0]
 8007ff6:	e7e5      	b.n	8007fc4 <_scanf_float+0x3ac>
 8007ff8:	9a07      	ldr	r2, [sp, #28]
 8007ffa:	0030      	movs	r0, r6
 8007ffc:	6011      	str	r1, [r2, #0]
 8007ffe:	681d      	ldr	r5, [r3, #0]
 8008000:	0032      	movs	r2, r6
 8008002:	003b      	movs	r3, r7
 8008004:	0039      	movs	r1, r7
 8008006:	f7fb f9c7 	bl	8003398 <__aeabi_dcmpun>
 800800a:	2800      	cmp	r0, #0
 800800c:	d004      	beq.n	8008018 <_scanf_float+0x400>
 800800e:	4807      	ldr	r0, [pc, #28]	@ (800802c <_scanf_float+0x414>)
 8008010:	f001 f83c 	bl	800908c <nanf>
 8008014:	6028      	str	r0, [r5, #0]
 8008016:	e7d8      	b.n	8007fca <_scanf_float+0x3b2>
 8008018:	0030      	movs	r0, r6
 800801a:	0039      	movs	r1, r7
 800801c:	f7fb fa6c 	bl	80034f8 <__aeabi_d2f>
 8008020:	e7f8      	b.n	8008014 <_scanf_float+0x3fc>
 8008022:	2300      	movs	r3, #0
 8008024:	9301      	str	r3, [sp, #4]
 8008026:	e62f      	b.n	8007c88 <_scanf_float+0x70>
 8008028:	0800c000 	.word	0x0800c000
 800802c:	0800c1a1 	.word	0x0800c1a1

08008030 <sniprintf>:
 8008030:	b40c      	push	{r2, r3}
 8008032:	b530      	push	{r4, r5, lr}
 8008034:	4b18      	ldr	r3, [pc, #96]	@ (8008098 <sniprintf+0x68>)
 8008036:	000c      	movs	r4, r1
 8008038:	681d      	ldr	r5, [r3, #0]
 800803a:	b09d      	sub	sp, #116	@ 0x74
 800803c:	2900      	cmp	r1, #0
 800803e:	da08      	bge.n	8008052 <sniprintf+0x22>
 8008040:	238b      	movs	r3, #139	@ 0x8b
 8008042:	2001      	movs	r0, #1
 8008044:	602b      	str	r3, [r5, #0]
 8008046:	4240      	negs	r0, r0
 8008048:	b01d      	add	sp, #116	@ 0x74
 800804a:	bc30      	pop	{r4, r5}
 800804c:	bc08      	pop	{r3}
 800804e:	b002      	add	sp, #8
 8008050:	4718      	bx	r3
 8008052:	2382      	movs	r3, #130	@ 0x82
 8008054:	466a      	mov	r2, sp
 8008056:	009b      	lsls	r3, r3, #2
 8008058:	8293      	strh	r3, [r2, #20]
 800805a:	2300      	movs	r3, #0
 800805c:	9002      	str	r0, [sp, #8]
 800805e:	931b      	str	r3, [sp, #108]	@ 0x6c
 8008060:	9006      	str	r0, [sp, #24]
 8008062:	4299      	cmp	r1, r3
 8008064:	d000      	beq.n	8008068 <sniprintf+0x38>
 8008066:	1e4b      	subs	r3, r1, #1
 8008068:	9304      	str	r3, [sp, #16]
 800806a:	9307      	str	r3, [sp, #28]
 800806c:	2301      	movs	r3, #1
 800806e:	466a      	mov	r2, sp
 8008070:	425b      	negs	r3, r3
 8008072:	82d3      	strh	r3, [r2, #22]
 8008074:	0028      	movs	r0, r5
 8008076:	ab21      	add	r3, sp, #132	@ 0x84
 8008078:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800807a:	a902      	add	r1, sp, #8
 800807c:	9301      	str	r3, [sp, #4]
 800807e:	f002 fa39 	bl	800a4f4 <_svfiprintf_r>
 8008082:	1c43      	adds	r3, r0, #1
 8008084:	da01      	bge.n	800808a <sniprintf+0x5a>
 8008086:	238b      	movs	r3, #139	@ 0x8b
 8008088:	602b      	str	r3, [r5, #0]
 800808a:	2c00      	cmp	r4, #0
 800808c:	d0dc      	beq.n	8008048 <sniprintf+0x18>
 800808e:	2200      	movs	r2, #0
 8008090:	9b02      	ldr	r3, [sp, #8]
 8008092:	701a      	strb	r2, [r3, #0]
 8008094:	e7d8      	b.n	8008048 <sniprintf+0x18>
 8008096:	46c0      	nop			@ (mov r8, r8)
 8008098:	2000018c 	.word	0x2000018c

0800809c <siprintf>:
 800809c:	b40e      	push	{r1, r2, r3}
 800809e:	b510      	push	{r4, lr}
 80080a0:	2400      	movs	r4, #0
 80080a2:	490c      	ldr	r1, [pc, #48]	@ (80080d4 <siprintf+0x38>)
 80080a4:	b09d      	sub	sp, #116	@ 0x74
 80080a6:	ab1f      	add	r3, sp, #124	@ 0x7c
 80080a8:	9002      	str	r0, [sp, #8]
 80080aa:	9006      	str	r0, [sp, #24]
 80080ac:	9107      	str	r1, [sp, #28]
 80080ae:	9104      	str	r1, [sp, #16]
 80080b0:	4809      	ldr	r0, [pc, #36]	@ (80080d8 <siprintf+0x3c>)
 80080b2:	490a      	ldr	r1, [pc, #40]	@ (80080dc <siprintf+0x40>)
 80080b4:	cb04      	ldmia	r3!, {r2}
 80080b6:	9105      	str	r1, [sp, #20]
 80080b8:	6800      	ldr	r0, [r0, #0]
 80080ba:	a902      	add	r1, sp, #8
 80080bc:	9301      	str	r3, [sp, #4]
 80080be:	941b      	str	r4, [sp, #108]	@ 0x6c
 80080c0:	f002 fa18 	bl	800a4f4 <_svfiprintf_r>
 80080c4:	9b02      	ldr	r3, [sp, #8]
 80080c6:	701c      	strb	r4, [r3, #0]
 80080c8:	b01d      	add	sp, #116	@ 0x74
 80080ca:	bc10      	pop	{r4}
 80080cc:	bc08      	pop	{r3}
 80080ce:	b003      	add	sp, #12
 80080d0:	4718      	bx	r3
 80080d2:	46c0      	nop			@ (mov r8, r8)
 80080d4:	7fffffff 	.word	0x7fffffff
 80080d8:	2000018c 	.word	0x2000018c
 80080dc:	ffff0208 	.word	0xffff0208

080080e0 <std>:
 80080e0:	2300      	movs	r3, #0
 80080e2:	b510      	push	{r4, lr}
 80080e4:	0004      	movs	r4, r0
 80080e6:	6003      	str	r3, [r0, #0]
 80080e8:	6043      	str	r3, [r0, #4]
 80080ea:	6083      	str	r3, [r0, #8]
 80080ec:	8181      	strh	r1, [r0, #12]
 80080ee:	6643      	str	r3, [r0, #100]	@ 0x64
 80080f0:	81c2      	strh	r2, [r0, #14]
 80080f2:	6103      	str	r3, [r0, #16]
 80080f4:	6143      	str	r3, [r0, #20]
 80080f6:	6183      	str	r3, [r0, #24]
 80080f8:	0019      	movs	r1, r3
 80080fa:	2208      	movs	r2, #8
 80080fc:	305c      	adds	r0, #92	@ 0x5c
 80080fe:	f000 ff5f 	bl	8008fc0 <memset>
 8008102:	4b0b      	ldr	r3, [pc, #44]	@ (8008130 <std+0x50>)
 8008104:	6224      	str	r4, [r4, #32]
 8008106:	6263      	str	r3, [r4, #36]	@ 0x24
 8008108:	4b0a      	ldr	r3, [pc, #40]	@ (8008134 <std+0x54>)
 800810a:	62a3      	str	r3, [r4, #40]	@ 0x28
 800810c:	4b0a      	ldr	r3, [pc, #40]	@ (8008138 <std+0x58>)
 800810e:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8008110:	4b0a      	ldr	r3, [pc, #40]	@ (800813c <std+0x5c>)
 8008112:	6323      	str	r3, [r4, #48]	@ 0x30
 8008114:	4b0a      	ldr	r3, [pc, #40]	@ (8008140 <std+0x60>)
 8008116:	429c      	cmp	r4, r3
 8008118:	d005      	beq.n	8008126 <std+0x46>
 800811a:	4b0a      	ldr	r3, [pc, #40]	@ (8008144 <std+0x64>)
 800811c:	429c      	cmp	r4, r3
 800811e:	d002      	beq.n	8008126 <std+0x46>
 8008120:	4b09      	ldr	r3, [pc, #36]	@ (8008148 <std+0x68>)
 8008122:	429c      	cmp	r4, r3
 8008124:	d103      	bne.n	800812e <std+0x4e>
 8008126:	0020      	movs	r0, r4
 8008128:	3058      	adds	r0, #88	@ 0x58
 800812a:	f000 ff8d 	bl	8009048 <__retarget_lock_init_recursive>
 800812e:	bd10      	pop	{r4, pc}
 8008130:	0800b375 	.word	0x0800b375
 8008134:	0800b39d 	.word	0x0800b39d
 8008138:	0800b3d5 	.word	0x0800b3d5
 800813c:	0800b401 	.word	0x0800b401
 8008140:	2000030c 	.word	0x2000030c
 8008144:	20000374 	.word	0x20000374
 8008148:	200003dc 	.word	0x200003dc

0800814c <stdio_exit_handler>:
 800814c:	b510      	push	{r4, lr}
 800814e:	4a03      	ldr	r2, [pc, #12]	@ (800815c <stdio_exit_handler+0x10>)
 8008150:	4903      	ldr	r1, [pc, #12]	@ (8008160 <stdio_exit_handler+0x14>)
 8008152:	4804      	ldr	r0, [pc, #16]	@ (8008164 <stdio_exit_handler+0x18>)
 8008154:	f000 ff18 	bl	8008f88 <_fwalk_sglue>
 8008158:	bd10      	pop	{r4, pc}
 800815a:	46c0      	nop			@ (mov r8, r8)
 800815c:	20000014 	.word	0x20000014
 8008160:	0800a979 	.word	0x0800a979
 8008164:	20000190 	.word	0x20000190

08008168 <cleanup_stdio>:
 8008168:	6841      	ldr	r1, [r0, #4]
 800816a:	4b0b      	ldr	r3, [pc, #44]	@ (8008198 <cleanup_stdio+0x30>)
 800816c:	b510      	push	{r4, lr}
 800816e:	0004      	movs	r4, r0
 8008170:	4299      	cmp	r1, r3
 8008172:	d001      	beq.n	8008178 <cleanup_stdio+0x10>
 8008174:	f002 fc00 	bl	800a978 <_fflush_r>
 8008178:	68a1      	ldr	r1, [r4, #8]
 800817a:	4b08      	ldr	r3, [pc, #32]	@ (800819c <cleanup_stdio+0x34>)
 800817c:	4299      	cmp	r1, r3
 800817e:	d002      	beq.n	8008186 <cleanup_stdio+0x1e>
 8008180:	0020      	movs	r0, r4
 8008182:	f002 fbf9 	bl	800a978 <_fflush_r>
 8008186:	68e1      	ldr	r1, [r4, #12]
 8008188:	4b05      	ldr	r3, [pc, #20]	@ (80081a0 <cleanup_stdio+0x38>)
 800818a:	4299      	cmp	r1, r3
 800818c:	d002      	beq.n	8008194 <cleanup_stdio+0x2c>
 800818e:	0020      	movs	r0, r4
 8008190:	f002 fbf2 	bl	800a978 <_fflush_r>
 8008194:	bd10      	pop	{r4, pc}
 8008196:	46c0      	nop			@ (mov r8, r8)
 8008198:	2000030c 	.word	0x2000030c
 800819c:	20000374 	.word	0x20000374
 80081a0:	200003dc 	.word	0x200003dc

080081a4 <global_stdio_init.part.0>:
 80081a4:	b510      	push	{r4, lr}
 80081a6:	4b09      	ldr	r3, [pc, #36]	@ (80081cc <global_stdio_init.part.0+0x28>)
 80081a8:	4a09      	ldr	r2, [pc, #36]	@ (80081d0 <global_stdio_init.part.0+0x2c>)
 80081aa:	2104      	movs	r1, #4
 80081ac:	601a      	str	r2, [r3, #0]
 80081ae:	4809      	ldr	r0, [pc, #36]	@ (80081d4 <global_stdio_init.part.0+0x30>)
 80081b0:	2200      	movs	r2, #0
 80081b2:	f7ff ff95 	bl	80080e0 <std>
 80081b6:	2201      	movs	r2, #1
 80081b8:	2109      	movs	r1, #9
 80081ba:	4807      	ldr	r0, [pc, #28]	@ (80081d8 <global_stdio_init.part.0+0x34>)
 80081bc:	f7ff ff90 	bl	80080e0 <std>
 80081c0:	2202      	movs	r2, #2
 80081c2:	2112      	movs	r1, #18
 80081c4:	4805      	ldr	r0, [pc, #20]	@ (80081dc <global_stdio_init.part.0+0x38>)
 80081c6:	f7ff ff8b 	bl	80080e0 <std>
 80081ca:	bd10      	pop	{r4, pc}
 80081cc:	20000444 	.word	0x20000444
 80081d0:	0800814d 	.word	0x0800814d
 80081d4:	2000030c 	.word	0x2000030c
 80081d8:	20000374 	.word	0x20000374
 80081dc:	200003dc 	.word	0x200003dc

080081e0 <__sfp_lock_acquire>:
 80081e0:	b510      	push	{r4, lr}
 80081e2:	4802      	ldr	r0, [pc, #8]	@ (80081ec <__sfp_lock_acquire+0xc>)
 80081e4:	f000 ff31 	bl	800904a <__retarget_lock_acquire_recursive>
 80081e8:	bd10      	pop	{r4, pc}
 80081ea:	46c0      	nop			@ (mov r8, r8)
 80081ec:	20000449 	.word	0x20000449

080081f0 <__sfp_lock_release>:
 80081f0:	b510      	push	{r4, lr}
 80081f2:	4802      	ldr	r0, [pc, #8]	@ (80081fc <__sfp_lock_release+0xc>)
 80081f4:	f000 ff2a 	bl	800904c <__retarget_lock_release_recursive>
 80081f8:	bd10      	pop	{r4, pc}
 80081fa:	46c0      	nop			@ (mov r8, r8)
 80081fc:	20000449 	.word	0x20000449

08008200 <__sinit>:
 8008200:	b510      	push	{r4, lr}
 8008202:	0004      	movs	r4, r0
 8008204:	f7ff ffec 	bl	80081e0 <__sfp_lock_acquire>
 8008208:	6a23      	ldr	r3, [r4, #32]
 800820a:	2b00      	cmp	r3, #0
 800820c:	d002      	beq.n	8008214 <__sinit+0x14>
 800820e:	f7ff ffef 	bl	80081f0 <__sfp_lock_release>
 8008212:	bd10      	pop	{r4, pc}
 8008214:	4b04      	ldr	r3, [pc, #16]	@ (8008228 <__sinit+0x28>)
 8008216:	6223      	str	r3, [r4, #32]
 8008218:	4b04      	ldr	r3, [pc, #16]	@ (800822c <__sinit+0x2c>)
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	2b00      	cmp	r3, #0
 800821e:	d1f6      	bne.n	800820e <__sinit+0xe>
 8008220:	f7ff ffc0 	bl	80081a4 <global_stdio_init.part.0>
 8008224:	e7f3      	b.n	800820e <__sinit+0xe>
 8008226:	46c0      	nop			@ (mov r8, r8)
 8008228:	08008169 	.word	0x08008169
 800822c:	20000444 	.word	0x20000444

08008230 <sulp>:
 8008230:	b570      	push	{r4, r5, r6, lr}
 8008232:	0016      	movs	r6, r2
 8008234:	000d      	movs	r5, r1
 8008236:	f002 ff63 	bl	800b100 <__ulp>
 800823a:	2e00      	cmp	r6, #0
 800823c:	d00d      	beq.n	800825a <sulp+0x2a>
 800823e:	236b      	movs	r3, #107	@ 0x6b
 8008240:	006a      	lsls	r2, r5, #1
 8008242:	0d52      	lsrs	r2, r2, #21
 8008244:	1a9b      	subs	r3, r3, r2
 8008246:	2b00      	cmp	r3, #0
 8008248:	dd07      	ble.n	800825a <sulp+0x2a>
 800824a:	2400      	movs	r4, #0
 800824c:	4a03      	ldr	r2, [pc, #12]	@ (800825c <sulp+0x2c>)
 800824e:	051b      	lsls	r3, r3, #20
 8008250:	189d      	adds	r5, r3, r2
 8008252:	002b      	movs	r3, r5
 8008254:	0022      	movs	r2, r4
 8008256:	f7fa f9af 	bl	80025b8 <__aeabi_dmul>
 800825a:	bd70      	pop	{r4, r5, r6, pc}
 800825c:	3ff00000 	.word	0x3ff00000

08008260 <_strtod_l>:
 8008260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008262:	b0a3      	sub	sp, #140	@ 0x8c
 8008264:	921b      	str	r2, [sp, #108]	@ 0x6c
 8008266:	2200      	movs	r2, #0
 8008268:	2600      	movs	r6, #0
 800826a:	2700      	movs	r7, #0
 800826c:	9005      	str	r0, [sp, #20]
 800826e:	9109      	str	r1, [sp, #36]	@ 0x24
 8008270:	921e      	str	r2, [sp, #120]	@ 0x78
 8008272:	911d      	str	r1, [sp, #116]	@ 0x74
 8008274:	780a      	ldrb	r2, [r1, #0]
 8008276:	2a2b      	cmp	r2, #43	@ 0x2b
 8008278:	d053      	beq.n	8008322 <_strtod_l+0xc2>
 800827a:	d83f      	bhi.n	80082fc <_strtod_l+0x9c>
 800827c:	2a0d      	cmp	r2, #13
 800827e:	d839      	bhi.n	80082f4 <_strtod_l+0x94>
 8008280:	2a08      	cmp	r2, #8
 8008282:	d839      	bhi.n	80082f8 <_strtod_l+0x98>
 8008284:	2a00      	cmp	r2, #0
 8008286:	d042      	beq.n	800830e <_strtod_l+0xae>
 8008288:	2200      	movs	r2, #0
 800828a:	9212      	str	r2, [sp, #72]	@ 0x48
 800828c:	2100      	movs	r1, #0
 800828e:	9d1d      	ldr	r5, [sp, #116]	@ 0x74
 8008290:	910c      	str	r1, [sp, #48]	@ 0x30
 8008292:	782a      	ldrb	r2, [r5, #0]
 8008294:	2a30      	cmp	r2, #48	@ 0x30
 8008296:	d000      	beq.n	800829a <_strtod_l+0x3a>
 8008298:	e083      	b.n	80083a2 <_strtod_l+0x142>
 800829a:	786a      	ldrb	r2, [r5, #1]
 800829c:	3120      	adds	r1, #32
 800829e:	438a      	bics	r2, r1
 80082a0:	2a58      	cmp	r2, #88	@ 0x58
 80082a2:	d000      	beq.n	80082a6 <_strtod_l+0x46>
 80082a4:	e073      	b.n	800838e <_strtod_l+0x12e>
 80082a6:	9302      	str	r3, [sp, #8]
 80082a8:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80082aa:	4a9b      	ldr	r2, [pc, #620]	@ (8008518 <_strtod_l+0x2b8>)
 80082ac:	9301      	str	r3, [sp, #4]
 80082ae:	ab1e      	add	r3, sp, #120	@ 0x78
 80082b0:	9300      	str	r3, [sp, #0]
 80082b2:	9805      	ldr	r0, [sp, #20]
 80082b4:	ab1f      	add	r3, sp, #124	@ 0x7c
 80082b6:	a91d      	add	r1, sp, #116	@ 0x74
 80082b8:	f001 fdca 	bl	8009e50 <__gethex>
 80082bc:	230f      	movs	r3, #15
 80082be:	0002      	movs	r2, r0
 80082c0:	401a      	ands	r2, r3
 80082c2:	0004      	movs	r4, r0
 80082c4:	9206      	str	r2, [sp, #24]
 80082c6:	4218      	tst	r0, r3
 80082c8:	d005      	beq.n	80082d6 <_strtod_l+0x76>
 80082ca:	2a06      	cmp	r2, #6
 80082cc:	d12b      	bne.n	8008326 <_strtod_l+0xc6>
 80082ce:	2300      	movs	r3, #0
 80082d0:	3501      	adds	r5, #1
 80082d2:	951d      	str	r5, [sp, #116]	@ 0x74
 80082d4:	9312      	str	r3, [sp, #72]	@ 0x48
 80082d6:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d002      	beq.n	80082e2 <_strtod_l+0x82>
 80082dc:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80082de:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 80082e0:	6013      	str	r3, [r2, #0]
 80082e2:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d019      	beq.n	800831c <_strtod_l+0xbc>
 80082e8:	2380      	movs	r3, #128	@ 0x80
 80082ea:	0030      	movs	r0, r6
 80082ec:	061b      	lsls	r3, r3, #24
 80082ee:	18f9      	adds	r1, r7, r3
 80082f0:	b023      	add	sp, #140	@ 0x8c
 80082f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80082f4:	2a20      	cmp	r2, #32
 80082f6:	d1c7      	bne.n	8008288 <_strtod_l+0x28>
 80082f8:	3101      	adds	r1, #1
 80082fa:	e7ba      	b.n	8008272 <_strtod_l+0x12>
 80082fc:	2a2d      	cmp	r2, #45	@ 0x2d
 80082fe:	d1c3      	bne.n	8008288 <_strtod_l+0x28>
 8008300:	3a2c      	subs	r2, #44	@ 0x2c
 8008302:	9212      	str	r2, [sp, #72]	@ 0x48
 8008304:	1c4a      	adds	r2, r1, #1
 8008306:	921d      	str	r2, [sp, #116]	@ 0x74
 8008308:	784a      	ldrb	r2, [r1, #1]
 800830a:	2a00      	cmp	r2, #0
 800830c:	d1be      	bne.n	800828c <_strtod_l+0x2c>
 800830e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008310:	931d      	str	r3, [sp, #116]	@ 0x74
 8008312:	2300      	movs	r3, #0
 8008314:	9312      	str	r3, [sp, #72]	@ 0x48
 8008316:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8008318:	2b00      	cmp	r3, #0
 800831a:	d1df      	bne.n	80082dc <_strtod_l+0x7c>
 800831c:	0030      	movs	r0, r6
 800831e:	0039      	movs	r1, r7
 8008320:	e7e6      	b.n	80082f0 <_strtod_l+0x90>
 8008322:	2200      	movs	r2, #0
 8008324:	e7ed      	b.n	8008302 <_strtod_l+0xa2>
 8008326:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 8008328:	2a00      	cmp	r2, #0
 800832a:	d007      	beq.n	800833c <_strtod_l+0xdc>
 800832c:	2135      	movs	r1, #53	@ 0x35
 800832e:	a820      	add	r0, sp, #128	@ 0x80
 8008330:	f002 ffdc 	bl	800b2ec <__copybits>
 8008334:	991e      	ldr	r1, [sp, #120]	@ 0x78
 8008336:	9805      	ldr	r0, [sp, #20]
 8008338:	f002 fb9e 	bl	800aa78 <_Bfree>
 800833c:	9806      	ldr	r0, [sp, #24]
 800833e:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8008340:	3801      	subs	r0, #1
 8008342:	2804      	cmp	r0, #4
 8008344:	d806      	bhi.n	8008354 <_strtod_l+0xf4>
 8008346:	f7f7 fee3 	bl	8000110 <__gnu_thumb1_case_uqi>
 800834a:	0312      	.short	0x0312
 800834c:	1e1c      	.short	0x1e1c
 800834e:	12          	.byte	0x12
 800834f:	00          	.byte	0x00
 8008350:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8008352:	9f21      	ldr	r7, [sp, #132]	@ 0x84
 8008354:	05e4      	lsls	r4, r4, #23
 8008356:	d502      	bpl.n	800835e <_strtod_l+0xfe>
 8008358:	2380      	movs	r3, #128	@ 0x80
 800835a:	061b      	lsls	r3, r3, #24
 800835c:	431f      	orrs	r7, r3
 800835e:	4b6f      	ldr	r3, [pc, #444]	@ (800851c <_strtod_l+0x2bc>)
 8008360:	423b      	tst	r3, r7
 8008362:	d1b8      	bne.n	80082d6 <_strtod_l+0x76>
 8008364:	f000 fe46 	bl	8008ff4 <__errno>
 8008368:	2322      	movs	r3, #34	@ 0x22
 800836a:	6003      	str	r3, [r0, #0]
 800836c:	e7b3      	b.n	80082d6 <_strtod_l+0x76>
 800836e:	496c      	ldr	r1, [pc, #432]	@ (8008520 <_strtod_l+0x2c0>)
 8008370:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8008372:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8008374:	400a      	ands	r2, r1
 8008376:	496b      	ldr	r1, [pc, #428]	@ (8008524 <_strtod_l+0x2c4>)
 8008378:	185b      	adds	r3, r3, r1
 800837a:	051b      	lsls	r3, r3, #20
 800837c:	431a      	orrs	r2, r3
 800837e:	0017      	movs	r7, r2
 8008380:	e7e8      	b.n	8008354 <_strtod_l+0xf4>
 8008382:	4f66      	ldr	r7, [pc, #408]	@ (800851c <_strtod_l+0x2bc>)
 8008384:	e7e6      	b.n	8008354 <_strtod_l+0xf4>
 8008386:	2601      	movs	r6, #1
 8008388:	4f67      	ldr	r7, [pc, #412]	@ (8008528 <_strtod_l+0x2c8>)
 800838a:	4276      	negs	r6, r6
 800838c:	e7e2      	b.n	8008354 <_strtod_l+0xf4>
 800838e:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8008390:	1c5a      	adds	r2, r3, #1
 8008392:	921d      	str	r2, [sp, #116]	@ 0x74
 8008394:	785b      	ldrb	r3, [r3, #1]
 8008396:	2b30      	cmp	r3, #48	@ 0x30
 8008398:	d0f9      	beq.n	800838e <_strtod_l+0x12e>
 800839a:	2b00      	cmp	r3, #0
 800839c:	d09b      	beq.n	80082d6 <_strtod_l+0x76>
 800839e:	2301      	movs	r3, #1
 80083a0:	930c      	str	r3, [sp, #48]	@ 0x30
 80083a2:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80083a4:	220a      	movs	r2, #10
 80083a6:	9313      	str	r3, [sp, #76]	@ 0x4c
 80083a8:	2300      	movs	r3, #0
 80083aa:	9310      	str	r3, [sp, #64]	@ 0x40
 80083ac:	930d      	str	r3, [sp, #52]	@ 0x34
 80083ae:	9308      	str	r3, [sp, #32]
 80083b0:	981d      	ldr	r0, [sp, #116]	@ 0x74
 80083b2:	7804      	ldrb	r4, [r0, #0]
 80083b4:	0023      	movs	r3, r4
 80083b6:	3b30      	subs	r3, #48	@ 0x30
 80083b8:	b2d9      	uxtb	r1, r3
 80083ba:	2909      	cmp	r1, #9
 80083bc:	d927      	bls.n	800840e <_strtod_l+0x1ae>
 80083be:	2201      	movs	r2, #1
 80083c0:	495a      	ldr	r1, [pc, #360]	@ (800852c <_strtod_l+0x2cc>)
 80083c2:	f000 fe05 	bl	8008fd0 <strncmp>
 80083c6:	2800      	cmp	r0, #0
 80083c8:	d033      	beq.n	8008432 <_strtod_l+0x1d2>
 80083ca:	2000      	movs	r0, #0
 80083cc:	0023      	movs	r3, r4
 80083ce:	4684      	mov	ip, r0
 80083d0:	9a08      	ldr	r2, [sp, #32]
 80083d2:	900e      	str	r0, [sp, #56]	@ 0x38
 80083d4:	9206      	str	r2, [sp, #24]
 80083d6:	2220      	movs	r2, #32
 80083d8:	0019      	movs	r1, r3
 80083da:	4391      	bics	r1, r2
 80083dc:	000a      	movs	r2, r1
 80083de:	2100      	movs	r1, #0
 80083e0:	9107      	str	r1, [sp, #28]
 80083e2:	2a45      	cmp	r2, #69	@ 0x45
 80083e4:	d000      	beq.n	80083e8 <_strtod_l+0x188>
 80083e6:	e0cb      	b.n	8008580 <_strtod_l+0x320>
 80083e8:	9b06      	ldr	r3, [sp, #24]
 80083ea:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80083ec:	4303      	orrs	r3, r0
 80083ee:	4313      	orrs	r3, r2
 80083f0:	428b      	cmp	r3, r1
 80083f2:	d08c      	beq.n	800830e <_strtod_l+0xae>
 80083f4:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80083f6:	9309      	str	r3, [sp, #36]	@ 0x24
 80083f8:	3301      	adds	r3, #1
 80083fa:	931d      	str	r3, [sp, #116]	@ 0x74
 80083fc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80083fe:	785b      	ldrb	r3, [r3, #1]
 8008400:	2b2b      	cmp	r3, #43	@ 0x2b
 8008402:	d07b      	beq.n	80084fc <_strtod_l+0x29c>
 8008404:	000c      	movs	r4, r1
 8008406:	2b2d      	cmp	r3, #45	@ 0x2d
 8008408:	d17e      	bne.n	8008508 <_strtod_l+0x2a8>
 800840a:	2401      	movs	r4, #1
 800840c:	e077      	b.n	80084fe <_strtod_l+0x29e>
 800840e:	9908      	ldr	r1, [sp, #32]
 8008410:	2908      	cmp	r1, #8
 8008412:	dc09      	bgt.n	8008428 <_strtod_l+0x1c8>
 8008414:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8008416:	4351      	muls	r1, r2
 8008418:	185b      	adds	r3, r3, r1
 800841a:	930d      	str	r3, [sp, #52]	@ 0x34
 800841c:	9b08      	ldr	r3, [sp, #32]
 800841e:	3001      	adds	r0, #1
 8008420:	3301      	adds	r3, #1
 8008422:	9308      	str	r3, [sp, #32]
 8008424:	901d      	str	r0, [sp, #116]	@ 0x74
 8008426:	e7c3      	b.n	80083b0 <_strtod_l+0x150>
 8008428:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 800842a:	4355      	muls	r5, r2
 800842c:	195b      	adds	r3, r3, r5
 800842e:	9310      	str	r3, [sp, #64]	@ 0x40
 8008430:	e7f4      	b.n	800841c <_strtod_l+0x1bc>
 8008432:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8008434:	1c5a      	adds	r2, r3, #1
 8008436:	921d      	str	r2, [sp, #116]	@ 0x74
 8008438:	9a08      	ldr	r2, [sp, #32]
 800843a:	785b      	ldrb	r3, [r3, #1]
 800843c:	2a00      	cmp	r2, #0
 800843e:	d03e      	beq.n	80084be <_strtod_l+0x25e>
 8008440:	900e      	str	r0, [sp, #56]	@ 0x38
 8008442:	9206      	str	r2, [sp, #24]
 8008444:	001a      	movs	r2, r3
 8008446:	3a30      	subs	r2, #48	@ 0x30
 8008448:	2a09      	cmp	r2, #9
 800844a:	d912      	bls.n	8008472 <_strtod_l+0x212>
 800844c:	2201      	movs	r2, #1
 800844e:	4694      	mov	ip, r2
 8008450:	e7c1      	b.n	80083d6 <_strtod_l+0x176>
 8008452:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8008454:	3001      	adds	r0, #1
 8008456:	1c5a      	adds	r2, r3, #1
 8008458:	921d      	str	r2, [sp, #116]	@ 0x74
 800845a:	785b      	ldrb	r3, [r3, #1]
 800845c:	2b30      	cmp	r3, #48	@ 0x30
 800845e:	d0f8      	beq.n	8008452 <_strtod_l+0x1f2>
 8008460:	001a      	movs	r2, r3
 8008462:	3a31      	subs	r2, #49	@ 0x31
 8008464:	2a08      	cmp	r2, #8
 8008466:	d844      	bhi.n	80084f2 <_strtod_l+0x292>
 8008468:	900e      	str	r0, [sp, #56]	@ 0x38
 800846a:	2000      	movs	r0, #0
 800846c:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 800846e:	9006      	str	r0, [sp, #24]
 8008470:	9213      	str	r2, [sp, #76]	@ 0x4c
 8008472:	001c      	movs	r4, r3
 8008474:	1c42      	adds	r2, r0, #1
 8008476:	3c30      	subs	r4, #48	@ 0x30
 8008478:	2b30      	cmp	r3, #48	@ 0x30
 800847a:	d01a      	beq.n	80084b2 <_strtod_l+0x252>
 800847c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800847e:	9906      	ldr	r1, [sp, #24]
 8008480:	189b      	adds	r3, r3, r2
 8008482:	930e      	str	r3, [sp, #56]	@ 0x38
 8008484:	230a      	movs	r3, #10
 8008486:	469c      	mov	ip, r3
 8008488:	9d06      	ldr	r5, [sp, #24]
 800848a:	1c4b      	adds	r3, r1, #1
 800848c:	1b5d      	subs	r5, r3, r5
 800848e:	42aa      	cmp	r2, r5
 8008490:	dc17      	bgt.n	80084c2 <_strtod_l+0x262>
 8008492:	43c3      	mvns	r3, r0
 8008494:	9a06      	ldr	r2, [sp, #24]
 8008496:	17db      	asrs	r3, r3, #31
 8008498:	4003      	ands	r3, r0
 800849a:	18d1      	adds	r1, r2, r3
 800849c:	3201      	adds	r2, #1
 800849e:	18d3      	adds	r3, r2, r3
 80084a0:	9306      	str	r3, [sp, #24]
 80084a2:	2908      	cmp	r1, #8
 80084a4:	dc1c      	bgt.n	80084e0 <_strtod_l+0x280>
 80084a6:	230a      	movs	r3, #10
 80084a8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80084aa:	4353      	muls	r3, r2
 80084ac:	2200      	movs	r2, #0
 80084ae:	18e3      	adds	r3, r4, r3
 80084b0:	930d      	str	r3, [sp, #52]	@ 0x34
 80084b2:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80084b4:	0010      	movs	r0, r2
 80084b6:	1c59      	adds	r1, r3, #1
 80084b8:	911d      	str	r1, [sp, #116]	@ 0x74
 80084ba:	785b      	ldrb	r3, [r3, #1]
 80084bc:	e7c2      	b.n	8008444 <_strtod_l+0x1e4>
 80084be:	9808      	ldr	r0, [sp, #32]
 80084c0:	e7cc      	b.n	800845c <_strtod_l+0x1fc>
 80084c2:	2908      	cmp	r1, #8
 80084c4:	dc05      	bgt.n	80084d2 <_strtod_l+0x272>
 80084c6:	4665      	mov	r5, ip
 80084c8:	990d      	ldr	r1, [sp, #52]	@ 0x34
 80084ca:	4369      	muls	r1, r5
 80084cc:	910d      	str	r1, [sp, #52]	@ 0x34
 80084ce:	0019      	movs	r1, r3
 80084d0:	e7da      	b.n	8008488 <_strtod_l+0x228>
 80084d2:	2b10      	cmp	r3, #16
 80084d4:	dcfb      	bgt.n	80084ce <_strtod_l+0x26e>
 80084d6:	4661      	mov	r1, ip
 80084d8:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 80084da:	434d      	muls	r5, r1
 80084dc:	9510      	str	r5, [sp, #64]	@ 0x40
 80084de:	e7f6      	b.n	80084ce <_strtod_l+0x26e>
 80084e0:	2200      	movs	r2, #0
 80084e2:	290f      	cmp	r1, #15
 80084e4:	dce5      	bgt.n	80084b2 <_strtod_l+0x252>
 80084e6:	230a      	movs	r3, #10
 80084e8:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 80084ea:	435d      	muls	r5, r3
 80084ec:	1963      	adds	r3, r4, r5
 80084ee:	9310      	str	r3, [sp, #64]	@ 0x40
 80084f0:	e7df      	b.n	80084b2 <_strtod_l+0x252>
 80084f2:	2200      	movs	r2, #0
 80084f4:	920e      	str	r2, [sp, #56]	@ 0x38
 80084f6:	9206      	str	r2, [sp, #24]
 80084f8:	3201      	adds	r2, #1
 80084fa:	e7a8      	b.n	800844e <_strtod_l+0x1ee>
 80084fc:	2400      	movs	r4, #0
 80084fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008500:	3302      	adds	r3, #2
 8008502:	931d      	str	r3, [sp, #116]	@ 0x74
 8008504:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008506:	789b      	ldrb	r3, [r3, #2]
 8008508:	001a      	movs	r2, r3
 800850a:	3a30      	subs	r2, #48	@ 0x30
 800850c:	2a09      	cmp	r2, #9
 800850e:	d913      	bls.n	8008538 <_strtod_l+0x2d8>
 8008510:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008512:	921d      	str	r2, [sp, #116]	@ 0x74
 8008514:	2200      	movs	r2, #0
 8008516:	e032      	b.n	800857e <_strtod_l+0x31e>
 8008518:	0800c1b8 	.word	0x0800c1b8
 800851c:	7ff00000 	.word	0x7ff00000
 8008520:	ffefffff 	.word	0xffefffff
 8008524:	00000433 	.word	0x00000433
 8008528:	7fffffff 	.word	0x7fffffff
 800852c:	0800c005 	.word	0x0800c005
 8008530:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8008532:	1c5a      	adds	r2, r3, #1
 8008534:	921d      	str	r2, [sp, #116]	@ 0x74
 8008536:	785b      	ldrb	r3, [r3, #1]
 8008538:	2b30      	cmp	r3, #48	@ 0x30
 800853a:	d0f9      	beq.n	8008530 <_strtod_l+0x2d0>
 800853c:	2200      	movs	r2, #0
 800853e:	9207      	str	r2, [sp, #28]
 8008540:	001a      	movs	r2, r3
 8008542:	3a31      	subs	r2, #49	@ 0x31
 8008544:	2a08      	cmp	r2, #8
 8008546:	d81b      	bhi.n	8008580 <_strtod_l+0x320>
 8008548:	3b30      	subs	r3, #48	@ 0x30
 800854a:	001a      	movs	r2, r3
 800854c:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800854e:	9307      	str	r3, [sp, #28]
 8008550:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8008552:	1c59      	adds	r1, r3, #1
 8008554:	911d      	str	r1, [sp, #116]	@ 0x74
 8008556:	785b      	ldrb	r3, [r3, #1]
 8008558:	001d      	movs	r5, r3
 800855a:	3d30      	subs	r5, #48	@ 0x30
 800855c:	2d09      	cmp	r5, #9
 800855e:	d93a      	bls.n	80085d6 <_strtod_l+0x376>
 8008560:	9d07      	ldr	r5, [sp, #28]
 8008562:	1b49      	subs	r1, r1, r5
 8008564:	000d      	movs	r5, r1
 8008566:	49b3      	ldr	r1, [pc, #716]	@ (8008834 <_strtod_l+0x5d4>)
 8008568:	9107      	str	r1, [sp, #28]
 800856a:	2d08      	cmp	r5, #8
 800856c:	dc03      	bgt.n	8008576 <_strtod_l+0x316>
 800856e:	9207      	str	r2, [sp, #28]
 8008570:	428a      	cmp	r2, r1
 8008572:	dd00      	ble.n	8008576 <_strtod_l+0x316>
 8008574:	9107      	str	r1, [sp, #28]
 8008576:	2c00      	cmp	r4, #0
 8008578:	d002      	beq.n	8008580 <_strtod_l+0x320>
 800857a:	9a07      	ldr	r2, [sp, #28]
 800857c:	4252      	negs	r2, r2
 800857e:	9207      	str	r2, [sp, #28]
 8008580:	9a06      	ldr	r2, [sp, #24]
 8008582:	2a00      	cmp	r2, #0
 8008584:	d14b      	bne.n	800861e <_strtod_l+0x3be>
 8008586:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8008588:	4310      	orrs	r0, r2
 800858a:	d000      	beq.n	800858e <_strtod_l+0x32e>
 800858c:	e6a3      	b.n	80082d6 <_strtod_l+0x76>
 800858e:	4662      	mov	r2, ip
 8008590:	2a00      	cmp	r2, #0
 8008592:	d000      	beq.n	8008596 <_strtod_l+0x336>
 8008594:	e6bb      	b.n	800830e <_strtod_l+0xae>
 8008596:	2b69      	cmp	r3, #105	@ 0x69
 8008598:	d025      	beq.n	80085e6 <_strtod_l+0x386>
 800859a:	dc21      	bgt.n	80085e0 <_strtod_l+0x380>
 800859c:	2b49      	cmp	r3, #73	@ 0x49
 800859e:	d022      	beq.n	80085e6 <_strtod_l+0x386>
 80085a0:	2b4e      	cmp	r3, #78	@ 0x4e
 80085a2:	d000      	beq.n	80085a6 <_strtod_l+0x346>
 80085a4:	e6b3      	b.n	800830e <_strtod_l+0xae>
 80085a6:	49a4      	ldr	r1, [pc, #656]	@ (8008838 <_strtod_l+0x5d8>)
 80085a8:	a81d      	add	r0, sp, #116	@ 0x74
 80085aa:	f001 fe87 	bl	800a2bc <__match>
 80085ae:	2800      	cmp	r0, #0
 80085b0:	d100      	bne.n	80085b4 <_strtod_l+0x354>
 80085b2:	e6ac      	b.n	800830e <_strtod_l+0xae>
 80085b4:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80085b6:	781b      	ldrb	r3, [r3, #0]
 80085b8:	2b28      	cmp	r3, #40	@ 0x28
 80085ba:	d12a      	bne.n	8008612 <_strtod_l+0x3b2>
 80085bc:	499f      	ldr	r1, [pc, #636]	@ (800883c <_strtod_l+0x5dc>)
 80085be:	aa20      	add	r2, sp, #128	@ 0x80
 80085c0:	a81d      	add	r0, sp, #116	@ 0x74
 80085c2:	f001 fe8f 	bl	800a2e4 <__hexnan>
 80085c6:	2805      	cmp	r0, #5
 80085c8:	d123      	bne.n	8008612 <_strtod_l+0x3b2>
 80085ca:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80085cc:	4a9c      	ldr	r2, [pc, #624]	@ (8008840 <_strtod_l+0x5e0>)
 80085ce:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 80085d0:	431a      	orrs	r2, r3
 80085d2:	0017      	movs	r7, r2
 80085d4:	e67f      	b.n	80082d6 <_strtod_l+0x76>
 80085d6:	210a      	movs	r1, #10
 80085d8:	434a      	muls	r2, r1
 80085da:	18d2      	adds	r2, r2, r3
 80085dc:	3a30      	subs	r2, #48	@ 0x30
 80085de:	e7b7      	b.n	8008550 <_strtod_l+0x2f0>
 80085e0:	2b6e      	cmp	r3, #110	@ 0x6e
 80085e2:	d0e0      	beq.n	80085a6 <_strtod_l+0x346>
 80085e4:	e693      	b.n	800830e <_strtod_l+0xae>
 80085e6:	4997      	ldr	r1, [pc, #604]	@ (8008844 <_strtod_l+0x5e4>)
 80085e8:	a81d      	add	r0, sp, #116	@ 0x74
 80085ea:	f001 fe67 	bl	800a2bc <__match>
 80085ee:	2800      	cmp	r0, #0
 80085f0:	d100      	bne.n	80085f4 <_strtod_l+0x394>
 80085f2:	e68c      	b.n	800830e <_strtod_l+0xae>
 80085f4:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80085f6:	4994      	ldr	r1, [pc, #592]	@ (8008848 <_strtod_l+0x5e8>)
 80085f8:	3b01      	subs	r3, #1
 80085fa:	a81d      	add	r0, sp, #116	@ 0x74
 80085fc:	931d      	str	r3, [sp, #116]	@ 0x74
 80085fe:	f001 fe5d 	bl	800a2bc <__match>
 8008602:	2800      	cmp	r0, #0
 8008604:	d102      	bne.n	800860c <_strtod_l+0x3ac>
 8008606:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8008608:	3301      	adds	r3, #1
 800860a:	931d      	str	r3, [sp, #116]	@ 0x74
 800860c:	2600      	movs	r6, #0
 800860e:	4f8c      	ldr	r7, [pc, #560]	@ (8008840 <_strtod_l+0x5e0>)
 8008610:	e661      	b.n	80082d6 <_strtod_l+0x76>
 8008612:	488e      	ldr	r0, [pc, #568]	@ (800884c <_strtod_l+0x5ec>)
 8008614:	f000 fd34 	bl	8009080 <nan>
 8008618:	0006      	movs	r6, r0
 800861a:	000f      	movs	r7, r1
 800861c:	e65b      	b.n	80082d6 <_strtod_l+0x76>
 800861e:	9b07      	ldr	r3, [sp, #28]
 8008620:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008622:	1a9b      	subs	r3, r3, r2
 8008624:	930c      	str	r3, [sp, #48]	@ 0x30
 8008626:	9b08      	ldr	r3, [sp, #32]
 8008628:	2b00      	cmp	r3, #0
 800862a:	d101      	bne.n	8008630 <_strtod_l+0x3d0>
 800862c:	9b06      	ldr	r3, [sp, #24]
 800862e:	9308      	str	r3, [sp, #32]
 8008630:	9c06      	ldr	r4, [sp, #24]
 8008632:	2c10      	cmp	r4, #16
 8008634:	dd00      	ble.n	8008638 <_strtod_l+0x3d8>
 8008636:	2410      	movs	r4, #16
 8008638:	980d      	ldr	r0, [sp, #52]	@ 0x34
 800863a:	f7fa ff39 	bl	80034b0 <__aeabi_ui2d>
 800863e:	9b06      	ldr	r3, [sp, #24]
 8008640:	0006      	movs	r6, r0
 8008642:	000f      	movs	r7, r1
 8008644:	2b09      	cmp	r3, #9
 8008646:	dc13      	bgt.n	8008670 <_strtod_l+0x410>
 8008648:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800864a:	2b00      	cmp	r3, #0
 800864c:	d100      	bne.n	8008650 <_strtod_l+0x3f0>
 800864e:	e642      	b.n	80082d6 <_strtod_l+0x76>
 8008650:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008652:	2b00      	cmp	r3, #0
 8008654:	dc00      	bgt.n	8008658 <_strtod_l+0x3f8>
 8008656:	e07e      	b.n	8008756 <_strtod_l+0x4f6>
 8008658:	2b16      	cmp	r3, #22
 800865a:	dc63      	bgt.n	8008724 <_strtod_l+0x4c4>
 800865c:	497c      	ldr	r1, [pc, #496]	@ (8008850 <_strtod_l+0x5f0>)
 800865e:	00db      	lsls	r3, r3, #3
 8008660:	18c9      	adds	r1, r1, r3
 8008662:	0032      	movs	r2, r6
 8008664:	6808      	ldr	r0, [r1, #0]
 8008666:	6849      	ldr	r1, [r1, #4]
 8008668:	003b      	movs	r3, r7
 800866a:	f7f9 ffa5 	bl	80025b8 <__aeabi_dmul>
 800866e:	e7d3      	b.n	8008618 <_strtod_l+0x3b8>
 8008670:	0022      	movs	r2, r4
 8008672:	4b77      	ldr	r3, [pc, #476]	@ (8008850 <_strtod_l+0x5f0>)
 8008674:	3a09      	subs	r2, #9
 8008676:	00d2      	lsls	r2, r2, #3
 8008678:	189b      	adds	r3, r3, r2
 800867a:	681a      	ldr	r2, [r3, #0]
 800867c:	685b      	ldr	r3, [r3, #4]
 800867e:	f7f9 ff9b 	bl	80025b8 <__aeabi_dmul>
 8008682:	0006      	movs	r6, r0
 8008684:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8008686:	000f      	movs	r7, r1
 8008688:	f7fa ff12 	bl	80034b0 <__aeabi_ui2d>
 800868c:	000b      	movs	r3, r1
 800868e:	0002      	movs	r2, r0
 8008690:	0039      	movs	r1, r7
 8008692:	0030      	movs	r0, r6
 8008694:	f7f8 ff90 	bl	80015b8 <__aeabi_dadd>
 8008698:	9b06      	ldr	r3, [sp, #24]
 800869a:	0006      	movs	r6, r0
 800869c:	000f      	movs	r7, r1
 800869e:	2b0f      	cmp	r3, #15
 80086a0:	ddd2      	ble.n	8008648 <_strtod_l+0x3e8>
 80086a2:	9b06      	ldr	r3, [sp, #24]
 80086a4:	1b1c      	subs	r4, r3, r4
 80086a6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80086a8:	18e4      	adds	r4, r4, r3
 80086aa:	2c00      	cmp	r4, #0
 80086ac:	dc00      	bgt.n	80086b0 <_strtod_l+0x450>
 80086ae:	e09b      	b.n	80087e8 <_strtod_l+0x588>
 80086b0:	220f      	movs	r2, #15
 80086b2:	0023      	movs	r3, r4
 80086b4:	4013      	ands	r3, r2
 80086b6:	4214      	tst	r4, r2
 80086b8:	d00a      	beq.n	80086d0 <_strtod_l+0x470>
 80086ba:	4965      	ldr	r1, [pc, #404]	@ (8008850 <_strtod_l+0x5f0>)
 80086bc:	00db      	lsls	r3, r3, #3
 80086be:	18c9      	adds	r1, r1, r3
 80086c0:	0032      	movs	r2, r6
 80086c2:	6808      	ldr	r0, [r1, #0]
 80086c4:	6849      	ldr	r1, [r1, #4]
 80086c6:	003b      	movs	r3, r7
 80086c8:	f7f9 ff76 	bl	80025b8 <__aeabi_dmul>
 80086cc:	0006      	movs	r6, r0
 80086ce:	000f      	movs	r7, r1
 80086d0:	230f      	movs	r3, #15
 80086d2:	439c      	bics	r4, r3
 80086d4:	d073      	beq.n	80087be <_strtod_l+0x55e>
 80086d6:	3326      	adds	r3, #38	@ 0x26
 80086d8:	33ff      	adds	r3, #255	@ 0xff
 80086da:	429c      	cmp	r4, r3
 80086dc:	dd4b      	ble.n	8008776 <_strtod_l+0x516>
 80086de:	2300      	movs	r3, #0
 80086e0:	9306      	str	r3, [sp, #24]
 80086e2:	9307      	str	r3, [sp, #28]
 80086e4:	930d      	str	r3, [sp, #52]	@ 0x34
 80086e6:	9308      	str	r3, [sp, #32]
 80086e8:	2322      	movs	r3, #34	@ 0x22
 80086ea:	2600      	movs	r6, #0
 80086ec:	9a05      	ldr	r2, [sp, #20]
 80086ee:	4f54      	ldr	r7, [pc, #336]	@ (8008840 <_strtod_l+0x5e0>)
 80086f0:	6013      	str	r3, [r2, #0]
 80086f2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80086f4:	42b3      	cmp	r3, r6
 80086f6:	d100      	bne.n	80086fa <_strtod_l+0x49a>
 80086f8:	e5ed      	b.n	80082d6 <_strtod_l+0x76>
 80086fa:	991e      	ldr	r1, [sp, #120]	@ 0x78
 80086fc:	9805      	ldr	r0, [sp, #20]
 80086fe:	f002 f9bb 	bl	800aa78 <_Bfree>
 8008702:	9908      	ldr	r1, [sp, #32]
 8008704:	9805      	ldr	r0, [sp, #20]
 8008706:	f002 f9b7 	bl	800aa78 <_Bfree>
 800870a:	9907      	ldr	r1, [sp, #28]
 800870c:	9805      	ldr	r0, [sp, #20]
 800870e:	f002 f9b3 	bl	800aa78 <_Bfree>
 8008712:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8008714:	9805      	ldr	r0, [sp, #20]
 8008716:	f002 f9af 	bl	800aa78 <_Bfree>
 800871a:	9906      	ldr	r1, [sp, #24]
 800871c:	9805      	ldr	r0, [sp, #20]
 800871e:	f002 f9ab 	bl	800aa78 <_Bfree>
 8008722:	e5d8      	b.n	80082d6 <_strtod_l+0x76>
 8008724:	2325      	movs	r3, #37	@ 0x25
 8008726:	9a06      	ldr	r2, [sp, #24]
 8008728:	1a9b      	subs	r3, r3, r2
 800872a:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800872c:	4293      	cmp	r3, r2
 800872e:	dbb8      	blt.n	80086a2 <_strtod_l+0x442>
 8008730:	240f      	movs	r4, #15
 8008732:	9b06      	ldr	r3, [sp, #24]
 8008734:	4d46      	ldr	r5, [pc, #280]	@ (8008850 <_strtod_l+0x5f0>)
 8008736:	1ae4      	subs	r4, r4, r3
 8008738:	00e1      	lsls	r1, r4, #3
 800873a:	1869      	adds	r1, r5, r1
 800873c:	0032      	movs	r2, r6
 800873e:	6808      	ldr	r0, [r1, #0]
 8008740:	6849      	ldr	r1, [r1, #4]
 8008742:	003b      	movs	r3, r7
 8008744:	f7f9 ff38 	bl	80025b8 <__aeabi_dmul>
 8008748:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800874a:	1b1c      	subs	r4, r3, r4
 800874c:	00e4      	lsls	r4, r4, #3
 800874e:	192d      	adds	r5, r5, r4
 8008750:	682a      	ldr	r2, [r5, #0]
 8008752:	686b      	ldr	r3, [r5, #4]
 8008754:	e789      	b.n	800866a <_strtod_l+0x40a>
 8008756:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008758:	3316      	adds	r3, #22
 800875a:	dba2      	blt.n	80086a2 <_strtod_l+0x442>
 800875c:	9907      	ldr	r1, [sp, #28]
 800875e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008760:	4b3b      	ldr	r3, [pc, #236]	@ (8008850 <_strtod_l+0x5f0>)
 8008762:	1a52      	subs	r2, r2, r1
 8008764:	00d2      	lsls	r2, r2, #3
 8008766:	189b      	adds	r3, r3, r2
 8008768:	0030      	movs	r0, r6
 800876a:	681a      	ldr	r2, [r3, #0]
 800876c:	685b      	ldr	r3, [r3, #4]
 800876e:	0039      	movs	r1, r7
 8008770:	f7f9 fae8 	bl	8001d44 <__aeabi_ddiv>
 8008774:	e750      	b.n	8008618 <_strtod_l+0x3b8>
 8008776:	2300      	movs	r3, #0
 8008778:	0030      	movs	r0, r6
 800877a:	0039      	movs	r1, r7
 800877c:	4d35      	ldr	r5, [pc, #212]	@ (8008854 <_strtod_l+0x5f4>)
 800877e:	1124      	asrs	r4, r4, #4
 8008780:	9309      	str	r3, [sp, #36]	@ 0x24
 8008782:	2c01      	cmp	r4, #1
 8008784:	dc1e      	bgt.n	80087c4 <_strtod_l+0x564>
 8008786:	2b00      	cmp	r3, #0
 8008788:	d001      	beq.n	800878e <_strtod_l+0x52e>
 800878a:	0006      	movs	r6, r0
 800878c:	000f      	movs	r7, r1
 800878e:	4b32      	ldr	r3, [pc, #200]	@ (8008858 <_strtod_l+0x5f8>)
 8008790:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008792:	18ff      	adds	r7, r7, r3
 8008794:	4b2f      	ldr	r3, [pc, #188]	@ (8008854 <_strtod_l+0x5f4>)
 8008796:	00d5      	lsls	r5, r2, #3
 8008798:	195d      	adds	r5, r3, r5
 800879a:	0032      	movs	r2, r6
 800879c:	6828      	ldr	r0, [r5, #0]
 800879e:	6869      	ldr	r1, [r5, #4]
 80087a0:	003b      	movs	r3, r7
 80087a2:	f7f9 ff09 	bl	80025b8 <__aeabi_dmul>
 80087a6:	4b26      	ldr	r3, [pc, #152]	@ (8008840 <_strtod_l+0x5e0>)
 80087a8:	4a2c      	ldr	r2, [pc, #176]	@ (800885c <_strtod_l+0x5fc>)
 80087aa:	0006      	movs	r6, r0
 80087ac:	400b      	ands	r3, r1
 80087ae:	4293      	cmp	r3, r2
 80087b0:	d895      	bhi.n	80086de <_strtod_l+0x47e>
 80087b2:	4a2b      	ldr	r2, [pc, #172]	@ (8008860 <_strtod_l+0x600>)
 80087b4:	4293      	cmp	r3, r2
 80087b6:	d913      	bls.n	80087e0 <_strtod_l+0x580>
 80087b8:	2601      	movs	r6, #1
 80087ba:	4f2a      	ldr	r7, [pc, #168]	@ (8008864 <_strtod_l+0x604>)
 80087bc:	4276      	negs	r6, r6
 80087be:	2300      	movs	r3, #0
 80087c0:	9309      	str	r3, [sp, #36]	@ 0x24
 80087c2:	e086      	b.n	80088d2 <_strtod_l+0x672>
 80087c4:	2201      	movs	r2, #1
 80087c6:	4214      	tst	r4, r2
 80087c8:	d004      	beq.n	80087d4 <_strtod_l+0x574>
 80087ca:	682a      	ldr	r2, [r5, #0]
 80087cc:	686b      	ldr	r3, [r5, #4]
 80087ce:	f7f9 fef3 	bl	80025b8 <__aeabi_dmul>
 80087d2:	2301      	movs	r3, #1
 80087d4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80087d6:	1064      	asrs	r4, r4, #1
 80087d8:	3201      	adds	r2, #1
 80087da:	9209      	str	r2, [sp, #36]	@ 0x24
 80087dc:	3508      	adds	r5, #8
 80087de:	e7d0      	b.n	8008782 <_strtod_l+0x522>
 80087e0:	23d4      	movs	r3, #212	@ 0xd4
 80087e2:	049b      	lsls	r3, r3, #18
 80087e4:	18cf      	adds	r7, r1, r3
 80087e6:	e7ea      	b.n	80087be <_strtod_l+0x55e>
 80087e8:	2c00      	cmp	r4, #0
 80087ea:	d0e8      	beq.n	80087be <_strtod_l+0x55e>
 80087ec:	4264      	negs	r4, r4
 80087ee:	230f      	movs	r3, #15
 80087f0:	0022      	movs	r2, r4
 80087f2:	401a      	ands	r2, r3
 80087f4:	421c      	tst	r4, r3
 80087f6:	d00a      	beq.n	800880e <_strtod_l+0x5ae>
 80087f8:	4b15      	ldr	r3, [pc, #84]	@ (8008850 <_strtod_l+0x5f0>)
 80087fa:	00d2      	lsls	r2, r2, #3
 80087fc:	189b      	adds	r3, r3, r2
 80087fe:	0030      	movs	r0, r6
 8008800:	681a      	ldr	r2, [r3, #0]
 8008802:	685b      	ldr	r3, [r3, #4]
 8008804:	0039      	movs	r1, r7
 8008806:	f7f9 fa9d 	bl	8001d44 <__aeabi_ddiv>
 800880a:	0006      	movs	r6, r0
 800880c:	000f      	movs	r7, r1
 800880e:	1124      	asrs	r4, r4, #4
 8008810:	d0d5      	beq.n	80087be <_strtod_l+0x55e>
 8008812:	2c1f      	cmp	r4, #31
 8008814:	dd28      	ble.n	8008868 <_strtod_l+0x608>
 8008816:	2300      	movs	r3, #0
 8008818:	9306      	str	r3, [sp, #24]
 800881a:	9307      	str	r3, [sp, #28]
 800881c:	930d      	str	r3, [sp, #52]	@ 0x34
 800881e:	9308      	str	r3, [sp, #32]
 8008820:	2322      	movs	r3, #34	@ 0x22
 8008822:	9a05      	ldr	r2, [sp, #20]
 8008824:	2600      	movs	r6, #0
 8008826:	6013      	str	r3, [r2, #0]
 8008828:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800882a:	2700      	movs	r7, #0
 800882c:	2b00      	cmp	r3, #0
 800882e:	d000      	beq.n	8008832 <_strtod_l+0x5d2>
 8008830:	e763      	b.n	80086fa <_strtod_l+0x49a>
 8008832:	e550      	b.n	80082d6 <_strtod_l+0x76>
 8008834:	00004e1f 	.word	0x00004e1f
 8008838:	0800bfd9 	.word	0x0800bfd9
 800883c:	0800c1a4 	.word	0x0800c1a4
 8008840:	7ff00000 	.word	0x7ff00000
 8008844:	0800bfd1 	.word	0x0800bfd1
 8008848:	0800c012 	.word	0x0800c012
 800884c:	0800c1a1 	.word	0x0800c1a1
 8008850:	0800c330 	.word	0x0800c330
 8008854:	0800c308 	.word	0x0800c308
 8008858:	fcb00000 	.word	0xfcb00000
 800885c:	7ca00000 	.word	0x7ca00000
 8008860:	7c900000 	.word	0x7c900000
 8008864:	7fefffff 	.word	0x7fefffff
 8008868:	2310      	movs	r3, #16
 800886a:	0022      	movs	r2, r4
 800886c:	401a      	ands	r2, r3
 800886e:	9209      	str	r2, [sp, #36]	@ 0x24
 8008870:	421c      	tst	r4, r3
 8008872:	d001      	beq.n	8008878 <_strtod_l+0x618>
 8008874:	335a      	adds	r3, #90	@ 0x5a
 8008876:	9309      	str	r3, [sp, #36]	@ 0x24
 8008878:	0030      	movs	r0, r6
 800887a:	0039      	movs	r1, r7
 800887c:	2300      	movs	r3, #0
 800887e:	4dc0      	ldr	r5, [pc, #768]	@ (8008b80 <_strtod_l+0x920>)
 8008880:	2201      	movs	r2, #1
 8008882:	4214      	tst	r4, r2
 8008884:	d004      	beq.n	8008890 <_strtod_l+0x630>
 8008886:	682a      	ldr	r2, [r5, #0]
 8008888:	686b      	ldr	r3, [r5, #4]
 800888a:	f7f9 fe95 	bl	80025b8 <__aeabi_dmul>
 800888e:	2301      	movs	r3, #1
 8008890:	1064      	asrs	r4, r4, #1
 8008892:	3508      	adds	r5, #8
 8008894:	2c00      	cmp	r4, #0
 8008896:	d1f3      	bne.n	8008880 <_strtod_l+0x620>
 8008898:	2b00      	cmp	r3, #0
 800889a:	d001      	beq.n	80088a0 <_strtod_l+0x640>
 800889c:	0006      	movs	r6, r0
 800889e:	000f      	movs	r7, r1
 80088a0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	d00d      	beq.n	80088c2 <_strtod_l+0x662>
 80088a6:	236b      	movs	r3, #107	@ 0x6b
 80088a8:	007a      	lsls	r2, r7, #1
 80088aa:	0d52      	lsrs	r2, r2, #21
 80088ac:	0039      	movs	r1, r7
 80088ae:	1a9b      	subs	r3, r3, r2
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	dd06      	ble.n	80088c2 <_strtod_l+0x662>
 80088b4:	2b1f      	cmp	r3, #31
 80088b6:	dd5c      	ble.n	8008972 <_strtod_l+0x712>
 80088b8:	2600      	movs	r6, #0
 80088ba:	2b34      	cmp	r3, #52	@ 0x34
 80088bc:	dd52      	ble.n	8008964 <_strtod_l+0x704>
 80088be:	27dc      	movs	r7, #220	@ 0xdc
 80088c0:	04bf      	lsls	r7, r7, #18
 80088c2:	2200      	movs	r2, #0
 80088c4:	2300      	movs	r3, #0
 80088c6:	0030      	movs	r0, r6
 80088c8:	0039      	movs	r1, r7
 80088ca:	f7f7 fdbb 	bl	8000444 <__aeabi_dcmpeq>
 80088ce:	2800      	cmp	r0, #0
 80088d0:	d1a1      	bne.n	8008816 <_strtod_l+0x5b6>
 80088d2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80088d4:	9a08      	ldr	r2, [sp, #32]
 80088d6:	9300      	str	r3, [sp, #0]
 80088d8:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 80088da:	9b06      	ldr	r3, [sp, #24]
 80088dc:	9805      	ldr	r0, [sp, #20]
 80088de:	f002 f933 	bl	800ab48 <__s2b>
 80088e2:	900d      	str	r0, [sp, #52]	@ 0x34
 80088e4:	2800      	cmp	r0, #0
 80088e6:	d100      	bne.n	80088ea <_strtod_l+0x68a>
 80088e8:	e6f9      	b.n	80086de <_strtod_l+0x47e>
 80088ea:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80088ec:	9907      	ldr	r1, [sp, #28]
 80088ee:	43db      	mvns	r3, r3
 80088f0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80088f2:	17db      	asrs	r3, r3, #31
 80088f4:	1a52      	subs	r2, r2, r1
 80088f6:	9214      	str	r2, [sp, #80]	@ 0x50
 80088f8:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80088fa:	9914      	ldr	r1, [sp, #80]	@ 0x50
 80088fc:	17d2      	asrs	r2, r2, #31
 80088fe:	4011      	ands	r1, r2
 8008900:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8008902:	9114      	str	r1, [sp, #80]	@ 0x50
 8008904:	401a      	ands	r2, r3
 8008906:	2300      	movs	r3, #0
 8008908:	921a      	str	r2, [sp, #104]	@ 0x68
 800890a:	9306      	str	r3, [sp, #24]
 800890c:	9307      	str	r3, [sp, #28]
 800890e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008910:	9805      	ldr	r0, [sp, #20]
 8008912:	6859      	ldr	r1, [r3, #4]
 8008914:	f002 f86c 	bl	800a9f0 <_Balloc>
 8008918:	9008      	str	r0, [sp, #32]
 800891a:	2800      	cmp	r0, #0
 800891c:	d100      	bne.n	8008920 <_strtod_l+0x6c0>
 800891e:	e6e3      	b.n	80086e8 <_strtod_l+0x488>
 8008920:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008922:	300c      	adds	r0, #12
 8008924:	0019      	movs	r1, r3
 8008926:	691a      	ldr	r2, [r3, #16]
 8008928:	310c      	adds	r1, #12
 800892a:	3202      	adds	r2, #2
 800892c:	0092      	lsls	r2, r2, #2
 800892e:	f000 fb9e 	bl	800906e <memcpy>
 8008932:	ab20      	add	r3, sp, #128	@ 0x80
 8008934:	9301      	str	r3, [sp, #4]
 8008936:	ab1f      	add	r3, sp, #124	@ 0x7c
 8008938:	9300      	str	r3, [sp, #0]
 800893a:	0032      	movs	r2, r6
 800893c:	003b      	movs	r3, r7
 800893e:	9805      	ldr	r0, [sp, #20]
 8008940:	9610      	str	r6, [sp, #64]	@ 0x40
 8008942:	9711      	str	r7, [sp, #68]	@ 0x44
 8008944:	f002 fc48 	bl	800b1d8 <__d2b>
 8008948:	901e      	str	r0, [sp, #120]	@ 0x78
 800894a:	2800      	cmp	r0, #0
 800894c:	d100      	bne.n	8008950 <_strtod_l+0x6f0>
 800894e:	e6cb      	b.n	80086e8 <_strtod_l+0x488>
 8008950:	2101      	movs	r1, #1
 8008952:	9805      	ldr	r0, [sp, #20]
 8008954:	f002 f994 	bl	800ac80 <__i2b>
 8008958:	9007      	str	r0, [sp, #28]
 800895a:	2800      	cmp	r0, #0
 800895c:	d10e      	bne.n	800897c <_strtod_l+0x71c>
 800895e:	2300      	movs	r3, #0
 8008960:	9307      	str	r3, [sp, #28]
 8008962:	e6c1      	b.n	80086e8 <_strtod_l+0x488>
 8008964:	234b      	movs	r3, #75	@ 0x4b
 8008966:	1a9a      	subs	r2, r3, r2
 8008968:	3b4c      	subs	r3, #76	@ 0x4c
 800896a:	4093      	lsls	r3, r2
 800896c:	4019      	ands	r1, r3
 800896e:	000f      	movs	r7, r1
 8008970:	e7a7      	b.n	80088c2 <_strtod_l+0x662>
 8008972:	2201      	movs	r2, #1
 8008974:	4252      	negs	r2, r2
 8008976:	409a      	lsls	r2, r3
 8008978:	4016      	ands	r6, r2
 800897a:	e7a2      	b.n	80088c2 <_strtod_l+0x662>
 800897c:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 800897e:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8008980:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 8008982:	1ad4      	subs	r4, r2, r3
 8008984:	2b00      	cmp	r3, #0
 8008986:	db01      	blt.n	800898c <_strtod_l+0x72c>
 8008988:	9c1a      	ldr	r4, [sp, #104]	@ 0x68
 800898a:	195d      	adds	r5, r3, r5
 800898c:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800898e:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8008990:	1a5b      	subs	r3, r3, r1
 8008992:	2136      	movs	r1, #54	@ 0x36
 8008994:	189b      	adds	r3, r3, r2
 8008996:	1a8a      	subs	r2, r1, r2
 8008998:	497a      	ldr	r1, [pc, #488]	@ (8008b84 <_strtod_l+0x924>)
 800899a:	2001      	movs	r0, #1
 800899c:	468c      	mov	ip, r1
 800899e:	2100      	movs	r1, #0
 80089a0:	3b01      	subs	r3, #1
 80089a2:	9115      	str	r1, [sp, #84]	@ 0x54
 80089a4:	9016      	str	r0, [sp, #88]	@ 0x58
 80089a6:	4563      	cmp	r3, ip
 80089a8:	da06      	bge.n	80089b8 <_strtod_l+0x758>
 80089aa:	4661      	mov	r1, ip
 80089ac:	1ac9      	subs	r1, r1, r3
 80089ae:	1a52      	subs	r2, r2, r1
 80089b0:	291f      	cmp	r1, #31
 80089b2:	dc3f      	bgt.n	8008a34 <_strtod_l+0x7d4>
 80089b4:	4088      	lsls	r0, r1
 80089b6:	9016      	str	r0, [sp, #88]	@ 0x58
 80089b8:	18ab      	adds	r3, r5, r2
 80089ba:	930e      	str	r3, [sp, #56]	@ 0x38
 80089bc:	18a4      	adds	r4, r4, r2
 80089be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80089c0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80089c2:	191c      	adds	r4, r3, r4
 80089c4:	002b      	movs	r3, r5
 80089c6:	4295      	cmp	r5, r2
 80089c8:	dd00      	ble.n	80089cc <_strtod_l+0x76c>
 80089ca:	0013      	movs	r3, r2
 80089cc:	42a3      	cmp	r3, r4
 80089ce:	dd00      	ble.n	80089d2 <_strtod_l+0x772>
 80089d0:	0023      	movs	r3, r4
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	dd04      	ble.n	80089e0 <_strtod_l+0x780>
 80089d6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80089d8:	1ae4      	subs	r4, r4, r3
 80089da:	1ad2      	subs	r2, r2, r3
 80089dc:	920e      	str	r2, [sp, #56]	@ 0x38
 80089de:	1aed      	subs	r5, r5, r3
 80089e0:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	dd16      	ble.n	8008a14 <_strtod_l+0x7b4>
 80089e6:	001a      	movs	r2, r3
 80089e8:	9907      	ldr	r1, [sp, #28]
 80089ea:	9805      	ldr	r0, [sp, #20]
 80089ec:	f002 fa0a 	bl	800ae04 <__pow5mult>
 80089f0:	9007      	str	r0, [sp, #28]
 80089f2:	2800      	cmp	r0, #0
 80089f4:	d0b3      	beq.n	800895e <_strtod_l+0x6fe>
 80089f6:	0001      	movs	r1, r0
 80089f8:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 80089fa:	9805      	ldr	r0, [sp, #20]
 80089fc:	f002 f958 	bl	800acb0 <__multiply>
 8008a00:	9013      	str	r0, [sp, #76]	@ 0x4c
 8008a02:	2800      	cmp	r0, #0
 8008a04:	d100      	bne.n	8008a08 <_strtod_l+0x7a8>
 8008a06:	e66f      	b.n	80086e8 <_strtod_l+0x488>
 8008a08:	991e      	ldr	r1, [sp, #120]	@ 0x78
 8008a0a:	9805      	ldr	r0, [sp, #20]
 8008a0c:	f002 f834 	bl	800aa78 <_Bfree>
 8008a10:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8008a12:	931e      	str	r3, [sp, #120]	@ 0x78
 8008a14:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	dc12      	bgt.n	8008a40 <_strtod_l+0x7e0>
 8008a1a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	dd18      	ble.n	8008a52 <_strtod_l+0x7f2>
 8008a20:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8008a22:	9908      	ldr	r1, [sp, #32]
 8008a24:	9805      	ldr	r0, [sp, #20]
 8008a26:	f002 f9ed 	bl	800ae04 <__pow5mult>
 8008a2a:	9008      	str	r0, [sp, #32]
 8008a2c:	2800      	cmp	r0, #0
 8008a2e:	d110      	bne.n	8008a52 <_strtod_l+0x7f2>
 8008a30:	2300      	movs	r3, #0
 8008a32:	e658      	b.n	80086e6 <_strtod_l+0x486>
 8008a34:	4954      	ldr	r1, [pc, #336]	@ (8008b88 <_strtod_l+0x928>)
 8008a36:	1acb      	subs	r3, r1, r3
 8008a38:	0001      	movs	r1, r0
 8008a3a:	4099      	lsls	r1, r3
 8008a3c:	9115      	str	r1, [sp, #84]	@ 0x54
 8008a3e:	e7ba      	b.n	80089b6 <_strtod_l+0x756>
 8008a40:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008a42:	991e      	ldr	r1, [sp, #120]	@ 0x78
 8008a44:	9805      	ldr	r0, [sp, #20]
 8008a46:	f002 fa39 	bl	800aebc <__lshift>
 8008a4a:	901e      	str	r0, [sp, #120]	@ 0x78
 8008a4c:	2800      	cmp	r0, #0
 8008a4e:	d1e4      	bne.n	8008a1a <_strtod_l+0x7ba>
 8008a50:	e64a      	b.n	80086e8 <_strtod_l+0x488>
 8008a52:	2c00      	cmp	r4, #0
 8008a54:	dd07      	ble.n	8008a66 <_strtod_l+0x806>
 8008a56:	0022      	movs	r2, r4
 8008a58:	9908      	ldr	r1, [sp, #32]
 8008a5a:	9805      	ldr	r0, [sp, #20]
 8008a5c:	f002 fa2e 	bl	800aebc <__lshift>
 8008a60:	9008      	str	r0, [sp, #32]
 8008a62:	2800      	cmp	r0, #0
 8008a64:	d0e4      	beq.n	8008a30 <_strtod_l+0x7d0>
 8008a66:	2d00      	cmp	r5, #0
 8008a68:	dd08      	ble.n	8008a7c <_strtod_l+0x81c>
 8008a6a:	002a      	movs	r2, r5
 8008a6c:	9907      	ldr	r1, [sp, #28]
 8008a6e:	9805      	ldr	r0, [sp, #20]
 8008a70:	f002 fa24 	bl	800aebc <__lshift>
 8008a74:	9007      	str	r0, [sp, #28]
 8008a76:	2800      	cmp	r0, #0
 8008a78:	d100      	bne.n	8008a7c <_strtod_l+0x81c>
 8008a7a:	e635      	b.n	80086e8 <_strtod_l+0x488>
 8008a7c:	9a08      	ldr	r2, [sp, #32]
 8008a7e:	991e      	ldr	r1, [sp, #120]	@ 0x78
 8008a80:	9805      	ldr	r0, [sp, #20]
 8008a82:	f002 faa3 	bl	800afcc <__mdiff>
 8008a86:	9006      	str	r0, [sp, #24]
 8008a88:	2800      	cmp	r0, #0
 8008a8a:	d100      	bne.n	8008a8e <_strtod_l+0x82e>
 8008a8c:	e62c      	b.n	80086e8 <_strtod_l+0x488>
 8008a8e:	68c3      	ldr	r3, [r0, #12]
 8008a90:	9907      	ldr	r1, [sp, #28]
 8008a92:	9313      	str	r3, [sp, #76]	@ 0x4c
 8008a94:	2300      	movs	r3, #0
 8008a96:	60c3      	str	r3, [r0, #12]
 8008a98:	f002 fa7c 	bl	800af94 <__mcmp>
 8008a9c:	2800      	cmp	r0, #0
 8008a9e:	da3b      	bge.n	8008b18 <_strtod_l+0x8b8>
 8008aa0:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8008aa2:	4333      	orrs	r3, r6
 8008aa4:	d167      	bne.n	8008b76 <_strtod_l+0x916>
 8008aa6:	033b      	lsls	r3, r7, #12
 8008aa8:	d165      	bne.n	8008b76 <_strtod_l+0x916>
 8008aaa:	22d6      	movs	r2, #214	@ 0xd6
 8008aac:	4b37      	ldr	r3, [pc, #220]	@ (8008b8c <_strtod_l+0x92c>)
 8008aae:	04d2      	lsls	r2, r2, #19
 8008ab0:	403b      	ands	r3, r7
 8008ab2:	4293      	cmp	r3, r2
 8008ab4:	d95f      	bls.n	8008b76 <_strtod_l+0x916>
 8008ab6:	9b06      	ldr	r3, [sp, #24]
 8008ab8:	695b      	ldr	r3, [r3, #20]
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	d103      	bne.n	8008ac6 <_strtod_l+0x866>
 8008abe:	9b06      	ldr	r3, [sp, #24]
 8008ac0:	691b      	ldr	r3, [r3, #16]
 8008ac2:	2b01      	cmp	r3, #1
 8008ac4:	dd57      	ble.n	8008b76 <_strtod_l+0x916>
 8008ac6:	9906      	ldr	r1, [sp, #24]
 8008ac8:	2201      	movs	r2, #1
 8008aca:	9805      	ldr	r0, [sp, #20]
 8008acc:	f002 f9f6 	bl	800aebc <__lshift>
 8008ad0:	9907      	ldr	r1, [sp, #28]
 8008ad2:	9006      	str	r0, [sp, #24]
 8008ad4:	f002 fa5e 	bl	800af94 <__mcmp>
 8008ad8:	2800      	cmp	r0, #0
 8008ada:	dd4c      	ble.n	8008b76 <_strtod_l+0x916>
 8008adc:	4b2b      	ldr	r3, [pc, #172]	@ (8008b8c <_strtod_l+0x92c>)
 8008ade:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008ae0:	403b      	ands	r3, r7
 8008ae2:	2a00      	cmp	r2, #0
 8008ae4:	d074      	beq.n	8008bd0 <_strtod_l+0x970>
 8008ae6:	22d6      	movs	r2, #214	@ 0xd6
 8008ae8:	04d2      	lsls	r2, r2, #19
 8008aea:	4293      	cmp	r3, r2
 8008aec:	d870      	bhi.n	8008bd0 <_strtod_l+0x970>
 8008aee:	22dc      	movs	r2, #220	@ 0xdc
 8008af0:	0492      	lsls	r2, r2, #18
 8008af2:	4293      	cmp	r3, r2
 8008af4:	d800      	bhi.n	8008af8 <_strtod_l+0x898>
 8008af6:	e693      	b.n	8008820 <_strtod_l+0x5c0>
 8008af8:	0030      	movs	r0, r6
 8008afa:	0039      	movs	r1, r7
 8008afc:	4b24      	ldr	r3, [pc, #144]	@ (8008b90 <_strtod_l+0x930>)
 8008afe:	2200      	movs	r2, #0
 8008b00:	f7f9 fd5a 	bl	80025b8 <__aeabi_dmul>
 8008b04:	4b21      	ldr	r3, [pc, #132]	@ (8008b8c <_strtod_l+0x92c>)
 8008b06:	0006      	movs	r6, r0
 8008b08:	000f      	movs	r7, r1
 8008b0a:	420b      	tst	r3, r1
 8008b0c:	d000      	beq.n	8008b10 <_strtod_l+0x8b0>
 8008b0e:	e5f4      	b.n	80086fa <_strtod_l+0x49a>
 8008b10:	2322      	movs	r3, #34	@ 0x22
 8008b12:	9a05      	ldr	r2, [sp, #20]
 8008b14:	6013      	str	r3, [r2, #0]
 8008b16:	e5f0      	b.n	80086fa <_strtod_l+0x49a>
 8008b18:	970e      	str	r7, [sp, #56]	@ 0x38
 8008b1a:	2800      	cmp	r0, #0
 8008b1c:	d175      	bne.n	8008c0a <_strtod_l+0x9aa>
 8008b1e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8008b20:	033b      	lsls	r3, r7, #12
 8008b22:	0b1b      	lsrs	r3, r3, #12
 8008b24:	2a00      	cmp	r2, #0
 8008b26:	d039      	beq.n	8008b9c <_strtod_l+0x93c>
 8008b28:	4a1a      	ldr	r2, [pc, #104]	@ (8008b94 <_strtod_l+0x934>)
 8008b2a:	4293      	cmp	r3, r2
 8008b2c:	d138      	bne.n	8008ba0 <_strtod_l+0x940>
 8008b2e:	2101      	movs	r1, #1
 8008b30:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008b32:	4249      	negs	r1, r1
 8008b34:	0032      	movs	r2, r6
 8008b36:	0008      	movs	r0, r1
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	d00b      	beq.n	8008b54 <_strtod_l+0x8f4>
 8008b3c:	24d4      	movs	r4, #212	@ 0xd4
 8008b3e:	4b13      	ldr	r3, [pc, #76]	@ (8008b8c <_strtod_l+0x92c>)
 8008b40:	0008      	movs	r0, r1
 8008b42:	403b      	ands	r3, r7
 8008b44:	04e4      	lsls	r4, r4, #19
 8008b46:	42a3      	cmp	r3, r4
 8008b48:	d804      	bhi.n	8008b54 <_strtod_l+0x8f4>
 8008b4a:	306c      	adds	r0, #108	@ 0x6c
 8008b4c:	0d1b      	lsrs	r3, r3, #20
 8008b4e:	1ac3      	subs	r3, r0, r3
 8008b50:	4099      	lsls	r1, r3
 8008b52:	0008      	movs	r0, r1
 8008b54:	4282      	cmp	r2, r0
 8008b56:	d123      	bne.n	8008ba0 <_strtod_l+0x940>
 8008b58:	4b0f      	ldr	r3, [pc, #60]	@ (8008b98 <_strtod_l+0x938>)
 8008b5a:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8008b5c:	4299      	cmp	r1, r3
 8008b5e:	d102      	bne.n	8008b66 <_strtod_l+0x906>
 8008b60:	3201      	adds	r2, #1
 8008b62:	d100      	bne.n	8008b66 <_strtod_l+0x906>
 8008b64:	e5c0      	b.n	80086e8 <_strtod_l+0x488>
 8008b66:	4b09      	ldr	r3, [pc, #36]	@ (8008b8c <_strtod_l+0x92c>)
 8008b68:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008b6a:	2600      	movs	r6, #0
 8008b6c:	401a      	ands	r2, r3
 8008b6e:	0013      	movs	r3, r2
 8008b70:	2280      	movs	r2, #128	@ 0x80
 8008b72:	0352      	lsls	r2, r2, #13
 8008b74:	189f      	adds	r7, r3, r2
 8008b76:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	d1bd      	bne.n	8008af8 <_strtod_l+0x898>
 8008b7c:	e5bd      	b.n	80086fa <_strtod_l+0x49a>
 8008b7e:	46c0      	nop			@ (mov r8, r8)
 8008b80:	0800c1d0 	.word	0x0800c1d0
 8008b84:	fffffc02 	.word	0xfffffc02
 8008b88:	fffffbe2 	.word	0xfffffbe2
 8008b8c:	7ff00000 	.word	0x7ff00000
 8008b90:	39500000 	.word	0x39500000
 8008b94:	000fffff 	.word	0x000fffff
 8008b98:	7fefffff 	.word	0x7fefffff
 8008b9c:	4333      	orrs	r3, r6
 8008b9e:	d09d      	beq.n	8008adc <_strtod_l+0x87c>
 8008ba0:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	d01c      	beq.n	8008be0 <_strtod_l+0x980>
 8008ba6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008ba8:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8008baa:	4213      	tst	r3, r2
 8008bac:	d0e3      	beq.n	8008b76 <_strtod_l+0x916>
 8008bae:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8008bb0:	0030      	movs	r0, r6
 8008bb2:	0039      	movs	r1, r7
 8008bb4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	d016      	beq.n	8008be8 <_strtod_l+0x988>
 8008bba:	f7ff fb39 	bl	8008230 <sulp>
 8008bbe:	0002      	movs	r2, r0
 8008bc0:	000b      	movs	r3, r1
 8008bc2:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8008bc4:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8008bc6:	f7f8 fcf7 	bl	80015b8 <__aeabi_dadd>
 8008bca:	0006      	movs	r6, r0
 8008bcc:	000f      	movs	r7, r1
 8008bce:	e7d2      	b.n	8008b76 <_strtod_l+0x916>
 8008bd0:	2601      	movs	r6, #1
 8008bd2:	4a92      	ldr	r2, [pc, #584]	@ (8008e1c <_strtod_l+0xbbc>)
 8008bd4:	4276      	negs	r6, r6
 8008bd6:	189b      	adds	r3, r3, r2
 8008bd8:	4a91      	ldr	r2, [pc, #580]	@ (8008e20 <_strtod_l+0xbc0>)
 8008bda:	431a      	orrs	r2, r3
 8008bdc:	0017      	movs	r7, r2
 8008bde:	e7ca      	b.n	8008b76 <_strtod_l+0x916>
 8008be0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8008be2:	4233      	tst	r3, r6
 8008be4:	d0c7      	beq.n	8008b76 <_strtod_l+0x916>
 8008be6:	e7e2      	b.n	8008bae <_strtod_l+0x94e>
 8008be8:	f7ff fb22 	bl	8008230 <sulp>
 8008bec:	0002      	movs	r2, r0
 8008bee:	000b      	movs	r3, r1
 8008bf0:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8008bf2:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8008bf4:	f7f9 ffc6 	bl	8002b84 <__aeabi_dsub>
 8008bf8:	2200      	movs	r2, #0
 8008bfa:	2300      	movs	r3, #0
 8008bfc:	0006      	movs	r6, r0
 8008bfe:	000f      	movs	r7, r1
 8008c00:	f7f7 fc20 	bl	8000444 <__aeabi_dcmpeq>
 8008c04:	2800      	cmp	r0, #0
 8008c06:	d0b6      	beq.n	8008b76 <_strtod_l+0x916>
 8008c08:	e60a      	b.n	8008820 <_strtod_l+0x5c0>
 8008c0a:	9907      	ldr	r1, [sp, #28]
 8008c0c:	9806      	ldr	r0, [sp, #24]
 8008c0e:	f002 fb43 	bl	800b298 <__ratio>
 8008c12:	2380      	movs	r3, #128	@ 0x80
 8008c14:	2200      	movs	r2, #0
 8008c16:	05db      	lsls	r3, r3, #23
 8008c18:	0004      	movs	r4, r0
 8008c1a:	000d      	movs	r5, r1
 8008c1c:	f7f7 fc22 	bl	8000464 <__aeabi_dcmple>
 8008c20:	2800      	cmp	r0, #0
 8008c22:	d06c      	beq.n	8008cfe <_strtod_l+0xa9e>
 8008c24:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	d177      	bne.n	8008d1a <_strtod_l+0xaba>
 8008c2a:	2e00      	cmp	r6, #0
 8008c2c:	d157      	bne.n	8008cde <_strtod_l+0xa7e>
 8008c2e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008c30:	031b      	lsls	r3, r3, #12
 8008c32:	d15a      	bne.n	8008cea <_strtod_l+0xa8a>
 8008c34:	2200      	movs	r2, #0
 8008c36:	0020      	movs	r0, r4
 8008c38:	0029      	movs	r1, r5
 8008c3a:	4b7a      	ldr	r3, [pc, #488]	@ (8008e24 <_strtod_l+0xbc4>)
 8008c3c:	f7f7 fc08 	bl	8000450 <__aeabi_dcmplt>
 8008c40:	2800      	cmp	r0, #0
 8008c42:	d159      	bne.n	8008cf8 <_strtod_l+0xa98>
 8008c44:	0020      	movs	r0, r4
 8008c46:	0029      	movs	r1, r5
 8008c48:	2200      	movs	r2, #0
 8008c4a:	4b77      	ldr	r3, [pc, #476]	@ (8008e28 <_strtod_l+0xbc8>)
 8008c4c:	f7f9 fcb4 	bl	80025b8 <__aeabi_dmul>
 8008c50:	0004      	movs	r4, r0
 8008c52:	000d      	movs	r5, r1
 8008c54:	2380      	movs	r3, #128	@ 0x80
 8008c56:	061b      	lsls	r3, r3, #24
 8008c58:	18eb      	adds	r3, r5, r3
 8008c5a:	940a      	str	r4, [sp, #40]	@ 0x28
 8008c5c:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008c5e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008c60:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008c62:	9216      	str	r2, [sp, #88]	@ 0x58
 8008c64:	9317      	str	r3, [sp, #92]	@ 0x5c
 8008c66:	4a71      	ldr	r2, [pc, #452]	@ (8008e2c <_strtod_l+0xbcc>)
 8008c68:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008c6a:	4013      	ands	r3, r2
 8008c6c:	9315      	str	r3, [sp, #84]	@ 0x54
 8008c6e:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8008c70:	4b6f      	ldr	r3, [pc, #444]	@ (8008e30 <_strtod_l+0xbd0>)
 8008c72:	429a      	cmp	r2, r3
 8008c74:	d000      	beq.n	8008c78 <_strtod_l+0xa18>
 8008c76:	e087      	b.n	8008d88 <_strtod_l+0xb28>
 8008c78:	4a6e      	ldr	r2, [pc, #440]	@ (8008e34 <_strtod_l+0xbd4>)
 8008c7a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008c7c:	4694      	mov	ip, r2
 8008c7e:	4463      	add	r3, ip
 8008c80:	001f      	movs	r7, r3
 8008c82:	0030      	movs	r0, r6
 8008c84:	0019      	movs	r1, r3
 8008c86:	f002 fa3b 	bl	800b100 <__ulp>
 8008c8a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008c8c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008c8e:	f7f9 fc93 	bl	80025b8 <__aeabi_dmul>
 8008c92:	0032      	movs	r2, r6
 8008c94:	003b      	movs	r3, r7
 8008c96:	f7f8 fc8f 	bl	80015b8 <__aeabi_dadd>
 8008c9a:	4a64      	ldr	r2, [pc, #400]	@ (8008e2c <_strtod_l+0xbcc>)
 8008c9c:	4b66      	ldr	r3, [pc, #408]	@ (8008e38 <_strtod_l+0xbd8>)
 8008c9e:	0006      	movs	r6, r0
 8008ca0:	400a      	ands	r2, r1
 8008ca2:	429a      	cmp	r2, r3
 8008ca4:	d940      	bls.n	8008d28 <_strtod_l+0xac8>
 8008ca6:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8008ca8:	4a64      	ldr	r2, [pc, #400]	@ (8008e3c <_strtod_l+0xbdc>)
 8008caa:	4293      	cmp	r3, r2
 8008cac:	d103      	bne.n	8008cb6 <_strtod_l+0xa56>
 8008cae:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8008cb0:	3301      	adds	r3, #1
 8008cb2:	d100      	bne.n	8008cb6 <_strtod_l+0xa56>
 8008cb4:	e518      	b.n	80086e8 <_strtod_l+0x488>
 8008cb6:	2601      	movs	r6, #1
 8008cb8:	4f60      	ldr	r7, [pc, #384]	@ (8008e3c <_strtod_l+0xbdc>)
 8008cba:	4276      	negs	r6, r6
 8008cbc:	991e      	ldr	r1, [sp, #120]	@ 0x78
 8008cbe:	9805      	ldr	r0, [sp, #20]
 8008cc0:	f001 feda 	bl	800aa78 <_Bfree>
 8008cc4:	9908      	ldr	r1, [sp, #32]
 8008cc6:	9805      	ldr	r0, [sp, #20]
 8008cc8:	f001 fed6 	bl	800aa78 <_Bfree>
 8008ccc:	9907      	ldr	r1, [sp, #28]
 8008cce:	9805      	ldr	r0, [sp, #20]
 8008cd0:	f001 fed2 	bl	800aa78 <_Bfree>
 8008cd4:	9906      	ldr	r1, [sp, #24]
 8008cd6:	9805      	ldr	r0, [sp, #20]
 8008cd8:	f001 fece 	bl	800aa78 <_Bfree>
 8008cdc:	e617      	b.n	800890e <_strtod_l+0x6ae>
 8008cde:	2e01      	cmp	r6, #1
 8008ce0:	d103      	bne.n	8008cea <_strtod_l+0xa8a>
 8008ce2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008ce4:	2b00      	cmp	r3, #0
 8008ce6:	d100      	bne.n	8008cea <_strtod_l+0xa8a>
 8008ce8:	e59a      	b.n	8008820 <_strtod_l+0x5c0>
 8008cea:	2300      	movs	r3, #0
 8008cec:	4c54      	ldr	r4, [pc, #336]	@ (8008e40 <_strtod_l+0xbe0>)
 8008cee:	4d4d      	ldr	r5, [pc, #308]	@ (8008e24 <_strtod_l+0xbc4>)
 8008cf0:	930a      	str	r3, [sp, #40]	@ 0x28
 8008cf2:	940b      	str	r4, [sp, #44]	@ 0x2c
 8008cf4:	2400      	movs	r4, #0
 8008cf6:	e7b2      	b.n	8008c5e <_strtod_l+0x9fe>
 8008cf8:	2400      	movs	r4, #0
 8008cfa:	4d4b      	ldr	r5, [pc, #300]	@ (8008e28 <_strtod_l+0xbc8>)
 8008cfc:	e7aa      	b.n	8008c54 <_strtod_l+0x9f4>
 8008cfe:	0020      	movs	r0, r4
 8008d00:	0029      	movs	r1, r5
 8008d02:	4b49      	ldr	r3, [pc, #292]	@ (8008e28 <_strtod_l+0xbc8>)
 8008d04:	2200      	movs	r2, #0
 8008d06:	f7f9 fc57 	bl	80025b8 <__aeabi_dmul>
 8008d0a:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8008d0c:	0004      	movs	r4, r0
 8008d0e:	000d      	movs	r5, r1
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	d09f      	beq.n	8008c54 <_strtod_l+0x9f4>
 8008d14:	940a      	str	r4, [sp, #40]	@ 0x28
 8008d16:	950b      	str	r5, [sp, #44]	@ 0x2c
 8008d18:	e7a1      	b.n	8008c5e <_strtod_l+0x9fe>
 8008d1a:	2300      	movs	r3, #0
 8008d1c:	4c41      	ldr	r4, [pc, #260]	@ (8008e24 <_strtod_l+0xbc4>)
 8008d1e:	0025      	movs	r5, r4
 8008d20:	930a      	str	r3, [sp, #40]	@ 0x28
 8008d22:	940b      	str	r4, [sp, #44]	@ 0x2c
 8008d24:	001c      	movs	r4, r3
 8008d26:	e79a      	b.n	8008c5e <_strtod_l+0x9fe>
 8008d28:	23d4      	movs	r3, #212	@ 0xd4
 8008d2a:	049b      	lsls	r3, r3, #18
 8008d2c:	18cf      	adds	r7, r1, r3
 8008d2e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008d30:	9710      	str	r7, [sp, #64]	@ 0x40
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	d1c2      	bne.n	8008cbc <_strtod_l+0xa5c>
 8008d36:	4b3d      	ldr	r3, [pc, #244]	@ (8008e2c <_strtod_l+0xbcc>)
 8008d38:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8008d3a:	403b      	ands	r3, r7
 8008d3c:	429a      	cmp	r2, r3
 8008d3e:	d1bd      	bne.n	8008cbc <_strtod_l+0xa5c>
 8008d40:	0020      	movs	r0, r4
 8008d42:	0029      	movs	r1, r5
 8008d44:	f7f7 fc04 	bl	8000550 <__aeabi_d2lz>
 8008d48:	f7f7 fc3c 	bl	80005c4 <__aeabi_l2d>
 8008d4c:	0002      	movs	r2, r0
 8008d4e:	000b      	movs	r3, r1
 8008d50:	0020      	movs	r0, r4
 8008d52:	0029      	movs	r1, r5
 8008d54:	f7f9 ff16 	bl	8002b84 <__aeabi_dsub>
 8008d58:	033c      	lsls	r4, r7, #12
 8008d5a:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8008d5c:	0b24      	lsrs	r4, r4, #12
 8008d5e:	4334      	orrs	r4, r6
 8008d60:	900e      	str	r0, [sp, #56]	@ 0x38
 8008d62:	910f      	str	r1, [sp, #60]	@ 0x3c
 8008d64:	4a37      	ldr	r2, [pc, #220]	@ (8008e44 <_strtod_l+0xbe4>)
 8008d66:	431c      	orrs	r4, r3
 8008d68:	d052      	beq.n	8008e10 <_strtod_l+0xbb0>
 8008d6a:	4b37      	ldr	r3, [pc, #220]	@ (8008e48 <_strtod_l+0xbe8>)
 8008d6c:	f7f7 fb70 	bl	8000450 <__aeabi_dcmplt>
 8008d70:	2800      	cmp	r0, #0
 8008d72:	d000      	beq.n	8008d76 <_strtod_l+0xb16>
 8008d74:	e4c1      	b.n	80086fa <_strtod_l+0x49a>
 8008d76:	980e      	ldr	r0, [sp, #56]	@ 0x38
 8008d78:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8008d7a:	4a34      	ldr	r2, [pc, #208]	@ (8008e4c <_strtod_l+0xbec>)
 8008d7c:	4b2a      	ldr	r3, [pc, #168]	@ (8008e28 <_strtod_l+0xbc8>)
 8008d7e:	f7f7 fb7b 	bl	8000478 <__aeabi_dcmpgt>
 8008d82:	2800      	cmp	r0, #0
 8008d84:	d09a      	beq.n	8008cbc <_strtod_l+0xa5c>
 8008d86:	e4b8      	b.n	80086fa <_strtod_l+0x49a>
 8008d88:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	d02a      	beq.n	8008de4 <_strtod_l+0xb84>
 8008d8e:	23d4      	movs	r3, #212	@ 0xd4
 8008d90:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8008d92:	04db      	lsls	r3, r3, #19
 8008d94:	429a      	cmp	r2, r3
 8008d96:	d825      	bhi.n	8008de4 <_strtod_l+0xb84>
 8008d98:	0020      	movs	r0, r4
 8008d9a:	0029      	movs	r1, r5
 8008d9c:	4a2c      	ldr	r2, [pc, #176]	@ (8008e50 <_strtod_l+0xbf0>)
 8008d9e:	4b2d      	ldr	r3, [pc, #180]	@ (8008e54 <_strtod_l+0xbf4>)
 8008da0:	f7f7 fb60 	bl	8000464 <__aeabi_dcmple>
 8008da4:	2800      	cmp	r0, #0
 8008da6:	d016      	beq.n	8008dd6 <_strtod_l+0xb76>
 8008da8:	0020      	movs	r0, r4
 8008daa:	0029      	movs	r1, r5
 8008dac:	f7f7 fbb2 	bl	8000514 <__aeabi_d2uiz>
 8008db0:	2800      	cmp	r0, #0
 8008db2:	d100      	bne.n	8008db6 <_strtod_l+0xb56>
 8008db4:	3001      	adds	r0, #1
 8008db6:	f7fa fb7b 	bl	80034b0 <__aeabi_ui2d>
 8008dba:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8008dbc:	0004      	movs	r4, r0
 8008dbe:	000d      	movs	r5, r1
 8008dc0:	2b00      	cmp	r3, #0
 8008dc2:	d122      	bne.n	8008e0a <_strtod_l+0xbaa>
 8008dc4:	2380      	movs	r3, #128	@ 0x80
 8008dc6:	061b      	lsls	r3, r3, #24
 8008dc8:	18cb      	adds	r3, r1, r3
 8008dca:	9018      	str	r0, [sp, #96]	@ 0x60
 8008dcc:	9319      	str	r3, [sp, #100]	@ 0x64
 8008dce:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8008dd0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008dd2:	9216      	str	r2, [sp, #88]	@ 0x58
 8008dd4:	9317      	str	r3, [sp, #92]	@ 0x5c
 8008dd6:	22d6      	movs	r2, #214	@ 0xd6
 8008dd8:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8008dda:	04d2      	lsls	r2, r2, #19
 8008ddc:	189b      	adds	r3, r3, r2
 8008dde:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8008de0:	1a9b      	subs	r3, r3, r2
 8008de2:	9317      	str	r3, [sp, #92]	@ 0x5c
 8008de4:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8008de6:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8008de8:	9e16      	ldr	r6, [sp, #88]	@ 0x58
 8008dea:	9f17      	ldr	r7, [sp, #92]	@ 0x5c
 8008dec:	f002 f988 	bl	800b100 <__ulp>
 8008df0:	0002      	movs	r2, r0
 8008df2:	000b      	movs	r3, r1
 8008df4:	0030      	movs	r0, r6
 8008df6:	0039      	movs	r1, r7
 8008df8:	f7f9 fbde 	bl	80025b8 <__aeabi_dmul>
 8008dfc:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8008dfe:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8008e00:	f7f8 fbda 	bl	80015b8 <__aeabi_dadd>
 8008e04:	0006      	movs	r6, r0
 8008e06:	000f      	movs	r7, r1
 8008e08:	e791      	b.n	8008d2e <_strtod_l+0xace>
 8008e0a:	9418      	str	r4, [sp, #96]	@ 0x60
 8008e0c:	9519      	str	r5, [sp, #100]	@ 0x64
 8008e0e:	e7de      	b.n	8008dce <_strtod_l+0xb6e>
 8008e10:	4b11      	ldr	r3, [pc, #68]	@ (8008e58 <_strtod_l+0xbf8>)
 8008e12:	980e      	ldr	r0, [sp, #56]	@ 0x38
 8008e14:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8008e16:	f7f7 fb1b 	bl	8000450 <__aeabi_dcmplt>
 8008e1a:	e7b2      	b.n	8008d82 <_strtod_l+0xb22>
 8008e1c:	fff00000 	.word	0xfff00000
 8008e20:	000fffff 	.word	0x000fffff
 8008e24:	3ff00000 	.word	0x3ff00000
 8008e28:	3fe00000 	.word	0x3fe00000
 8008e2c:	7ff00000 	.word	0x7ff00000
 8008e30:	7fe00000 	.word	0x7fe00000
 8008e34:	fcb00000 	.word	0xfcb00000
 8008e38:	7c9fffff 	.word	0x7c9fffff
 8008e3c:	7fefffff 	.word	0x7fefffff
 8008e40:	bff00000 	.word	0xbff00000
 8008e44:	94a03595 	.word	0x94a03595
 8008e48:	3fdfffff 	.word	0x3fdfffff
 8008e4c:	35afe535 	.word	0x35afe535
 8008e50:	ffc00000 	.word	0xffc00000
 8008e54:	41dfffff 	.word	0x41dfffff
 8008e58:	3fcfffff 	.word	0x3fcfffff

08008e5c <_strtod_r>:
 8008e5c:	b510      	push	{r4, lr}
 8008e5e:	4b02      	ldr	r3, [pc, #8]	@ (8008e68 <_strtod_r+0xc>)
 8008e60:	f7ff f9fe 	bl	8008260 <_strtod_l>
 8008e64:	bd10      	pop	{r4, pc}
 8008e66:	46c0      	nop			@ (mov r8, r8)
 8008e68:	20000020 	.word	0x20000020

08008e6c <_strtol_l.isra.0>:
 8008e6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008e6e:	b085      	sub	sp, #20
 8008e70:	0017      	movs	r7, r2
 8008e72:	001e      	movs	r6, r3
 8008e74:	9003      	str	r0, [sp, #12]
 8008e76:	9101      	str	r1, [sp, #4]
 8008e78:	2b24      	cmp	r3, #36	@ 0x24
 8008e7a:	d823      	bhi.n	8008ec4 <_strtol_l.isra.0+0x58>
 8008e7c:	000c      	movs	r4, r1
 8008e7e:	2b01      	cmp	r3, #1
 8008e80:	d020      	beq.n	8008ec4 <_strtol_l.isra.0+0x58>
 8008e82:	4b3d      	ldr	r3, [pc, #244]	@ (8008f78 <_strtol_l.isra.0+0x10c>)
 8008e84:	2208      	movs	r2, #8
 8008e86:	469c      	mov	ip, r3
 8008e88:	0023      	movs	r3, r4
 8008e8a:	4661      	mov	r1, ip
 8008e8c:	781d      	ldrb	r5, [r3, #0]
 8008e8e:	3401      	adds	r4, #1
 8008e90:	5d48      	ldrb	r0, [r1, r5]
 8008e92:	0001      	movs	r1, r0
 8008e94:	4011      	ands	r1, r2
 8008e96:	4210      	tst	r0, r2
 8008e98:	d1f6      	bne.n	8008e88 <_strtol_l.isra.0+0x1c>
 8008e9a:	2d2d      	cmp	r5, #45	@ 0x2d
 8008e9c:	d119      	bne.n	8008ed2 <_strtol_l.isra.0+0x66>
 8008e9e:	7825      	ldrb	r5, [r4, #0]
 8008ea0:	1c9c      	adds	r4, r3, #2
 8008ea2:	2301      	movs	r3, #1
 8008ea4:	9300      	str	r3, [sp, #0]
 8008ea6:	2210      	movs	r2, #16
 8008ea8:	0033      	movs	r3, r6
 8008eaa:	4393      	bics	r3, r2
 8008eac:	d11d      	bne.n	8008eea <_strtol_l.isra.0+0x7e>
 8008eae:	2d30      	cmp	r5, #48	@ 0x30
 8008eb0:	d115      	bne.n	8008ede <_strtol_l.isra.0+0x72>
 8008eb2:	2120      	movs	r1, #32
 8008eb4:	7823      	ldrb	r3, [r4, #0]
 8008eb6:	438b      	bics	r3, r1
 8008eb8:	2b58      	cmp	r3, #88	@ 0x58
 8008eba:	d110      	bne.n	8008ede <_strtol_l.isra.0+0x72>
 8008ebc:	7865      	ldrb	r5, [r4, #1]
 8008ebe:	3402      	adds	r4, #2
 8008ec0:	2610      	movs	r6, #16
 8008ec2:	e012      	b.n	8008eea <_strtol_l.isra.0+0x7e>
 8008ec4:	f000 f896 	bl	8008ff4 <__errno>
 8008ec8:	2316      	movs	r3, #22
 8008eca:	6003      	str	r3, [r0, #0]
 8008ecc:	2000      	movs	r0, #0
 8008ece:	b005      	add	sp, #20
 8008ed0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008ed2:	9100      	str	r1, [sp, #0]
 8008ed4:	2d2b      	cmp	r5, #43	@ 0x2b
 8008ed6:	d1e6      	bne.n	8008ea6 <_strtol_l.isra.0+0x3a>
 8008ed8:	7825      	ldrb	r5, [r4, #0]
 8008eda:	1c9c      	adds	r4, r3, #2
 8008edc:	e7e3      	b.n	8008ea6 <_strtol_l.isra.0+0x3a>
 8008ede:	2e00      	cmp	r6, #0
 8008ee0:	d1ee      	bne.n	8008ec0 <_strtol_l.isra.0+0x54>
 8008ee2:	360a      	adds	r6, #10
 8008ee4:	2d30      	cmp	r5, #48	@ 0x30
 8008ee6:	d100      	bne.n	8008eea <_strtol_l.isra.0+0x7e>
 8008ee8:	3e02      	subs	r6, #2
 8008eea:	4a24      	ldr	r2, [pc, #144]	@ (8008f7c <_strtol_l.isra.0+0x110>)
 8008eec:	9b00      	ldr	r3, [sp, #0]
 8008eee:	4694      	mov	ip, r2
 8008ef0:	4463      	add	r3, ip
 8008ef2:	0031      	movs	r1, r6
 8008ef4:	0018      	movs	r0, r3
 8008ef6:	9302      	str	r3, [sp, #8]
 8008ef8:	f7f7 f9a4 	bl	8000244 <__aeabi_uidivmod>
 8008efc:	2200      	movs	r2, #0
 8008efe:	4684      	mov	ip, r0
 8008f00:	0010      	movs	r0, r2
 8008f02:	002b      	movs	r3, r5
 8008f04:	3b30      	subs	r3, #48	@ 0x30
 8008f06:	2b09      	cmp	r3, #9
 8008f08:	d811      	bhi.n	8008f2e <_strtol_l.isra.0+0xc2>
 8008f0a:	001d      	movs	r5, r3
 8008f0c:	42ae      	cmp	r6, r5
 8008f0e:	dd1d      	ble.n	8008f4c <_strtol_l.isra.0+0xe0>
 8008f10:	1c53      	adds	r3, r2, #1
 8008f12:	d009      	beq.n	8008f28 <_strtol_l.isra.0+0xbc>
 8008f14:	2201      	movs	r2, #1
 8008f16:	4252      	negs	r2, r2
 8008f18:	4584      	cmp	ip, r0
 8008f1a:	d305      	bcc.n	8008f28 <_strtol_l.isra.0+0xbc>
 8008f1c:	d101      	bne.n	8008f22 <_strtol_l.isra.0+0xb6>
 8008f1e:	42a9      	cmp	r1, r5
 8008f20:	db11      	blt.n	8008f46 <_strtol_l.isra.0+0xda>
 8008f22:	2201      	movs	r2, #1
 8008f24:	4370      	muls	r0, r6
 8008f26:	1828      	adds	r0, r5, r0
 8008f28:	7825      	ldrb	r5, [r4, #0]
 8008f2a:	3401      	adds	r4, #1
 8008f2c:	e7e9      	b.n	8008f02 <_strtol_l.isra.0+0x96>
 8008f2e:	002b      	movs	r3, r5
 8008f30:	3b41      	subs	r3, #65	@ 0x41
 8008f32:	2b19      	cmp	r3, #25
 8008f34:	d801      	bhi.n	8008f3a <_strtol_l.isra.0+0xce>
 8008f36:	3d37      	subs	r5, #55	@ 0x37
 8008f38:	e7e8      	b.n	8008f0c <_strtol_l.isra.0+0xa0>
 8008f3a:	002b      	movs	r3, r5
 8008f3c:	3b61      	subs	r3, #97	@ 0x61
 8008f3e:	2b19      	cmp	r3, #25
 8008f40:	d804      	bhi.n	8008f4c <_strtol_l.isra.0+0xe0>
 8008f42:	3d57      	subs	r5, #87	@ 0x57
 8008f44:	e7e2      	b.n	8008f0c <_strtol_l.isra.0+0xa0>
 8008f46:	2201      	movs	r2, #1
 8008f48:	4252      	negs	r2, r2
 8008f4a:	e7ed      	b.n	8008f28 <_strtol_l.isra.0+0xbc>
 8008f4c:	1c53      	adds	r3, r2, #1
 8008f4e:	d108      	bne.n	8008f62 <_strtol_l.isra.0+0xf6>
 8008f50:	2322      	movs	r3, #34	@ 0x22
 8008f52:	9a03      	ldr	r2, [sp, #12]
 8008f54:	9802      	ldr	r0, [sp, #8]
 8008f56:	6013      	str	r3, [r2, #0]
 8008f58:	2f00      	cmp	r7, #0
 8008f5a:	d0b8      	beq.n	8008ece <_strtol_l.isra.0+0x62>
 8008f5c:	1e63      	subs	r3, r4, #1
 8008f5e:	9301      	str	r3, [sp, #4]
 8008f60:	e007      	b.n	8008f72 <_strtol_l.isra.0+0x106>
 8008f62:	9b00      	ldr	r3, [sp, #0]
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	d000      	beq.n	8008f6a <_strtol_l.isra.0+0xfe>
 8008f68:	4240      	negs	r0, r0
 8008f6a:	2f00      	cmp	r7, #0
 8008f6c:	d0af      	beq.n	8008ece <_strtol_l.isra.0+0x62>
 8008f6e:	2a00      	cmp	r2, #0
 8008f70:	d1f4      	bne.n	8008f5c <_strtol_l.isra.0+0xf0>
 8008f72:	9b01      	ldr	r3, [sp, #4]
 8008f74:	603b      	str	r3, [r7, #0]
 8008f76:	e7aa      	b.n	8008ece <_strtol_l.isra.0+0x62>
 8008f78:	0800c1f9 	.word	0x0800c1f9
 8008f7c:	7fffffff 	.word	0x7fffffff

08008f80 <_strtol_r>:
 8008f80:	b510      	push	{r4, lr}
 8008f82:	f7ff ff73 	bl	8008e6c <_strtol_l.isra.0>
 8008f86:	bd10      	pop	{r4, pc}

08008f88 <_fwalk_sglue>:
 8008f88:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008f8a:	0014      	movs	r4, r2
 8008f8c:	2600      	movs	r6, #0
 8008f8e:	9000      	str	r0, [sp, #0]
 8008f90:	9101      	str	r1, [sp, #4]
 8008f92:	68a5      	ldr	r5, [r4, #8]
 8008f94:	6867      	ldr	r7, [r4, #4]
 8008f96:	3f01      	subs	r7, #1
 8008f98:	d504      	bpl.n	8008fa4 <_fwalk_sglue+0x1c>
 8008f9a:	6824      	ldr	r4, [r4, #0]
 8008f9c:	2c00      	cmp	r4, #0
 8008f9e:	d1f8      	bne.n	8008f92 <_fwalk_sglue+0xa>
 8008fa0:	0030      	movs	r0, r6
 8008fa2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008fa4:	89ab      	ldrh	r3, [r5, #12]
 8008fa6:	2b01      	cmp	r3, #1
 8008fa8:	d908      	bls.n	8008fbc <_fwalk_sglue+0x34>
 8008faa:	220e      	movs	r2, #14
 8008fac:	5eab      	ldrsh	r3, [r5, r2]
 8008fae:	3301      	adds	r3, #1
 8008fb0:	d004      	beq.n	8008fbc <_fwalk_sglue+0x34>
 8008fb2:	0029      	movs	r1, r5
 8008fb4:	9800      	ldr	r0, [sp, #0]
 8008fb6:	9b01      	ldr	r3, [sp, #4]
 8008fb8:	4798      	blx	r3
 8008fba:	4306      	orrs	r6, r0
 8008fbc:	3568      	adds	r5, #104	@ 0x68
 8008fbe:	e7ea      	b.n	8008f96 <_fwalk_sglue+0xe>

08008fc0 <memset>:
 8008fc0:	0003      	movs	r3, r0
 8008fc2:	1882      	adds	r2, r0, r2
 8008fc4:	4293      	cmp	r3, r2
 8008fc6:	d100      	bne.n	8008fca <memset+0xa>
 8008fc8:	4770      	bx	lr
 8008fca:	7019      	strb	r1, [r3, #0]
 8008fcc:	3301      	adds	r3, #1
 8008fce:	e7f9      	b.n	8008fc4 <memset+0x4>

08008fd0 <strncmp>:
 8008fd0:	b530      	push	{r4, r5, lr}
 8008fd2:	0005      	movs	r5, r0
 8008fd4:	1e10      	subs	r0, r2, #0
 8008fd6:	d00b      	beq.n	8008ff0 <strncmp+0x20>
 8008fd8:	2400      	movs	r4, #0
 8008fda:	3a01      	subs	r2, #1
 8008fdc:	5d2b      	ldrb	r3, [r5, r4]
 8008fde:	5d08      	ldrb	r0, [r1, r4]
 8008fe0:	4283      	cmp	r3, r0
 8008fe2:	d104      	bne.n	8008fee <strncmp+0x1e>
 8008fe4:	4294      	cmp	r4, r2
 8008fe6:	d002      	beq.n	8008fee <strncmp+0x1e>
 8008fe8:	3401      	adds	r4, #1
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	d1f6      	bne.n	8008fdc <strncmp+0xc>
 8008fee:	1a18      	subs	r0, r3, r0
 8008ff0:	bd30      	pop	{r4, r5, pc}
	...

08008ff4 <__errno>:
 8008ff4:	4b01      	ldr	r3, [pc, #4]	@ (8008ffc <__errno+0x8>)
 8008ff6:	6818      	ldr	r0, [r3, #0]
 8008ff8:	4770      	bx	lr
 8008ffa:	46c0      	nop			@ (mov r8, r8)
 8008ffc:	2000018c 	.word	0x2000018c

08009000 <__libc_init_array>:
 8009000:	b570      	push	{r4, r5, r6, lr}
 8009002:	2600      	movs	r6, #0
 8009004:	4c0c      	ldr	r4, [pc, #48]	@ (8009038 <__libc_init_array+0x38>)
 8009006:	4d0d      	ldr	r5, [pc, #52]	@ (800903c <__libc_init_array+0x3c>)
 8009008:	1b64      	subs	r4, r4, r5
 800900a:	10a4      	asrs	r4, r4, #2
 800900c:	42a6      	cmp	r6, r4
 800900e:	d109      	bne.n	8009024 <__libc_init_array+0x24>
 8009010:	2600      	movs	r6, #0
 8009012:	f002 fe1b 	bl	800bc4c <_init>
 8009016:	4c0a      	ldr	r4, [pc, #40]	@ (8009040 <__libc_init_array+0x40>)
 8009018:	4d0a      	ldr	r5, [pc, #40]	@ (8009044 <__libc_init_array+0x44>)
 800901a:	1b64      	subs	r4, r4, r5
 800901c:	10a4      	asrs	r4, r4, #2
 800901e:	42a6      	cmp	r6, r4
 8009020:	d105      	bne.n	800902e <__libc_init_array+0x2e>
 8009022:	bd70      	pop	{r4, r5, r6, pc}
 8009024:	00b3      	lsls	r3, r6, #2
 8009026:	58eb      	ldr	r3, [r5, r3]
 8009028:	4798      	blx	r3
 800902a:	3601      	adds	r6, #1
 800902c:	e7ee      	b.n	800900c <__libc_init_array+0xc>
 800902e:	00b3      	lsls	r3, r6, #2
 8009030:	58eb      	ldr	r3, [r5, r3]
 8009032:	4798      	blx	r3
 8009034:	3601      	adds	r6, #1
 8009036:	e7f2      	b.n	800901e <__libc_init_array+0x1e>
 8009038:	0800c3f8 	.word	0x0800c3f8
 800903c:	0800c3f8 	.word	0x0800c3f8
 8009040:	0800c3fc 	.word	0x0800c3fc
 8009044:	0800c3f8 	.word	0x0800c3f8

08009048 <__retarget_lock_init_recursive>:
 8009048:	4770      	bx	lr

0800904a <__retarget_lock_acquire_recursive>:
 800904a:	4770      	bx	lr

0800904c <__retarget_lock_release_recursive>:
 800904c:	4770      	bx	lr
	...

08009050 <_localeconv_r>:
 8009050:	4800      	ldr	r0, [pc, #0]	@ (8009054 <_localeconv_r+0x4>)
 8009052:	4770      	bx	lr
 8009054:	20000110 	.word	0x20000110

08009058 <memchr>:
 8009058:	b2c9      	uxtb	r1, r1
 800905a:	1882      	adds	r2, r0, r2
 800905c:	4290      	cmp	r0, r2
 800905e:	d101      	bne.n	8009064 <memchr+0xc>
 8009060:	2000      	movs	r0, #0
 8009062:	4770      	bx	lr
 8009064:	7803      	ldrb	r3, [r0, #0]
 8009066:	428b      	cmp	r3, r1
 8009068:	d0fb      	beq.n	8009062 <memchr+0xa>
 800906a:	3001      	adds	r0, #1
 800906c:	e7f6      	b.n	800905c <memchr+0x4>

0800906e <memcpy>:
 800906e:	2300      	movs	r3, #0
 8009070:	b510      	push	{r4, lr}
 8009072:	429a      	cmp	r2, r3
 8009074:	d100      	bne.n	8009078 <memcpy+0xa>
 8009076:	bd10      	pop	{r4, pc}
 8009078:	5ccc      	ldrb	r4, [r1, r3]
 800907a:	54c4      	strb	r4, [r0, r3]
 800907c:	3301      	adds	r3, #1
 800907e:	e7f8      	b.n	8009072 <memcpy+0x4>

08009080 <nan>:
 8009080:	2000      	movs	r0, #0
 8009082:	4901      	ldr	r1, [pc, #4]	@ (8009088 <nan+0x8>)
 8009084:	4770      	bx	lr
 8009086:	46c0      	nop			@ (mov r8, r8)
 8009088:	7ff80000 	.word	0x7ff80000

0800908c <nanf>:
 800908c:	4800      	ldr	r0, [pc, #0]	@ (8009090 <nanf+0x4>)
 800908e:	4770      	bx	lr
 8009090:	7fc00000 	.word	0x7fc00000

08009094 <quorem>:
 8009094:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009096:	6903      	ldr	r3, [r0, #16]
 8009098:	690c      	ldr	r4, [r1, #16]
 800909a:	b089      	sub	sp, #36	@ 0x24
 800909c:	9003      	str	r0, [sp, #12]
 800909e:	9106      	str	r1, [sp, #24]
 80090a0:	2000      	movs	r0, #0
 80090a2:	42a3      	cmp	r3, r4
 80090a4:	db63      	blt.n	800916e <quorem+0xda>
 80090a6:	000b      	movs	r3, r1
 80090a8:	3c01      	subs	r4, #1
 80090aa:	3314      	adds	r3, #20
 80090ac:	00a5      	lsls	r5, r4, #2
 80090ae:	9304      	str	r3, [sp, #16]
 80090b0:	195b      	adds	r3, r3, r5
 80090b2:	9305      	str	r3, [sp, #20]
 80090b4:	9b03      	ldr	r3, [sp, #12]
 80090b6:	3314      	adds	r3, #20
 80090b8:	9301      	str	r3, [sp, #4]
 80090ba:	195d      	adds	r5, r3, r5
 80090bc:	9b05      	ldr	r3, [sp, #20]
 80090be:	682f      	ldr	r7, [r5, #0]
 80090c0:	681e      	ldr	r6, [r3, #0]
 80090c2:	0038      	movs	r0, r7
 80090c4:	3601      	adds	r6, #1
 80090c6:	0031      	movs	r1, r6
 80090c8:	f7f7 f836 	bl	8000138 <__udivsi3>
 80090cc:	9002      	str	r0, [sp, #8]
 80090ce:	42b7      	cmp	r7, r6
 80090d0:	d327      	bcc.n	8009122 <quorem+0x8e>
 80090d2:	9b04      	ldr	r3, [sp, #16]
 80090d4:	2700      	movs	r7, #0
 80090d6:	469c      	mov	ip, r3
 80090d8:	9e01      	ldr	r6, [sp, #4]
 80090da:	9707      	str	r7, [sp, #28]
 80090dc:	4662      	mov	r2, ip
 80090de:	ca08      	ldmia	r2!, {r3}
 80090e0:	6830      	ldr	r0, [r6, #0]
 80090e2:	4694      	mov	ip, r2
 80090e4:	9a02      	ldr	r2, [sp, #8]
 80090e6:	b299      	uxth	r1, r3
 80090e8:	4351      	muls	r1, r2
 80090ea:	0c1b      	lsrs	r3, r3, #16
 80090ec:	4353      	muls	r3, r2
 80090ee:	19c9      	adds	r1, r1, r7
 80090f0:	0c0a      	lsrs	r2, r1, #16
 80090f2:	189b      	adds	r3, r3, r2
 80090f4:	b289      	uxth	r1, r1
 80090f6:	b282      	uxth	r2, r0
 80090f8:	1a52      	subs	r2, r2, r1
 80090fa:	9907      	ldr	r1, [sp, #28]
 80090fc:	0c1f      	lsrs	r7, r3, #16
 80090fe:	1852      	adds	r2, r2, r1
 8009100:	0c00      	lsrs	r0, r0, #16
 8009102:	b29b      	uxth	r3, r3
 8009104:	1411      	asrs	r1, r2, #16
 8009106:	1ac3      	subs	r3, r0, r3
 8009108:	185b      	adds	r3, r3, r1
 800910a:	1419      	asrs	r1, r3, #16
 800910c:	b292      	uxth	r2, r2
 800910e:	041b      	lsls	r3, r3, #16
 8009110:	431a      	orrs	r2, r3
 8009112:	9b05      	ldr	r3, [sp, #20]
 8009114:	9107      	str	r1, [sp, #28]
 8009116:	c604      	stmia	r6!, {r2}
 8009118:	4563      	cmp	r3, ip
 800911a:	d2df      	bcs.n	80090dc <quorem+0x48>
 800911c:	682b      	ldr	r3, [r5, #0]
 800911e:	2b00      	cmp	r3, #0
 8009120:	d02b      	beq.n	800917a <quorem+0xe6>
 8009122:	9906      	ldr	r1, [sp, #24]
 8009124:	9803      	ldr	r0, [sp, #12]
 8009126:	f001 ff35 	bl	800af94 <__mcmp>
 800912a:	2800      	cmp	r0, #0
 800912c:	db1e      	blt.n	800916c <quorem+0xd8>
 800912e:	2600      	movs	r6, #0
 8009130:	9d01      	ldr	r5, [sp, #4]
 8009132:	9904      	ldr	r1, [sp, #16]
 8009134:	c901      	ldmia	r1!, {r0}
 8009136:	682b      	ldr	r3, [r5, #0]
 8009138:	b287      	uxth	r7, r0
 800913a:	b29a      	uxth	r2, r3
 800913c:	1bd2      	subs	r2, r2, r7
 800913e:	1992      	adds	r2, r2, r6
 8009140:	0c00      	lsrs	r0, r0, #16
 8009142:	0c1b      	lsrs	r3, r3, #16
 8009144:	1a1b      	subs	r3, r3, r0
 8009146:	1410      	asrs	r0, r2, #16
 8009148:	181b      	adds	r3, r3, r0
 800914a:	141e      	asrs	r6, r3, #16
 800914c:	b292      	uxth	r2, r2
 800914e:	041b      	lsls	r3, r3, #16
 8009150:	431a      	orrs	r2, r3
 8009152:	9b05      	ldr	r3, [sp, #20]
 8009154:	c504      	stmia	r5!, {r2}
 8009156:	428b      	cmp	r3, r1
 8009158:	d2ec      	bcs.n	8009134 <quorem+0xa0>
 800915a:	9a01      	ldr	r2, [sp, #4]
 800915c:	00a3      	lsls	r3, r4, #2
 800915e:	18d3      	adds	r3, r2, r3
 8009160:	681a      	ldr	r2, [r3, #0]
 8009162:	2a00      	cmp	r2, #0
 8009164:	d014      	beq.n	8009190 <quorem+0xfc>
 8009166:	9b02      	ldr	r3, [sp, #8]
 8009168:	3301      	adds	r3, #1
 800916a:	9302      	str	r3, [sp, #8]
 800916c:	9802      	ldr	r0, [sp, #8]
 800916e:	b009      	add	sp, #36	@ 0x24
 8009170:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009172:	682b      	ldr	r3, [r5, #0]
 8009174:	2b00      	cmp	r3, #0
 8009176:	d104      	bne.n	8009182 <quorem+0xee>
 8009178:	3c01      	subs	r4, #1
 800917a:	9b01      	ldr	r3, [sp, #4]
 800917c:	3d04      	subs	r5, #4
 800917e:	42ab      	cmp	r3, r5
 8009180:	d3f7      	bcc.n	8009172 <quorem+0xde>
 8009182:	9b03      	ldr	r3, [sp, #12]
 8009184:	611c      	str	r4, [r3, #16]
 8009186:	e7cc      	b.n	8009122 <quorem+0x8e>
 8009188:	681a      	ldr	r2, [r3, #0]
 800918a:	2a00      	cmp	r2, #0
 800918c:	d104      	bne.n	8009198 <quorem+0x104>
 800918e:	3c01      	subs	r4, #1
 8009190:	9a01      	ldr	r2, [sp, #4]
 8009192:	3b04      	subs	r3, #4
 8009194:	429a      	cmp	r2, r3
 8009196:	d3f7      	bcc.n	8009188 <quorem+0xf4>
 8009198:	9b03      	ldr	r3, [sp, #12]
 800919a:	611c      	str	r4, [r3, #16]
 800919c:	e7e3      	b.n	8009166 <quorem+0xd2>
	...

080091a0 <_dtoa_r>:
 80091a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80091a2:	0014      	movs	r4, r2
 80091a4:	001d      	movs	r5, r3
 80091a6:	69c6      	ldr	r6, [r0, #28]
 80091a8:	b09d      	sub	sp, #116	@ 0x74
 80091aa:	940a      	str	r4, [sp, #40]	@ 0x28
 80091ac:	950b      	str	r5, [sp, #44]	@ 0x2c
 80091ae:	9f25      	ldr	r7, [sp, #148]	@ 0x94
 80091b0:	9003      	str	r0, [sp, #12]
 80091b2:	2e00      	cmp	r6, #0
 80091b4:	d10f      	bne.n	80091d6 <_dtoa_r+0x36>
 80091b6:	2010      	movs	r0, #16
 80091b8:	f001 fa9a 	bl	800a6f0 <malloc>
 80091bc:	9b03      	ldr	r3, [sp, #12]
 80091be:	1e02      	subs	r2, r0, #0
 80091c0:	61d8      	str	r0, [r3, #28]
 80091c2:	d104      	bne.n	80091ce <_dtoa_r+0x2e>
 80091c4:	21ef      	movs	r1, #239	@ 0xef
 80091c6:	4bc7      	ldr	r3, [pc, #796]	@ (80094e4 <_dtoa_r+0x344>)
 80091c8:	48c7      	ldr	r0, [pc, #796]	@ (80094e8 <_dtoa_r+0x348>)
 80091ca:	f002 f9cf 	bl	800b56c <__assert_func>
 80091ce:	6046      	str	r6, [r0, #4]
 80091d0:	6086      	str	r6, [r0, #8]
 80091d2:	6006      	str	r6, [r0, #0]
 80091d4:	60c6      	str	r6, [r0, #12]
 80091d6:	9b03      	ldr	r3, [sp, #12]
 80091d8:	69db      	ldr	r3, [r3, #28]
 80091da:	6819      	ldr	r1, [r3, #0]
 80091dc:	2900      	cmp	r1, #0
 80091de:	d00b      	beq.n	80091f8 <_dtoa_r+0x58>
 80091e0:	685a      	ldr	r2, [r3, #4]
 80091e2:	2301      	movs	r3, #1
 80091e4:	4093      	lsls	r3, r2
 80091e6:	604a      	str	r2, [r1, #4]
 80091e8:	608b      	str	r3, [r1, #8]
 80091ea:	9803      	ldr	r0, [sp, #12]
 80091ec:	f001 fc44 	bl	800aa78 <_Bfree>
 80091f0:	2200      	movs	r2, #0
 80091f2:	9b03      	ldr	r3, [sp, #12]
 80091f4:	69db      	ldr	r3, [r3, #28]
 80091f6:	601a      	str	r2, [r3, #0]
 80091f8:	2d00      	cmp	r5, #0
 80091fa:	da1e      	bge.n	800923a <_dtoa_r+0x9a>
 80091fc:	2301      	movs	r3, #1
 80091fe:	603b      	str	r3, [r7, #0]
 8009200:	006b      	lsls	r3, r5, #1
 8009202:	085b      	lsrs	r3, r3, #1
 8009204:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009206:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8009208:	4bb8      	ldr	r3, [pc, #736]	@ (80094ec <_dtoa_r+0x34c>)
 800920a:	4ab8      	ldr	r2, [pc, #736]	@ (80094ec <_dtoa_r+0x34c>)
 800920c:	403b      	ands	r3, r7
 800920e:	4293      	cmp	r3, r2
 8009210:	d116      	bne.n	8009240 <_dtoa_r+0xa0>
 8009212:	4bb7      	ldr	r3, [pc, #732]	@ (80094f0 <_dtoa_r+0x350>)
 8009214:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8009216:	6013      	str	r3, [r2, #0]
 8009218:	033b      	lsls	r3, r7, #12
 800921a:	0b1b      	lsrs	r3, r3, #12
 800921c:	4323      	orrs	r3, r4
 800921e:	d101      	bne.n	8009224 <_dtoa_r+0x84>
 8009220:	f000 fd80 	bl	8009d24 <_dtoa_r+0xb84>
 8009224:	4bb3      	ldr	r3, [pc, #716]	@ (80094f4 <_dtoa_r+0x354>)
 8009226:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8009228:	9308      	str	r3, [sp, #32]
 800922a:	2a00      	cmp	r2, #0
 800922c:	d002      	beq.n	8009234 <_dtoa_r+0x94>
 800922e:	4bb2      	ldr	r3, [pc, #712]	@ (80094f8 <_dtoa_r+0x358>)
 8009230:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8009232:	6013      	str	r3, [r2, #0]
 8009234:	9808      	ldr	r0, [sp, #32]
 8009236:	b01d      	add	sp, #116	@ 0x74
 8009238:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800923a:	2300      	movs	r3, #0
 800923c:	603b      	str	r3, [r7, #0]
 800923e:	e7e2      	b.n	8009206 <_dtoa_r+0x66>
 8009240:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009242:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009244:	9212      	str	r2, [sp, #72]	@ 0x48
 8009246:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009248:	9812      	ldr	r0, [sp, #72]	@ 0x48
 800924a:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800924c:	2200      	movs	r2, #0
 800924e:	2300      	movs	r3, #0
 8009250:	f7f7 f8f8 	bl	8000444 <__aeabi_dcmpeq>
 8009254:	1e06      	subs	r6, r0, #0
 8009256:	d00b      	beq.n	8009270 <_dtoa_r+0xd0>
 8009258:	2301      	movs	r3, #1
 800925a:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800925c:	6013      	str	r3, [r2, #0]
 800925e:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8009260:	2b00      	cmp	r3, #0
 8009262:	d002      	beq.n	800926a <_dtoa_r+0xca>
 8009264:	4ba5      	ldr	r3, [pc, #660]	@ (80094fc <_dtoa_r+0x35c>)
 8009266:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8009268:	6013      	str	r3, [r2, #0]
 800926a:	4ba5      	ldr	r3, [pc, #660]	@ (8009500 <_dtoa_r+0x360>)
 800926c:	9308      	str	r3, [sp, #32]
 800926e:	e7e1      	b.n	8009234 <_dtoa_r+0x94>
 8009270:	ab1a      	add	r3, sp, #104	@ 0x68
 8009272:	9301      	str	r3, [sp, #4]
 8009274:	ab1b      	add	r3, sp, #108	@ 0x6c
 8009276:	9300      	str	r3, [sp, #0]
 8009278:	9803      	ldr	r0, [sp, #12]
 800927a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800927c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800927e:	f001 ffab 	bl	800b1d8 <__d2b>
 8009282:	007a      	lsls	r2, r7, #1
 8009284:	9005      	str	r0, [sp, #20]
 8009286:	0d52      	lsrs	r2, r2, #21
 8009288:	d100      	bne.n	800928c <_dtoa_r+0xec>
 800928a:	e07b      	b.n	8009384 <_dtoa_r+0x1e4>
 800928c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800928e:	9618      	str	r6, [sp, #96]	@ 0x60
 8009290:	0319      	lsls	r1, r3, #12
 8009292:	4b9c      	ldr	r3, [pc, #624]	@ (8009504 <_dtoa_r+0x364>)
 8009294:	0b09      	lsrs	r1, r1, #12
 8009296:	430b      	orrs	r3, r1
 8009298:	499b      	ldr	r1, [pc, #620]	@ (8009508 <_dtoa_r+0x368>)
 800929a:	1857      	adds	r7, r2, r1
 800929c:	9812      	ldr	r0, [sp, #72]	@ 0x48
 800929e:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 80092a0:	0019      	movs	r1, r3
 80092a2:	2200      	movs	r2, #0
 80092a4:	4b99      	ldr	r3, [pc, #612]	@ (800950c <_dtoa_r+0x36c>)
 80092a6:	f7f9 fc6d 	bl	8002b84 <__aeabi_dsub>
 80092aa:	4a99      	ldr	r2, [pc, #612]	@ (8009510 <_dtoa_r+0x370>)
 80092ac:	4b99      	ldr	r3, [pc, #612]	@ (8009514 <_dtoa_r+0x374>)
 80092ae:	f7f9 f983 	bl	80025b8 <__aeabi_dmul>
 80092b2:	4a99      	ldr	r2, [pc, #612]	@ (8009518 <_dtoa_r+0x378>)
 80092b4:	4b99      	ldr	r3, [pc, #612]	@ (800951c <_dtoa_r+0x37c>)
 80092b6:	f7f8 f97f 	bl	80015b8 <__aeabi_dadd>
 80092ba:	0004      	movs	r4, r0
 80092bc:	0038      	movs	r0, r7
 80092be:	000d      	movs	r5, r1
 80092c0:	f7fa f8c8 	bl	8003454 <__aeabi_i2d>
 80092c4:	4a96      	ldr	r2, [pc, #600]	@ (8009520 <_dtoa_r+0x380>)
 80092c6:	4b97      	ldr	r3, [pc, #604]	@ (8009524 <_dtoa_r+0x384>)
 80092c8:	f7f9 f976 	bl	80025b8 <__aeabi_dmul>
 80092cc:	0002      	movs	r2, r0
 80092ce:	000b      	movs	r3, r1
 80092d0:	0020      	movs	r0, r4
 80092d2:	0029      	movs	r1, r5
 80092d4:	f7f8 f970 	bl	80015b8 <__aeabi_dadd>
 80092d8:	0004      	movs	r4, r0
 80092da:	000d      	movs	r5, r1
 80092dc:	f7fa f87e 	bl	80033dc <__aeabi_d2iz>
 80092e0:	2200      	movs	r2, #0
 80092e2:	9004      	str	r0, [sp, #16]
 80092e4:	2300      	movs	r3, #0
 80092e6:	0020      	movs	r0, r4
 80092e8:	0029      	movs	r1, r5
 80092ea:	f7f7 f8b1 	bl	8000450 <__aeabi_dcmplt>
 80092ee:	2800      	cmp	r0, #0
 80092f0:	d00b      	beq.n	800930a <_dtoa_r+0x16a>
 80092f2:	9804      	ldr	r0, [sp, #16]
 80092f4:	f7fa f8ae 	bl	8003454 <__aeabi_i2d>
 80092f8:	002b      	movs	r3, r5
 80092fa:	0022      	movs	r2, r4
 80092fc:	f7f7 f8a2 	bl	8000444 <__aeabi_dcmpeq>
 8009300:	4243      	negs	r3, r0
 8009302:	4158      	adcs	r0, r3
 8009304:	9b04      	ldr	r3, [sp, #16]
 8009306:	1a1b      	subs	r3, r3, r0
 8009308:	9304      	str	r3, [sp, #16]
 800930a:	2301      	movs	r3, #1
 800930c:	9315      	str	r3, [sp, #84]	@ 0x54
 800930e:	9b04      	ldr	r3, [sp, #16]
 8009310:	2b16      	cmp	r3, #22
 8009312:	d810      	bhi.n	8009336 <_dtoa_r+0x196>
 8009314:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8009316:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8009318:	9a04      	ldr	r2, [sp, #16]
 800931a:	4b83      	ldr	r3, [pc, #524]	@ (8009528 <_dtoa_r+0x388>)
 800931c:	00d2      	lsls	r2, r2, #3
 800931e:	189b      	adds	r3, r3, r2
 8009320:	681a      	ldr	r2, [r3, #0]
 8009322:	685b      	ldr	r3, [r3, #4]
 8009324:	f7f7 f894 	bl	8000450 <__aeabi_dcmplt>
 8009328:	2800      	cmp	r0, #0
 800932a:	d047      	beq.n	80093bc <_dtoa_r+0x21c>
 800932c:	9b04      	ldr	r3, [sp, #16]
 800932e:	3b01      	subs	r3, #1
 8009330:	9304      	str	r3, [sp, #16]
 8009332:	2300      	movs	r3, #0
 8009334:	9315      	str	r3, [sp, #84]	@ 0x54
 8009336:	2200      	movs	r2, #0
 8009338:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 800933a:	9206      	str	r2, [sp, #24]
 800933c:	1bdb      	subs	r3, r3, r7
 800933e:	1e5a      	subs	r2, r3, #1
 8009340:	d53e      	bpl.n	80093c0 <_dtoa_r+0x220>
 8009342:	2201      	movs	r2, #1
 8009344:	1ad3      	subs	r3, r2, r3
 8009346:	9306      	str	r3, [sp, #24]
 8009348:	2300      	movs	r3, #0
 800934a:	930d      	str	r3, [sp, #52]	@ 0x34
 800934c:	9b04      	ldr	r3, [sp, #16]
 800934e:	2b00      	cmp	r3, #0
 8009350:	db38      	blt.n	80093c4 <_dtoa_r+0x224>
 8009352:	9a04      	ldr	r2, [sp, #16]
 8009354:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009356:	4694      	mov	ip, r2
 8009358:	4463      	add	r3, ip
 800935a:	930d      	str	r3, [sp, #52]	@ 0x34
 800935c:	2300      	movs	r3, #0
 800935e:	9214      	str	r2, [sp, #80]	@ 0x50
 8009360:	930f      	str	r3, [sp, #60]	@ 0x3c
 8009362:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8009364:	2401      	movs	r4, #1
 8009366:	2b09      	cmp	r3, #9
 8009368:	d862      	bhi.n	8009430 <_dtoa_r+0x290>
 800936a:	2b05      	cmp	r3, #5
 800936c:	dd02      	ble.n	8009374 <_dtoa_r+0x1d4>
 800936e:	2400      	movs	r4, #0
 8009370:	3b04      	subs	r3, #4
 8009372:	9322      	str	r3, [sp, #136]	@ 0x88
 8009374:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8009376:	1e98      	subs	r0, r3, #2
 8009378:	2803      	cmp	r0, #3
 800937a:	d863      	bhi.n	8009444 <_dtoa_r+0x2a4>
 800937c:	f7f6 fec8 	bl	8000110 <__gnu_thumb1_case_uqi>
 8009380:	2b385654 	.word	0x2b385654
 8009384:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8009386:	9e1a      	ldr	r6, [sp, #104]	@ 0x68
 8009388:	18f6      	adds	r6, r6, r3
 800938a:	4b68      	ldr	r3, [pc, #416]	@ (800952c <_dtoa_r+0x38c>)
 800938c:	18f2      	adds	r2, r6, r3
 800938e:	2a20      	cmp	r2, #32
 8009390:	dd0f      	ble.n	80093b2 <_dtoa_r+0x212>
 8009392:	2340      	movs	r3, #64	@ 0x40
 8009394:	1a9b      	subs	r3, r3, r2
 8009396:	409f      	lsls	r7, r3
 8009398:	4b65      	ldr	r3, [pc, #404]	@ (8009530 <_dtoa_r+0x390>)
 800939a:	0038      	movs	r0, r7
 800939c:	18f3      	adds	r3, r6, r3
 800939e:	40dc      	lsrs	r4, r3
 80093a0:	4320      	orrs	r0, r4
 80093a2:	f7fa f885 	bl	80034b0 <__aeabi_ui2d>
 80093a6:	2201      	movs	r2, #1
 80093a8:	4b62      	ldr	r3, [pc, #392]	@ (8009534 <_dtoa_r+0x394>)
 80093aa:	1e77      	subs	r7, r6, #1
 80093ac:	18cb      	adds	r3, r1, r3
 80093ae:	9218      	str	r2, [sp, #96]	@ 0x60
 80093b0:	e776      	b.n	80092a0 <_dtoa_r+0x100>
 80093b2:	2320      	movs	r3, #32
 80093b4:	0020      	movs	r0, r4
 80093b6:	1a9b      	subs	r3, r3, r2
 80093b8:	4098      	lsls	r0, r3
 80093ba:	e7f2      	b.n	80093a2 <_dtoa_r+0x202>
 80093bc:	9015      	str	r0, [sp, #84]	@ 0x54
 80093be:	e7ba      	b.n	8009336 <_dtoa_r+0x196>
 80093c0:	920d      	str	r2, [sp, #52]	@ 0x34
 80093c2:	e7c3      	b.n	800934c <_dtoa_r+0x1ac>
 80093c4:	9b06      	ldr	r3, [sp, #24]
 80093c6:	9a04      	ldr	r2, [sp, #16]
 80093c8:	1a9b      	subs	r3, r3, r2
 80093ca:	9306      	str	r3, [sp, #24]
 80093cc:	4253      	negs	r3, r2
 80093ce:	930f      	str	r3, [sp, #60]	@ 0x3c
 80093d0:	2300      	movs	r3, #0
 80093d2:	9314      	str	r3, [sp, #80]	@ 0x50
 80093d4:	e7c5      	b.n	8009362 <_dtoa_r+0x1c2>
 80093d6:	2301      	movs	r3, #1
 80093d8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80093da:	9310      	str	r3, [sp, #64]	@ 0x40
 80093dc:	4694      	mov	ip, r2
 80093de:	9b04      	ldr	r3, [sp, #16]
 80093e0:	4463      	add	r3, ip
 80093e2:	930e      	str	r3, [sp, #56]	@ 0x38
 80093e4:	3301      	adds	r3, #1
 80093e6:	9309      	str	r3, [sp, #36]	@ 0x24
 80093e8:	2b00      	cmp	r3, #0
 80093ea:	dc08      	bgt.n	80093fe <_dtoa_r+0x25e>
 80093ec:	2301      	movs	r3, #1
 80093ee:	e006      	b.n	80093fe <_dtoa_r+0x25e>
 80093f0:	2301      	movs	r3, #1
 80093f2:	9310      	str	r3, [sp, #64]	@ 0x40
 80093f4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80093f6:	2b00      	cmp	r3, #0
 80093f8:	dd28      	ble.n	800944c <_dtoa_r+0x2ac>
 80093fa:	930e      	str	r3, [sp, #56]	@ 0x38
 80093fc:	9309      	str	r3, [sp, #36]	@ 0x24
 80093fe:	9a03      	ldr	r2, [sp, #12]
 8009400:	2100      	movs	r1, #0
 8009402:	69d0      	ldr	r0, [r2, #28]
 8009404:	2204      	movs	r2, #4
 8009406:	0015      	movs	r5, r2
 8009408:	3514      	adds	r5, #20
 800940a:	429d      	cmp	r5, r3
 800940c:	d923      	bls.n	8009456 <_dtoa_r+0x2b6>
 800940e:	6041      	str	r1, [r0, #4]
 8009410:	9803      	ldr	r0, [sp, #12]
 8009412:	f001 faed 	bl	800a9f0 <_Balloc>
 8009416:	9008      	str	r0, [sp, #32]
 8009418:	2800      	cmp	r0, #0
 800941a:	d11f      	bne.n	800945c <_dtoa_r+0x2bc>
 800941c:	21b0      	movs	r1, #176	@ 0xb0
 800941e:	4b46      	ldr	r3, [pc, #280]	@ (8009538 <_dtoa_r+0x398>)
 8009420:	4831      	ldr	r0, [pc, #196]	@ (80094e8 <_dtoa_r+0x348>)
 8009422:	9a08      	ldr	r2, [sp, #32]
 8009424:	31ff      	adds	r1, #255	@ 0xff
 8009426:	e6d0      	b.n	80091ca <_dtoa_r+0x2a>
 8009428:	2300      	movs	r3, #0
 800942a:	e7e2      	b.n	80093f2 <_dtoa_r+0x252>
 800942c:	2300      	movs	r3, #0
 800942e:	e7d3      	b.n	80093d8 <_dtoa_r+0x238>
 8009430:	2300      	movs	r3, #0
 8009432:	9410      	str	r4, [sp, #64]	@ 0x40
 8009434:	9322      	str	r3, [sp, #136]	@ 0x88
 8009436:	3b01      	subs	r3, #1
 8009438:	2200      	movs	r2, #0
 800943a:	930e      	str	r3, [sp, #56]	@ 0x38
 800943c:	9309      	str	r3, [sp, #36]	@ 0x24
 800943e:	3313      	adds	r3, #19
 8009440:	9223      	str	r2, [sp, #140]	@ 0x8c
 8009442:	e7dc      	b.n	80093fe <_dtoa_r+0x25e>
 8009444:	2301      	movs	r3, #1
 8009446:	9310      	str	r3, [sp, #64]	@ 0x40
 8009448:	3b02      	subs	r3, #2
 800944a:	e7f5      	b.n	8009438 <_dtoa_r+0x298>
 800944c:	2301      	movs	r3, #1
 800944e:	001a      	movs	r2, r3
 8009450:	930e      	str	r3, [sp, #56]	@ 0x38
 8009452:	9309      	str	r3, [sp, #36]	@ 0x24
 8009454:	e7f4      	b.n	8009440 <_dtoa_r+0x2a0>
 8009456:	3101      	adds	r1, #1
 8009458:	0052      	lsls	r2, r2, #1
 800945a:	e7d4      	b.n	8009406 <_dtoa_r+0x266>
 800945c:	9b03      	ldr	r3, [sp, #12]
 800945e:	9a08      	ldr	r2, [sp, #32]
 8009460:	69db      	ldr	r3, [r3, #28]
 8009462:	601a      	str	r2, [r3, #0]
 8009464:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009466:	2b0e      	cmp	r3, #14
 8009468:	d900      	bls.n	800946c <_dtoa_r+0x2cc>
 800946a:	e0d6      	b.n	800961a <_dtoa_r+0x47a>
 800946c:	2c00      	cmp	r4, #0
 800946e:	d100      	bne.n	8009472 <_dtoa_r+0x2d2>
 8009470:	e0d3      	b.n	800961a <_dtoa_r+0x47a>
 8009472:	9b04      	ldr	r3, [sp, #16]
 8009474:	2b00      	cmp	r3, #0
 8009476:	dd63      	ble.n	8009540 <_dtoa_r+0x3a0>
 8009478:	210f      	movs	r1, #15
 800947a:	9a04      	ldr	r2, [sp, #16]
 800947c:	4b2a      	ldr	r3, [pc, #168]	@ (8009528 <_dtoa_r+0x388>)
 800947e:	400a      	ands	r2, r1
 8009480:	00d2      	lsls	r2, r2, #3
 8009482:	189b      	adds	r3, r3, r2
 8009484:	681e      	ldr	r6, [r3, #0]
 8009486:	685f      	ldr	r7, [r3, #4]
 8009488:	9b04      	ldr	r3, [sp, #16]
 800948a:	2402      	movs	r4, #2
 800948c:	111d      	asrs	r5, r3, #4
 800948e:	05db      	lsls	r3, r3, #23
 8009490:	d50a      	bpl.n	80094a8 <_dtoa_r+0x308>
 8009492:	4b2a      	ldr	r3, [pc, #168]	@ (800953c <_dtoa_r+0x39c>)
 8009494:	400d      	ands	r5, r1
 8009496:	6a1a      	ldr	r2, [r3, #32]
 8009498:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800949a:	9812      	ldr	r0, [sp, #72]	@ 0x48
 800949c:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800949e:	f7f8 fc51 	bl	8001d44 <__aeabi_ddiv>
 80094a2:	900a      	str	r0, [sp, #40]	@ 0x28
 80094a4:	910b      	str	r1, [sp, #44]	@ 0x2c
 80094a6:	3401      	adds	r4, #1
 80094a8:	4b24      	ldr	r3, [pc, #144]	@ (800953c <_dtoa_r+0x39c>)
 80094aa:	930c      	str	r3, [sp, #48]	@ 0x30
 80094ac:	2d00      	cmp	r5, #0
 80094ae:	d108      	bne.n	80094c2 <_dtoa_r+0x322>
 80094b0:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80094b2:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80094b4:	0032      	movs	r2, r6
 80094b6:	003b      	movs	r3, r7
 80094b8:	f7f8 fc44 	bl	8001d44 <__aeabi_ddiv>
 80094bc:	900a      	str	r0, [sp, #40]	@ 0x28
 80094be:	910b      	str	r1, [sp, #44]	@ 0x2c
 80094c0:	e059      	b.n	8009576 <_dtoa_r+0x3d6>
 80094c2:	2301      	movs	r3, #1
 80094c4:	421d      	tst	r5, r3
 80094c6:	d009      	beq.n	80094dc <_dtoa_r+0x33c>
 80094c8:	18e4      	adds	r4, r4, r3
 80094ca:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80094cc:	0030      	movs	r0, r6
 80094ce:	681a      	ldr	r2, [r3, #0]
 80094d0:	685b      	ldr	r3, [r3, #4]
 80094d2:	0039      	movs	r1, r7
 80094d4:	f7f9 f870 	bl	80025b8 <__aeabi_dmul>
 80094d8:	0006      	movs	r6, r0
 80094da:	000f      	movs	r7, r1
 80094dc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80094de:	106d      	asrs	r5, r5, #1
 80094e0:	3308      	adds	r3, #8
 80094e2:	e7e2      	b.n	80094aa <_dtoa_r+0x30a>
 80094e4:	0800c01c 	.word	0x0800c01c
 80094e8:	0800c033 	.word	0x0800c033
 80094ec:	7ff00000 	.word	0x7ff00000
 80094f0:	0000270f 	.word	0x0000270f
 80094f4:	0800c018 	.word	0x0800c018
 80094f8:	0800c01b 	.word	0x0800c01b
 80094fc:	0800bfdd 	.word	0x0800bfdd
 8009500:	0800bfdc 	.word	0x0800bfdc
 8009504:	3ff00000 	.word	0x3ff00000
 8009508:	fffffc01 	.word	0xfffffc01
 800950c:	3ff80000 	.word	0x3ff80000
 8009510:	636f4361 	.word	0x636f4361
 8009514:	3fd287a7 	.word	0x3fd287a7
 8009518:	8b60c8b3 	.word	0x8b60c8b3
 800951c:	3fc68a28 	.word	0x3fc68a28
 8009520:	509f79fb 	.word	0x509f79fb
 8009524:	3fd34413 	.word	0x3fd34413
 8009528:	0800c330 	.word	0x0800c330
 800952c:	00000432 	.word	0x00000432
 8009530:	00000412 	.word	0x00000412
 8009534:	fe100000 	.word	0xfe100000
 8009538:	0800c08b 	.word	0x0800c08b
 800953c:	0800c308 	.word	0x0800c308
 8009540:	9b04      	ldr	r3, [sp, #16]
 8009542:	2402      	movs	r4, #2
 8009544:	2b00      	cmp	r3, #0
 8009546:	d016      	beq.n	8009576 <_dtoa_r+0x3d6>
 8009548:	9812      	ldr	r0, [sp, #72]	@ 0x48
 800954a:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800954c:	220f      	movs	r2, #15
 800954e:	425d      	negs	r5, r3
 8009550:	402a      	ands	r2, r5
 8009552:	4bd5      	ldr	r3, [pc, #852]	@ (80098a8 <_dtoa_r+0x708>)
 8009554:	00d2      	lsls	r2, r2, #3
 8009556:	189b      	adds	r3, r3, r2
 8009558:	681a      	ldr	r2, [r3, #0]
 800955a:	685b      	ldr	r3, [r3, #4]
 800955c:	f7f9 f82c 	bl	80025b8 <__aeabi_dmul>
 8009560:	2701      	movs	r7, #1
 8009562:	2300      	movs	r3, #0
 8009564:	900a      	str	r0, [sp, #40]	@ 0x28
 8009566:	910b      	str	r1, [sp, #44]	@ 0x2c
 8009568:	4ed0      	ldr	r6, [pc, #832]	@ (80098ac <_dtoa_r+0x70c>)
 800956a:	112d      	asrs	r5, r5, #4
 800956c:	2d00      	cmp	r5, #0
 800956e:	d000      	beq.n	8009572 <_dtoa_r+0x3d2>
 8009570:	e095      	b.n	800969e <_dtoa_r+0x4fe>
 8009572:	2b00      	cmp	r3, #0
 8009574:	d1a2      	bne.n	80094bc <_dtoa_r+0x31c>
 8009576:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8009578:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 800957a:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800957c:	2b00      	cmp	r3, #0
 800957e:	d100      	bne.n	8009582 <_dtoa_r+0x3e2>
 8009580:	e098      	b.n	80096b4 <_dtoa_r+0x514>
 8009582:	2200      	movs	r2, #0
 8009584:	0030      	movs	r0, r6
 8009586:	0039      	movs	r1, r7
 8009588:	4bc9      	ldr	r3, [pc, #804]	@ (80098b0 <_dtoa_r+0x710>)
 800958a:	f7f6 ff61 	bl	8000450 <__aeabi_dcmplt>
 800958e:	2800      	cmp	r0, #0
 8009590:	d100      	bne.n	8009594 <_dtoa_r+0x3f4>
 8009592:	e08f      	b.n	80096b4 <_dtoa_r+0x514>
 8009594:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009596:	2b00      	cmp	r3, #0
 8009598:	d100      	bne.n	800959c <_dtoa_r+0x3fc>
 800959a:	e08b      	b.n	80096b4 <_dtoa_r+0x514>
 800959c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800959e:	2b00      	cmp	r3, #0
 80095a0:	dd37      	ble.n	8009612 <_dtoa_r+0x472>
 80095a2:	9b04      	ldr	r3, [sp, #16]
 80095a4:	2200      	movs	r2, #0
 80095a6:	3b01      	subs	r3, #1
 80095a8:	930c      	str	r3, [sp, #48]	@ 0x30
 80095aa:	0030      	movs	r0, r6
 80095ac:	4bc1      	ldr	r3, [pc, #772]	@ (80098b4 <_dtoa_r+0x714>)
 80095ae:	0039      	movs	r1, r7
 80095b0:	f7f9 f802 	bl	80025b8 <__aeabi_dmul>
 80095b4:	900a      	str	r0, [sp, #40]	@ 0x28
 80095b6:	910b      	str	r1, [sp, #44]	@ 0x2c
 80095b8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80095ba:	3401      	adds	r4, #1
 80095bc:	0020      	movs	r0, r4
 80095be:	9311      	str	r3, [sp, #68]	@ 0x44
 80095c0:	f7f9 ff48 	bl	8003454 <__aeabi_i2d>
 80095c4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80095c6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80095c8:	f7f8 fff6 	bl	80025b8 <__aeabi_dmul>
 80095cc:	4bba      	ldr	r3, [pc, #744]	@ (80098b8 <_dtoa_r+0x718>)
 80095ce:	2200      	movs	r2, #0
 80095d0:	f7f7 fff2 	bl	80015b8 <__aeabi_dadd>
 80095d4:	4bb9      	ldr	r3, [pc, #740]	@ (80098bc <_dtoa_r+0x71c>)
 80095d6:	0006      	movs	r6, r0
 80095d8:	18cf      	adds	r7, r1, r3
 80095da:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80095dc:	2b00      	cmp	r3, #0
 80095de:	d16d      	bne.n	80096bc <_dtoa_r+0x51c>
 80095e0:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80095e2:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80095e4:	2200      	movs	r2, #0
 80095e6:	4bb6      	ldr	r3, [pc, #728]	@ (80098c0 <_dtoa_r+0x720>)
 80095e8:	f7f9 facc 	bl	8002b84 <__aeabi_dsub>
 80095ec:	0032      	movs	r2, r6
 80095ee:	003b      	movs	r3, r7
 80095f0:	0004      	movs	r4, r0
 80095f2:	000d      	movs	r5, r1
 80095f4:	f7f6 ff40 	bl	8000478 <__aeabi_dcmpgt>
 80095f8:	2800      	cmp	r0, #0
 80095fa:	d000      	beq.n	80095fe <_dtoa_r+0x45e>
 80095fc:	e2b6      	b.n	8009b6c <_dtoa_r+0x9cc>
 80095fe:	2180      	movs	r1, #128	@ 0x80
 8009600:	0609      	lsls	r1, r1, #24
 8009602:	187b      	adds	r3, r7, r1
 8009604:	0032      	movs	r2, r6
 8009606:	0020      	movs	r0, r4
 8009608:	0029      	movs	r1, r5
 800960a:	f7f6 ff21 	bl	8000450 <__aeabi_dcmplt>
 800960e:	2800      	cmp	r0, #0
 8009610:	d128      	bne.n	8009664 <_dtoa_r+0x4c4>
 8009612:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8009614:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8009616:	930a      	str	r3, [sp, #40]	@ 0x28
 8009618:	940b      	str	r4, [sp, #44]	@ 0x2c
 800961a:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 800961c:	2b00      	cmp	r3, #0
 800961e:	da00      	bge.n	8009622 <_dtoa_r+0x482>
 8009620:	e174      	b.n	800990c <_dtoa_r+0x76c>
 8009622:	9a04      	ldr	r2, [sp, #16]
 8009624:	2a0e      	cmp	r2, #14
 8009626:	dd00      	ble.n	800962a <_dtoa_r+0x48a>
 8009628:	e170      	b.n	800990c <_dtoa_r+0x76c>
 800962a:	4b9f      	ldr	r3, [pc, #636]	@ (80098a8 <_dtoa_r+0x708>)
 800962c:	00d2      	lsls	r2, r2, #3
 800962e:	189b      	adds	r3, r3, r2
 8009630:	685c      	ldr	r4, [r3, #4]
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	9306      	str	r3, [sp, #24]
 8009636:	9407      	str	r4, [sp, #28]
 8009638:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800963a:	2b00      	cmp	r3, #0
 800963c:	db00      	blt.n	8009640 <_dtoa_r+0x4a0>
 800963e:	e0e7      	b.n	8009810 <_dtoa_r+0x670>
 8009640:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009642:	2b00      	cmp	r3, #0
 8009644:	dd00      	ble.n	8009648 <_dtoa_r+0x4a8>
 8009646:	e0e3      	b.n	8009810 <_dtoa_r+0x670>
 8009648:	d10c      	bne.n	8009664 <_dtoa_r+0x4c4>
 800964a:	9806      	ldr	r0, [sp, #24]
 800964c:	9907      	ldr	r1, [sp, #28]
 800964e:	2200      	movs	r2, #0
 8009650:	4b9b      	ldr	r3, [pc, #620]	@ (80098c0 <_dtoa_r+0x720>)
 8009652:	f7f8 ffb1 	bl	80025b8 <__aeabi_dmul>
 8009656:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009658:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800965a:	f7f6 ff17 	bl	800048c <__aeabi_dcmpge>
 800965e:	2800      	cmp	r0, #0
 8009660:	d100      	bne.n	8009664 <_dtoa_r+0x4c4>
 8009662:	e286      	b.n	8009b72 <_dtoa_r+0x9d2>
 8009664:	2600      	movs	r6, #0
 8009666:	0037      	movs	r7, r6
 8009668:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800966a:	9c08      	ldr	r4, [sp, #32]
 800966c:	43db      	mvns	r3, r3
 800966e:	930c      	str	r3, [sp, #48]	@ 0x30
 8009670:	9704      	str	r7, [sp, #16]
 8009672:	2700      	movs	r7, #0
 8009674:	0031      	movs	r1, r6
 8009676:	9803      	ldr	r0, [sp, #12]
 8009678:	f001 f9fe 	bl	800aa78 <_Bfree>
 800967c:	9b04      	ldr	r3, [sp, #16]
 800967e:	2b00      	cmp	r3, #0
 8009680:	d100      	bne.n	8009684 <_dtoa_r+0x4e4>
 8009682:	e0bb      	b.n	80097fc <_dtoa_r+0x65c>
 8009684:	2f00      	cmp	r7, #0
 8009686:	d005      	beq.n	8009694 <_dtoa_r+0x4f4>
 8009688:	429f      	cmp	r7, r3
 800968a:	d003      	beq.n	8009694 <_dtoa_r+0x4f4>
 800968c:	0039      	movs	r1, r7
 800968e:	9803      	ldr	r0, [sp, #12]
 8009690:	f001 f9f2 	bl	800aa78 <_Bfree>
 8009694:	9904      	ldr	r1, [sp, #16]
 8009696:	9803      	ldr	r0, [sp, #12]
 8009698:	f001 f9ee 	bl	800aa78 <_Bfree>
 800969c:	e0ae      	b.n	80097fc <_dtoa_r+0x65c>
 800969e:	423d      	tst	r5, r7
 80096a0:	d005      	beq.n	80096ae <_dtoa_r+0x50e>
 80096a2:	6832      	ldr	r2, [r6, #0]
 80096a4:	6873      	ldr	r3, [r6, #4]
 80096a6:	f7f8 ff87 	bl	80025b8 <__aeabi_dmul>
 80096aa:	003b      	movs	r3, r7
 80096ac:	3401      	adds	r4, #1
 80096ae:	106d      	asrs	r5, r5, #1
 80096b0:	3608      	adds	r6, #8
 80096b2:	e75b      	b.n	800956c <_dtoa_r+0x3cc>
 80096b4:	9b04      	ldr	r3, [sp, #16]
 80096b6:	930c      	str	r3, [sp, #48]	@ 0x30
 80096b8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80096ba:	e77f      	b.n	80095bc <_dtoa_r+0x41c>
 80096bc:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80096be:	4b7a      	ldr	r3, [pc, #488]	@ (80098a8 <_dtoa_r+0x708>)
 80096c0:	3a01      	subs	r2, #1
 80096c2:	00d2      	lsls	r2, r2, #3
 80096c4:	9910      	ldr	r1, [sp, #64]	@ 0x40
 80096c6:	189b      	adds	r3, r3, r2
 80096c8:	681a      	ldr	r2, [r3, #0]
 80096ca:	685b      	ldr	r3, [r3, #4]
 80096cc:	2900      	cmp	r1, #0
 80096ce:	d04c      	beq.n	800976a <_dtoa_r+0x5ca>
 80096d0:	2000      	movs	r0, #0
 80096d2:	497c      	ldr	r1, [pc, #496]	@ (80098c4 <_dtoa_r+0x724>)
 80096d4:	f7f8 fb36 	bl	8001d44 <__aeabi_ddiv>
 80096d8:	0032      	movs	r2, r6
 80096da:	003b      	movs	r3, r7
 80096dc:	f7f9 fa52 	bl	8002b84 <__aeabi_dsub>
 80096e0:	9a08      	ldr	r2, [sp, #32]
 80096e2:	0006      	movs	r6, r0
 80096e4:	4694      	mov	ip, r2
 80096e6:	000f      	movs	r7, r1
 80096e8:	9b08      	ldr	r3, [sp, #32]
 80096ea:	9316      	str	r3, [sp, #88]	@ 0x58
 80096ec:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80096ee:	4463      	add	r3, ip
 80096f0:	9311      	str	r3, [sp, #68]	@ 0x44
 80096f2:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80096f4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80096f6:	f7f9 fe71 	bl	80033dc <__aeabi_d2iz>
 80096fa:	0005      	movs	r5, r0
 80096fc:	f7f9 feaa 	bl	8003454 <__aeabi_i2d>
 8009700:	0002      	movs	r2, r0
 8009702:	000b      	movs	r3, r1
 8009704:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8009706:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8009708:	f7f9 fa3c 	bl	8002b84 <__aeabi_dsub>
 800970c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800970e:	3530      	adds	r5, #48	@ 0x30
 8009710:	1c5c      	adds	r4, r3, #1
 8009712:	701d      	strb	r5, [r3, #0]
 8009714:	0032      	movs	r2, r6
 8009716:	003b      	movs	r3, r7
 8009718:	900a      	str	r0, [sp, #40]	@ 0x28
 800971a:	910b      	str	r1, [sp, #44]	@ 0x2c
 800971c:	f7f6 fe98 	bl	8000450 <__aeabi_dcmplt>
 8009720:	2800      	cmp	r0, #0
 8009722:	d16b      	bne.n	80097fc <_dtoa_r+0x65c>
 8009724:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009726:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009728:	2000      	movs	r0, #0
 800972a:	4961      	ldr	r1, [pc, #388]	@ (80098b0 <_dtoa_r+0x710>)
 800972c:	f7f9 fa2a 	bl	8002b84 <__aeabi_dsub>
 8009730:	0032      	movs	r2, r6
 8009732:	003b      	movs	r3, r7
 8009734:	f7f6 fe8c 	bl	8000450 <__aeabi_dcmplt>
 8009738:	2800      	cmp	r0, #0
 800973a:	d000      	beq.n	800973e <_dtoa_r+0x59e>
 800973c:	e0c6      	b.n	80098cc <_dtoa_r+0x72c>
 800973e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8009740:	42a3      	cmp	r3, r4
 8009742:	d100      	bne.n	8009746 <_dtoa_r+0x5a6>
 8009744:	e765      	b.n	8009612 <_dtoa_r+0x472>
 8009746:	2200      	movs	r2, #0
 8009748:	0030      	movs	r0, r6
 800974a:	0039      	movs	r1, r7
 800974c:	4b59      	ldr	r3, [pc, #356]	@ (80098b4 <_dtoa_r+0x714>)
 800974e:	f7f8 ff33 	bl	80025b8 <__aeabi_dmul>
 8009752:	2200      	movs	r2, #0
 8009754:	0006      	movs	r6, r0
 8009756:	000f      	movs	r7, r1
 8009758:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800975a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800975c:	4b55      	ldr	r3, [pc, #340]	@ (80098b4 <_dtoa_r+0x714>)
 800975e:	f7f8 ff2b 	bl	80025b8 <__aeabi_dmul>
 8009762:	9416      	str	r4, [sp, #88]	@ 0x58
 8009764:	900a      	str	r0, [sp, #40]	@ 0x28
 8009766:	910b      	str	r1, [sp, #44]	@ 0x2c
 8009768:	e7c3      	b.n	80096f2 <_dtoa_r+0x552>
 800976a:	0030      	movs	r0, r6
 800976c:	0039      	movs	r1, r7
 800976e:	f7f8 ff23 	bl	80025b8 <__aeabi_dmul>
 8009772:	9d08      	ldr	r5, [sp, #32]
 8009774:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8009776:	002b      	movs	r3, r5
 8009778:	4694      	mov	ip, r2
 800977a:	9016      	str	r0, [sp, #88]	@ 0x58
 800977c:	9117      	str	r1, [sp, #92]	@ 0x5c
 800977e:	4463      	add	r3, ip
 8009780:	9319      	str	r3, [sp, #100]	@ 0x64
 8009782:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8009784:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8009786:	f7f9 fe29 	bl	80033dc <__aeabi_d2iz>
 800978a:	0004      	movs	r4, r0
 800978c:	f7f9 fe62 	bl	8003454 <__aeabi_i2d>
 8009790:	000b      	movs	r3, r1
 8009792:	0002      	movs	r2, r0
 8009794:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8009796:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8009798:	f7f9 f9f4 	bl	8002b84 <__aeabi_dsub>
 800979c:	3430      	adds	r4, #48	@ 0x30
 800979e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80097a0:	702c      	strb	r4, [r5, #0]
 80097a2:	3501      	adds	r5, #1
 80097a4:	0006      	movs	r6, r0
 80097a6:	000f      	movs	r7, r1
 80097a8:	42ab      	cmp	r3, r5
 80097aa:	d12a      	bne.n	8009802 <_dtoa_r+0x662>
 80097ac:	9816      	ldr	r0, [sp, #88]	@ 0x58
 80097ae:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 80097b0:	9b08      	ldr	r3, [sp, #32]
 80097b2:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 80097b4:	469c      	mov	ip, r3
 80097b6:	2200      	movs	r2, #0
 80097b8:	4b42      	ldr	r3, [pc, #264]	@ (80098c4 <_dtoa_r+0x724>)
 80097ba:	4464      	add	r4, ip
 80097bc:	f7f7 fefc 	bl	80015b8 <__aeabi_dadd>
 80097c0:	0002      	movs	r2, r0
 80097c2:	000b      	movs	r3, r1
 80097c4:	0030      	movs	r0, r6
 80097c6:	0039      	movs	r1, r7
 80097c8:	f7f6 fe56 	bl	8000478 <__aeabi_dcmpgt>
 80097cc:	2800      	cmp	r0, #0
 80097ce:	d000      	beq.n	80097d2 <_dtoa_r+0x632>
 80097d0:	e07c      	b.n	80098cc <_dtoa_r+0x72c>
 80097d2:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 80097d4:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80097d6:	2000      	movs	r0, #0
 80097d8:	493a      	ldr	r1, [pc, #232]	@ (80098c4 <_dtoa_r+0x724>)
 80097da:	f7f9 f9d3 	bl	8002b84 <__aeabi_dsub>
 80097de:	0002      	movs	r2, r0
 80097e0:	000b      	movs	r3, r1
 80097e2:	0030      	movs	r0, r6
 80097e4:	0039      	movs	r1, r7
 80097e6:	f7f6 fe33 	bl	8000450 <__aeabi_dcmplt>
 80097ea:	2800      	cmp	r0, #0
 80097ec:	d100      	bne.n	80097f0 <_dtoa_r+0x650>
 80097ee:	e710      	b.n	8009612 <_dtoa_r+0x472>
 80097f0:	0023      	movs	r3, r4
 80097f2:	3c01      	subs	r4, #1
 80097f4:	7822      	ldrb	r2, [r4, #0]
 80097f6:	2a30      	cmp	r2, #48	@ 0x30
 80097f8:	d0fa      	beq.n	80097f0 <_dtoa_r+0x650>
 80097fa:	001c      	movs	r4, r3
 80097fc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80097fe:	9304      	str	r3, [sp, #16]
 8009800:	e042      	b.n	8009888 <_dtoa_r+0x6e8>
 8009802:	2200      	movs	r2, #0
 8009804:	4b2b      	ldr	r3, [pc, #172]	@ (80098b4 <_dtoa_r+0x714>)
 8009806:	f7f8 fed7 	bl	80025b8 <__aeabi_dmul>
 800980a:	900a      	str	r0, [sp, #40]	@ 0x28
 800980c:	910b      	str	r1, [sp, #44]	@ 0x2c
 800980e:	e7b8      	b.n	8009782 <_dtoa_r+0x5e2>
 8009810:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009812:	9d08      	ldr	r5, [sp, #32]
 8009814:	3b01      	subs	r3, #1
 8009816:	195b      	adds	r3, r3, r5
 8009818:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800981a:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 800981c:	930a      	str	r3, [sp, #40]	@ 0x28
 800981e:	9a06      	ldr	r2, [sp, #24]
 8009820:	9b07      	ldr	r3, [sp, #28]
 8009822:	0030      	movs	r0, r6
 8009824:	0039      	movs	r1, r7
 8009826:	f7f8 fa8d 	bl	8001d44 <__aeabi_ddiv>
 800982a:	f7f9 fdd7 	bl	80033dc <__aeabi_d2iz>
 800982e:	9009      	str	r0, [sp, #36]	@ 0x24
 8009830:	f7f9 fe10 	bl	8003454 <__aeabi_i2d>
 8009834:	9a06      	ldr	r2, [sp, #24]
 8009836:	9b07      	ldr	r3, [sp, #28]
 8009838:	f7f8 febe 	bl	80025b8 <__aeabi_dmul>
 800983c:	0002      	movs	r2, r0
 800983e:	000b      	movs	r3, r1
 8009840:	0030      	movs	r0, r6
 8009842:	0039      	movs	r1, r7
 8009844:	f7f9 f99e 	bl	8002b84 <__aeabi_dsub>
 8009848:	002b      	movs	r3, r5
 800984a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800984c:	3501      	adds	r5, #1
 800984e:	3230      	adds	r2, #48	@ 0x30
 8009850:	701a      	strb	r2, [r3, #0]
 8009852:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009854:	002c      	movs	r4, r5
 8009856:	429a      	cmp	r2, r3
 8009858:	d14b      	bne.n	80098f2 <_dtoa_r+0x752>
 800985a:	0002      	movs	r2, r0
 800985c:	000b      	movs	r3, r1
 800985e:	f7f7 feab 	bl	80015b8 <__aeabi_dadd>
 8009862:	9a06      	ldr	r2, [sp, #24]
 8009864:	9b07      	ldr	r3, [sp, #28]
 8009866:	0006      	movs	r6, r0
 8009868:	000f      	movs	r7, r1
 800986a:	f7f6 fe05 	bl	8000478 <__aeabi_dcmpgt>
 800986e:	2800      	cmp	r0, #0
 8009870:	d12a      	bne.n	80098c8 <_dtoa_r+0x728>
 8009872:	9a06      	ldr	r2, [sp, #24]
 8009874:	9b07      	ldr	r3, [sp, #28]
 8009876:	0030      	movs	r0, r6
 8009878:	0039      	movs	r1, r7
 800987a:	f7f6 fde3 	bl	8000444 <__aeabi_dcmpeq>
 800987e:	2800      	cmp	r0, #0
 8009880:	d002      	beq.n	8009888 <_dtoa_r+0x6e8>
 8009882:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009884:	07dd      	lsls	r5, r3, #31
 8009886:	d41f      	bmi.n	80098c8 <_dtoa_r+0x728>
 8009888:	9905      	ldr	r1, [sp, #20]
 800988a:	9803      	ldr	r0, [sp, #12]
 800988c:	f001 f8f4 	bl	800aa78 <_Bfree>
 8009890:	2300      	movs	r3, #0
 8009892:	7023      	strb	r3, [r4, #0]
 8009894:	9b04      	ldr	r3, [sp, #16]
 8009896:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8009898:	3301      	adds	r3, #1
 800989a:	6013      	str	r3, [r2, #0]
 800989c:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 800989e:	2b00      	cmp	r3, #0
 80098a0:	d100      	bne.n	80098a4 <_dtoa_r+0x704>
 80098a2:	e4c7      	b.n	8009234 <_dtoa_r+0x94>
 80098a4:	601c      	str	r4, [r3, #0]
 80098a6:	e4c5      	b.n	8009234 <_dtoa_r+0x94>
 80098a8:	0800c330 	.word	0x0800c330
 80098ac:	0800c308 	.word	0x0800c308
 80098b0:	3ff00000 	.word	0x3ff00000
 80098b4:	40240000 	.word	0x40240000
 80098b8:	401c0000 	.word	0x401c0000
 80098bc:	fcc00000 	.word	0xfcc00000
 80098c0:	40140000 	.word	0x40140000
 80098c4:	3fe00000 	.word	0x3fe00000
 80098c8:	9b04      	ldr	r3, [sp, #16]
 80098ca:	930c      	str	r3, [sp, #48]	@ 0x30
 80098cc:	0023      	movs	r3, r4
 80098ce:	001c      	movs	r4, r3
 80098d0:	3b01      	subs	r3, #1
 80098d2:	781a      	ldrb	r2, [r3, #0]
 80098d4:	2a39      	cmp	r2, #57	@ 0x39
 80098d6:	d108      	bne.n	80098ea <_dtoa_r+0x74a>
 80098d8:	9a08      	ldr	r2, [sp, #32]
 80098da:	429a      	cmp	r2, r3
 80098dc:	d1f7      	bne.n	80098ce <_dtoa_r+0x72e>
 80098de:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80098e0:	9908      	ldr	r1, [sp, #32]
 80098e2:	3201      	adds	r2, #1
 80098e4:	920c      	str	r2, [sp, #48]	@ 0x30
 80098e6:	2230      	movs	r2, #48	@ 0x30
 80098e8:	700a      	strb	r2, [r1, #0]
 80098ea:	781a      	ldrb	r2, [r3, #0]
 80098ec:	3201      	adds	r2, #1
 80098ee:	701a      	strb	r2, [r3, #0]
 80098f0:	e784      	b.n	80097fc <_dtoa_r+0x65c>
 80098f2:	2200      	movs	r2, #0
 80098f4:	4bc6      	ldr	r3, [pc, #792]	@ (8009c10 <_dtoa_r+0xa70>)
 80098f6:	f7f8 fe5f 	bl	80025b8 <__aeabi_dmul>
 80098fa:	2200      	movs	r2, #0
 80098fc:	2300      	movs	r3, #0
 80098fe:	0006      	movs	r6, r0
 8009900:	000f      	movs	r7, r1
 8009902:	f7f6 fd9f 	bl	8000444 <__aeabi_dcmpeq>
 8009906:	2800      	cmp	r0, #0
 8009908:	d089      	beq.n	800981e <_dtoa_r+0x67e>
 800990a:	e7bd      	b.n	8009888 <_dtoa_r+0x6e8>
 800990c:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 800990e:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 8009910:	9c06      	ldr	r4, [sp, #24]
 8009912:	2f00      	cmp	r7, #0
 8009914:	d014      	beq.n	8009940 <_dtoa_r+0x7a0>
 8009916:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8009918:	2a01      	cmp	r2, #1
 800991a:	dd00      	ble.n	800991e <_dtoa_r+0x77e>
 800991c:	e0e4      	b.n	8009ae8 <_dtoa_r+0x948>
 800991e:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8009920:	2a00      	cmp	r2, #0
 8009922:	d100      	bne.n	8009926 <_dtoa_r+0x786>
 8009924:	e0da      	b.n	8009adc <_dtoa_r+0x93c>
 8009926:	4abb      	ldr	r2, [pc, #748]	@ (8009c14 <_dtoa_r+0xa74>)
 8009928:	189b      	adds	r3, r3, r2
 800992a:	9a06      	ldr	r2, [sp, #24]
 800992c:	2101      	movs	r1, #1
 800992e:	18d2      	adds	r2, r2, r3
 8009930:	9206      	str	r2, [sp, #24]
 8009932:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8009934:	9803      	ldr	r0, [sp, #12]
 8009936:	18d3      	adds	r3, r2, r3
 8009938:	930d      	str	r3, [sp, #52]	@ 0x34
 800993a:	f001 f9a1 	bl	800ac80 <__i2b>
 800993e:	0007      	movs	r7, r0
 8009940:	2c00      	cmp	r4, #0
 8009942:	d00e      	beq.n	8009962 <_dtoa_r+0x7c2>
 8009944:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009946:	2b00      	cmp	r3, #0
 8009948:	dd0b      	ble.n	8009962 <_dtoa_r+0x7c2>
 800994a:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800994c:	0023      	movs	r3, r4
 800994e:	4294      	cmp	r4, r2
 8009950:	dd00      	ble.n	8009954 <_dtoa_r+0x7b4>
 8009952:	0013      	movs	r3, r2
 8009954:	9a06      	ldr	r2, [sp, #24]
 8009956:	1ae4      	subs	r4, r4, r3
 8009958:	1ad2      	subs	r2, r2, r3
 800995a:	9206      	str	r2, [sp, #24]
 800995c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800995e:	1ad3      	subs	r3, r2, r3
 8009960:	930d      	str	r3, [sp, #52]	@ 0x34
 8009962:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009964:	2b00      	cmp	r3, #0
 8009966:	d021      	beq.n	80099ac <_dtoa_r+0x80c>
 8009968:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800996a:	2b00      	cmp	r3, #0
 800996c:	d100      	bne.n	8009970 <_dtoa_r+0x7d0>
 800996e:	e0d3      	b.n	8009b18 <_dtoa_r+0x978>
 8009970:	9e05      	ldr	r6, [sp, #20]
 8009972:	2d00      	cmp	r5, #0
 8009974:	d014      	beq.n	80099a0 <_dtoa_r+0x800>
 8009976:	0039      	movs	r1, r7
 8009978:	002a      	movs	r2, r5
 800997a:	9803      	ldr	r0, [sp, #12]
 800997c:	f001 fa42 	bl	800ae04 <__pow5mult>
 8009980:	9a05      	ldr	r2, [sp, #20]
 8009982:	0001      	movs	r1, r0
 8009984:	0007      	movs	r7, r0
 8009986:	9803      	ldr	r0, [sp, #12]
 8009988:	f001 f992 	bl	800acb0 <__multiply>
 800998c:	0006      	movs	r6, r0
 800998e:	9905      	ldr	r1, [sp, #20]
 8009990:	9803      	ldr	r0, [sp, #12]
 8009992:	f001 f871 	bl	800aa78 <_Bfree>
 8009996:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009998:	9605      	str	r6, [sp, #20]
 800999a:	1b5b      	subs	r3, r3, r5
 800999c:	930f      	str	r3, [sp, #60]	@ 0x3c
 800999e:	d005      	beq.n	80099ac <_dtoa_r+0x80c>
 80099a0:	0031      	movs	r1, r6
 80099a2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80099a4:	9803      	ldr	r0, [sp, #12]
 80099a6:	f001 fa2d 	bl	800ae04 <__pow5mult>
 80099aa:	9005      	str	r0, [sp, #20]
 80099ac:	2101      	movs	r1, #1
 80099ae:	9803      	ldr	r0, [sp, #12]
 80099b0:	f001 f966 	bl	800ac80 <__i2b>
 80099b4:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80099b6:	0006      	movs	r6, r0
 80099b8:	2b00      	cmp	r3, #0
 80099ba:	d100      	bne.n	80099be <_dtoa_r+0x81e>
 80099bc:	e1bc      	b.n	8009d38 <_dtoa_r+0xb98>
 80099be:	001a      	movs	r2, r3
 80099c0:	0001      	movs	r1, r0
 80099c2:	9803      	ldr	r0, [sp, #12]
 80099c4:	f001 fa1e 	bl	800ae04 <__pow5mult>
 80099c8:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80099ca:	0006      	movs	r6, r0
 80099cc:	2500      	movs	r5, #0
 80099ce:	2b01      	cmp	r3, #1
 80099d0:	dc16      	bgt.n	8009a00 <_dtoa_r+0x860>
 80099d2:	2500      	movs	r5, #0
 80099d4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80099d6:	42ab      	cmp	r3, r5
 80099d8:	d10e      	bne.n	80099f8 <_dtoa_r+0x858>
 80099da:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80099dc:	031b      	lsls	r3, r3, #12
 80099de:	42ab      	cmp	r3, r5
 80099e0:	d10a      	bne.n	80099f8 <_dtoa_r+0x858>
 80099e2:	4b8d      	ldr	r3, [pc, #564]	@ (8009c18 <_dtoa_r+0xa78>)
 80099e4:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80099e6:	4213      	tst	r3, r2
 80099e8:	d006      	beq.n	80099f8 <_dtoa_r+0x858>
 80099ea:	9b06      	ldr	r3, [sp, #24]
 80099ec:	3501      	adds	r5, #1
 80099ee:	3301      	adds	r3, #1
 80099f0:	9306      	str	r3, [sp, #24]
 80099f2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80099f4:	3301      	adds	r3, #1
 80099f6:	930d      	str	r3, [sp, #52]	@ 0x34
 80099f8:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80099fa:	2001      	movs	r0, #1
 80099fc:	2b00      	cmp	r3, #0
 80099fe:	d008      	beq.n	8009a12 <_dtoa_r+0x872>
 8009a00:	6933      	ldr	r3, [r6, #16]
 8009a02:	3303      	adds	r3, #3
 8009a04:	009b      	lsls	r3, r3, #2
 8009a06:	18f3      	adds	r3, r6, r3
 8009a08:	6858      	ldr	r0, [r3, #4]
 8009a0a:	f001 f8e9 	bl	800abe0 <__hi0bits>
 8009a0e:	2320      	movs	r3, #32
 8009a10:	1a18      	subs	r0, r3, r0
 8009a12:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009a14:	1818      	adds	r0, r3, r0
 8009a16:	0002      	movs	r2, r0
 8009a18:	231f      	movs	r3, #31
 8009a1a:	401a      	ands	r2, r3
 8009a1c:	4218      	tst	r0, r3
 8009a1e:	d100      	bne.n	8009a22 <_dtoa_r+0x882>
 8009a20:	e081      	b.n	8009b26 <_dtoa_r+0x986>
 8009a22:	3301      	adds	r3, #1
 8009a24:	1a9b      	subs	r3, r3, r2
 8009a26:	2b04      	cmp	r3, #4
 8009a28:	dd79      	ble.n	8009b1e <_dtoa_r+0x97e>
 8009a2a:	231c      	movs	r3, #28
 8009a2c:	1a9b      	subs	r3, r3, r2
 8009a2e:	9a06      	ldr	r2, [sp, #24]
 8009a30:	18e4      	adds	r4, r4, r3
 8009a32:	18d2      	adds	r2, r2, r3
 8009a34:	9206      	str	r2, [sp, #24]
 8009a36:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8009a38:	18d3      	adds	r3, r2, r3
 8009a3a:	930d      	str	r3, [sp, #52]	@ 0x34
 8009a3c:	9b06      	ldr	r3, [sp, #24]
 8009a3e:	2b00      	cmp	r3, #0
 8009a40:	dd05      	ble.n	8009a4e <_dtoa_r+0x8ae>
 8009a42:	001a      	movs	r2, r3
 8009a44:	9905      	ldr	r1, [sp, #20]
 8009a46:	9803      	ldr	r0, [sp, #12]
 8009a48:	f001 fa38 	bl	800aebc <__lshift>
 8009a4c:	9005      	str	r0, [sp, #20]
 8009a4e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009a50:	2b00      	cmp	r3, #0
 8009a52:	dd05      	ble.n	8009a60 <_dtoa_r+0x8c0>
 8009a54:	0031      	movs	r1, r6
 8009a56:	001a      	movs	r2, r3
 8009a58:	9803      	ldr	r0, [sp, #12]
 8009a5a:	f001 fa2f 	bl	800aebc <__lshift>
 8009a5e:	0006      	movs	r6, r0
 8009a60:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8009a62:	2b00      	cmp	r3, #0
 8009a64:	d061      	beq.n	8009b2a <_dtoa_r+0x98a>
 8009a66:	0031      	movs	r1, r6
 8009a68:	9805      	ldr	r0, [sp, #20]
 8009a6a:	f001 fa93 	bl	800af94 <__mcmp>
 8009a6e:	2800      	cmp	r0, #0
 8009a70:	da5b      	bge.n	8009b2a <_dtoa_r+0x98a>
 8009a72:	9b04      	ldr	r3, [sp, #16]
 8009a74:	220a      	movs	r2, #10
 8009a76:	3b01      	subs	r3, #1
 8009a78:	930c      	str	r3, [sp, #48]	@ 0x30
 8009a7a:	9905      	ldr	r1, [sp, #20]
 8009a7c:	2300      	movs	r3, #0
 8009a7e:	9803      	ldr	r0, [sp, #12]
 8009a80:	f001 f81e 	bl	800aac0 <__multadd>
 8009a84:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8009a86:	9005      	str	r0, [sp, #20]
 8009a88:	2b00      	cmp	r3, #0
 8009a8a:	d100      	bne.n	8009a8e <_dtoa_r+0x8ee>
 8009a8c:	e15b      	b.n	8009d46 <_dtoa_r+0xba6>
 8009a8e:	2300      	movs	r3, #0
 8009a90:	0039      	movs	r1, r7
 8009a92:	220a      	movs	r2, #10
 8009a94:	9803      	ldr	r0, [sp, #12]
 8009a96:	f001 f813 	bl	800aac0 <__multadd>
 8009a9a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009a9c:	0007      	movs	r7, r0
 8009a9e:	2b00      	cmp	r3, #0
 8009aa0:	dc4d      	bgt.n	8009b3e <_dtoa_r+0x99e>
 8009aa2:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8009aa4:	2b02      	cmp	r3, #2
 8009aa6:	dd46      	ble.n	8009b36 <_dtoa_r+0x996>
 8009aa8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009aaa:	2b00      	cmp	r3, #0
 8009aac:	d000      	beq.n	8009ab0 <_dtoa_r+0x910>
 8009aae:	e5db      	b.n	8009668 <_dtoa_r+0x4c8>
 8009ab0:	0031      	movs	r1, r6
 8009ab2:	2205      	movs	r2, #5
 8009ab4:	9803      	ldr	r0, [sp, #12]
 8009ab6:	f001 f803 	bl	800aac0 <__multadd>
 8009aba:	0006      	movs	r6, r0
 8009abc:	0001      	movs	r1, r0
 8009abe:	9805      	ldr	r0, [sp, #20]
 8009ac0:	f001 fa68 	bl	800af94 <__mcmp>
 8009ac4:	2800      	cmp	r0, #0
 8009ac6:	dc00      	bgt.n	8009aca <_dtoa_r+0x92a>
 8009ac8:	e5ce      	b.n	8009668 <_dtoa_r+0x4c8>
 8009aca:	9b08      	ldr	r3, [sp, #32]
 8009acc:	9a08      	ldr	r2, [sp, #32]
 8009ace:	1c5c      	adds	r4, r3, #1
 8009ad0:	2331      	movs	r3, #49	@ 0x31
 8009ad2:	7013      	strb	r3, [r2, #0]
 8009ad4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009ad6:	3301      	adds	r3, #1
 8009ad8:	930c      	str	r3, [sp, #48]	@ 0x30
 8009ada:	e5c9      	b.n	8009670 <_dtoa_r+0x4d0>
 8009adc:	2336      	movs	r3, #54	@ 0x36
 8009ade:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8009ae0:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 8009ae2:	1a9b      	subs	r3, r3, r2
 8009ae4:	9c06      	ldr	r4, [sp, #24]
 8009ae6:	e720      	b.n	800992a <_dtoa_r+0x78a>
 8009ae8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009aea:	1e5d      	subs	r5, r3, #1
 8009aec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009aee:	42ab      	cmp	r3, r5
 8009af0:	db08      	blt.n	8009b04 <_dtoa_r+0x964>
 8009af2:	1b5d      	subs	r5, r3, r5
 8009af4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009af6:	2b00      	cmp	r3, #0
 8009af8:	daf4      	bge.n	8009ae4 <_dtoa_r+0x944>
 8009afa:	9b06      	ldr	r3, [sp, #24]
 8009afc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009afe:	1a9c      	subs	r4, r3, r2
 8009b00:	2300      	movs	r3, #0
 8009b02:	e712      	b.n	800992a <_dtoa_r+0x78a>
 8009b04:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009b06:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8009b08:	1aeb      	subs	r3, r5, r3
 8009b0a:	18d3      	adds	r3, r2, r3
 8009b0c:	9314      	str	r3, [sp, #80]	@ 0x50
 8009b0e:	950f      	str	r5, [sp, #60]	@ 0x3c
 8009b10:	9c06      	ldr	r4, [sp, #24]
 8009b12:	2500      	movs	r5, #0
 8009b14:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009b16:	e708      	b.n	800992a <_dtoa_r+0x78a>
 8009b18:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8009b1a:	9905      	ldr	r1, [sp, #20]
 8009b1c:	e742      	b.n	80099a4 <_dtoa_r+0x804>
 8009b1e:	2b04      	cmp	r3, #4
 8009b20:	d08c      	beq.n	8009a3c <_dtoa_r+0x89c>
 8009b22:	331c      	adds	r3, #28
 8009b24:	e783      	b.n	8009a2e <_dtoa_r+0x88e>
 8009b26:	0013      	movs	r3, r2
 8009b28:	e7fb      	b.n	8009b22 <_dtoa_r+0x982>
 8009b2a:	9b04      	ldr	r3, [sp, #16]
 8009b2c:	930c      	str	r3, [sp, #48]	@ 0x30
 8009b2e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009b30:	930e      	str	r3, [sp, #56]	@ 0x38
 8009b32:	2b00      	cmp	r3, #0
 8009b34:	ddb5      	ble.n	8009aa2 <_dtoa_r+0x902>
 8009b36:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8009b38:	2b00      	cmp	r3, #0
 8009b3a:	d100      	bne.n	8009b3e <_dtoa_r+0x99e>
 8009b3c:	e107      	b.n	8009d4e <_dtoa_r+0xbae>
 8009b3e:	2c00      	cmp	r4, #0
 8009b40:	dd05      	ble.n	8009b4e <_dtoa_r+0x9ae>
 8009b42:	0039      	movs	r1, r7
 8009b44:	0022      	movs	r2, r4
 8009b46:	9803      	ldr	r0, [sp, #12]
 8009b48:	f001 f9b8 	bl	800aebc <__lshift>
 8009b4c:	0007      	movs	r7, r0
 8009b4e:	9704      	str	r7, [sp, #16]
 8009b50:	2d00      	cmp	r5, #0
 8009b52:	d020      	beq.n	8009b96 <_dtoa_r+0x9f6>
 8009b54:	6879      	ldr	r1, [r7, #4]
 8009b56:	9803      	ldr	r0, [sp, #12]
 8009b58:	f000 ff4a 	bl	800a9f0 <_Balloc>
 8009b5c:	1e04      	subs	r4, r0, #0
 8009b5e:	d10c      	bne.n	8009b7a <_dtoa_r+0x9da>
 8009b60:	0022      	movs	r2, r4
 8009b62:	4b2e      	ldr	r3, [pc, #184]	@ (8009c1c <_dtoa_r+0xa7c>)
 8009b64:	482e      	ldr	r0, [pc, #184]	@ (8009c20 <_dtoa_r+0xa80>)
 8009b66:	492f      	ldr	r1, [pc, #188]	@ (8009c24 <_dtoa_r+0xa84>)
 8009b68:	f7ff fb2f 	bl	80091ca <_dtoa_r+0x2a>
 8009b6c:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 8009b6e:	0037      	movs	r7, r6
 8009b70:	e7ab      	b.n	8009aca <_dtoa_r+0x92a>
 8009b72:	9b04      	ldr	r3, [sp, #16]
 8009b74:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 8009b76:	930c      	str	r3, [sp, #48]	@ 0x30
 8009b78:	e7f9      	b.n	8009b6e <_dtoa_r+0x9ce>
 8009b7a:	0039      	movs	r1, r7
 8009b7c:	693a      	ldr	r2, [r7, #16]
 8009b7e:	310c      	adds	r1, #12
 8009b80:	3202      	adds	r2, #2
 8009b82:	0092      	lsls	r2, r2, #2
 8009b84:	300c      	adds	r0, #12
 8009b86:	f7ff fa72 	bl	800906e <memcpy>
 8009b8a:	2201      	movs	r2, #1
 8009b8c:	0021      	movs	r1, r4
 8009b8e:	9803      	ldr	r0, [sp, #12]
 8009b90:	f001 f994 	bl	800aebc <__lshift>
 8009b94:	9004      	str	r0, [sp, #16]
 8009b96:	9b08      	ldr	r3, [sp, #32]
 8009b98:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009b9a:	9306      	str	r3, [sp, #24]
 8009b9c:	3b01      	subs	r3, #1
 8009b9e:	189b      	adds	r3, r3, r2
 8009ba0:	2201      	movs	r2, #1
 8009ba2:	930f      	str	r3, [sp, #60]	@ 0x3c
 8009ba4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009ba6:	4013      	ands	r3, r2
 8009ba8:	930e      	str	r3, [sp, #56]	@ 0x38
 8009baa:	0031      	movs	r1, r6
 8009bac:	9805      	ldr	r0, [sp, #20]
 8009bae:	f7ff fa71 	bl	8009094 <quorem>
 8009bb2:	0039      	movs	r1, r7
 8009bb4:	0005      	movs	r5, r0
 8009bb6:	900a      	str	r0, [sp, #40]	@ 0x28
 8009bb8:	9805      	ldr	r0, [sp, #20]
 8009bba:	f001 f9eb 	bl	800af94 <__mcmp>
 8009bbe:	9a04      	ldr	r2, [sp, #16]
 8009bc0:	900d      	str	r0, [sp, #52]	@ 0x34
 8009bc2:	0031      	movs	r1, r6
 8009bc4:	9803      	ldr	r0, [sp, #12]
 8009bc6:	f001 fa01 	bl	800afcc <__mdiff>
 8009bca:	2201      	movs	r2, #1
 8009bcc:	68c3      	ldr	r3, [r0, #12]
 8009bce:	0004      	movs	r4, r0
 8009bd0:	3530      	adds	r5, #48	@ 0x30
 8009bd2:	9209      	str	r2, [sp, #36]	@ 0x24
 8009bd4:	2b00      	cmp	r3, #0
 8009bd6:	d104      	bne.n	8009be2 <_dtoa_r+0xa42>
 8009bd8:	0001      	movs	r1, r0
 8009bda:	9805      	ldr	r0, [sp, #20]
 8009bdc:	f001 f9da 	bl	800af94 <__mcmp>
 8009be0:	9009      	str	r0, [sp, #36]	@ 0x24
 8009be2:	0021      	movs	r1, r4
 8009be4:	9803      	ldr	r0, [sp, #12]
 8009be6:	f000 ff47 	bl	800aa78 <_Bfree>
 8009bea:	9b06      	ldr	r3, [sp, #24]
 8009bec:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8009bee:	1c5c      	adds	r4, r3, #1
 8009bf0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009bf2:	4313      	orrs	r3, r2
 8009bf4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009bf6:	4313      	orrs	r3, r2
 8009bf8:	d116      	bne.n	8009c28 <_dtoa_r+0xa88>
 8009bfa:	2d39      	cmp	r5, #57	@ 0x39
 8009bfc:	d02f      	beq.n	8009c5e <_dtoa_r+0xabe>
 8009bfe:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009c00:	2b00      	cmp	r3, #0
 8009c02:	dd01      	ble.n	8009c08 <_dtoa_r+0xa68>
 8009c04:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 8009c06:	3531      	adds	r5, #49	@ 0x31
 8009c08:	9b06      	ldr	r3, [sp, #24]
 8009c0a:	701d      	strb	r5, [r3, #0]
 8009c0c:	e532      	b.n	8009674 <_dtoa_r+0x4d4>
 8009c0e:	46c0      	nop			@ (mov r8, r8)
 8009c10:	40240000 	.word	0x40240000
 8009c14:	00000433 	.word	0x00000433
 8009c18:	7ff00000 	.word	0x7ff00000
 8009c1c:	0800c08b 	.word	0x0800c08b
 8009c20:	0800c033 	.word	0x0800c033
 8009c24:	000002ef 	.word	0x000002ef
 8009c28:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009c2a:	2b00      	cmp	r3, #0
 8009c2c:	db04      	blt.n	8009c38 <_dtoa_r+0xa98>
 8009c2e:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8009c30:	4313      	orrs	r3, r2
 8009c32:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009c34:	4313      	orrs	r3, r2
 8009c36:	d11e      	bne.n	8009c76 <_dtoa_r+0xad6>
 8009c38:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009c3a:	2b00      	cmp	r3, #0
 8009c3c:	dde4      	ble.n	8009c08 <_dtoa_r+0xa68>
 8009c3e:	9905      	ldr	r1, [sp, #20]
 8009c40:	2201      	movs	r2, #1
 8009c42:	9803      	ldr	r0, [sp, #12]
 8009c44:	f001 f93a 	bl	800aebc <__lshift>
 8009c48:	0031      	movs	r1, r6
 8009c4a:	9005      	str	r0, [sp, #20]
 8009c4c:	f001 f9a2 	bl	800af94 <__mcmp>
 8009c50:	2800      	cmp	r0, #0
 8009c52:	dc02      	bgt.n	8009c5a <_dtoa_r+0xaba>
 8009c54:	d1d8      	bne.n	8009c08 <_dtoa_r+0xa68>
 8009c56:	07eb      	lsls	r3, r5, #31
 8009c58:	d5d6      	bpl.n	8009c08 <_dtoa_r+0xa68>
 8009c5a:	2d39      	cmp	r5, #57	@ 0x39
 8009c5c:	d1d2      	bne.n	8009c04 <_dtoa_r+0xa64>
 8009c5e:	2339      	movs	r3, #57	@ 0x39
 8009c60:	9a06      	ldr	r2, [sp, #24]
 8009c62:	7013      	strb	r3, [r2, #0]
 8009c64:	0023      	movs	r3, r4
 8009c66:	001c      	movs	r4, r3
 8009c68:	3b01      	subs	r3, #1
 8009c6a:	781a      	ldrb	r2, [r3, #0]
 8009c6c:	2a39      	cmp	r2, #57	@ 0x39
 8009c6e:	d050      	beq.n	8009d12 <_dtoa_r+0xb72>
 8009c70:	3201      	adds	r2, #1
 8009c72:	701a      	strb	r2, [r3, #0]
 8009c74:	e4fe      	b.n	8009674 <_dtoa_r+0x4d4>
 8009c76:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009c78:	2b00      	cmp	r3, #0
 8009c7a:	dd03      	ble.n	8009c84 <_dtoa_r+0xae4>
 8009c7c:	2d39      	cmp	r5, #57	@ 0x39
 8009c7e:	d0ee      	beq.n	8009c5e <_dtoa_r+0xabe>
 8009c80:	3501      	adds	r5, #1
 8009c82:	e7c1      	b.n	8009c08 <_dtoa_r+0xa68>
 8009c84:	9b06      	ldr	r3, [sp, #24]
 8009c86:	9a06      	ldr	r2, [sp, #24]
 8009c88:	701d      	strb	r5, [r3, #0]
 8009c8a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009c8c:	4293      	cmp	r3, r2
 8009c8e:	d02b      	beq.n	8009ce8 <_dtoa_r+0xb48>
 8009c90:	2300      	movs	r3, #0
 8009c92:	220a      	movs	r2, #10
 8009c94:	9905      	ldr	r1, [sp, #20]
 8009c96:	9803      	ldr	r0, [sp, #12]
 8009c98:	f000 ff12 	bl	800aac0 <__multadd>
 8009c9c:	9b04      	ldr	r3, [sp, #16]
 8009c9e:	9005      	str	r0, [sp, #20]
 8009ca0:	429f      	cmp	r7, r3
 8009ca2:	d109      	bne.n	8009cb8 <_dtoa_r+0xb18>
 8009ca4:	0039      	movs	r1, r7
 8009ca6:	2300      	movs	r3, #0
 8009ca8:	220a      	movs	r2, #10
 8009caa:	9803      	ldr	r0, [sp, #12]
 8009cac:	f000 ff08 	bl	800aac0 <__multadd>
 8009cb0:	0007      	movs	r7, r0
 8009cb2:	9004      	str	r0, [sp, #16]
 8009cb4:	9406      	str	r4, [sp, #24]
 8009cb6:	e778      	b.n	8009baa <_dtoa_r+0xa0a>
 8009cb8:	0039      	movs	r1, r7
 8009cba:	2300      	movs	r3, #0
 8009cbc:	220a      	movs	r2, #10
 8009cbe:	9803      	ldr	r0, [sp, #12]
 8009cc0:	f000 fefe 	bl	800aac0 <__multadd>
 8009cc4:	2300      	movs	r3, #0
 8009cc6:	0007      	movs	r7, r0
 8009cc8:	220a      	movs	r2, #10
 8009cca:	9904      	ldr	r1, [sp, #16]
 8009ccc:	9803      	ldr	r0, [sp, #12]
 8009cce:	f000 fef7 	bl	800aac0 <__multadd>
 8009cd2:	9004      	str	r0, [sp, #16]
 8009cd4:	e7ee      	b.n	8009cb4 <_dtoa_r+0xb14>
 8009cd6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009cd8:	2401      	movs	r4, #1
 8009cda:	2b00      	cmp	r3, #0
 8009cdc:	dd00      	ble.n	8009ce0 <_dtoa_r+0xb40>
 8009cde:	001c      	movs	r4, r3
 8009ce0:	9704      	str	r7, [sp, #16]
 8009ce2:	2700      	movs	r7, #0
 8009ce4:	9b08      	ldr	r3, [sp, #32]
 8009ce6:	191c      	adds	r4, r3, r4
 8009ce8:	9905      	ldr	r1, [sp, #20]
 8009cea:	2201      	movs	r2, #1
 8009cec:	9803      	ldr	r0, [sp, #12]
 8009cee:	f001 f8e5 	bl	800aebc <__lshift>
 8009cf2:	0031      	movs	r1, r6
 8009cf4:	9005      	str	r0, [sp, #20]
 8009cf6:	f001 f94d 	bl	800af94 <__mcmp>
 8009cfa:	2800      	cmp	r0, #0
 8009cfc:	dcb2      	bgt.n	8009c64 <_dtoa_r+0xac4>
 8009cfe:	d101      	bne.n	8009d04 <_dtoa_r+0xb64>
 8009d00:	07ed      	lsls	r5, r5, #31
 8009d02:	d4af      	bmi.n	8009c64 <_dtoa_r+0xac4>
 8009d04:	0023      	movs	r3, r4
 8009d06:	001c      	movs	r4, r3
 8009d08:	3b01      	subs	r3, #1
 8009d0a:	781a      	ldrb	r2, [r3, #0]
 8009d0c:	2a30      	cmp	r2, #48	@ 0x30
 8009d0e:	d0fa      	beq.n	8009d06 <_dtoa_r+0xb66>
 8009d10:	e4b0      	b.n	8009674 <_dtoa_r+0x4d4>
 8009d12:	9a08      	ldr	r2, [sp, #32]
 8009d14:	429a      	cmp	r2, r3
 8009d16:	d1a6      	bne.n	8009c66 <_dtoa_r+0xac6>
 8009d18:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009d1a:	3301      	adds	r3, #1
 8009d1c:	930c      	str	r3, [sp, #48]	@ 0x30
 8009d1e:	2331      	movs	r3, #49	@ 0x31
 8009d20:	7013      	strb	r3, [r2, #0]
 8009d22:	e4a7      	b.n	8009674 <_dtoa_r+0x4d4>
 8009d24:	4b14      	ldr	r3, [pc, #80]	@ (8009d78 <_dtoa_r+0xbd8>)
 8009d26:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8009d28:	9308      	str	r3, [sp, #32]
 8009d2a:	4b14      	ldr	r3, [pc, #80]	@ (8009d7c <_dtoa_r+0xbdc>)
 8009d2c:	2a00      	cmp	r2, #0
 8009d2e:	d001      	beq.n	8009d34 <_dtoa_r+0xb94>
 8009d30:	f7ff fa7e 	bl	8009230 <_dtoa_r+0x90>
 8009d34:	f7ff fa7e 	bl	8009234 <_dtoa_r+0x94>
 8009d38:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8009d3a:	2b01      	cmp	r3, #1
 8009d3c:	dc00      	bgt.n	8009d40 <_dtoa_r+0xba0>
 8009d3e:	e648      	b.n	80099d2 <_dtoa_r+0x832>
 8009d40:	2001      	movs	r0, #1
 8009d42:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 8009d44:	e665      	b.n	8009a12 <_dtoa_r+0x872>
 8009d46:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009d48:	2b00      	cmp	r3, #0
 8009d4a:	dc00      	bgt.n	8009d4e <_dtoa_r+0xbae>
 8009d4c:	e6a9      	b.n	8009aa2 <_dtoa_r+0x902>
 8009d4e:	2400      	movs	r4, #0
 8009d50:	0031      	movs	r1, r6
 8009d52:	9805      	ldr	r0, [sp, #20]
 8009d54:	f7ff f99e 	bl	8009094 <quorem>
 8009d58:	9b08      	ldr	r3, [sp, #32]
 8009d5a:	3030      	adds	r0, #48	@ 0x30
 8009d5c:	5518      	strb	r0, [r3, r4]
 8009d5e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009d60:	3401      	adds	r4, #1
 8009d62:	0005      	movs	r5, r0
 8009d64:	42a3      	cmp	r3, r4
 8009d66:	ddb6      	ble.n	8009cd6 <_dtoa_r+0xb36>
 8009d68:	2300      	movs	r3, #0
 8009d6a:	220a      	movs	r2, #10
 8009d6c:	9905      	ldr	r1, [sp, #20]
 8009d6e:	9803      	ldr	r0, [sp, #12]
 8009d70:	f000 fea6 	bl	800aac0 <__multadd>
 8009d74:	9005      	str	r0, [sp, #20]
 8009d76:	e7eb      	b.n	8009d50 <_dtoa_r+0xbb0>
 8009d78:	0800c00f 	.word	0x0800c00f
 8009d7c:	0800c017 	.word	0x0800c017

08009d80 <rshift>:
 8009d80:	0002      	movs	r2, r0
 8009d82:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009d84:	6904      	ldr	r4, [r0, #16]
 8009d86:	b085      	sub	sp, #20
 8009d88:	3214      	adds	r2, #20
 8009d8a:	114b      	asrs	r3, r1, #5
 8009d8c:	0016      	movs	r6, r2
 8009d8e:	9302      	str	r3, [sp, #8]
 8009d90:	429c      	cmp	r4, r3
 8009d92:	dd31      	ble.n	8009df8 <rshift+0x78>
 8009d94:	261f      	movs	r6, #31
 8009d96:	000f      	movs	r7, r1
 8009d98:	009b      	lsls	r3, r3, #2
 8009d9a:	00a5      	lsls	r5, r4, #2
 8009d9c:	18d3      	adds	r3, r2, r3
 8009d9e:	4037      	ands	r7, r6
 8009da0:	1955      	adds	r5, r2, r5
 8009da2:	9300      	str	r3, [sp, #0]
 8009da4:	9701      	str	r7, [sp, #4]
 8009da6:	4231      	tst	r1, r6
 8009da8:	d10d      	bne.n	8009dc6 <rshift+0x46>
 8009daa:	0016      	movs	r6, r2
 8009dac:	0019      	movs	r1, r3
 8009dae:	428d      	cmp	r5, r1
 8009db0:	d836      	bhi.n	8009e20 <rshift+0xa0>
 8009db2:	9b00      	ldr	r3, [sp, #0]
 8009db4:	2600      	movs	r6, #0
 8009db6:	3b03      	subs	r3, #3
 8009db8:	429d      	cmp	r5, r3
 8009dba:	d302      	bcc.n	8009dc2 <rshift+0x42>
 8009dbc:	9b02      	ldr	r3, [sp, #8]
 8009dbe:	1ae4      	subs	r4, r4, r3
 8009dc0:	00a6      	lsls	r6, r4, #2
 8009dc2:	1996      	adds	r6, r2, r6
 8009dc4:	e018      	b.n	8009df8 <rshift+0x78>
 8009dc6:	2120      	movs	r1, #32
 8009dc8:	9e01      	ldr	r6, [sp, #4]
 8009dca:	9f01      	ldr	r7, [sp, #4]
 8009dcc:	1b89      	subs	r1, r1, r6
 8009dce:	9e00      	ldr	r6, [sp, #0]
 8009dd0:	9103      	str	r1, [sp, #12]
 8009dd2:	ce02      	ldmia	r6!, {r1}
 8009dd4:	4694      	mov	ip, r2
 8009dd6:	40f9      	lsrs	r1, r7
 8009dd8:	42b5      	cmp	r5, r6
 8009dda:	d816      	bhi.n	8009e0a <rshift+0x8a>
 8009ddc:	9b00      	ldr	r3, [sp, #0]
 8009dde:	2600      	movs	r6, #0
 8009de0:	3301      	adds	r3, #1
 8009de2:	429d      	cmp	r5, r3
 8009de4:	d303      	bcc.n	8009dee <rshift+0x6e>
 8009de6:	9b02      	ldr	r3, [sp, #8]
 8009de8:	1ae4      	subs	r4, r4, r3
 8009dea:	00a6      	lsls	r6, r4, #2
 8009dec:	3e04      	subs	r6, #4
 8009dee:	1996      	adds	r6, r2, r6
 8009df0:	6031      	str	r1, [r6, #0]
 8009df2:	2900      	cmp	r1, #0
 8009df4:	d000      	beq.n	8009df8 <rshift+0x78>
 8009df6:	3604      	adds	r6, #4
 8009df8:	1ab1      	subs	r1, r6, r2
 8009dfa:	1089      	asrs	r1, r1, #2
 8009dfc:	6101      	str	r1, [r0, #16]
 8009dfe:	4296      	cmp	r6, r2
 8009e00:	d101      	bne.n	8009e06 <rshift+0x86>
 8009e02:	2300      	movs	r3, #0
 8009e04:	6143      	str	r3, [r0, #20]
 8009e06:	b005      	add	sp, #20
 8009e08:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009e0a:	6837      	ldr	r7, [r6, #0]
 8009e0c:	9b03      	ldr	r3, [sp, #12]
 8009e0e:	409f      	lsls	r7, r3
 8009e10:	430f      	orrs	r7, r1
 8009e12:	4661      	mov	r1, ip
 8009e14:	c180      	stmia	r1!, {r7}
 8009e16:	468c      	mov	ip, r1
 8009e18:	9b01      	ldr	r3, [sp, #4]
 8009e1a:	ce02      	ldmia	r6!, {r1}
 8009e1c:	40d9      	lsrs	r1, r3
 8009e1e:	e7db      	b.n	8009dd8 <rshift+0x58>
 8009e20:	c980      	ldmia	r1!, {r7}
 8009e22:	c680      	stmia	r6!, {r7}
 8009e24:	e7c3      	b.n	8009dae <rshift+0x2e>

08009e26 <__hexdig_fun>:
 8009e26:	0002      	movs	r2, r0
 8009e28:	3a30      	subs	r2, #48	@ 0x30
 8009e2a:	0003      	movs	r3, r0
 8009e2c:	2a09      	cmp	r2, #9
 8009e2e:	d802      	bhi.n	8009e36 <__hexdig_fun+0x10>
 8009e30:	3b20      	subs	r3, #32
 8009e32:	b2d8      	uxtb	r0, r3
 8009e34:	4770      	bx	lr
 8009e36:	0002      	movs	r2, r0
 8009e38:	3a61      	subs	r2, #97	@ 0x61
 8009e3a:	2a05      	cmp	r2, #5
 8009e3c:	d801      	bhi.n	8009e42 <__hexdig_fun+0x1c>
 8009e3e:	3b47      	subs	r3, #71	@ 0x47
 8009e40:	e7f7      	b.n	8009e32 <__hexdig_fun+0xc>
 8009e42:	001a      	movs	r2, r3
 8009e44:	3a41      	subs	r2, #65	@ 0x41
 8009e46:	2000      	movs	r0, #0
 8009e48:	2a05      	cmp	r2, #5
 8009e4a:	d8f3      	bhi.n	8009e34 <__hexdig_fun+0xe>
 8009e4c:	3b27      	subs	r3, #39	@ 0x27
 8009e4e:	e7f0      	b.n	8009e32 <__hexdig_fun+0xc>

08009e50 <__gethex>:
 8009e50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009e52:	b089      	sub	sp, #36	@ 0x24
 8009e54:	9307      	str	r3, [sp, #28]
 8009e56:	680b      	ldr	r3, [r1, #0]
 8009e58:	9201      	str	r2, [sp, #4]
 8009e5a:	9003      	str	r0, [sp, #12]
 8009e5c:	9106      	str	r1, [sp, #24]
 8009e5e:	1c9a      	adds	r2, r3, #2
 8009e60:	0011      	movs	r1, r2
 8009e62:	3201      	adds	r2, #1
 8009e64:	1e50      	subs	r0, r2, #1
 8009e66:	7800      	ldrb	r0, [r0, #0]
 8009e68:	2830      	cmp	r0, #48	@ 0x30
 8009e6a:	d0f9      	beq.n	8009e60 <__gethex+0x10>
 8009e6c:	1acb      	subs	r3, r1, r3
 8009e6e:	3b02      	subs	r3, #2
 8009e70:	9305      	str	r3, [sp, #20]
 8009e72:	9100      	str	r1, [sp, #0]
 8009e74:	f7ff ffd7 	bl	8009e26 <__hexdig_fun>
 8009e78:	2300      	movs	r3, #0
 8009e7a:	001d      	movs	r5, r3
 8009e7c:	9302      	str	r3, [sp, #8]
 8009e7e:	4298      	cmp	r0, r3
 8009e80:	d11e      	bne.n	8009ec0 <__gethex+0x70>
 8009e82:	2201      	movs	r2, #1
 8009e84:	49a6      	ldr	r1, [pc, #664]	@ (800a120 <__gethex+0x2d0>)
 8009e86:	9800      	ldr	r0, [sp, #0]
 8009e88:	f7ff f8a2 	bl	8008fd0 <strncmp>
 8009e8c:	0007      	movs	r7, r0
 8009e8e:	42a8      	cmp	r0, r5
 8009e90:	d000      	beq.n	8009e94 <__gethex+0x44>
 8009e92:	e06a      	b.n	8009f6a <__gethex+0x11a>
 8009e94:	9b00      	ldr	r3, [sp, #0]
 8009e96:	7858      	ldrb	r0, [r3, #1]
 8009e98:	1c5c      	adds	r4, r3, #1
 8009e9a:	f7ff ffc4 	bl	8009e26 <__hexdig_fun>
 8009e9e:	2301      	movs	r3, #1
 8009ea0:	9302      	str	r3, [sp, #8]
 8009ea2:	42a8      	cmp	r0, r5
 8009ea4:	d02f      	beq.n	8009f06 <__gethex+0xb6>
 8009ea6:	9400      	str	r4, [sp, #0]
 8009ea8:	9b00      	ldr	r3, [sp, #0]
 8009eaa:	7818      	ldrb	r0, [r3, #0]
 8009eac:	2830      	cmp	r0, #48	@ 0x30
 8009eae:	d009      	beq.n	8009ec4 <__gethex+0x74>
 8009eb0:	f7ff ffb9 	bl	8009e26 <__hexdig_fun>
 8009eb4:	4242      	negs	r2, r0
 8009eb6:	4142      	adcs	r2, r0
 8009eb8:	2301      	movs	r3, #1
 8009eba:	0025      	movs	r5, r4
 8009ebc:	9202      	str	r2, [sp, #8]
 8009ebe:	9305      	str	r3, [sp, #20]
 8009ec0:	9c00      	ldr	r4, [sp, #0]
 8009ec2:	e004      	b.n	8009ece <__gethex+0x7e>
 8009ec4:	9b00      	ldr	r3, [sp, #0]
 8009ec6:	3301      	adds	r3, #1
 8009ec8:	9300      	str	r3, [sp, #0]
 8009eca:	e7ed      	b.n	8009ea8 <__gethex+0x58>
 8009ecc:	3401      	adds	r4, #1
 8009ece:	7820      	ldrb	r0, [r4, #0]
 8009ed0:	f7ff ffa9 	bl	8009e26 <__hexdig_fun>
 8009ed4:	1e07      	subs	r7, r0, #0
 8009ed6:	d1f9      	bne.n	8009ecc <__gethex+0x7c>
 8009ed8:	2201      	movs	r2, #1
 8009eda:	0020      	movs	r0, r4
 8009edc:	4990      	ldr	r1, [pc, #576]	@ (800a120 <__gethex+0x2d0>)
 8009ede:	f7ff f877 	bl	8008fd0 <strncmp>
 8009ee2:	2800      	cmp	r0, #0
 8009ee4:	d10d      	bne.n	8009f02 <__gethex+0xb2>
 8009ee6:	2d00      	cmp	r5, #0
 8009ee8:	d106      	bne.n	8009ef8 <__gethex+0xa8>
 8009eea:	3401      	adds	r4, #1
 8009eec:	0025      	movs	r5, r4
 8009eee:	7820      	ldrb	r0, [r4, #0]
 8009ef0:	f7ff ff99 	bl	8009e26 <__hexdig_fun>
 8009ef4:	2800      	cmp	r0, #0
 8009ef6:	d102      	bne.n	8009efe <__gethex+0xae>
 8009ef8:	1b2d      	subs	r5, r5, r4
 8009efa:	00af      	lsls	r7, r5, #2
 8009efc:	e003      	b.n	8009f06 <__gethex+0xb6>
 8009efe:	3401      	adds	r4, #1
 8009f00:	e7f5      	b.n	8009eee <__gethex+0x9e>
 8009f02:	2d00      	cmp	r5, #0
 8009f04:	d1f8      	bne.n	8009ef8 <__gethex+0xa8>
 8009f06:	2220      	movs	r2, #32
 8009f08:	7823      	ldrb	r3, [r4, #0]
 8009f0a:	0026      	movs	r6, r4
 8009f0c:	4393      	bics	r3, r2
 8009f0e:	2b50      	cmp	r3, #80	@ 0x50
 8009f10:	d11d      	bne.n	8009f4e <__gethex+0xfe>
 8009f12:	7863      	ldrb	r3, [r4, #1]
 8009f14:	2b2b      	cmp	r3, #43	@ 0x2b
 8009f16:	d02d      	beq.n	8009f74 <__gethex+0x124>
 8009f18:	2b2d      	cmp	r3, #45	@ 0x2d
 8009f1a:	d02f      	beq.n	8009f7c <__gethex+0x12c>
 8009f1c:	2300      	movs	r3, #0
 8009f1e:	1c66      	adds	r6, r4, #1
 8009f20:	9304      	str	r3, [sp, #16]
 8009f22:	7830      	ldrb	r0, [r6, #0]
 8009f24:	f7ff ff7f 	bl	8009e26 <__hexdig_fun>
 8009f28:	1e43      	subs	r3, r0, #1
 8009f2a:	b2db      	uxtb	r3, r3
 8009f2c:	0005      	movs	r5, r0
 8009f2e:	2b18      	cmp	r3, #24
 8009f30:	d82a      	bhi.n	8009f88 <__gethex+0x138>
 8009f32:	7870      	ldrb	r0, [r6, #1]
 8009f34:	f7ff ff77 	bl	8009e26 <__hexdig_fun>
 8009f38:	1e43      	subs	r3, r0, #1
 8009f3a:	b2db      	uxtb	r3, r3
 8009f3c:	3601      	adds	r6, #1
 8009f3e:	3d10      	subs	r5, #16
 8009f40:	2b18      	cmp	r3, #24
 8009f42:	d91d      	bls.n	8009f80 <__gethex+0x130>
 8009f44:	9b04      	ldr	r3, [sp, #16]
 8009f46:	2b00      	cmp	r3, #0
 8009f48:	d000      	beq.n	8009f4c <__gethex+0xfc>
 8009f4a:	426d      	negs	r5, r5
 8009f4c:	197f      	adds	r7, r7, r5
 8009f4e:	9b06      	ldr	r3, [sp, #24]
 8009f50:	601e      	str	r6, [r3, #0]
 8009f52:	9b02      	ldr	r3, [sp, #8]
 8009f54:	2b00      	cmp	r3, #0
 8009f56:	d019      	beq.n	8009f8c <__gethex+0x13c>
 8009f58:	9b05      	ldr	r3, [sp, #20]
 8009f5a:	2606      	movs	r6, #6
 8009f5c:	425a      	negs	r2, r3
 8009f5e:	4153      	adcs	r3, r2
 8009f60:	425b      	negs	r3, r3
 8009f62:	401e      	ands	r6, r3
 8009f64:	0030      	movs	r0, r6
 8009f66:	b009      	add	sp, #36	@ 0x24
 8009f68:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009f6a:	2301      	movs	r3, #1
 8009f6c:	2700      	movs	r7, #0
 8009f6e:	9c00      	ldr	r4, [sp, #0]
 8009f70:	9302      	str	r3, [sp, #8]
 8009f72:	e7c8      	b.n	8009f06 <__gethex+0xb6>
 8009f74:	2300      	movs	r3, #0
 8009f76:	9304      	str	r3, [sp, #16]
 8009f78:	1ca6      	adds	r6, r4, #2
 8009f7a:	e7d2      	b.n	8009f22 <__gethex+0xd2>
 8009f7c:	2301      	movs	r3, #1
 8009f7e:	e7fa      	b.n	8009f76 <__gethex+0x126>
 8009f80:	230a      	movs	r3, #10
 8009f82:	435d      	muls	r5, r3
 8009f84:	182d      	adds	r5, r5, r0
 8009f86:	e7d4      	b.n	8009f32 <__gethex+0xe2>
 8009f88:	0026      	movs	r6, r4
 8009f8a:	e7e0      	b.n	8009f4e <__gethex+0xfe>
 8009f8c:	9b00      	ldr	r3, [sp, #0]
 8009f8e:	9902      	ldr	r1, [sp, #8]
 8009f90:	1ae3      	subs	r3, r4, r3
 8009f92:	3b01      	subs	r3, #1
 8009f94:	2b07      	cmp	r3, #7
 8009f96:	dc0a      	bgt.n	8009fae <__gethex+0x15e>
 8009f98:	9803      	ldr	r0, [sp, #12]
 8009f9a:	f000 fd29 	bl	800a9f0 <_Balloc>
 8009f9e:	1e05      	subs	r5, r0, #0
 8009fa0:	d108      	bne.n	8009fb4 <__gethex+0x164>
 8009fa2:	002a      	movs	r2, r5
 8009fa4:	21e4      	movs	r1, #228	@ 0xe4
 8009fa6:	4b5f      	ldr	r3, [pc, #380]	@ (800a124 <__gethex+0x2d4>)
 8009fa8:	485f      	ldr	r0, [pc, #380]	@ (800a128 <__gethex+0x2d8>)
 8009faa:	f001 fadf 	bl	800b56c <__assert_func>
 8009fae:	3101      	adds	r1, #1
 8009fb0:	105b      	asrs	r3, r3, #1
 8009fb2:	e7ef      	b.n	8009f94 <__gethex+0x144>
 8009fb4:	0003      	movs	r3, r0
 8009fb6:	3314      	adds	r3, #20
 8009fb8:	9302      	str	r3, [sp, #8]
 8009fba:	9305      	str	r3, [sp, #20]
 8009fbc:	2300      	movs	r3, #0
 8009fbe:	001e      	movs	r6, r3
 8009fc0:	9304      	str	r3, [sp, #16]
 8009fc2:	9b00      	ldr	r3, [sp, #0]
 8009fc4:	42a3      	cmp	r3, r4
 8009fc6:	d338      	bcc.n	800a03a <__gethex+0x1ea>
 8009fc8:	9c05      	ldr	r4, [sp, #20]
 8009fca:	9b02      	ldr	r3, [sp, #8]
 8009fcc:	c440      	stmia	r4!, {r6}
 8009fce:	1ae4      	subs	r4, r4, r3
 8009fd0:	10a4      	asrs	r4, r4, #2
 8009fd2:	0030      	movs	r0, r6
 8009fd4:	612c      	str	r4, [r5, #16]
 8009fd6:	f000 fe03 	bl	800abe0 <__hi0bits>
 8009fda:	9b01      	ldr	r3, [sp, #4]
 8009fdc:	0164      	lsls	r4, r4, #5
 8009fde:	681b      	ldr	r3, [r3, #0]
 8009fe0:	1a26      	subs	r6, r4, r0
 8009fe2:	9300      	str	r3, [sp, #0]
 8009fe4:	429e      	cmp	r6, r3
 8009fe6:	dd52      	ble.n	800a08e <__gethex+0x23e>
 8009fe8:	1af6      	subs	r6, r6, r3
 8009fea:	0031      	movs	r1, r6
 8009fec:	0028      	movs	r0, r5
 8009fee:	f001 f99e 	bl	800b32e <__any_on>
 8009ff2:	1e04      	subs	r4, r0, #0
 8009ff4:	d00f      	beq.n	800a016 <__gethex+0x1c6>
 8009ff6:	2401      	movs	r4, #1
 8009ff8:	211f      	movs	r1, #31
 8009ffa:	0020      	movs	r0, r4
 8009ffc:	1e73      	subs	r3, r6, #1
 8009ffe:	4019      	ands	r1, r3
 800a000:	4088      	lsls	r0, r1
 800a002:	0001      	movs	r1, r0
 800a004:	115a      	asrs	r2, r3, #5
 800a006:	9802      	ldr	r0, [sp, #8]
 800a008:	0092      	lsls	r2, r2, #2
 800a00a:	5812      	ldr	r2, [r2, r0]
 800a00c:	420a      	tst	r2, r1
 800a00e:	d002      	beq.n	800a016 <__gethex+0x1c6>
 800a010:	42a3      	cmp	r3, r4
 800a012:	dc34      	bgt.n	800a07e <__gethex+0x22e>
 800a014:	2402      	movs	r4, #2
 800a016:	0031      	movs	r1, r6
 800a018:	0028      	movs	r0, r5
 800a01a:	f7ff feb1 	bl	8009d80 <rshift>
 800a01e:	19bf      	adds	r7, r7, r6
 800a020:	9b01      	ldr	r3, [sp, #4]
 800a022:	689b      	ldr	r3, [r3, #8]
 800a024:	42bb      	cmp	r3, r7
 800a026:	da42      	bge.n	800a0ae <__gethex+0x25e>
 800a028:	0029      	movs	r1, r5
 800a02a:	9803      	ldr	r0, [sp, #12]
 800a02c:	f000 fd24 	bl	800aa78 <_Bfree>
 800a030:	2300      	movs	r3, #0
 800a032:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a034:	26a3      	movs	r6, #163	@ 0xa3
 800a036:	6013      	str	r3, [r2, #0]
 800a038:	e794      	b.n	8009f64 <__gethex+0x114>
 800a03a:	3c01      	subs	r4, #1
 800a03c:	7823      	ldrb	r3, [r4, #0]
 800a03e:	2b2e      	cmp	r3, #46	@ 0x2e
 800a040:	d012      	beq.n	800a068 <__gethex+0x218>
 800a042:	9b04      	ldr	r3, [sp, #16]
 800a044:	2b20      	cmp	r3, #32
 800a046:	d104      	bne.n	800a052 <__gethex+0x202>
 800a048:	9b05      	ldr	r3, [sp, #20]
 800a04a:	c340      	stmia	r3!, {r6}
 800a04c:	2600      	movs	r6, #0
 800a04e:	9305      	str	r3, [sp, #20]
 800a050:	9604      	str	r6, [sp, #16]
 800a052:	7820      	ldrb	r0, [r4, #0]
 800a054:	f7ff fee7 	bl	8009e26 <__hexdig_fun>
 800a058:	230f      	movs	r3, #15
 800a05a:	4018      	ands	r0, r3
 800a05c:	9b04      	ldr	r3, [sp, #16]
 800a05e:	4098      	lsls	r0, r3
 800a060:	3304      	adds	r3, #4
 800a062:	4306      	orrs	r6, r0
 800a064:	9304      	str	r3, [sp, #16]
 800a066:	e7ac      	b.n	8009fc2 <__gethex+0x172>
 800a068:	9b00      	ldr	r3, [sp, #0]
 800a06a:	42a3      	cmp	r3, r4
 800a06c:	d8e9      	bhi.n	800a042 <__gethex+0x1f2>
 800a06e:	2201      	movs	r2, #1
 800a070:	0020      	movs	r0, r4
 800a072:	492b      	ldr	r1, [pc, #172]	@ (800a120 <__gethex+0x2d0>)
 800a074:	f7fe ffac 	bl	8008fd0 <strncmp>
 800a078:	2800      	cmp	r0, #0
 800a07a:	d1e2      	bne.n	800a042 <__gethex+0x1f2>
 800a07c:	e7a1      	b.n	8009fc2 <__gethex+0x172>
 800a07e:	0028      	movs	r0, r5
 800a080:	1eb1      	subs	r1, r6, #2
 800a082:	f001 f954 	bl	800b32e <__any_on>
 800a086:	2800      	cmp	r0, #0
 800a088:	d0c4      	beq.n	800a014 <__gethex+0x1c4>
 800a08a:	2403      	movs	r4, #3
 800a08c:	e7c3      	b.n	800a016 <__gethex+0x1c6>
 800a08e:	9b00      	ldr	r3, [sp, #0]
 800a090:	2400      	movs	r4, #0
 800a092:	429e      	cmp	r6, r3
 800a094:	dac4      	bge.n	800a020 <__gethex+0x1d0>
 800a096:	1b9e      	subs	r6, r3, r6
 800a098:	0029      	movs	r1, r5
 800a09a:	0032      	movs	r2, r6
 800a09c:	9803      	ldr	r0, [sp, #12]
 800a09e:	f000 ff0d 	bl	800aebc <__lshift>
 800a0a2:	0003      	movs	r3, r0
 800a0a4:	3314      	adds	r3, #20
 800a0a6:	0005      	movs	r5, r0
 800a0a8:	1bbf      	subs	r7, r7, r6
 800a0aa:	9302      	str	r3, [sp, #8]
 800a0ac:	e7b8      	b.n	800a020 <__gethex+0x1d0>
 800a0ae:	9b01      	ldr	r3, [sp, #4]
 800a0b0:	685e      	ldr	r6, [r3, #4]
 800a0b2:	42be      	cmp	r6, r7
 800a0b4:	dd6f      	ble.n	800a196 <__gethex+0x346>
 800a0b6:	9b00      	ldr	r3, [sp, #0]
 800a0b8:	1bf6      	subs	r6, r6, r7
 800a0ba:	42b3      	cmp	r3, r6
 800a0bc:	dc36      	bgt.n	800a12c <__gethex+0x2dc>
 800a0be:	9b01      	ldr	r3, [sp, #4]
 800a0c0:	68db      	ldr	r3, [r3, #12]
 800a0c2:	2b02      	cmp	r3, #2
 800a0c4:	d024      	beq.n	800a110 <__gethex+0x2c0>
 800a0c6:	2b03      	cmp	r3, #3
 800a0c8:	d026      	beq.n	800a118 <__gethex+0x2c8>
 800a0ca:	2b01      	cmp	r3, #1
 800a0cc:	d117      	bne.n	800a0fe <__gethex+0x2ae>
 800a0ce:	9b00      	ldr	r3, [sp, #0]
 800a0d0:	42b3      	cmp	r3, r6
 800a0d2:	d114      	bne.n	800a0fe <__gethex+0x2ae>
 800a0d4:	2b01      	cmp	r3, #1
 800a0d6:	d10b      	bne.n	800a0f0 <__gethex+0x2a0>
 800a0d8:	9b01      	ldr	r3, [sp, #4]
 800a0da:	9a07      	ldr	r2, [sp, #28]
 800a0dc:	685b      	ldr	r3, [r3, #4]
 800a0de:	2662      	movs	r6, #98	@ 0x62
 800a0e0:	6013      	str	r3, [r2, #0]
 800a0e2:	2301      	movs	r3, #1
 800a0e4:	9a02      	ldr	r2, [sp, #8]
 800a0e6:	612b      	str	r3, [r5, #16]
 800a0e8:	6013      	str	r3, [r2, #0]
 800a0ea:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a0ec:	601d      	str	r5, [r3, #0]
 800a0ee:	e739      	b.n	8009f64 <__gethex+0x114>
 800a0f0:	9900      	ldr	r1, [sp, #0]
 800a0f2:	0028      	movs	r0, r5
 800a0f4:	3901      	subs	r1, #1
 800a0f6:	f001 f91a 	bl	800b32e <__any_on>
 800a0fa:	2800      	cmp	r0, #0
 800a0fc:	d1ec      	bne.n	800a0d8 <__gethex+0x288>
 800a0fe:	0029      	movs	r1, r5
 800a100:	9803      	ldr	r0, [sp, #12]
 800a102:	f000 fcb9 	bl	800aa78 <_Bfree>
 800a106:	2300      	movs	r3, #0
 800a108:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a10a:	2650      	movs	r6, #80	@ 0x50
 800a10c:	6013      	str	r3, [r2, #0]
 800a10e:	e729      	b.n	8009f64 <__gethex+0x114>
 800a110:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a112:	2b00      	cmp	r3, #0
 800a114:	d1f3      	bne.n	800a0fe <__gethex+0x2ae>
 800a116:	e7df      	b.n	800a0d8 <__gethex+0x288>
 800a118:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a11a:	2b00      	cmp	r3, #0
 800a11c:	d1dc      	bne.n	800a0d8 <__gethex+0x288>
 800a11e:	e7ee      	b.n	800a0fe <__gethex+0x2ae>
 800a120:	0800c005 	.word	0x0800c005
 800a124:	0800c08b 	.word	0x0800c08b
 800a128:	0800c09c 	.word	0x0800c09c
 800a12c:	1e77      	subs	r7, r6, #1
 800a12e:	2c00      	cmp	r4, #0
 800a130:	d12f      	bne.n	800a192 <__gethex+0x342>
 800a132:	2f00      	cmp	r7, #0
 800a134:	d004      	beq.n	800a140 <__gethex+0x2f0>
 800a136:	0039      	movs	r1, r7
 800a138:	0028      	movs	r0, r5
 800a13a:	f001 f8f8 	bl	800b32e <__any_on>
 800a13e:	0004      	movs	r4, r0
 800a140:	231f      	movs	r3, #31
 800a142:	117a      	asrs	r2, r7, #5
 800a144:	401f      	ands	r7, r3
 800a146:	3b1e      	subs	r3, #30
 800a148:	40bb      	lsls	r3, r7
 800a14a:	9902      	ldr	r1, [sp, #8]
 800a14c:	0092      	lsls	r2, r2, #2
 800a14e:	5852      	ldr	r2, [r2, r1]
 800a150:	421a      	tst	r2, r3
 800a152:	d001      	beq.n	800a158 <__gethex+0x308>
 800a154:	2302      	movs	r3, #2
 800a156:	431c      	orrs	r4, r3
 800a158:	9b00      	ldr	r3, [sp, #0]
 800a15a:	0031      	movs	r1, r6
 800a15c:	1b9b      	subs	r3, r3, r6
 800a15e:	2602      	movs	r6, #2
 800a160:	0028      	movs	r0, r5
 800a162:	9300      	str	r3, [sp, #0]
 800a164:	f7ff fe0c 	bl	8009d80 <rshift>
 800a168:	9b01      	ldr	r3, [sp, #4]
 800a16a:	685f      	ldr	r7, [r3, #4]
 800a16c:	2c00      	cmp	r4, #0
 800a16e:	d03f      	beq.n	800a1f0 <__gethex+0x3a0>
 800a170:	9b01      	ldr	r3, [sp, #4]
 800a172:	68db      	ldr	r3, [r3, #12]
 800a174:	2b02      	cmp	r3, #2
 800a176:	d010      	beq.n	800a19a <__gethex+0x34a>
 800a178:	2b03      	cmp	r3, #3
 800a17a:	d012      	beq.n	800a1a2 <__gethex+0x352>
 800a17c:	2b01      	cmp	r3, #1
 800a17e:	d106      	bne.n	800a18e <__gethex+0x33e>
 800a180:	07a2      	lsls	r2, r4, #30
 800a182:	d504      	bpl.n	800a18e <__gethex+0x33e>
 800a184:	9a02      	ldr	r2, [sp, #8]
 800a186:	6812      	ldr	r2, [r2, #0]
 800a188:	4314      	orrs	r4, r2
 800a18a:	421c      	tst	r4, r3
 800a18c:	d10c      	bne.n	800a1a8 <__gethex+0x358>
 800a18e:	2310      	movs	r3, #16
 800a190:	e02d      	b.n	800a1ee <__gethex+0x39e>
 800a192:	2401      	movs	r4, #1
 800a194:	e7d4      	b.n	800a140 <__gethex+0x2f0>
 800a196:	2601      	movs	r6, #1
 800a198:	e7e8      	b.n	800a16c <__gethex+0x31c>
 800a19a:	2301      	movs	r3, #1
 800a19c:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800a19e:	1a9b      	subs	r3, r3, r2
 800a1a0:	930f      	str	r3, [sp, #60]	@ 0x3c
 800a1a2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a1a4:	2b00      	cmp	r3, #0
 800a1a6:	d0f2      	beq.n	800a18e <__gethex+0x33e>
 800a1a8:	692b      	ldr	r3, [r5, #16]
 800a1aa:	2000      	movs	r0, #0
 800a1ac:	9302      	str	r3, [sp, #8]
 800a1ae:	009b      	lsls	r3, r3, #2
 800a1b0:	9304      	str	r3, [sp, #16]
 800a1b2:	002b      	movs	r3, r5
 800a1b4:	9a04      	ldr	r2, [sp, #16]
 800a1b6:	3314      	adds	r3, #20
 800a1b8:	1899      	adds	r1, r3, r2
 800a1ba:	681a      	ldr	r2, [r3, #0]
 800a1bc:	1c54      	adds	r4, r2, #1
 800a1be:	d01c      	beq.n	800a1fa <__gethex+0x3aa>
 800a1c0:	3201      	adds	r2, #1
 800a1c2:	601a      	str	r2, [r3, #0]
 800a1c4:	002b      	movs	r3, r5
 800a1c6:	3314      	adds	r3, #20
 800a1c8:	2e02      	cmp	r6, #2
 800a1ca:	d13f      	bne.n	800a24c <__gethex+0x3fc>
 800a1cc:	9a01      	ldr	r2, [sp, #4]
 800a1ce:	9900      	ldr	r1, [sp, #0]
 800a1d0:	6812      	ldr	r2, [r2, #0]
 800a1d2:	3a01      	subs	r2, #1
 800a1d4:	428a      	cmp	r2, r1
 800a1d6:	d109      	bne.n	800a1ec <__gethex+0x39c>
 800a1d8:	000a      	movs	r2, r1
 800a1da:	201f      	movs	r0, #31
 800a1dc:	4010      	ands	r0, r2
 800a1de:	2201      	movs	r2, #1
 800a1e0:	4082      	lsls	r2, r0
 800a1e2:	1149      	asrs	r1, r1, #5
 800a1e4:	0089      	lsls	r1, r1, #2
 800a1e6:	58cb      	ldr	r3, [r1, r3]
 800a1e8:	4213      	tst	r3, r2
 800a1ea:	d13d      	bne.n	800a268 <__gethex+0x418>
 800a1ec:	2320      	movs	r3, #32
 800a1ee:	431e      	orrs	r6, r3
 800a1f0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a1f2:	601d      	str	r5, [r3, #0]
 800a1f4:	9b07      	ldr	r3, [sp, #28]
 800a1f6:	601f      	str	r7, [r3, #0]
 800a1f8:	e6b4      	b.n	8009f64 <__gethex+0x114>
 800a1fa:	c301      	stmia	r3!, {r0}
 800a1fc:	4299      	cmp	r1, r3
 800a1fe:	d8dc      	bhi.n	800a1ba <__gethex+0x36a>
 800a200:	68ab      	ldr	r3, [r5, #8]
 800a202:	9a02      	ldr	r2, [sp, #8]
 800a204:	429a      	cmp	r2, r3
 800a206:	db18      	blt.n	800a23a <__gethex+0x3ea>
 800a208:	6869      	ldr	r1, [r5, #4]
 800a20a:	9803      	ldr	r0, [sp, #12]
 800a20c:	3101      	adds	r1, #1
 800a20e:	f000 fbef 	bl	800a9f0 <_Balloc>
 800a212:	1e04      	subs	r4, r0, #0
 800a214:	d104      	bne.n	800a220 <__gethex+0x3d0>
 800a216:	0022      	movs	r2, r4
 800a218:	2184      	movs	r1, #132	@ 0x84
 800a21a:	4b1d      	ldr	r3, [pc, #116]	@ (800a290 <__gethex+0x440>)
 800a21c:	481d      	ldr	r0, [pc, #116]	@ (800a294 <__gethex+0x444>)
 800a21e:	e6c4      	b.n	8009faa <__gethex+0x15a>
 800a220:	0029      	movs	r1, r5
 800a222:	692a      	ldr	r2, [r5, #16]
 800a224:	310c      	adds	r1, #12
 800a226:	3202      	adds	r2, #2
 800a228:	0092      	lsls	r2, r2, #2
 800a22a:	300c      	adds	r0, #12
 800a22c:	f7fe ff1f 	bl	800906e <memcpy>
 800a230:	0029      	movs	r1, r5
 800a232:	9803      	ldr	r0, [sp, #12]
 800a234:	f000 fc20 	bl	800aa78 <_Bfree>
 800a238:	0025      	movs	r5, r4
 800a23a:	692b      	ldr	r3, [r5, #16]
 800a23c:	1c5a      	adds	r2, r3, #1
 800a23e:	612a      	str	r2, [r5, #16]
 800a240:	2201      	movs	r2, #1
 800a242:	3304      	adds	r3, #4
 800a244:	009b      	lsls	r3, r3, #2
 800a246:	18eb      	adds	r3, r5, r3
 800a248:	605a      	str	r2, [r3, #4]
 800a24a:	e7bb      	b.n	800a1c4 <__gethex+0x374>
 800a24c:	692a      	ldr	r2, [r5, #16]
 800a24e:	9902      	ldr	r1, [sp, #8]
 800a250:	428a      	cmp	r2, r1
 800a252:	dd0b      	ble.n	800a26c <__gethex+0x41c>
 800a254:	2101      	movs	r1, #1
 800a256:	0028      	movs	r0, r5
 800a258:	f7ff fd92 	bl	8009d80 <rshift>
 800a25c:	9b01      	ldr	r3, [sp, #4]
 800a25e:	3701      	adds	r7, #1
 800a260:	689b      	ldr	r3, [r3, #8]
 800a262:	42bb      	cmp	r3, r7
 800a264:	da00      	bge.n	800a268 <__gethex+0x418>
 800a266:	e6df      	b.n	800a028 <__gethex+0x1d8>
 800a268:	2601      	movs	r6, #1
 800a26a:	e7bf      	b.n	800a1ec <__gethex+0x39c>
 800a26c:	221f      	movs	r2, #31
 800a26e:	9c00      	ldr	r4, [sp, #0]
 800a270:	9900      	ldr	r1, [sp, #0]
 800a272:	4014      	ands	r4, r2
 800a274:	4211      	tst	r1, r2
 800a276:	d0f7      	beq.n	800a268 <__gethex+0x418>
 800a278:	9a04      	ldr	r2, [sp, #16]
 800a27a:	189b      	adds	r3, r3, r2
 800a27c:	3b04      	subs	r3, #4
 800a27e:	6818      	ldr	r0, [r3, #0]
 800a280:	f000 fcae 	bl	800abe0 <__hi0bits>
 800a284:	2320      	movs	r3, #32
 800a286:	1b1b      	subs	r3, r3, r4
 800a288:	4298      	cmp	r0, r3
 800a28a:	dbe3      	blt.n	800a254 <__gethex+0x404>
 800a28c:	e7ec      	b.n	800a268 <__gethex+0x418>
 800a28e:	46c0      	nop			@ (mov r8, r8)
 800a290:	0800c08b 	.word	0x0800c08b
 800a294:	0800c09c 	.word	0x0800c09c

0800a298 <L_shift>:
 800a298:	2308      	movs	r3, #8
 800a29a:	b570      	push	{r4, r5, r6, lr}
 800a29c:	2520      	movs	r5, #32
 800a29e:	1a9a      	subs	r2, r3, r2
 800a2a0:	0092      	lsls	r2, r2, #2
 800a2a2:	1aad      	subs	r5, r5, r2
 800a2a4:	6843      	ldr	r3, [r0, #4]
 800a2a6:	6804      	ldr	r4, [r0, #0]
 800a2a8:	001e      	movs	r6, r3
 800a2aa:	40ae      	lsls	r6, r5
 800a2ac:	40d3      	lsrs	r3, r2
 800a2ae:	4334      	orrs	r4, r6
 800a2b0:	6004      	str	r4, [r0, #0]
 800a2b2:	6043      	str	r3, [r0, #4]
 800a2b4:	3004      	adds	r0, #4
 800a2b6:	4288      	cmp	r0, r1
 800a2b8:	d3f4      	bcc.n	800a2a4 <L_shift+0xc>
 800a2ba:	bd70      	pop	{r4, r5, r6, pc}

0800a2bc <__match>:
 800a2bc:	b530      	push	{r4, r5, lr}
 800a2be:	6803      	ldr	r3, [r0, #0]
 800a2c0:	780c      	ldrb	r4, [r1, #0]
 800a2c2:	3301      	adds	r3, #1
 800a2c4:	2c00      	cmp	r4, #0
 800a2c6:	d102      	bne.n	800a2ce <__match+0x12>
 800a2c8:	6003      	str	r3, [r0, #0]
 800a2ca:	2001      	movs	r0, #1
 800a2cc:	bd30      	pop	{r4, r5, pc}
 800a2ce:	781a      	ldrb	r2, [r3, #0]
 800a2d0:	0015      	movs	r5, r2
 800a2d2:	3d41      	subs	r5, #65	@ 0x41
 800a2d4:	2d19      	cmp	r5, #25
 800a2d6:	d800      	bhi.n	800a2da <__match+0x1e>
 800a2d8:	3220      	adds	r2, #32
 800a2da:	3101      	adds	r1, #1
 800a2dc:	42a2      	cmp	r2, r4
 800a2de:	d0ef      	beq.n	800a2c0 <__match+0x4>
 800a2e0:	2000      	movs	r0, #0
 800a2e2:	e7f3      	b.n	800a2cc <__match+0x10>

0800a2e4 <__hexnan>:
 800a2e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a2e6:	680b      	ldr	r3, [r1, #0]
 800a2e8:	b08b      	sub	sp, #44	@ 0x2c
 800a2ea:	9201      	str	r2, [sp, #4]
 800a2ec:	9901      	ldr	r1, [sp, #4]
 800a2ee:	115a      	asrs	r2, r3, #5
 800a2f0:	0092      	lsls	r2, r2, #2
 800a2f2:	188a      	adds	r2, r1, r2
 800a2f4:	9202      	str	r2, [sp, #8]
 800a2f6:	0019      	movs	r1, r3
 800a2f8:	221f      	movs	r2, #31
 800a2fa:	4011      	ands	r1, r2
 800a2fc:	9008      	str	r0, [sp, #32]
 800a2fe:	9106      	str	r1, [sp, #24]
 800a300:	4213      	tst	r3, r2
 800a302:	d002      	beq.n	800a30a <__hexnan+0x26>
 800a304:	9b02      	ldr	r3, [sp, #8]
 800a306:	3304      	adds	r3, #4
 800a308:	9302      	str	r3, [sp, #8]
 800a30a:	9b02      	ldr	r3, [sp, #8]
 800a30c:	2500      	movs	r5, #0
 800a30e:	1f1f      	subs	r7, r3, #4
 800a310:	003e      	movs	r6, r7
 800a312:	003c      	movs	r4, r7
 800a314:	9b08      	ldr	r3, [sp, #32]
 800a316:	603d      	str	r5, [r7, #0]
 800a318:	681b      	ldr	r3, [r3, #0]
 800a31a:	9507      	str	r5, [sp, #28]
 800a31c:	9305      	str	r3, [sp, #20]
 800a31e:	9503      	str	r5, [sp, #12]
 800a320:	9b05      	ldr	r3, [sp, #20]
 800a322:	3301      	adds	r3, #1
 800a324:	9309      	str	r3, [sp, #36]	@ 0x24
 800a326:	9b05      	ldr	r3, [sp, #20]
 800a328:	785b      	ldrb	r3, [r3, #1]
 800a32a:	9304      	str	r3, [sp, #16]
 800a32c:	2b00      	cmp	r3, #0
 800a32e:	d028      	beq.n	800a382 <__hexnan+0x9e>
 800a330:	9804      	ldr	r0, [sp, #16]
 800a332:	f7ff fd78 	bl	8009e26 <__hexdig_fun>
 800a336:	2800      	cmp	r0, #0
 800a338:	d155      	bne.n	800a3e6 <__hexnan+0x102>
 800a33a:	9b04      	ldr	r3, [sp, #16]
 800a33c:	2b20      	cmp	r3, #32
 800a33e:	d819      	bhi.n	800a374 <__hexnan+0x90>
 800a340:	9b03      	ldr	r3, [sp, #12]
 800a342:	9a07      	ldr	r2, [sp, #28]
 800a344:	4293      	cmp	r3, r2
 800a346:	dd12      	ble.n	800a36e <__hexnan+0x8a>
 800a348:	42b4      	cmp	r4, r6
 800a34a:	d206      	bcs.n	800a35a <__hexnan+0x76>
 800a34c:	2d07      	cmp	r5, #7
 800a34e:	dc04      	bgt.n	800a35a <__hexnan+0x76>
 800a350:	002a      	movs	r2, r5
 800a352:	0031      	movs	r1, r6
 800a354:	0020      	movs	r0, r4
 800a356:	f7ff ff9f 	bl	800a298 <L_shift>
 800a35a:	9b01      	ldr	r3, [sp, #4]
 800a35c:	2508      	movs	r5, #8
 800a35e:	429c      	cmp	r4, r3
 800a360:	d905      	bls.n	800a36e <__hexnan+0x8a>
 800a362:	1f26      	subs	r6, r4, #4
 800a364:	2500      	movs	r5, #0
 800a366:	0034      	movs	r4, r6
 800a368:	9b03      	ldr	r3, [sp, #12]
 800a36a:	6035      	str	r5, [r6, #0]
 800a36c:	9307      	str	r3, [sp, #28]
 800a36e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a370:	9305      	str	r3, [sp, #20]
 800a372:	e7d5      	b.n	800a320 <__hexnan+0x3c>
 800a374:	9b04      	ldr	r3, [sp, #16]
 800a376:	2b29      	cmp	r3, #41	@ 0x29
 800a378:	d15a      	bne.n	800a430 <__hexnan+0x14c>
 800a37a:	9b05      	ldr	r3, [sp, #20]
 800a37c:	9a08      	ldr	r2, [sp, #32]
 800a37e:	3302      	adds	r3, #2
 800a380:	6013      	str	r3, [r2, #0]
 800a382:	9b03      	ldr	r3, [sp, #12]
 800a384:	2b00      	cmp	r3, #0
 800a386:	d053      	beq.n	800a430 <__hexnan+0x14c>
 800a388:	42b4      	cmp	r4, r6
 800a38a:	d206      	bcs.n	800a39a <__hexnan+0xb6>
 800a38c:	2d07      	cmp	r5, #7
 800a38e:	dc04      	bgt.n	800a39a <__hexnan+0xb6>
 800a390:	002a      	movs	r2, r5
 800a392:	0031      	movs	r1, r6
 800a394:	0020      	movs	r0, r4
 800a396:	f7ff ff7f 	bl	800a298 <L_shift>
 800a39a:	9b01      	ldr	r3, [sp, #4]
 800a39c:	429c      	cmp	r4, r3
 800a39e:	d936      	bls.n	800a40e <__hexnan+0x12a>
 800a3a0:	001a      	movs	r2, r3
 800a3a2:	0023      	movs	r3, r4
 800a3a4:	cb02      	ldmia	r3!, {r1}
 800a3a6:	c202      	stmia	r2!, {r1}
 800a3a8:	429f      	cmp	r7, r3
 800a3aa:	d2fb      	bcs.n	800a3a4 <__hexnan+0xc0>
 800a3ac:	9b02      	ldr	r3, [sp, #8]
 800a3ae:	1c62      	adds	r2, r4, #1
 800a3b0:	1ed9      	subs	r1, r3, #3
 800a3b2:	2304      	movs	r3, #4
 800a3b4:	4291      	cmp	r1, r2
 800a3b6:	d305      	bcc.n	800a3c4 <__hexnan+0xe0>
 800a3b8:	9b02      	ldr	r3, [sp, #8]
 800a3ba:	3b04      	subs	r3, #4
 800a3bc:	1b1b      	subs	r3, r3, r4
 800a3be:	089b      	lsrs	r3, r3, #2
 800a3c0:	3301      	adds	r3, #1
 800a3c2:	009b      	lsls	r3, r3, #2
 800a3c4:	9a01      	ldr	r2, [sp, #4]
 800a3c6:	18d3      	adds	r3, r2, r3
 800a3c8:	2200      	movs	r2, #0
 800a3ca:	c304      	stmia	r3!, {r2}
 800a3cc:	429f      	cmp	r7, r3
 800a3ce:	d2fc      	bcs.n	800a3ca <__hexnan+0xe6>
 800a3d0:	683b      	ldr	r3, [r7, #0]
 800a3d2:	2b00      	cmp	r3, #0
 800a3d4:	d104      	bne.n	800a3e0 <__hexnan+0xfc>
 800a3d6:	9b01      	ldr	r3, [sp, #4]
 800a3d8:	429f      	cmp	r7, r3
 800a3da:	d127      	bne.n	800a42c <__hexnan+0x148>
 800a3dc:	2301      	movs	r3, #1
 800a3de:	603b      	str	r3, [r7, #0]
 800a3e0:	2005      	movs	r0, #5
 800a3e2:	b00b      	add	sp, #44	@ 0x2c
 800a3e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a3e6:	9b03      	ldr	r3, [sp, #12]
 800a3e8:	3501      	adds	r5, #1
 800a3ea:	3301      	adds	r3, #1
 800a3ec:	9303      	str	r3, [sp, #12]
 800a3ee:	2d08      	cmp	r5, #8
 800a3f0:	dd06      	ble.n	800a400 <__hexnan+0x11c>
 800a3f2:	9b01      	ldr	r3, [sp, #4]
 800a3f4:	429c      	cmp	r4, r3
 800a3f6:	d9ba      	bls.n	800a36e <__hexnan+0x8a>
 800a3f8:	2300      	movs	r3, #0
 800a3fa:	2501      	movs	r5, #1
 800a3fc:	3c04      	subs	r4, #4
 800a3fe:	6023      	str	r3, [r4, #0]
 800a400:	220f      	movs	r2, #15
 800a402:	6823      	ldr	r3, [r4, #0]
 800a404:	4010      	ands	r0, r2
 800a406:	011b      	lsls	r3, r3, #4
 800a408:	4303      	orrs	r3, r0
 800a40a:	6023      	str	r3, [r4, #0]
 800a40c:	e7af      	b.n	800a36e <__hexnan+0x8a>
 800a40e:	9b06      	ldr	r3, [sp, #24]
 800a410:	2b00      	cmp	r3, #0
 800a412:	d0dd      	beq.n	800a3d0 <__hexnan+0xec>
 800a414:	2320      	movs	r3, #32
 800a416:	9a06      	ldr	r2, [sp, #24]
 800a418:	9902      	ldr	r1, [sp, #8]
 800a41a:	1a9b      	subs	r3, r3, r2
 800a41c:	2201      	movs	r2, #1
 800a41e:	4252      	negs	r2, r2
 800a420:	40da      	lsrs	r2, r3
 800a422:	3904      	subs	r1, #4
 800a424:	680b      	ldr	r3, [r1, #0]
 800a426:	4013      	ands	r3, r2
 800a428:	600b      	str	r3, [r1, #0]
 800a42a:	e7d1      	b.n	800a3d0 <__hexnan+0xec>
 800a42c:	3f04      	subs	r7, #4
 800a42e:	e7cf      	b.n	800a3d0 <__hexnan+0xec>
 800a430:	2004      	movs	r0, #4
 800a432:	e7d6      	b.n	800a3e2 <__hexnan+0xfe>

0800a434 <__ssputs_r>:
 800a434:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a436:	688e      	ldr	r6, [r1, #8]
 800a438:	b085      	sub	sp, #20
 800a43a:	001f      	movs	r7, r3
 800a43c:	000c      	movs	r4, r1
 800a43e:	680b      	ldr	r3, [r1, #0]
 800a440:	9002      	str	r0, [sp, #8]
 800a442:	9203      	str	r2, [sp, #12]
 800a444:	42be      	cmp	r6, r7
 800a446:	d830      	bhi.n	800a4aa <__ssputs_r+0x76>
 800a448:	210c      	movs	r1, #12
 800a44a:	5e62      	ldrsh	r2, [r4, r1]
 800a44c:	2190      	movs	r1, #144	@ 0x90
 800a44e:	00c9      	lsls	r1, r1, #3
 800a450:	420a      	tst	r2, r1
 800a452:	d028      	beq.n	800a4a6 <__ssputs_r+0x72>
 800a454:	2003      	movs	r0, #3
 800a456:	6921      	ldr	r1, [r4, #16]
 800a458:	1a5b      	subs	r3, r3, r1
 800a45a:	9301      	str	r3, [sp, #4]
 800a45c:	6963      	ldr	r3, [r4, #20]
 800a45e:	4343      	muls	r3, r0
 800a460:	9801      	ldr	r0, [sp, #4]
 800a462:	0fdd      	lsrs	r5, r3, #31
 800a464:	18ed      	adds	r5, r5, r3
 800a466:	1c7b      	adds	r3, r7, #1
 800a468:	181b      	adds	r3, r3, r0
 800a46a:	106d      	asrs	r5, r5, #1
 800a46c:	42ab      	cmp	r3, r5
 800a46e:	d900      	bls.n	800a472 <__ssputs_r+0x3e>
 800a470:	001d      	movs	r5, r3
 800a472:	0552      	lsls	r2, r2, #21
 800a474:	d528      	bpl.n	800a4c8 <__ssputs_r+0x94>
 800a476:	0029      	movs	r1, r5
 800a478:	9802      	ldr	r0, [sp, #8]
 800a47a:	f000 f965 	bl	800a748 <_malloc_r>
 800a47e:	1e06      	subs	r6, r0, #0
 800a480:	d02c      	beq.n	800a4dc <__ssputs_r+0xa8>
 800a482:	9a01      	ldr	r2, [sp, #4]
 800a484:	6921      	ldr	r1, [r4, #16]
 800a486:	f7fe fdf2 	bl	800906e <memcpy>
 800a48a:	89a2      	ldrh	r2, [r4, #12]
 800a48c:	4b18      	ldr	r3, [pc, #96]	@ (800a4f0 <__ssputs_r+0xbc>)
 800a48e:	401a      	ands	r2, r3
 800a490:	2380      	movs	r3, #128	@ 0x80
 800a492:	4313      	orrs	r3, r2
 800a494:	81a3      	strh	r3, [r4, #12]
 800a496:	9b01      	ldr	r3, [sp, #4]
 800a498:	6126      	str	r6, [r4, #16]
 800a49a:	18f6      	adds	r6, r6, r3
 800a49c:	6026      	str	r6, [r4, #0]
 800a49e:	003e      	movs	r6, r7
 800a4a0:	6165      	str	r5, [r4, #20]
 800a4a2:	1aed      	subs	r5, r5, r3
 800a4a4:	60a5      	str	r5, [r4, #8]
 800a4a6:	42be      	cmp	r6, r7
 800a4a8:	d900      	bls.n	800a4ac <__ssputs_r+0x78>
 800a4aa:	003e      	movs	r6, r7
 800a4ac:	0032      	movs	r2, r6
 800a4ae:	9903      	ldr	r1, [sp, #12]
 800a4b0:	6820      	ldr	r0, [r4, #0]
 800a4b2:	f000 ffe8 	bl	800b486 <memmove>
 800a4b6:	2000      	movs	r0, #0
 800a4b8:	68a3      	ldr	r3, [r4, #8]
 800a4ba:	1b9b      	subs	r3, r3, r6
 800a4bc:	60a3      	str	r3, [r4, #8]
 800a4be:	6823      	ldr	r3, [r4, #0]
 800a4c0:	199b      	adds	r3, r3, r6
 800a4c2:	6023      	str	r3, [r4, #0]
 800a4c4:	b005      	add	sp, #20
 800a4c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a4c8:	002a      	movs	r2, r5
 800a4ca:	9802      	ldr	r0, [sp, #8]
 800a4cc:	f000 ff9e 	bl	800b40c <_realloc_r>
 800a4d0:	1e06      	subs	r6, r0, #0
 800a4d2:	d1e0      	bne.n	800a496 <__ssputs_r+0x62>
 800a4d4:	6921      	ldr	r1, [r4, #16]
 800a4d6:	9802      	ldr	r0, [sp, #8]
 800a4d8:	f001 f894 	bl	800b604 <_free_r>
 800a4dc:	230c      	movs	r3, #12
 800a4de:	2001      	movs	r0, #1
 800a4e0:	9a02      	ldr	r2, [sp, #8]
 800a4e2:	4240      	negs	r0, r0
 800a4e4:	6013      	str	r3, [r2, #0]
 800a4e6:	89a2      	ldrh	r2, [r4, #12]
 800a4e8:	3334      	adds	r3, #52	@ 0x34
 800a4ea:	4313      	orrs	r3, r2
 800a4ec:	81a3      	strh	r3, [r4, #12]
 800a4ee:	e7e9      	b.n	800a4c4 <__ssputs_r+0x90>
 800a4f0:	fffffb7f 	.word	0xfffffb7f

0800a4f4 <_svfiprintf_r>:
 800a4f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a4f6:	b0a1      	sub	sp, #132	@ 0x84
 800a4f8:	9003      	str	r0, [sp, #12]
 800a4fa:	001d      	movs	r5, r3
 800a4fc:	898b      	ldrh	r3, [r1, #12]
 800a4fe:	000f      	movs	r7, r1
 800a500:	0016      	movs	r6, r2
 800a502:	061b      	lsls	r3, r3, #24
 800a504:	d511      	bpl.n	800a52a <_svfiprintf_r+0x36>
 800a506:	690b      	ldr	r3, [r1, #16]
 800a508:	2b00      	cmp	r3, #0
 800a50a:	d10e      	bne.n	800a52a <_svfiprintf_r+0x36>
 800a50c:	2140      	movs	r1, #64	@ 0x40
 800a50e:	f000 f91b 	bl	800a748 <_malloc_r>
 800a512:	6038      	str	r0, [r7, #0]
 800a514:	6138      	str	r0, [r7, #16]
 800a516:	2800      	cmp	r0, #0
 800a518:	d105      	bne.n	800a526 <_svfiprintf_r+0x32>
 800a51a:	230c      	movs	r3, #12
 800a51c:	9a03      	ldr	r2, [sp, #12]
 800a51e:	6013      	str	r3, [r2, #0]
 800a520:	2001      	movs	r0, #1
 800a522:	4240      	negs	r0, r0
 800a524:	e0cf      	b.n	800a6c6 <_svfiprintf_r+0x1d2>
 800a526:	2340      	movs	r3, #64	@ 0x40
 800a528:	617b      	str	r3, [r7, #20]
 800a52a:	2300      	movs	r3, #0
 800a52c:	ac08      	add	r4, sp, #32
 800a52e:	6163      	str	r3, [r4, #20]
 800a530:	3320      	adds	r3, #32
 800a532:	7663      	strb	r3, [r4, #25]
 800a534:	3310      	adds	r3, #16
 800a536:	76a3      	strb	r3, [r4, #26]
 800a538:	9507      	str	r5, [sp, #28]
 800a53a:	0035      	movs	r5, r6
 800a53c:	782b      	ldrb	r3, [r5, #0]
 800a53e:	2b00      	cmp	r3, #0
 800a540:	d001      	beq.n	800a546 <_svfiprintf_r+0x52>
 800a542:	2b25      	cmp	r3, #37	@ 0x25
 800a544:	d148      	bne.n	800a5d8 <_svfiprintf_r+0xe4>
 800a546:	1bab      	subs	r3, r5, r6
 800a548:	9305      	str	r3, [sp, #20]
 800a54a:	42b5      	cmp	r5, r6
 800a54c:	d00b      	beq.n	800a566 <_svfiprintf_r+0x72>
 800a54e:	0032      	movs	r2, r6
 800a550:	0039      	movs	r1, r7
 800a552:	9803      	ldr	r0, [sp, #12]
 800a554:	f7ff ff6e 	bl	800a434 <__ssputs_r>
 800a558:	3001      	adds	r0, #1
 800a55a:	d100      	bne.n	800a55e <_svfiprintf_r+0x6a>
 800a55c:	e0ae      	b.n	800a6bc <_svfiprintf_r+0x1c8>
 800a55e:	6963      	ldr	r3, [r4, #20]
 800a560:	9a05      	ldr	r2, [sp, #20]
 800a562:	189b      	adds	r3, r3, r2
 800a564:	6163      	str	r3, [r4, #20]
 800a566:	782b      	ldrb	r3, [r5, #0]
 800a568:	2b00      	cmp	r3, #0
 800a56a:	d100      	bne.n	800a56e <_svfiprintf_r+0x7a>
 800a56c:	e0a6      	b.n	800a6bc <_svfiprintf_r+0x1c8>
 800a56e:	2201      	movs	r2, #1
 800a570:	2300      	movs	r3, #0
 800a572:	4252      	negs	r2, r2
 800a574:	6062      	str	r2, [r4, #4]
 800a576:	a904      	add	r1, sp, #16
 800a578:	3254      	adds	r2, #84	@ 0x54
 800a57a:	1852      	adds	r2, r2, r1
 800a57c:	1c6e      	adds	r6, r5, #1
 800a57e:	6023      	str	r3, [r4, #0]
 800a580:	60e3      	str	r3, [r4, #12]
 800a582:	60a3      	str	r3, [r4, #8]
 800a584:	7013      	strb	r3, [r2, #0]
 800a586:	65a3      	str	r3, [r4, #88]	@ 0x58
 800a588:	4b54      	ldr	r3, [pc, #336]	@ (800a6dc <_svfiprintf_r+0x1e8>)
 800a58a:	2205      	movs	r2, #5
 800a58c:	0018      	movs	r0, r3
 800a58e:	7831      	ldrb	r1, [r6, #0]
 800a590:	9305      	str	r3, [sp, #20]
 800a592:	f7fe fd61 	bl	8009058 <memchr>
 800a596:	1c75      	adds	r5, r6, #1
 800a598:	2800      	cmp	r0, #0
 800a59a:	d11f      	bne.n	800a5dc <_svfiprintf_r+0xe8>
 800a59c:	6822      	ldr	r2, [r4, #0]
 800a59e:	06d3      	lsls	r3, r2, #27
 800a5a0:	d504      	bpl.n	800a5ac <_svfiprintf_r+0xb8>
 800a5a2:	2353      	movs	r3, #83	@ 0x53
 800a5a4:	a904      	add	r1, sp, #16
 800a5a6:	185b      	adds	r3, r3, r1
 800a5a8:	2120      	movs	r1, #32
 800a5aa:	7019      	strb	r1, [r3, #0]
 800a5ac:	0713      	lsls	r3, r2, #28
 800a5ae:	d504      	bpl.n	800a5ba <_svfiprintf_r+0xc6>
 800a5b0:	2353      	movs	r3, #83	@ 0x53
 800a5b2:	a904      	add	r1, sp, #16
 800a5b4:	185b      	adds	r3, r3, r1
 800a5b6:	212b      	movs	r1, #43	@ 0x2b
 800a5b8:	7019      	strb	r1, [r3, #0]
 800a5ba:	7833      	ldrb	r3, [r6, #0]
 800a5bc:	2b2a      	cmp	r3, #42	@ 0x2a
 800a5be:	d016      	beq.n	800a5ee <_svfiprintf_r+0xfa>
 800a5c0:	0035      	movs	r5, r6
 800a5c2:	2100      	movs	r1, #0
 800a5c4:	200a      	movs	r0, #10
 800a5c6:	68e3      	ldr	r3, [r4, #12]
 800a5c8:	782a      	ldrb	r2, [r5, #0]
 800a5ca:	1c6e      	adds	r6, r5, #1
 800a5cc:	3a30      	subs	r2, #48	@ 0x30
 800a5ce:	2a09      	cmp	r2, #9
 800a5d0:	d950      	bls.n	800a674 <_svfiprintf_r+0x180>
 800a5d2:	2900      	cmp	r1, #0
 800a5d4:	d111      	bne.n	800a5fa <_svfiprintf_r+0x106>
 800a5d6:	e017      	b.n	800a608 <_svfiprintf_r+0x114>
 800a5d8:	3501      	adds	r5, #1
 800a5da:	e7af      	b.n	800a53c <_svfiprintf_r+0x48>
 800a5dc:	9b05      	ldr	r3, [sp, #20]
 800a5de:	6822      	ldr	r2, [r4, #0]
 800a5e0:	1ac0      	subs	r0, r0, r3
 800a5e2:	2301      	movs	r3, #1
 800a5e4:	4083      	lsls	r3, r0
 800a5e6:	4313      	orrs	r3, r2
 800a5e8:	002e      	movs	r6, r5
 800a5ea:	6023      	str	r3, [r4, #0]
 800a5ec:	e7cc      	b.n	800a588 <_svfiprintf_r+0x94>
 800a5ee:	9b07      	ldr	r3, [sp, #28]
 800a5f0:	1d19      	adds	r1, r3, #4
 800a5f2:	681b      	ldr	r3, [r3, #0]
 800a5f4:	9107      	str	r1, [sp, #28]
 800a5f6:	2b00      	cmp	r3, #0
 800a5f8:	db01      	blt.n	800a5fe <_svfiprintf_r+0x10a>
 800a5fa:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a5fc:	e004      	b.n	800a608 <_svfiprintf_r+0x114>
 800a5fe:	425b      	negs	r3, r3
 800a600:	60e3      	str	r3, [r4, #12]
 800a602:	2302      	movs	r3, #2
 800a604:	4313      	orrs	r3, r2
 800a606:	6023      	str	r3, [r4, #0]
 800a608:	782b      	ldrb	r3, [r5, #0]
 800a60a:	2b2e      	cmp	r3, #46	@ 0x2e
 800a60c:	d10c      	bne.n	800a628 <_svfiprintf_r+0x134>
 800a60e:	786b      	ldrb	r3, [r5, #1]
 800a610:	2b2a      	cmp	r3, #42	@ 0x2a
 800a612:	d134      	bne.n	800a67e <_svfiprintf_r+0x18a>
 800a614:	9b07      	ldr	r3, [sp, #28]
 800a616:	3502      	adds	r5, #2
 800a618:	1d1a      	adds	r2, r3, #4
 800a61a:	681b      	ldr	r3, [r3, #0]
 800a61c:	9207      	str	r2, [sp, #28]
 800a61e:	2b00      	cmp	r3, #0
 800a620:	da01      	bge.n	800a626 <_svfiprintf_r+0x132>
 800a622:	2301      	movs	r3, #1
 800a624:	425b      	negs	r3, r3
 800a626:	9309      	str	r3, [sp, #36]	@ 0x24
 800a628:	4e2d      	ldr	r6, [pc, #180]	@ (800a6e0 <_svfiprintf_r+0x1ec>)
 800a62a:	2203      	movs	r2, #3
 800a62c:	0030      	movs	r0, r6
 800a62e:	7829      	ldrb	r1, [r5, #0]
 800a630:	f7fe fd12 	bl	8009058 <memchr>
 800a634:	2800      	cmp	r0, #0
 800a636:	d006      	beq.n	800a646 <_svfiprintf_r+0x152>
 800a638:	2340      	movs	r3, #64	@ 0x40
 800a63a:	1b80      	subs	r0, r0, r6
 800a63c:	4083      	lsls	r3, r0
 800a63e:	6822      	ldr	r2, [r4, #0]
 800a640:	3501      	adds	r5, #1
 800a642:	4313      	orrs	r3, r2
 800a644:	6023      	str	r3, [r4, #0]
 800a646:	7829      	ldrb	r1, [r5, #0]
 800a648:	2206      	movs	r2, #6
 800a64a:	4826      	ldr	r0, [pc, #152]	@ (800a6e4 <_svfiprintf_r+0x1f0>)
 800a64c:	1c6e      	adds	r6, r5, #1
 800a64e:	7621      	strb	r1, [r4, #24]
 800a650:	f7fe fd02 	bl	8009058 <memchr>
 800a654:	2800      	cmp	r0, #0
 800a656:	d038      	beq.n	800a6ca <_svfiprintf_r+0x1d6>
 800a658:	4b23      	ldr	r3, [pc, #140]	@ (800a6e8 <_svfiprintf_r+0x1f4>)
 800a65a:	2b00      	cmp	r3, #0
 800a65c:	d122      	bne.n	800a6a4 <_svfiprintf_r+0x1b0>
 800a65e:	2207      	movs	r2, #7
 800a660:	9b07      	ldr	r3, [sp, #28]
 800a662:	3307      	adds	r3, #7
 800a664:	4393      	bics	r3, r2
 800a666:	3308      	adds	r3, #8
 800a668:	9307      	str	r3, [sp, #28]
 800a66a:	6963      	ldr	r3, [r4, #20]
 800a66c:	9a04      	ldr	r2, [sp, #16]
 800a66e:	189b      	adds	r3, r3, r2
 800a670:	6163      	str	r3, [r4, #20]
 800a672:	e762      	b.n	800a53a <_svfiprintf_r+0x46>
 800a674:	4343      	muls	r3, r0
 800a676:	0035      	movs	r5, r6
 800a678:	2101      	movs	r1, #1
 800a67a:	189b      	adds	r3, r3, r2
 800a67c:	e7a4      	b.n	800a5c8 <_svfiprintf_r+0xd4>
 800a67e:	2300      	movs	r3, #0
 800a680:	200a      	movs	r0, #10
 800a682:	0019      	movs	r1, r3
 800a684:	3501      	adds	r5, #1
 800a686:	6063      	str	r3, [r4, #4]
 800a688:	782a      	ldrb	r2, [r5, #0]
 800a68a:	1c6e      	adds	r6, r5, #1
 800a68c:	3a30      	subs	r2, #48	@ 0x30
 800a68e:	2a09      	cmp	r2, #9
 800a690:	d903      	bls.n	800a69a <_svfiprintf_r+0x1a6>
 800a692:	2b00      	cmp	r3, #0
 800a694:	d0c8      	beq.n	800a628 <_svfiprintf_r+0x134>
 800a696:	9109      	str	r1, [sp, #36]	@ 0x24
 800a698:	e7c6      	b.n	800a628 <_svfiprintf_r+0x134>
 800a69a:	4341      	muls	r1, r0
 800a69c:	0035      	movs	r5, r6
 800a69e:	2301      	movs	r3, #1
 800a6a0:	1889      	adds	r1, r1, r2
 800a6a2:	e7f1      	b.n	800a688 <_svfiprintf_r+0x194>
 800a6a4:	aa07      	add	r2, sp, #28
 800a6a6:	9200      	str	r2, [sp, #0]
 800a6a8:	0021      	movs	r1, r4
 800a6aa:	003a      	movs	r2, r7
 800a6ac:	4b0f      	ldr	r3, [pc, #60]	@ (800a6ec <_svfiprintf_r+0x1f8>)
 800a6ae:	9803      	ldr	r0, [sp, #12]
 800a6b0:	f7fc fef8 	bl	80074a4 <_printf_float>
 800a6b4:	9004      	str	r0, [sp, #16]
 800a6b6:	9b04      	ldr	r3, [sp, #16]
 800a6b8:	3301      	adds	r3, #1
 800a6ba:	d1d6      	bne.n	800a66a <_svfiprintf_r+0x176>
 800a6bc:	89bb      	ldrh	r3, [r7, #12]
 800a6be:	980d      	ldr	r0, [sp, #52]	@ 0x34
 800a6c0:	065b      	lsls	r3, r3, #25
 800a6c2:	d500      	bpl.n	800a6c6 <_svfiprintf_r+0x1d2>
 800a6c4:	e72c      	b.n	800a520 <_svfiprintf_r+0x2c>
 800a6c6:	b021      	add	sp, #132	@ 0x84
 800a6c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a6ca:	aa07      	add	r2, sp, #28
 800a6cc:	9200      	str	r2, [sp, #0]
 800a6ce:	0021      	movs	r1, r4
 800a6d0:	003a      	movs	r2, r7
 800a6d2:	4b06      	ldr	r3, [pc, #24]	@ (800a6ec <_svfiprintf_r+0x1f8>)
 800a6d4:	9803      	ldr	r0, [sp, #12]
 800a6d6:	f7fd f993 	bl	8007a00 <_printf_i>
 800a6da:	e7eb      	b.n	800a6b4 <_svfiprintf_r+0x1c0>
 800a6dc:	0800c0fc 	.word	0x0800c0fc
 800a6e0:	0800c102 	.word	0x0800c102
 800a6e4:	0800c106 	.word	0x0800c106
 800a6e8:	080074a5 	.word	0x080074a5
 800a6ec:	0800a435 	.word	0x0800a435

0800a6f0 <malloc>:
 800a6f0:	b510      	push	{r4, lr}
 800a6f2:	4b03      	ldr	r3, [pc, #12]	@ (800a700 <malloc+0x10>)
 800a6f4:	0001      	movs	r1, r0
 800a6f6:	6818      	ldr	r0, [r3, #0]
 800a6f8:	f000 f826 	bl	800a748 <_malloc_r>
 800a6fc:	bd10      	pop	{r4, pc}
 800a6fe:	46c0      	nop			@ (mov r8, r8)
 800a700:	2000018c 	.word	0x2000018c

0800a704 <sbrk_aligned>:
 800a704:	b570      	push	{r4, r5, r6, lr}
 800a706:	4e0f      	ldr	r6, [pc, #60]	@ (800a744 <sbrk_aligned+0x40>)
 800a708:	000d      	movs	r5, r1
 800a70a:	6831      	ldr	r1, [r6, #0]
 800a70c:	0004      	movs	r4, r0
 800a70e:	2900      	cmp	r1, #0
 800a710:	d102      	bne.n	800a718 <sbrk_aligned+0x14>
 800a712:	f000 fef3 	bl	800b4fc <_sbrk_r>
 800a716:	6030      	str	r0, [r6, #0]
 800a718:	0029      	movs	r1, r5
 800a71a:	0020      	movs	r0, r4
 800a71c:	f000 feee 	bl	800b4fc <_sbrk_r>
 800a720:	1c43      	adds	r3, r0, #1
 800a722:	d103      	bne.n	800a72c <sbrk_aligned+0x28>
 800a724:	2501      	movs	r5, #1
 800a726:	426d      	negs	r5, r5
 800a728:	0028      	movs	r0, r5
 800a72a:	bd70      	pop	{r4, r5, r6, pc}
 800a72c:	2303      	movs	r3, #3
 800a72e:	1cc5      	adds	r5, r0, #3
 800a730:	439d      	bics	r5, r3
 800a732:	42a8      	cmp	r0, r5
 800a734:	d0f8      	beq.n	800a728 <sbrk_aligned+0x24>
 800a736:	1a29      	subs	r1, r5, r0
 800a738:	0020      	movs	r0, r4
 800a73a:	f000 fedf 	bl	800b4fc <_sbrk_r>
 800a73e:	3001      	adds	r0, #1
 800a740:	d1f2      	bne.n	800a728 <sbrk_aligned+0x24>
 800a742:	e7ef      	b.n	800a724 <sbrk_aligned+0x20>
 800a744:	2000044c 	.word	0x2000044c

0800a748 <_malloc_r>:
 800a748:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a74a:	2203      	movs	r2, #3
 800a74c:	1ccb      	adds	r3, r1, #3
 800a74e:	4393      	bics	r3, r2
 800a750:	3308      	adds	r3, #8
 800a752:	0005      	movs	r5, r0
 800a754:	001f      	movs	r7, r3
 800a756:	2b0c      	cmp	r3, #12
 800a758:	d234      	bcs.n	800a7c4 <_malloc_r+0x7c>
 800a75a:	270c      	movs	r7, #12
 800a75c:	42b9      	cmp	r1, r7
 800a75e:	d833      	bhi.n	800a7c8 <_malloc_r+0x80>
 800a760:	0028      	movs	r0, r5
 800a762:	f000 f935 	bl	800a9d0 <__malloc_lock>
 800a766:	4e37      	ldr	r6, [pc, #220]	@ (800a844 <_malloc_r+0xfc>)
 800a768:	6833      	ldr	r3, [r6, #0]
 800a76a:	001c      	movs	r4, r3
 800a76c:	2c00      	cmp	r4, #0
 800a76e:	d12f      	bne.n	800a7d0 <_malloc_r+0x88>
 800a770:	0039      	movs	r1, r7
 800a772:	0028      	movs	r0, r5
 800a774:	f7ff ffc6 	bl	800a704 <sbrk_aligned>
 800a778:	0004      	movs	r4, r0
 800a77a:	1c43      	adds	r3, r0, #1
 800a77c:	d15f      	bne.n	800a83e <_malloc_r+0xf6>
 800a77e:	6834      	ldr	r4, [r6, #0]
 800a780:	9400      	str	r4, [sp, #0]
 800a782:	9b00      	ldr	r3, [sp, #0]
 800a784:	2b00      	cmp	r3, #0
 800a786:	d14a      	bne.n	800a81e <_malloc_r+0xd6>
 800a788:	2c00      	cmp	r4, #0
 800a78a:	d052      	beq.n	800a832 <_malloc_r+0xea>
 800a78c:	6823      	ldr	r3, [r4, #0]
 800a78e:	0028      	movs	r0, r5
 800a790:	18e3      	adds	r3, r4, r3
 800a792:	9900      	ldr	r1, [sp, #0]
 800a794:	9301      	str	r3, [sp, #4]
 800a796:	f000 feb1 	bl	800b4fc <_sbrk_r>
 800a79a:	9b01      	ldr	r3, [sp, #4]
 800a79c:	4283      	cmp	r3, r0
 800a79e:	d148      	bne.n	800a832 <_malloc_r+0xea>
 800a7a0:	6823      	ldr	r3, [r4, #0]
 800a7a2:	0028      	movs	r0, r5
 800a7a4:	1aff      	subs	r7, r7, r3
 800a7a6:	0039      	movs	r1, r7
 800a7a8:	f7ff ffac 	bl	800a704 <sbrk_aligned>
 800a7ac:	3001      	adds	r0, #1
 800a7ae:	d040      	beq.n	800a832 <_malloc_r+0xea>
 800a7b0:	6823      	ldr	r3, [r4, #0]
 800a7b2:	19db      	adds	r3, r3, r7
 800a7b4:	6023      	str	r3, [r4, #0]
 800a7b6:	6833      	ldr	r3, [r6, #0]
 800a7b8:	685a      	ldr	r2, [r3, #4]
 800a7ba:	2a00      	cmp	r2, #0
 800a7bc:	d133      	bne.n	800a826 <_malloc_r+0xde>
 800a7be:	9b00      	ldr	r3, [sp, #0]
 800a7c0:	6033      	str	r3, [r6, #0]
 800a7c2:	e019      	b.n	800a7f8 <_malloc_r+0xb0>
 800a7c4:	2b00      	cmp	r3, #0
 800a7c6:	dac9      	bge.n	800a75c <_malloc_r+0x14>
 800a7c8:	230c      	movs	r3, #12
 800a7ca:	602b      	str	r3, [r5, #0]
 800a7cc:	2000      	movs	r0, #0
 800a7ce:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800a7d0:	6821      	ldr	r1, [r4, #0]
 800a7d2:	1bc9      	subs	r1, r1, r7
 800a7d4:	d420      	bmi.n	800a818 <_malloc_r+0xd0>
 800a7d6:	290b      	cmp	r1, #11
 800a7d8:	d90a      	bls.n	800a7f0 <_malloc_r+0xa8>
 800a7da:	19e2      	adds	r2, r4, r7
 800a7dc:	6027      	str	r7, [r4, #0]
 800a7de:	42a3      	cmp	r3, r4
 800a7e0:	d104      	bne.n	800a7ec <_malloc_r+0xa4>
 800a7e2:	6032      	str	r2, [r6, #0]
 800a7e4:	6863      	ldr	r3, [r4, #4]
 800a7e6:	6011      	str	r1, [r2, #0]
 800a7e8:	6053      	str	r3, [r2, #4]
 800a7ea:	e005      	b.n	800a7f8 <_malloc_r+0xb0>
 800a7ec:	605a      	str	r2, [r3, #4]
 800a7ee:	e7f9      	b.n	800a7e4 <_malloc_r+0x9c>
 800a7f0:	6862      	ldr	r2, [r4, #4]
 800a7f2:	42a3      	cmp	r3, r4
 800a7f4:	d10e      	bne.n	800a814 <_malloc_r+0xcc>
 800a7f6:	6032      	str	r2, [r6, #0]
 800a7f8:	0028      	movs	r0, r5
 800a7fa:	f000 f8f1 	bl	800a9e0 <__malloc_unlock>
 800a7fe:	0020      	movs	r0, r4
 800a800:	2207      	movs	r2, #7
 800a802:	300b      	adds	r0, #11
 800a804:	1d23      	adds	r3, r4, #4
 800a806:	4390      	bics	r0, r2
 800a808:	1ac2      	subs	r2, r0, r3
 800a80a:	4298      	cmp	r0, r3
 800a80c:	d0df      	beq.n	800a7ce <_malloc_r+0x86>
 800a80e:	1a1b      	subs	r3, r3, r0
 800a810:	50a3      	str	r3, [r4, r2]
 800a812:	e7dc      	b.n	800a7ce <_malloc_r+0x86>
 800a814:	605a      	str	r2, [r3, #4]
 800a816:	e7ef      	b.n	800a7f8 <_malloc_r+0xb0>
 800a818:	0023      	movs	r3, r4
 800a81a:	6864      	ldr	r4, [r4, #4]
 800a81c:	e7a6      	b.n	800a76c <_malloc_r+0x24>
 800a81e:	9c00      	ldr	r4, [sp, #0]
 800a820:	6863      	ldr	r3, [r4, #4]
 800a822:	9300      	str	r3, [sp, #0]
 800a824:	e7ad      	b.n	800a782 <_malloc_r+0x3a>
 800a826:	001a      	movs	r2, r3
 800a828:	685b      	ldr	r3, [r3, #4]
 800a82a:	42a3      	cmp	r3, r4
 800a82c:	d1fb      	bne.n	800a826 <_malloc_r+0xde>
 800a82e:	2300      	movs	r3, #0
 800a830:	e7da      	b.n	800a7e8 <_malloc_r+0xa0>
 800a832:	230c      	movs	r3, #12
 800a834:	0028      	movs	r0, r5
 800a836:	602b      	str	r3, [r5, #0]
 800a838:	f000 f8d2 	bl	800a9e0 <__malloc_unlock>
 800a83c:	e7c6      	b.n	800a7cc <_malloc_r+0x84>
 800a83e:	6007      	str	r7, [r0, #0]
 800a840:	e7da      	b.n	800a7f8 <_malloc_r+0xb0>
 800a842:	46c0      	nop			@ (mov r8, r8)
 800a844:	20000450 	.word	0x20000450

0800a848 <__ascii_mbtowc>:
 800a848:	b082      	sub	sp, #8
 800a84a:	2900      	cmp	r1, #0
 800a84c:	d100      	bne.n	800a850 <__ascii_mbtowc+0x8>
 800a84e:	a901      	add	r1, sp, #4
 800a850:	1e10      	subs	r0, r2, #0
 800a852:	d006      	beq.n	800a862 <__ascii_mbtowc+0x1a>
 800a854:	2b00      	cmp	r3, #0
 800a856:	d006      	beq.n	800a866 <__ascii_mbtowc+0x1e>
 800a858:	7813      	ldrb	r3, [r2, #0]
 800a85a:	600b      	str	r3, [r1, #0]
 800a85c:	7810      	ldrb	r0, [r2, #0]
 800a85e:	1e43      	subs	r3, r0, #1
 800a860:	4198      	sbcs	r0, r3
 800a862:	b002      	add	sp, #8
 800a864:	4770      	bx	lr
 800a866:	2002      	movs	r0, #2
 800a868:	4240      	negs	r0, r0
 800a86a:	e7fa      	b.n	800a862 <__ascii_mbtowc+0x1a>

0800a86c <__sflush_r>:
 800a86c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a86e:	220c      	movs	r2, #12
 800a870:	5e8b      	ldrsh	r3, [r1, r2]
 800a872:	0005      	movs	r5, r0
 800a874:	000c      	movs	r4, r1
 800a876:	071a      	lsls	r2, r3, #28
 800a878:	d456      	bmi.n	800a928 <__sflush_r+0xbc>
 800a87a:	684a      	ldr	r2, [r1, #4]
 800a87c:	2a00      	cmp	r2, #0
 800a87e:	dc02      	bgt.n	800a886 <__sflush_r+0x1a>
 800a880:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 800a882:	2a00      	cmp	r2, #0
 800a884:	dd4e      	ble.n	800a924 <__sflush_r+0xb8>
 800a886:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 800a888:	2f00      	cmp	r7, #0
 800a88a:	d04b      	beq.n	800a924 <__sflush_r+0xb8>
 800a88c:	2200      	movs	r2, #0
 800a88e:	2080      	movs	r0, #128	@ 0x80
 800a890:	682e      	ldr	r6, [r5, #0]
 800a892:	602a      	str	r2, [r5, #0]
 800a894:	001a      	movs	r2, r3
 800a896:	0140      	lsls	r0, r0, #5
 800a898:	6a21      	ldr	r1, [r4, #32]
 800a89a:	4002      	ands	r2, r0
 800a89c:	4203      	tst	r3, r0
 800a89e:	d033      	beq.n	800a908 <__sflush_r+0x9c>
 800a8a0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800a8a2:	89a3      	ldrh	r3, [r4, #12]
 800a8a4:	075b      	lsls	r3, r3, #29
 800a8a6:	d506      	bpl.n	800a8b6 <__sflush_r+0x4a>
 800a8a8:	6863      	ldr	r3, [r4, #4]
 800a8aa:	1ad2      	subs	r2, r2, r3
 800a8ac:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800a8ae:	2b00      	cmp	r3, #0
 800a8b0:	d001      	beq.n	800a8b6 <__sflush_r+0x4a>
 800a8b2:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800a8b4:	1ad2      	subs	r2, r2, r3
 800a8b6:	2300      	movs	r3, #0
 800a8b8:	0028      	movs	r0, r5
 800a8ba:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 800a8bc:	6a21      	ldr	r1, [r4, #32]
 800a8be:	47b8      	blx	r7
 800a8c0:	89a2      	ldrh	r2, [r4, #12]
 800a8c2:	1c43      	adds	r3, r0, #1
 800a8c4:	d106      	bne.n	800a8d4 <__sflush_r+0x68>
 800a8c6:	6829      	ldr	r1, [r5, #0]
 800a8c8:	291d      	cmp	r1, #29
 800a8ca:	d846      	bhi.n	800a95a <__sflush_r+0xee>
 800a8cc:	4b29      	ldr	r3, [pc, #164]	@ (800a974 <__sflush_r+0x108>)
 800a8ce:	40cb      	lsrs	r3, r1
 800a8d0:	07db      	lsls	r3, r3, #31
 800a8d2:	d542      	bpl.n	800a95a <__sflush_r+0xee>
 800a8d4:	2300      	movs	r3, #0
 800a8d6:	6063      	str	r3, [r4, #4]
 800a8d8:	6923      	ldr	r3, [r4, #16]
 800a8da:	6023      	str	r3, [r4, #0]
 800a8dc:	04d2      	lsls	r2, r2, #19
 800a8de:	d505      	bpl.n	800a8ec <__sflush_r+0x80>
 800a8e0:	1c43      	adds	r3, r0, #1
 800a8e2:	d102      	bne.n	800a8ea <__sflush_r+0x7e>
 800a8e4:	682b      	ldr	r3, [r5, #0]
 800a8e6:	2b00      	cmp	r3, #0
 800a8e8:	d100      	bne.n	800a8ec <__sflush_r+0x80>
 800a8ea:	6560      	str	r0, [r4, #84]	@ 0x54
 800a8ec:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a8ee:	602e      	str	r6, [r5, #0]
 800a8f0:	2900      	cmp	r1, #0
 800a8f2:	d017      	beq.n	800a924 <__sflush_r+0xb8>
 800a8f4:	0023      	movs	r3, r4
 800a8f6:	3344      	adds	r3, #68	@ 0x44
 800a8f8:	4299      	cmp	r1, r3
 800a8fa:	d002      	beq.n	800a902 <__sflush_r+0x96>
 800a8fc:	0028      	movs	r0, r5
 800a8fe:	f000 fe81 	bl	800b604 <_free_r>
 800a902:	2300      	movs	r3, #0
 800a904:	6363      	str	r3, [r4, #52]	@ 0x34
 800a906:	e00d      	b.n	800a924 <__sflush_r+0xb8>
 800a908:	2301      	movs	r3, #1
 800a90a:	0028      	movs	r0, r5
 800a90c:	47b8      	blx	r7
 800a90e:	0002      	movs	r2, r0
 800a910:	1c43      	adds	r3, r0, #1
 800a912:	d1c6      	bne.n	800a8a2 <__sflush_r+0x36>
 800a914:	682b      	ldr	r3, [r5, #0]
 800a916:	2b00      	cmp	r3, #0
 800a918:	d0c3      	beq.n	800a8a2 <__sflush_r+0x36>
 800a91a:	2b1d      	cmp	r3, #29
 800a91c:	d001      	beq.n	800a922 <__sflush_r+0xb6>
 800a91e:	2b16      	cmp	r3, #22
 800a920:	d11a      	bne.n	800a958 <__sflush_r+0xec>
 800a922:	602e      	str	r6, [r5, #0]
 800a924:	2000      	movs	r0, #0
 800a926:	e01e      	b.n	800a966 <__sflush_r+0xfa>
 800a928:	690e      	ldr	r6, [r1, #16]
 800a92a:	2e00      	cmp	r6, #0
 800a92c:	d0fa      	beq.n	800a924 <__sflush_r+0xb8>
 800a92e:	680f      	ldr	r7, [r1, #0]
 800a930:	600e      	str	r6, [r1, #0]
 800a932:	1bba      	subs	r2, r7, r6
 800a934:	9201      	str	r2, [sp, #4]
 800a936:	2200      	movs	r2, #0
 800a938:	079b      	lsls	r3, r3, #30
 800a93a:	d100      	bne.n	800a93e <__sflush_r+0xd2>
 800a93c:	694a      	ldr	r2, [r1, #20]
 800a93e:	60a2      	str	r2, [r4, #8]
 800a940:	9b01      	ldr	r3, [sp, #4]
 800a942:	2b00      	cmp	r3, #0
 800a944:	ddee      	ble.n	800a924 <__sflush_r+0xb8>
 800a946:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800a948:	0032      	movs	r2, r6
 800a94a:	001f      	movs	r7, r3
 800a94c:	0028      	movs	r0, r5
 800a94e:	9b01      	ldr	r3, [sp, #4]
 800a950:	6a21      	ldr	r1, [r4, #32]
 800a952:	47b8      	blx	r7
 800a954:	2800      	cmp	r0, #0
 800a956:	dc07      	bgt.n	800a968 <__sflush_r+0xfc>
 800a958:	89a2      	ldrh	r2, [r4, #12]
 800a95a:	2340      	movs	r3, #64	@ 0x40
 800a95c:	2001      	movs	r0, #1
 800a95e:	4313      	orrs	r3, r2
 800a960:	b21b      	sxth	r3, r3
 800a962:	81a3      	strh	r3, [r4, #12]
 800a964:	4240      	negs	r0, r0
 800a966:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800a968:	9b01      	ldr	r3, [sp, #4]
 800a96a:	1836      	adds	r6, r6, r0
 800a96c:	1a1b      	subs	r3, r3, r0
 800a96e:	9301      	str	r3, [sp, #4]
 800a970:	e7e6      	b.n	800a940 <__sflush_r+0xd4>
 800a972:	46c0      	nop			@ (mov r8, r8)
 800a974:	20400001 	.word	0x20400001

0800a978 <_fflush_r>:
 800a978:	690b      	ldr	r3, [r1, #16]
 800a97a:	b570      	push	{r4, r5, r6, lr}
 800a97c:	0005      	movs	r5, r0
 800a97e:	000c      	movs	r4, r1
 800a980:	2b00      	cmp	r3, #0
 800a982:	d102      	bne.n	800a98a <_fflush_r+0x12>
 800a984:	2500      	movs	r5, #0
 800a986:	0028      	movs	r0, r5
 800a988:	bd70      	pop	{r4, r5, r6, pc}
 800a98a:	2800      	cmp	r0, #0
 800a98c:	d004      	beq.n	800a998 <_fflush_r+0x20>
 800a98e:	6a03      	ldr	r3, [r0, #32]
 800a990:	2b00      	cmp	r3, #0
 800a992:	d101      	bne.n	800a998 <_fflush_r+0x20>
 800a994:	f7fd fc34 	bl	8008200 <__sinit>
 800a998:	220c      	movs	r2, #12
 800a99a:	5ea3      	ldrsh	r3, [r4, r2]
 800a99c:	2b00      	cmp	r3, #0
 800a99e:	d0f1      	beq.n	800a984 <_fflush_r+0xc>
 800a9a0:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800a9a2:	07d2      	lsls	r2, r2, #31
 800a9a4:	d404      	bmi.n	800a9b0 <_fflush_r+0x38>
 800a9a6:	059b      	lsls	r3, r3, #22
 800a9a8:	d402      	bmi.n	800a9b0 <_fflush_r+0x38>
 800a9aa:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a9ac:	f7fe fb4d 	bl	800904a <__retarget_lock_acquire_recursive>
 800a9b0:	0028      	movs	r0, r5
 800a9b2:	0021      	movs	r1, r4
 800a9b4:	f7ff ff5a 	bl	800a86c <__sflush_r>
 800a9b8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a9ba:	0005      	movs	r5, r0
 800a9bc:	07db      	lsls	r3, r3, #31
 800a9be:	d4e2      	bmi.n	800a986 <_fflush_r+0xe>
 800a9c0:	89a3      	ldrh	r3, [r4, #12]
 800a9c2:	059b      	lsls	r3, r3, #22
 800a9c4:	d4df      	bmi.n	800a986 <_fflush_r+0xe>
 800a9c6:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a9c8:	f7fe fb40 	bl	800904c <__retarget_lock_release_recursive>
 800a9cc:	e7db      	b.n	800a986 <_fflush_r+0xe>
	...

0800a9d0 <__malloc_lock>:
 800a9d0:	b510      	push	{r4, lr}
 800a9d2:	4802      	ldr	r0, [pc, #8]	@ (800a9dc <__malloc_lock+0xc>)
 800a9d4:	f7fe fb39 	bl	800904a <__retarget_lock_acquire_recursive>
 800a9d8:	bd10      	pop	{r4, pc}
 800a9da:	46c0      	nop			@ (mov r8, r8)
 800a9dc:	20000448 	.word	0x20000448

0800a9e0 <__malloc_unlock>:
 800a9e0:	b510      	push	{r4, lr}
 800a9e2:	4802      	ldr	r0, [pc, #8]	@ (800a9ec <__malloc_unlock+0xc>)
 800a9e4:	f7fe fb32 	bl	800904c <__retarget_lock_release_recursive>
 800a9e8:	bd10      	pop	{r4, pc}
 800a9ea:	46c0      	nop			@ (mov r8, r8)
 800a9ec:	20000448 	.word	0x20000448

0800a9f0 <_Balloc>:
 800a9f0:	b570      	push	{r4, r5, r6, lr}
 800a9f2:	69c5      	ldr	r5, [r0, #28]
 800a9f4:	0006      	movs	r6, r0
 800a9f6:	000c      	movs	r4, r1
 800a9f8:	2d00      	cmp	r5, #0
 800a9fa:	d10e      	bne.n	800aa1a <_Balloc+0x2a>
 800a9fc:	2010      	movs	r0, #16
 800a9fe:	f7ff fe77 	bl	800a6f0 <malloc>
 800aa02:	1e02      	subs	r2, r0, #0
 800aa04:	61f0      	str	r0, [r6, #28]
 800aa06:	d104      	bne.n	800aa12 <_Balloc+0x22>
 800aa08:	216b      	movs	r1, #107	@ 0x6b
 800aa0a:	4b19      	ldr	r3, [pc, #100]	@ (800aa70 <_Balloc+0x80>)
 800aa0c:	4819      	ldr	r0, [pc, #100]	@ (800aa74 <_Balloc+0x84>)
 800aa0e:	f000 fdad 	bl	800b56c <__assert_func>
 800aa12:	6045      	str	r5, [r0, #4]
 800aa14:	6085      	str	r5, [r0, #8]
 800aa16:	6005      	str	r5, [r0, #0]
 800aa18:	60c5      	str	r5, [r0, #12]
 800aa1a:	69f5      	ldr	r5, [r6, #28]
 800aa1c:	68eb      	ldr	r3, [r5, #12]
 800aa1e:	2b00      	cmp	r3, #0
 800aa20:	d013      	beq.n	800aa4a <_Balloc+0x5a>
 800aa22:	69f3      	ldr	r3, [r6, #28]
 800aa24:	00a2      	lsls	r2, r4, #2
 800aa26:	68db      	ldr	r3, [r3, #12]
 800aa28:	189b      	adds	r3, r3, r2
 800aa2a:	6818      	ldr	r0, [r3, #0]
 800aa2c:	2800      	cmp	r0, #0
 800aa2e:	d118      	bne.n	800aa62 <_Balloc+0x72>
 800aa30:	2101      	movs	r1, #1
 800aa32:	000d      	movs	r5, r1
 800aa34:	40a5      	lsls	r5, r4
 800aa36:	1d6a      	adds	r2, r5, #5
 800aa38:	0030      	movs	r0, r6
 800aa3a:	0092      	lsls	r2, r2, #2
 800aa3c:	f000 fdb4 	bl	800b5a8 <_calloc_r>
 800aa40:	2800      	cmp	r0, #0
 800aa42:	d00c      	beq.n	800aa5e <_Balloc+0x6e>
 800aa44:	6044      	str	r4, [r0, #4]
 800aa46:	6085      	str	r5, [r0, #8]
 800aa48:	e00d      	b.n	800aa66 <_Balloc+0x76>
 800aa4a:	2221      	movs	r2, #33	@ 0x21
 800aa4c:	2104      	movs	r1, #4
 800aa4e:	0030      	movs	r0, r6
 800aa50:	f000 fdaa 	bl	800b5a8 <_calloc_r>
 800aa54:	69f3      	ldr	r3, [r6, #28]
 800aa56:	60e8      	str	r0, [r5, #12]
 800aa58:	68db      	ldr	r3, [r3, #12]
 800aa5a:	2b00      	cmp	r3, #0
 800aa5c:	d1e1      	bne.n	800aa22 <_Balloc+0x32>
 800aa5e:	2000      	movs	r0, #0
 800aa60:	bd70      	pop	{r4, r5, r6, pc}
 800aa62:	6802      	ldr	r2, [r0, #0]
 800aa64:	601a      	str	r2, [r3, #0]
 800aa66:	2300      	movs	r3, #0
 800aa68:	6103      	str	r3, [r0, #16]
 800aa6a:	60c3      	str	r3, [r0, #12]
 800aa6c:	e7f8      	b.n	800aa60 <_Balloc+0x70>
 800aa6e:	46c0      	nop			@ (mov r8, r8)
 800aa70:	0800c01c 	.word	0x0800c01c
 800aa74:	0800c10d 	.word	0x0800c10d

0800aa78 <_Bfree>:
 800aa78:	b570      	push	{r4, r5, r6, lr}
 800aa7a:	69c6      	ldr	r6, [r0, #28]
 800aa7c:	0005      	movs	r5, r0
 800aa7e:	000c      	movs	r4, r1
 800aa80:	2e00      	cmp	r6, #0
 800aa82:	d10e      	bne.n	800aaa2 <_Bfree+0x2a>
 800aa84:	2010      	movs	r0, #16
 800aa86:	f7ff fe33 	bl	800a6f0 <malloc>
 800aa8a:	1e02      	subs	r2, r0, #0
 800aa8c:	61e8      	str	r0, [r5, #28]
 800aa8e:	d104      	bne.n	800aa9a <_Bfree+0x22>
 800aa90:	218f      	movs	r1, #143	@ 0x8f
 800aa92:	4b09      	ldr	r3, [pc, #36]	@ (800aab8 <_Bfree+0x40>)
 800aa94:	4809      	ldr	r0, [pc, #36]	@ (800aabc <_Bfree+0x44>)
 800aa96:	f000 fd69 	bl	800b56c <__assert_func>
 800aa9a:	6046      	str	r6, [r0, #4]
 800aa9c:	6086      	str	r6, [r0, #8]
 800aa9e:	6006      	str	r6, [r0, #0]
 800aaa0:	60c6      	str	r6, [r0, #12]
 800aaa2:	2c00      	cmp	r4, #0
 800aaa4:	d007      	beq.n	800aab6 <_Bfree+0x3e>
 800aaa6:	69eb      	ldr	r3, [r5, #28]
 800aaa8:	6862      	ldr	r2, [r4, #4]
 800aaaa:	68db      	ldr	r3, [r3, #12]
 800aaac:	0092      	lsls	r2, r2, #2
 800aaae:	189b      	adds	r3, r3, r2
 800aab0:	681a      	ldr	r2, [r3, #0]
 800aab2:	6022      	str	r2, [r4, #0]
 800aab4:	601c      	str	r4, [r3, #0]
 800aab6:	bd70      	pop	{r4, r5, r6, pc}
 800aab8:	0800c01c 	.word	0x0800c01c
 800aabc:	0800c10d 	.word	0x0800c10d

0800aac0 <__multadd>:
 800aac0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800aac2:	000f      	movs	r7, r1
 800aac4:	9001      	str	r0, [sp, #4]
 800aac6:	000c      	movs	r4, r1
 800aac8:	001e      	movs	r6, r3
 800aaca:	2000      	movs	r0, #0
 800aacc:	690d      	ldr	r5, [r1, #16]
 800aace:	3714      	adds	r7, #20
 800aad0:	683b      	ldr	r3, [r7, #0]
 800aad2:	3001      	adds	r0, #1
 800aad4:	b299      	uxth	r1, r3
 800aad6:	4351      	muls	r1, r2
 800aad8:	0c1b      	lsrs	r3, r3, #16
 800aada:	4353      	muls	r3, r2
 800aadc:	1989      	adds	r1, r1, r6
 800aade:	0c0e      	lsrs	r6, r1, #16
 800aae0:	199b      	adds	r3, r3, r6
 800aae2:	0c1e      	lsrs	r6, r3, #16
 800aae4:	b289      	uxth	r1, r1
 800aae6:	041b      	lsls	r3, r3, #16
 800aae8:	185b      	adds	r3, r3, r1
 800aaea:	c708      	stmia	r7!, {r3}
 800aaec:	4285      	cmp	r5, r0
 800aaee:	dcef      	bgt.n	800aad0 <__multadd+0x10>
 800aaf0:	2e00      	cmp	r6, #0
 800aaf2:	d022      	beq.n	800ab3a <__multadd+0x7a>
 800aaf4:	68a3      	ldr	r3, [r4, #8]
 800aaf6:	42ab      	cmp	r3, r5
 800aaf8:	dc19      	bgt.n	800ab2e <__multadd+0x6e>
 800aafa:	6861      	ldr	r1, [r4, #4]
 800aafc:	9801      	ldr	r0, [sp, #4]
 800aafe:	3101      	adds	r1, #1
 800ab00:	f7ff ff76 	bl	800a9f0 <_Balloc>
 800ab04:	1e07      	subs	r7, r0, #0
 800ab06:	d105      	bne.n	800ab14 <__multadd+0x54>
 800ab08:	003a      	movs	r2, r7
 800ab0a:	21ba      	movs	r1, #186	@ 0xba
 800ab0c:	4b0c      	ldr	r3, [pc, #48]	@ (800ab40 <__multadd+0x80>)
 800ab0e:	480d      	ldr	r0, [pc, #52]	@ (800ab44 <__multadd+0x84>)
 800ab10:	f000 fd2c 	bl	800b56c <__assert_func>
 800ab14:	0021      	movs	r1, r4
 800ab16:	6922      	ldr	r2, [r4, #16]
 800ab18:	310c      	adds	r1, #12
 800ab1a:	3202      	adds	r2, #2
 800ab1c:	0092      	lsls	r2, r2, #2
 800ab1e:	300c      	adds	r0, #12
 800ab20:	f7fe faa5 	bl	800906e <memcpy>
 800ab24:	0021      	movs	r1, r4
 800ab26:	9801      	ldr	r0, [sp, #4]
 800ab28:	f7ff ffa6 	bl	800aa78 <_Bfree>
 800ab2c:	003c      	movs	r4, r7
 800ab2e:	1d2b      	adds	r3, r5, #4
 800ab30:	009b      	lsls	r3, r3, #2
 800ab32:	18e3      	adds	r3, r4, r3
 800ab34:	3501      	adds	r5, #1
 800ab36:	605e      	str	r6, [r3, #4]
 800ab38:	6125      	str	r5, [r4, #16]
 800ab3a:	0020      	movs	r0, r4
 800ab3c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800ab3e:	46c0      	nop			@ (mov r8, r8)
 800ab40:	0800c08b 	.word	0x0800c08b
 800ab44:	0800c10d 	.word	0x0800c10d

0800ab48 <__s2b>:
 800ab48:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ab4a:	0007      	movs	r7, r0
 800ab4c:	0018      	movs	r0, r3
 800ab4e:	000c      	movs	r4, r1
 800ab50:	3008      	adds	r0, #8
 800ab52:	2109      	movs	r1, #9
 800ab54:	9301      	str	r3, [sp, #4]
 800ab56:	0015      	movs	r5, r2
 800ab58:	f7f5 fb78 	bl	800024c <__divsi3>
 800ab5c:	2301      	movs	r3, #1
 800ab5e:	2100      	movs	r1, #0
 800ab60:	4283      	cmp	r3, r0
 800ab62:	db0a      	blt.n	800ab7a <__s2b+0x32>
 800ab64:	0038      	movs	r0, r7
 800ab66:	f7ff ff43 	bl	800a9f0 <_Balloc>
 800ab6a:	1e01      	subs	r1, r0, #0
 800ab6c:	d108      	bne.n	800ab80 <__s2b+0x38>
 800ab6e:	000a      	movs	r2, r1
 800ab70:	4b19      	ldr	r3, [pc, #100]	@ (800abd8 <__s2b+0x90>)
 800ab72:	481a      	ldr	r0, [pc, #104]	@ (800abdc <__s2b+0x94>)
 800ab74:	31d3      	adds	r1, #211	@ 0xd3
 800ab76:	f000 fcf9 	bl	800b56c <__assert_func>
 800ab7a:	005b      	lsls	r3, r3, #1
 800ab7c:	3101      	adds	r1, #1
 800ab7e:	e7ef      	b.n	800ab60 <__s2b+0x18>
 800ab80:	9b08      	ldr	r3, [sp, #32]
 800ab82:	6143      	str	r3, [r0, #20]
 800ab84:	2301      	movs	r3, #1
 800ab86:	6103      	str	r3, [r0, #16]
 800ab88:	2d09      	cmp	r5, #9
 800ab8a:	dd18      	ble.n	800abbe <__s2b+0x76>
 800ab8c:	0023      	movs	r3, r4
 800ab8e:	3309      	adds	r3, #9
 800ab90:	001e      	movs	r6, r3
 800ab92:	9300      	str	r3, [sp, #0]
 800ab94:	1964      	adds	r4, r4, r5
 800ab96:	7833      	ldrb	r3, [r6, #0]
 800ab98:	220a      	movs	r2, #10
 800ab9a:	0038      	movs	r0, r7
 800ab9c:	3b30      	subs	r3, #48	@ 0x30
 800ab9e:	f7ff ff8f 	bl	800aac0 <__multadd>
 800aba2:	3601      	adds	r6, #1
 800aba4:	0001      	movs	r1, r0
 800aba6:	42a6      	cmp	r6, r4
 800aba8:	d1f5      	bne.n	800ab96 <__s2b+0x4e>
 800abaa:	002c      	movs	r4, r5
 800abac:	9b00      	ldr	r3, [sp, #0]
 800abae:	3c08      	subs	r4, #8
 800abb0:	191c      	adds	r4, r3, r4
 800abb2:	002e      	movs	r6, r5
 800abb4:	9b01      	ldr	r3, [sp, #4]
 800abb6:	429e      	cmp	r6, r3
 800abb8:	db04      	blt.n	800abc4 <__s2b+0x7c>
 800abba:	0008      	movs	r0, r1
 800abbc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800abbe:	2509      	movs	r5, #9
 800abc0:	340a      	adds	r4, #10
 800abc2:	e7f6      	b.n	800abb2 <__s2b+0x6a>
 800abc4:	1b63      	subs	r3, r4, r5
 800abc6:	5d9b      	ldrb	r3, [r3, r6]
 800abc8:	220a      	movs	r2, #10
 800abca:	0038      	movs	r0, r7
 800abcc:	3b30      	subs	r3, #48	@ 0x30
 800abce:	f7ff ff77 	bl	800aac0 <__multadd>
 800abd2:	3601      	adds	r6, #1
 800abd4:	0001      	movs	r1, r0
 800abd6:	e7ed      	b.n	800abb4 <__s2b+0x6c>
 800abd8:	0800c08b 	.word	0x0800c08b
 800abdc:	0800c10d 	.word	0x0800c10d

0800abe0 <__hi0bits>:
 800abe0:	2280      	movs	r2, #128	@ 0x80
 800abe2:	0003      	movs	r3, r0
 800abe4:	0252      	lsls	r2, r2, #9
 800abe6:	2000      	movs	r0, #0
 800abe8:	4293      	cmp	r3, r2
 800abea:	d201      	bcs.n	800abf0 <__hi0bits+0x10>
 800abec:	041b      	lsls	r3, r3, #16
 800abee:	3010      	adds	r0, #16
 800abf0:	2280      	movs	r2, #128	@ 0x80
 800abf2:	0452      	lsls	r2, r2, #17
 800abf4:	4293      	cmp	r3, r2
 800abf6:	d201      	bcs.n	800abfc <__hi0bits+0x1c>
 800abf8:	3008      	adds	r0, #8
 800abfa:	021b      	lsls	r3, r3, #8
 800abfc:	2280      	movs	r2, #128	@ 0x80
 800abfe:	0552      	lsls	r2, r2, #21
 800ac00:	4293      	cmp	r3, r2
 800ac02:	d201      	bcs.n	800ac08 <__hi0bits+0x28>
 800ac04:	3004      	adds	r0, #4
 800ac06:	011b      	lsls	r3, r3, #4
 800ac08:	2280      	movs	r2, #128	@ 0x80
 800ac0a:	05d2      	lsls	r2, r2, #23
 800ac0c:	4293      	cmp	r3, r2
 800ac0e:	d201      	bcs.n	800ac14 <__hi0bits+0x34>
 800ac10:	3002      	adds	r0, #2
 800ac12:	009b      	lsls	r3, r3, #2
 800ac14:	2b00      	cmp	r3, #0
 800ac16:	db03      	blt.n	800ac20 <__hi0bits+0x40>
 800ac18:	3001      	adds	r0, #1
 800ac1a:	4213      	tst	r3, r2
 800ac1c:	d100      	bne.n	800ac20 <__hi0bits+0x40>
 800ac1e:	2020      	movs	r0, #32
 800ac20:	4770      	bx	lr

0800ac22 <__lo0bits>:
 800ac22:	6803      	ldr	r3, [r0, #0]
 800ac24:	0001      	movs	r1, r0
 800ac26:	2207      	movs	r2, #7
 800ac28:	0018      	movs	r0, r3
 800ac2a:	4010      	ands	r0, r2
 800ac2c:	4213      	tst	r3, r2
 800ac2e:	d00d      	beq.n	800ac4c <__lo0bits+0x2a>
 800ac30:	3a06      	subs	r2, #6
 800ac32:	2000      	movs	r0, #0
 800ac34:	4213      	tst	r3, r2
 800ac36:	d105      	bne.n	800ac44 <__lo0bits+0x22>
 800ac38:	3002      	adds	r0, #2
 800ac3a:	4203      	tst	r3, r0
 800ac3c:	d003      	beq.n	800ac46 <__lo0bits+0x24>
 800ac3e:	40d3      	lsrs	r3, r2
 800ac40:	0010      	movs	r0, r2
 800ac42:	600b      	str	r3, [r1, #0]
 800ac44:	4770      	bx	lr
 800ac46:	089b      	lsrs	r3, r3, #2
 800ac48:	600b      	str	r3, [r1, #0]
 800ac4a:	e7fb      	b.n	800ac44 <__lo0bits+0x22>
 800ac4c:	b29a      	uxth	r2, r3
 800ac4e:	2a00      	cmp	r2, #0
 800ac50:	d101      	bne.n	800ac56 <__lo0bits+0x34>
 800ac52:	2010      	movs	r0, #16
 800ac54:	0c1b      	lsrs	r3, r3, #16
 800ac56:	b2da      	uxtb	r2, r3
 800ac58:	2a00      	cmp	r2, #0
 800ac5a:	d101      	bne.n	800ac60 <__lo0bits+0x3e>
 800ac5c:	3008      	adds	r0, #8
 800ac5e:	0a1b      	lsrs	r3, r3, #8
 800ac60:	071a      	lsls	r2, r3, #28
 800ac62:	d101      	bne.n	800ac68 <__lo0bits+0x46>
 800ac64:	3004      	adds	r0, #4
 800ac66:	091b      	lsrs	r3, r3, #4
 800ac68:	079a      	lsls	r2, r3, #30
 800ac6a:	d101      	bne.n	800ac70 <__lo0bits+0x4e>
 800ac6c:	3002      	adds	r0, #2
 800ac6e:	089b      	lsrs	r3, r3, #2
 800ac70:	07da      	lsls	r2, r3, #31
 800ac72:	d4e9      	bmi.n	800ac48 <__lo0bits+0x26>
 800ac74:	3001      	adds	r0, #1
 800ac76:	085b      	lsrs	r3, r3, #1
 800ac78:	d1e6      	bne.n	800ac48 <__lo0bits+0x26>
 800ac7a:	2020      	movs	r0, #32
 800ac7c:	e7e2      	b.n	800ac44 <__lo0bits+0x22>
	...

0800ac80 <__i2b>:
 800ac80:	b510      	push	{r4, lr}
 800ac82:	000c      	movs	r4, r1
 800ac84:	2101      	movs	r1, #1
 800ac86:	f7ff feb3 	bl	800a9f0 <_Balloc>
 800ac8a:	2800      	cmp	r0, #0
 800ac8c:	d107      	bne.n	800ac9e <__i2b+0x1e>
 800ac8e:	2146      	movs	r1, #70	@ 0x46
 800ac90:	4c05      	ldr	r4, [pc, #20]	@ (800aca8 <__i2b+0x28>)
 800ac92:	0002      	movs	r2, r0
 800ac94:	4b05      	ldr	r3, [pc, #20]	@ (800acac <__i2b+0x2c>)
 800ac96:	0020      	movs	r0, r4
 800ac98:	31ff      	adds	r1, #255	@ 0xff
 800ac9a:	f000 fc67 	bl	800b56c <__assert_func>
 800ac9e:	2301      	movs	r3, #1
 800aca0:	6144      	str	r4, [r0, #20]
 800aca2:	6103      	str	r3, [r0, #16]
 800aca4:	bd10      	pop	{r4, pc}
 800aca6:	46c0      	nop			@ (mov r8, r8)
 800aca8:	0800c10d 	.word	0x0800c10d
 800acac:	0800c08b 	.word	0x0800c08b

0800acb0 <__multiply>:
 800acb0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800acb2:	0014      	movs	r4, r2
 800acb4:	690a      	ldr	r2, [r1, #16]
 800acb6:	6923      	ldr	r3, [r4, #16]
 800acb8:	000d      	movs	r5, r1
 800acba:	b089      	sub	sp, #36	@ 0x24
 800acbc:	429a      	cmp	r2, r3
 800acbe:	db02      	blt.n	800acc6 <__multiply+0x16>
 800acc0:	0023      	movs	r3, r4
 800acc2:	000c      	movs	r4, r1
 800acc4:	001d      	movs	r5, r3
 800acc6:	6927      	ldr	r7, [r4, #16]
 800acc8:	692e      	ldr	r6, [r5, #16]
 800acca:	6861      	ldr	r1, [r4, #4]
 800accc:	19bb      	adds	r3, r7, r6
 800acce:	9300      	str	r3, [sp, #0]
 800acd0:	68a3      	ldr	r3, [r4, #8]
 800acd2:	19ba      	adds	r2, r7, r6
 800acd4:	4293      	cmp	r3, r2
 800acd6:	da00      	bge.n	800acda <__multiply+0x2a>
 800acd8:	3101      	adds	r1, #1
 800acda:	f7ff fe89 	bl	800a9f0 <_Balloc>
 800acde:	4684      	mov	ip, r0
 800ace0:	2800      	cmp	r0, #0
 800ace2:	d106      	bne.n	800acf2 <__multiply+0x42>
 800ace4:	21b1      	movs	r1, #177	@ 0xb1
 800ace6:	4662      	mov	r2, ip
 800ace8:	4b44      	ldr	r3, [pc, #272]	@ (800adfc <__multiply+0x14c>)
 800acea:	4845      	ldr	r0, [pc, #276]	@ (800ae00 <__multiply+0x150>)
 800acec:	0049      	lsls	r1, r1, #1
 800acee:	f000 fc3d 	bl	800b56c <__assert_func>
 800acf2:	0002      	movs	r2, r0
 800acf4:	19bb      	adds	r3, r7, r6
 800acf6:	3214      	adds	r2, #20
 800acf8:	009b      	lsls	r3, r3, #2
 800acfa:	18d3      	adds	r3, r2, r3
 800acfc:	9301      	str	r3, [sp, #4]
 800acfe:	2100      	movs	r1, #0
 800ad00:	0013      	movs	r3, r2
 800ad02:	9801      	ldr	r0, [sp, #4]
 800ad04:	4283      	cmp	r3, r0
 800ad06:	d328      	bcc.n	800ad5a <__multiply+0xaa>
 800ad08:	0023      	movs	r3, r4
 800ad0a:	00bf      	lsls	r7, r7, #2
 800ad0c:	3314      	adds	r3, #20
 800ad0e:	9304      	str	r3, [sp, #16]
 800ad10:	3514      	adds	r5, #20
 800ad12:	19db      	adds	r3, r3, r7
 800ad14:	00b6      	lsls	r6, r6, #2
 800ad16:	9302      	str	r3, [sp, #8]
 800ad18:	19ab      	adds	r3, r5, r6
 800ad1a:	9307      	str	r3, [sp, #28]
 800ad1c:	2304      	movs	r3, #4
 800ad1e:	9305      	str	r3, [sp, #20]
 800ad20:	0023      	movs	r3, r4
 800ad22:	9902      	ldr	r1, [sp, #8]
 800ad24:	3315      	adds	r3, #21
 800ad26:	4299      	cmp	r1, r3
 800ad28:	d305      	bcc.n	800ad36 <__multiply+0x86>
 800ad2a:	1b0c      	subs	r4, r1, r4
 800ad2c:	3c15      	subs	r4, #21
 800ad2e:	08a4      	lsrs	r4, r4, #2
 800ad30:	3401      	adds	r4, #1
 800ad32:	00a3      	lsls	r3, r4, #2
 800ad34:	9305      	str	r3, [sp, #20]
 800ad36:	9b07      	ldr	r3, [sp, #28]
 800ad38:	429d      	cmp	r5, r3
 800ad3a:	d310      	bcc.n	800ad5e <__multiply+0xae>
 800ad3c:	9b00      	ldr	r3, [sp, #0]
 800ad3e:	2b00      	cmp	r3, #0
 800ad40:	dd05      	ble.n	800ad4e <__multiply+0x9e>
 800ad42:	9b01      	ldr	r3, [sp, #4]
 800ad44:	3b04      	subs	r3, #4
 800ad46:	9301      	str	r3, [sp, #4]
 800ad48:	681b      	ldr	r3, [r3, #0]
 800ad4a:	2b00      	cmp	r3, #0
 800ad4c:	d052      	beq.n	800adf4 <__multiply+0x144>
 800ad4e:	4663      	mov	r3, ip
 800ad50:	4660      	mov	r0, ip
 800ad52:	9a00      	ldr	r2, [sp, #0]
 800ad54:	611a      	str	r2, [r3, #16]
 800ad56:	b009      	add	sp, #36	@ 0x24
 800ad58:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ad5a:	c302      	stmia	r3!, {r1}
 800ad5c:	e7d1      	b.n	800ad02 <__multiply+0x52>
 800ad5e:	682c      	ldr	r4, [r5, #0]
 800ad60:	b2a4      	uxth	r4, r4
 800ad62:	2c00      	cmp	r4, #0
 800ad64:	d01f      	beq.n	800ada6 <__multiply+0xf6>
 800ad66:	2300      	movs	r3, #0
 800ad68:	0017      	movs	r7, r2
 800ad6a:	9e04      	ldr	r6, [sp, #16]
 800ad6c:	9303      	str	r3, [sp, #12]
 800ad6e:	ce08      	ldmia	r6!, {r3}
 800ad70:	6839      	ldr	r1, [r7, #0]
 800ad72:	9306      	str	r3, [sp, #24]
 800ad74:	466b      	mov	r3, sp
 800ad76:	8b1b      	ldrh	r3, [r3, #24]
 800ad78:	b288      	uxth	r0, r1
 800ad7a:	4363      	muls	r3, r4
 800ad7c:	181b      	adds	r3, r3, r0
 800ad7e:	9803      	ldr	r0, [sp, #12]
 800ad80:	0c09      	lsrs	r1, r1, #16
 800ad82:	181b      	adds	r3, r3, r0
 800ad84:	9806      	ldr	r0, [sp, #24]
 800ad86:	0c00      	lsrs	r0, r0, #16
 800ad88:	4360      	muls	r0, r4
 800ad8a:	1840      	adds	r0, r0, r1
 800ad8c:	0c19      	lsrs	r1, r3, #16
 800ad8e:	1841      	adds	r1, r0, r1
 800ad90:	0c08      	lsrs	r0, r1, #16
 800ad92:	b29b      	uxth	r3, r3
 800ad94:	0409      	lsls	r1, r1, #16
 800ad96:	4319      	orrs	r1, r3
 800ad98:	9b02      	ldr	r3, [sp, #8]
 800ad9a:	9003      	str	r0, [sp, #12]
 800ad9c:	c702      	stmia	r7!, {r1}
 800ad9e:	42b3      	cmp	r3, r6
 800ada0:	d8e5      	bhi.n	800ad6e <__multiply+0xbe>
 800ada2:	9b05      	ldr	r3, [sp, #20]
 800ada4:	50d0      	str	r0, [r2, r3]
 800ada6:	682c      	ldr	r4, [r5, #0]
 800ada8:	0c24      	lsrs	r4, r4, #16
 800adaa:	d020      	beq.n	800adee <__multiply+0x13e>
 800adac:	2100      	movs	r1, #0
 800adae:	0010      	movs	r0, r2
 800adb0:	6813      	ldr	r3, [r2, #0]
 800adb2:	9e04      	ldr	r6, [sp, #16]
 800adb4:	9103      	str	r1, [sp, #12]
 800adb6:	6831      	ldr	r1, [r6, #0]
 800adb8:	6807      	ldr	r7, [r0, #0]
 800adba:	b289      	uxth	r1, r1
 800adbc:	4361      	muls	r1, r4
 800adbe:	0c3f      	lsrs	r7, r7, #16
 800adc0:	19c9      	adds	r1, r1, r7
 800adc2:	9f03      	ldr	r7, [sp, #12]
 800adc4:	b29b      	uxth	r3, r3
 800adc6:	19c9      	adds	r1, r1, r7
 800adc8:	040f      	lsls	r7, r1, #16
 800adca:	431f      	orrs	r7, r3
 800adcc:	6007      	str	r7, [r0, #0]
 800adce:	ce80      	ldmia	r6!, {r7}
 800add0:	6843      	ldr	r3, [r0, #4]
 800add2:	0c3f      	lsrs	r7, r7, #16
 800add4:	4367      	muls	r7, r4
 800add6:	b29b      	uxth	r3, r3
 800add8:	0c09      	lsrs	r1, r1, #16
 800adda:	18fb      	adds	r3, r7, r3
 800addc:	185b      	adds	r3, r3, r1
 800adde:	0c19      	lsrs	r1, r3, #16
 800ade0:	9103      	str	r1, [sp, #12]
 800ade2:	9902      	ldr	r1, [sp, #8]
 800ade4:	3004      	adds	r0, #4
 800ade6:	42b1      	cmp	r1, r6
 800ade8:	d8e5      	bhi.n	800adb6 <__multiply+0x106>
 800adea:	9905      	ldr	r1, [sp, #20]
 800adec:	5053      	str	r3, [r2, r1]
 800adee:	3504      	adds	r5, #4
 800adf0:	3204      	adds	r2, #4
 800adf2:	e7a0      	b.n	800ad36 <__multiply+0x86>
 800adf4:	9b00      	ldr	r3, [sp, #0]
 800adf6:	3b01      	subs	r3, #1
 800adf8:	9300      	str	r3, [sp, #0]
 800adfa:	e79f      	b.n	800ad3c <__multiply+0x8c>
 800adfc:	0800c08b 	.word	0x0800c08b
 800ae00:	0800c10d 	.word	0x0800c10d

0800ae04 <__pow5mult>:
 800ae04:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ae06:	2303      	movs	r3, #3
 800ae08:	0015      	movs	r5, r2
 800ae0a:	0007      	movs	r7, r0
 800ae0c:	000e      	movs	r6, r1
 800ae0e:	401a      	ands	r2, r3
 800ae10:	421d      	tst	r5, r3
 800ae12:	d008      	beq.n	800ae26 <__pow5mult+0x22>
 800ae14:	4925      	ldr	r1, [pc, #148]	@ (800aeac <__pow5mult+0xa8>)
 800ae16:	3a01      	subs	r2, #1
 800ae18:	0092      	lsls	r2, r2, #2
 800ae1a:	5852      	ldr	r2, [r2, r1]
 800ae1c:	2300      	movs	r3, #0
 800ae1e:	0031      	movs	r1, r6
 800ae20:	f7ff fe4e 	bl	800aac0 <__multadd>
 800ae24:	0006      	movs	r6, r0
 800ae26:	10ad      	asrs	r5, r5, #2
 800ae28:	d03d      	beq.n	800aea6 <__pow5mult+0xa2>
 800ae2a:	69fc      	ldr	r4, [r7, #28]
 800ae2c:	2c00      	cmp	r4, #0
 800ae2e:	d10f      	bne.n	800ae50 <__pow5mult+0x4c>
 800ae30:	2010      	movs	r0, #16
 800ae32:	f7ff fc5d 	bl	800a6f0 <malloc>
 800ae36:	1e02      	subs	r2, r0, #0
 800ae38:	61f8      	str	r0, [r7, #28]
 800ae3a:	d105      	bne.n	800ae48 <__pow5mult+0x44>
 800ae3c:	21b4      	movs	r1, #180	@ 0xb4
 800ae3e:	4b1c      	ldr	r3, [pc, #112]	@ (800aeb0 <__pow5mult+0xac>)
 800ae40:	481c      	ldr	r0, [pc, #112]	@ (800aeb4 <__pow5mult+0xb0>)
 800ae42:	31ff      	adds	r1, #255	@ 0xff
 800ae44:	f000 fb92 	bl	800b56c <__assert_func>
 800ae48:	6044      	str	r4, [r0, #4]
 800ae4a:	6084      	str	r4, [r0, #8]
 800ae4c:	6004      	str	r4, [r0, #0]
 800ae4e:	60c4      	str	r4, [r0, #12]
 800ae50:	69fb      	ldr	r3, [r7, #28]
 800ae52:	689c      	ldr	r4, [r3, #8]
 800ae54:	9301      	str	r3, [sp, #4]
 800ae56:	2c00      	cmp	r4, #0
 800ae58:	d108      	bne.n	800ae6c <__pow5mult+0x68>
 800ae5a:	0038      	movs	r0, r7
 800ae5c:	4916      	ldr	r1, [pc, #88]	@ (800aeb8 <__pow5mult+0xb4>)
 800ae5e:	f7ff ff0f 	bl	800ac80 <__i2b>
 800ae62:	9b01      	ldr	r3, [sp, #4]
 800ae64:	0004      	movs	r4, r0
 800ae66:	6098      	str	r0, [r3, #8]
 800ae68:	2300      	movs	r3, #0
 800ae6a:	6003      	str	r3, [r0, #0]
 800ae6c:	2301      	movs	r3, #1
 800ae6e:	421d      	tst	r5, r3
 800ae70:	d00a      	beq.n	800ae88 <__pow5mult+0x84>
 800ae72:	0031      	movs	r1, r6
 800ae74:	0022      	movs	r2, r4
 800ae76:	0038      	movs	r0, r7
 800ae78:	f7ff ff1a 	bl	800acb0 <__multiply>
 800ae7c:	0031      	movs	r1, r6
 800ae7e:	9001      	str	r0, [sp, #4]
 800ae80:	0038      	movs	r0, r7
 800ae82:	f7ff fdf9 	bl	800aa78 <_Bfree>
 800ae86:	9e01      	ldr	r6, [sp, #4]
 800ae88:	106d      	asrs	r5, r5, #1
 800ae8a:	d00c      	beq.n	800aea6 <__pow5mult+0xa2>
 800ae8c:	6820      	ldr	r0, [r4, #0]
 800ae8e:	2800      	cmp	r0, #0
 800ae90:	d107      	bne.n	800aea2 <__pow5mult+0x9e>
 800ae92:	0022      	movs	r2, r4
 800ae94:	0021      	movs	r1, r4
 800ae96:	0038      	movs	r0, r7
 800ae98:	f7ff ff0a 	bl	800acb0 <__multiply>
 800ae9c:	2300      	movs	r3, #0
 800ae9e:	6020      	str	r0, [r4, #0]
 800aea0:	6003      	str	r3, [r0, #0]
 800aea2:	0004      	movs	r4, r0
 800aea4:	e7e2      	b.n	800ae6c <__pow5mult+0x68>
 800aea6:	0030      	movs	r0, r6
 800aea8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800aeaa:	46c0      	nop			@ (mov r8, r8)
 800aeac:	0800c2fc 	.word	0x0800c2fc
 800aeb0:	0800c01c 	.word	0x0800c01c
 800aeb4:	0800c10d 	.word	0x0800c10d
 800aeb8:	00000271 	.word	0x00000271

0800aebc <__lshift>:
 800aebc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800aebe:	000c      	movs	r4, r1
 800aec0:	0016      	movs	r6, r2
 800aec2:	6923      	ldr	r3, [r4, #16]
 800aec4:	1157      	asrs	r7, r2, #5
 800aec6:	b085      	sub	sp, #20
 800aec8:	18fb      	adds	r3, r7, r3
 800aeca:	9301      	str	r3, [sp, #4]
 800aecc:	3301      	adds	r3, #1
 800aece:	9300      	str	r3, [sp, #0]
 800aed0:	6849      	ldr	r1, [r1, #4]
 800aed2:	68a3      	ldr	r3, [r4, #8]
 800aed4:	9002      	str	r0, [sp, #8]
 800aed6:	9a00      	ldr	r2, [sp, #0]
 800aed8:	4293      	cmp	r3, r2
 800aeda:	db10      	blt.n	800aefe <__lshift+0x42>
 800aedc:	9802      	ldr	r0, [sp, #8]
 800aede:	f7ff fd87 	bl	800a9f0 <_Balloc>
 800aee2:	2300      	movs	r3, #0
 800aee4:	0001      	movs	r1, r0
 800aee6:	0005      	movs	r5, r0
 800aee8:	001a      	movs	r2, r3
 800aeea:	3114      	adds	r1, #20
 800aeec:	4298      	cmp	r0, r3
 800aeee:	d10c      	bne.n	800af0a <__lshift+0x4e>
 800aef0:	21ef      	movs	r1, #239	@ 0xef
 800aef2:	002a      	movs	r2, r5
 800aef4:	4b25      	ldr	r3, [pc, #148]	@ (800af8c <__lshift+0xd0>)
 800aef6:	4826      	ldr	r0, [pc, #152]	@ (800af90 <__lshift+0xd4>)
 800aef8:	0049      	lsls	r1, r1, #1
 800aefa:	f000 fb37 	bl	800b56c <__assert_func>
 800aefe:	3101      	adds	r1, #1
 800af00:	005b      	lsls	r3, r3, #1
 800af02:	e7e8      	b.n	800aed6 <__lshift+0x1a>
 800af04:	0098      	lsls	r0, r3, #2
 800af06:	500a      	str	r2, [r1, r0]
 800af08:	3301      	adds	r3, #1
 800af0a:	42bb      	cmp	r3, r7
 800af0c:	dbfa      	blt.n	800af04 <__lshift+0x48>
 800af0e:	43fb      	mvns	r3, r7
 800af10:	17db      	asrs	r3, r3, #31
 800af12:	401f      	ands	r7, r3
 800af14:	00bf      	lsls	r7, r7, #2
 800af16:	0023      	movs	r3, r4
 800af18:	201f      	movs	r0, #31
 800af1a:	19c9      	adds	r1, r1, r7
 800af1c:	0037      	movs	r7, r6
 800af1e:	6922      	ldr	r2, [r4, #16]
 800af20:	3314      	adds	r3, #20
 800af22:	0092      	lsls	r2, r2, #2
 800af24:	189a      	adds	r2, r3, r2
 800af26:	4007      	ands	r7, r0
 800af28:	4206      	tst	r6, r0
 800af2a:	d029      	beq.n	800af80 <__lshift+0xc4>
 800af2c:	3001      	adds	r0, #1
 800af2e:	1bc0      	subs	r0, r0, r7
 800af30:	9003      	str	r0, [sp, #12]
 800af32:	468c      	mov	ip, r1
 800af34:	2000      	movs	r0, #0
 800af36:	681e      	ldr	r6, [r3, #0]
 800af38:	40be      	lsls	r6, r7
 800af3a:	4306      	orrs	r6, r0
 800af3c:	4660      	mov	r0, ip
 800af3e:	c040      	stmia	r0!, {r6}
 800af40:	4684      	mov	ip, r0
 800af42:	9e03      	ldr	r6, [sp, #12]
 800af44:	cb01      	ldmia	r3!, {r0}
 800af46:	40f0      	lsrs	r0, r6
 800af48:	429a      	cmp	r2, r3
 800af4a:	d8f4      	bhi.n	800af36 <__lshift+0x7a>
 800af4c:	0026      	movs	r6, r4
 800af4e:	3615      	adds	r6, #21
 800af50:	2304      	movs	r3, #4
 800af52:	42b2      	cmp	r2, r6
 800af54:	d304      	bcc.n	800af60 <__lshift+0xa4>
 800af56:	1b13      	subs	r3, r2, r4
 800af58:	3b15      	subs	r3, #21
 800af5a:	089b      	lsrs	r3, r3, #2
 800af5c:	3301      	adds	r3, #1
 800af5e:	009b      	lsls	r3, r3, #2
 800af60:	50c8      	str	r0, [r1, r3]
 800af62:	2800      	cmp	r0, #0
 800af64:	d002      	beq.n	800af6c <__lshift+0xb0>
 800af66:	9b01      	ldr	r3, [sp, #4]
 800af68:	3302      	adds	r3, #2
 800af6a:	9300      	str	r3, [sp, #0]
 800af6c:	9b00      	ldr	r3, [sp, #0]
 800af6e:	9802      	ldr	r0, [sp, #8]
 800af70:	3b01      	subs	r3, #1
 800af72:	0021      	movs	r1, r4
 800af74:	612b      	str	r3, [r5, #16]
 800af76:	f7ff fd7f 	bl	800aa78 <_Bfree>
 800af7a:	0028      	movs	r0, r5
 800af7c:	b005      	add	sp, #20
 800af7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800af80:	cb01      	ldmia	r3!, {r0}
 800af82:	c101      	stmia	r1!, {r0}
 800af84:	429a      	cmp	r2, r3
 800af86:	d8fb      	bhi.n	800af80 <__lshift+0xc4>
 800af88:	e7f0      	b.n	800af6c <__lshift+0xb0>
 800af8a:	46c0      	nop			@ (mov r8, r8)
 800af8c:	0800c08b 	.word	0x0800c08b
 800af90:	0800c10d 	.word	0x0800c10d

0800af94 <__mcmp>:
 800af94:	b530      	push	{r4, r5, lr}
 800af96:	690b      	ldr	r3, [r1, #16]
 800af98:	6904      	ldr	r4, [r0, #16]
 800af9a:	0002      	movs	r2, r0
 800af9c:	1ae0      	subs	r0, r4, r3
 800af9e:	429c      	cmp	r4, r3
 800afa0:	d10f      	bne.n	800afc2 <__mcmp+0x2e>
 800afa2:	3214      	adds	r2, #20
 800afa4:	009b      	lsls	r3, r3, #2
 800afa6:	3114      	adds	r1, #20
 800afa8:	0014      	movs	r4, r2
 800afaa:	18c9      	adds	r1, r1, r3
 800afac:	18d2      	adds	r2, r2, r3
 800afae:	3a04      	subs	r2, #4
 800afb0:	3904      	subs	r1, #4
 800afb2:	6815      	ldr	r5, [r2, #0]
 800afb4:	680b      	ldr	r3, [r1, #0]
 800afb6:	429d      	cmp	r5, r3
 800afb8:	d004      	beq.n	800afc4 <__mcmp+0x30>
 800afba:	2001      	movs	r0, #1
 800afbc:	429d      	cmp	r5, r3
 800afbe:	d200      	bcs.n	800afc2 <__mcmp+0x2e>
 800afc0:	3802      	subs	r0, #2
 800afc2:	bd30      	pop	{r4, r5, pc}
 800afc4:	4294      	cmp	r4, r2
 800afc6:	d3f2      	bcc.n	800afae <__mcmp+0x1a>
 800afc8:	e7fb      	b.n	800afc2 <__mcmp+0x2e>
	...

0800afcc <__mdiff>:
 800afcc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800afce:	000c      	movs	r4, r1
 800afd0:	b087      	sub	sp, #28
 800afd2:	9000      	str	r0, [sp, #0]
 800afd4:	0011      	movs	r1, r2
 800afd6:	0020      	movs	r0, r4
 800afd8:	0017      	movs	r7, r2
 800afda:	f7ff ffdb 	bl	800af94 <__mcmp>
 800afde:	1e05      	subs	r5, r0, #0
 800afe0:	d110      	bne.n	800b004 <__mdiff+0x38>
 800afe2:	0001      	movs	r1, r0
 800afe4:	9800      	ldr	r0, [sp, #0]
 800afe6:	f7ff fd03 	bl	800a9f0 <_Balloc>
 800afea:	1e02      	subs	r2, r0, #0
 800afec:	d104      	bne.n	800aff8 <__mdiff+0x2c>
 800afee:	4b40      	ldr	r3, [pc, #256]	@ (800b0f0 <__mdiff+0x124>)
 800aff0:	4840      	ldr	r0, [pc, #256]	@ (800b0f4 <__mdiff+0x128>)
 800aff2:	4941      	ldr	r1, [pc, #260]	@ (800b0f8 <__mdiff+0x12c>)
 800aff4:	f000 faba 	bl	800b56c <__assert_func>
 800aff8:	2301      	movs	r3, #1
 800affa:	6145      	str	r5, [r0, #20]
 800affc:	6103      	str	r3, [r0, #16]
 800affe:	0010      	movs	r0, r2
 800b000:	b007      	add	sp, #28
 800b002:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b004:	2600      	movs	r6, #0
 800b006:	42b0      	cmp	r0, r6
 800b008:	da03      	bge.n	800b012 <__mdiff+0x46>
 800b00a:	0023      	movs	r3, r4
 800b00c:	003c      	movs	r4, r7
 800b00e:	001f      	movs	r7, r3
 800b010:	3601      	adds	r6, #1
 800b012:	6861      	ldr	r1, [r4, #4]
 800b014:	9800      	ldr	r0, [sp, #0]
 800b016:	f7ff fceb 	bl	800a9f0 <_Balloc>
 800b01a:	1e02      	subs	r2, r0, #0
 800b01c:	d103      	bne.n	800b026 <__mdiff+0x5a>
 800b01e:	4b34      	ldr	r3, [pc, #208]	@ (800b0f0 <__mdiff+0x124>)
 800b020:	4834      	ldr	r0, [pc, #208]	@ (800b0f4 <__mdiff+0x128>)
 800b022:	4936      	ldr	r1, [pc, #216]	@ (800b0fc <__mdiff+0x130>)
 800b024:	e7e6      	b.n	800aff4 <__mdiff+0x28>
 800b026:	6923      	ldr	r3, [r4, #16]
 800b028:	3414      	adds	r4, #20
 800b02a:	9300      	str	r3, [sp, #0]
 800b02c:	009b      	lsls	r3, r3, #2
 800b02e:	18e3      	adds	r3, r4, r3
 800b030:	0021      	movs	r1, r4
 800b032:	9401      	str	r4, [sp, #4]
 800b034:	003c      	movs	r4, r7
 800b036:	9302      	str	r3, [sp, #8]
 800b038:	693b      	ldr	r3, [r7, #16]
 800b03a:	3414      	adds	r4, #20
 800b03c:	009b      	lsls	r3, r3, #2
 800b03e:	18e3      	adds	r3, r4, r3
 800b040:	9303      	str	r3, [sp, #12]
 800b042:	0003      	movs	r3, r0
 800b044:	60c6      	str	r6, [r0, #12]
 800b046:	468c      	mov	ip, r1
 800b048:	2000      	movs	r0, #0
 800b04a:	3314      	adds	r3, #20
 800b04c:	9304      	str	r3, [sp, #16]
 800b04e:	9305      	str	r3, [sp, #20]
 800b050:	4663      	mov	r3, ip
 800b052:	cb20      	ldmia	r3!, {r5}
 800b054:	b2a9      	uxth	r1, r5
 800b056:	000e      	movs	r6, r1
 800b058:	469c      	mov	ip, r3
 800b05a:	cc08      	ldmia	r4!, {r3}
 800b05c:	0c2d      	lsrs	r5, r5, #16
 800b05e:	b299      	uxth	r1, r3
 800b060:	1a71      	subs	r1, r6, r1
 800b062:	1809      	adds	r1, r1, r0
 800b064:	0c1b      	lsrs	r3, r3, #16
 800b066:	1408      	asrs	r0, r1, #16
 800b068:	1aeb      	subs	r3, r5, r3
 800b06a:	181b      	adds	r3, r3, r0
 800b06c:	1418      	asrs	r0, r3, #16
 800b06e:	b289      	uxth	r1, r1
 800b070:	041b      	lsls	r3, r3, #16
 800b072:	4319      	orrs	r1, r3
 800b074:	9b05      	ldr	r3, [sp, #20]
 800b076:	c302      	stmia	r3!, {r1}
 800b078:	9305      	str	r3, [sp, #20]
 800b07a:	9b03      	ldr	r3, [sp, #12]
 800b07c:	42a3      	cmp	r3, r4
 800b07e:	d8e7      	bhi.n	800b050 <__mdiff+0x84>
 800b080:	0039      	movs	r1, r7
 800b082:	9c03      	ldr	r4, [sp, #12]
 800b084:	3115      	adds	r1, #21
 800b086:	2304      	movs	r3, #4
 800b088:	428c      	cmp	r4, r1
 800b08a:	d304      	bcc.n	800b096 <__mdiff+0xca>
 800b08c:	1be3      	subs	r3, r4, r7
 800b08e:	3b15      	subs	r3, #21
 800b090:	089b      	lsrs	r3, r3, #2
 800b092:	3301      	adds	r3, #1
 800b094:	009b      	lsls	r3, r3, #2
 800b096:	9901      	ldr	r1, [sp, #4]
 800b098:	18cd      	adds	r5, r1, r3
 800b09a:	9904      	ldr	r1, [sp, #16]
 800b09c:	002e      	movs	r6, r5
 800b09e:	18cb      	adds	r3, r1, r3
 800b0a0:	001f      	movs	r7, r3
 800b0a2:	9902      	ldr	r1, [sp, #8]
 800b0a4:	428e      	cmp	r6, r1
 800b0a6:	d311      	bcc.n	800b0cc <__mdiff+0x100>
 800b0a8:	9c02      	ldr	r4, [sp, #8]
 800b0aa:	1ee9      	subs	r1, r5, #3
 800b0ac:	2000      	movs	r0, #0
 800b0ae:	428c      	cmp	r4, r1
 800b0b0:	d304      	bcc.n	800b0bc <__mdiff+0xf0>
 800b0b2:	0021      	movs	r1, r4
 800b0b4:	3103      	adds	r1, #3
 800b0b6:	1b49      	subs	r1, r1, r5
 800b0b8:	0889      	lsrs	r1, r1, #2
 800b0ba:	0088      	lsls	r0, r1, #2
 800b0bc:	181b      	adds	r3, r3, r0
 800b0be:	3b04      	subs	r3, #4
 800b0c0:	6819      	ldr	r1, [r3, #0]
 800b0c2:	2900      	cmp	r1, #0
 800b0c4:	d010      	beq.n	800b0e8 <__mdiff+0x11c>
 800b0c6:	9b00      	ldr	r3, [sp, #0]
 800b0c8:	6113      	str	r3, [r2, #16]
 800b0ca:	e798      	b.n	800affe <__mdiff+0x32>
 800b0cc:	4684      	mov	ip, r0
 800b0ce:	ce02      	ldmia	r6!, {r1}
 800b0d0:	b288      	uxth	r0, r1
 800b0d2:	4460      	add	r0, ip
 800b0d4:	1400      	asrs	r0, r0, #16
 800b0d6:	0c0c      	lsrs	r4, r1, #16
 800b0d8:	1904      	adds	r4, r0, r4
 800b0da:	4461      	add	r1, ip
 800b0dc:	1420      	asrs	r0, r4, #16
 800b0de:	b289      	uxth	r1, r1
 800b0e0:	0424      	lsls	r4, r4, #16
 800b0e2:	4321      	orrs	r1, r4
 800b0e4:	c702      	stmia	r7!, {r1}
 800b0e6:	e7dc      	b.n	800b0a2 <__mdiff+0xd6>
 800b0e8:	9900      	ldr	r1, [sp, #0]
 800b0ea:	3901      	subs	r1, #1
 800b0ec:	9100      	str	r1, [sp, #0]
 800b0ee:	e7e6      	b.n	800b0be <__mdiff+0xf2>
 800b0f0:	0800c08b 	.word	0x0800c08b
 800b0f4:	0800c10d 	.word	0x0800c10d
 800b0f8:	00000237 	.word	0x00000237
 800b0fc:	00000245 	.word	0x00000245

0800b100 <__ulp>:
 800b100:	b510      	push	{r4, lr}
 800b102:	2400      	movs	r4, #0
 800b104:	4b0c      	ldr	r3, [pc, #48]	@ (800b138 <__ulp+0x38>)
 800b106:	4a0d      	ldr	r2, [pc, #52]	@ (800b13c <__ulp+0x3c>)
 800b108:	400b      	ands	r3, r1
 800b10a:	189b      	adds	r3, r3, r2
 800b10c:	42a3      	cmp	r3, r4
 800b10e:	dc06      	bgt.n	800b11e <__ulp+0x1e>
 800b110:	425b      	negs	r3, r3
 800b112:	151a      	asrs	r2, r3, #20
 800b114:	2a13      	cmp	r2, #19
 800b116:	dc05      	bgt.n	800b124 <__ulp+0x24>
 800b118:	2380      	movs	r3, #128	@ 0x80
 800b11a:	031b      	lsls	r3, r3, #12
 800b11c:	4113      	asrs	r3, r2
 800b11e:	0019      	movs	r1, r3
 800b120:	0020      	movs	r0, r4
 800b122:	bd10      	pop	{r4, pc}
 800b124:	3a14      	subs	r2, #20
 800b126:	2401      	movs	r4, #1
 800b128:	2a1e      	cmp	r2, #30
 800b12a:	dc02      	bgt.n	800b132 <__ulp+0x32>
 800b12c:	2480      	movs	r4, #128	@ 0x80
 800b12e:	0624      	lsls	r4, r4, #24
 800b130:	40d4      	lsrs	r4, r2
 800b132:	2300      	movs	r3, #0
 800b134:	e7f3      	b.n	800b11e <__ulp+0x1e>
 800b136:	46c0      	nop			@ (mov r8, r8)
 800b138:	7ff00000 	.word	0x7ff00000
 800b13c:	fcc00000 	.word	0xfcc00000

0800b140 <__b2d>:
 800b140:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b142:	0006      	movs	r6, r0
 800b144:	6903      	ldr	r3, [r0, #16]
 800b146:	3614      	adds	r6, #20
 800b148:	009b      	lsls	r3, r3, #2
 800b14a:	18f3      	adds	r3, r6, r3
 800b14c:	1f1d      	subs	r5, r3, #4
 800b14e:	682c      	ldr	r4, [r5, #0]
 800b150:	000f      	movs	r7, r1
 800b152:	0020      	movs	r0, r4
 800b154:	9301      	str	r3, [sp, #4]
 800b156:	f7ff fd43 	bl	800abe0 <__hi0bits>
 800b15a:	2220      	movs	r2, #32
 800b15c:	1a12      	subs	r2, r2, r0
 800b15e:	603a      	str	r2, [r7, #0]
 800b160:	0003      	movs	r3, r0
 800b162:	4a1c      	ldr	r2, [pc, #112]	@ (800b1d4 <__b2d+0x94>)
 800b164:	280a      	cmp	r0, #10
 800b166:	dc15      	bgt.n	800b194 <__b2d+0x54>
 800b168:	210b      	movs	r1, #11
 800b16a:	0027      	movs	r7, r4
 800b16c:	1a09      	subs	r1, r1, r0
 800b16e:	40cf      	lsrs	r7, r1
 800b170:	433a      	orrs	r2, r7
 800b172:	468c      	mov	ip, r1
 800b174:	0011      	movs	r1, r2
 800b176:	2200      	movs	r2, #0
 800b178:	42ae      	cmp	r6, r5
 800b17a:	d202      	bcs.n	800b182 <__b2d+0x42>
 800b17c:	9a01      	ldr	r2, [sp, #4]
 800b17e:	3a08      	subs	r2, #8
 800b180:	6812      	ldr	r2, [r2, #0]
 800b182:	3315      	adds	r3, #21
 800b184:	409c      	lsls	r4, r3
 800b186:	4663      	mov	r3, ip
 800b188:	0027      	movs	r7, r4
 800b18a:	40da      	lsrs	r2, r3
 800b18c:	4317      	orrs	r7, r2
 800b18e:	0038      	movs	r0, r7
 800b190:	b003      	add	sp, #12
 800b192:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b194:	2700      	movs	r7, #0
 800b196:	42ae      	cmp	r6, r5
 800b198:	d202      	bcs.n	800b1a0 <__b2d+0x60>
 800b19a:	9d01      	ldr	r5, [sp, #4]
 800b19c:	3d08      	subs	r5, #8
 800b19e:	682f      	ldr	r7, [r5, #0]
 800b1a0:	210b      	movs	r1, #11
 800b1a2:	4249      	negs	r1, r1
 800b1a4:	468c      	mov	ip, r1
 800b1a6:	449c      	add	ip, r3
 800b1a8:	2b0b      	cmp	r3, #11
 800b1aa:	d010      	beq.n	800b1ce <__b2d+0x8e>
 800b1ac:	4661      	mov	r1, ip
 800b1ae:	2320      	movs	r3, #32
 800b1b0:	408c      	lsls	r4, r1
 800b1b2:	1a5b      	subs	r3, r3, r1
 800b1b4:	0039      	movs	r1, r7
 800b1b6:	40d9      	lsrs	r1, r3
 800b1b8:	430c      	orrs	r4, r1
 800b1ba:	4322      	orrs	r2, r4
 800b1bc:	0011      	movs	r1, r2
 800b1be:	2200      	movs	r2, #0
 800b1c0:	42b5      	cmp	r5, r6
 800b1c2:	d901      	bls.n	800b1c8 <__b2d+0x88>
 800b1c4:	3d04      	subs	r5, #4
 800b1c6:	682a      	ldr	r2, [r5, #0]
 800b1c8:	4664      	mov	r4, ip
 800b1ca:	40a7      	lsls	r7, r4
 800b1cc:	e7dd      	b.n	800b18a <__b2d+0x4a>
 800b1ce:	4322      	orrs	r2, r4
 800b1d0:	0011      	movs	r1, r2
 800b1d2:	e7dc      	b.n	800b18e <__b2d+0x4e>
 800b1d4:	3ff00000 	.word	0x3ff00000

0800b1d8 <__d2b>:
 800b1d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b1da:	2101      	movs	r1, #1
 800b1dc:	0016      	movs	r6, r2
 800b1de:	001f      	movs	r7, r3
 800b1e0:	f7ff fc06 	bl	800a9f0 <_Balloc>
 800b1e4:	1e04      	subs	r4, r0, #0
 800b1e6:	d105      	bne.n	800b1f4 <__d2b+0x1c>
 800b1e8:	0022      	movs	r2, r4
 800b1ea:	4b25      	ldr	r3, [pc, #148]	@ (800b280 <__d2b+0xa8>)
 800b1ec:	4825      	ldr	r0, [pc, #148]	@ (800b284 <__d2b+0xac>)
 800b1ee:	4926      	ldr	r1, [pc, #152]	@ (800b288 <__d2b+0xb0>)
 800b1f0:	f000 f9bc 	bl	800b56c <__assert_func>
 800b1f4:	033b      	lsls	r3, r7, #12
 800b1f6:	007d      	lsls	r5, r7, #1
 800b1f8:	0b1b      	lsrs	r3, r3, #12
 800b1fa:	0d6d      	lsrs	r5, r5, #21
 800b1fc:	d002      	beq.n	800b204 <__d2b+0x2c>
 800b1fe:	2280      	movs	r2, #128	@ 0x80
 800b200:	0352      	lsls	r2, r2, #13
 800b202:	4313      	orrs	r3, r2
 800b204:	9301      	str	r3, [sp, #4]
 800b206:	2e00      	cmp	r6, #0
 800b208:	d025      	beq.n	800b256 <__d2b+0x7e>
 800b20a:	4668      	mov	r0, sp
 800b20c:	9600      	str	r6, [sp, #0]
 800b20e:	f7ff fd08 	bl	800ac22 <__lo0bits>
 800b212:	9b01      	ldr	r3, [sp, #4]
 800b214:	9900      	ldr	r1, [sp, #0]
 800b216:	2800      	cmp	r0, #0
 800b218:	d01b      	beq.n	800b252 <__d2b+0x7a>
 800b21a:	2220      	movs	r2, #32
 800b21c:	001e      	movs	r6, r3
 800b21e:	1a12      	subs	r2, r2, r0
 800b220:	4096      	lsls	r6, r2
 800b222:	0032      	movs	r2, r6
 800b224:	40c3      	lsrs	r3, r0
 800b226:	430a      	orrs	r2, r1
 800b228:	6162      	str	r2, [r4, #20]
 800b22a:	9301      	str	r3, [sp, #4]
 800b22c:	9e01      	ldr	r6, [sp, #4]
 800b22e:	61a6      	str	r6, [r4, #24]
 800b230:	1e73      	subs	r3, r6, #1
 800b232:	419e      	sbcs	r6, r3
 800b234:	3601      	adds	r6, #1
 800b236:	6126      	str	r6, [r4, #16]
 800b238:	2d00      	cmp	r5, #0
 800b23a:	d014      	beq.n	800b266 <__d2b+0x8e>
 800b23c:	2635      	movs	r6, #53	@ 0x35
 800b23e:	4b13      	ldr	r3, [pc, #76]	@ (800b28c <__d2b+0xb4>)
 800b240:	18ed      	adds	r5, r5, r3
 800b242:	9b08      	ldr	r3, [sp, #32]
 800b244:	182d      	adds	r5, r5, r0
 800b246:	601d      	str	r5, [r3, #0]
 800b248:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b24a:	1a36      	subs	r6, r6, r0
 800b24c:	601e      	str	r6, [r3, #0]
 800b24e:	0020      	movs	r0, r4
 800b250:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800b252:	6161      	str	r1, [r4, #20]
 800b254:	e7ea      	b.n	800b22c <__d2b+0x54>
 800b256:	a801      	add	r0, sp, #4
 800b258:	f7ff fce3 	bl	800ac22 <__lo0bits>
 800b25c:	9b01      	ldr	r3, [sp, #4]
 800b25e:	2601      	movs	r6, #1
 800b260:	6163      	str	r3, [r4, #20]
 800b262:	3020      	adds	r0, #32
 800b264:	e7e7      	b.n	800b236 <__d2b+0x5e>
 800b266:	4b0a      	ldr	r3, [pc, #40]	@ (800b290 <__d2b+0xb8>)
 800b268:	18c0      	adds	r0, r0, r3
 800b26a:	9b08      	ldr	r3, [sp, #32]
 800b26c:	6018      	str	r0, [r3, #0]
 800b26e:	4b09      	ldr	r3, [pc, #36]	@ (800b294 <__d2b+0xbc>)
 800b270:	18f3      	adds	r3, r6, r3
 800b272:	009b      	lsls	r3, r3, #2
 800b274:	18e3      	adds	r3, r4, r3
 800b276:	6958      	ldr	r0, [r3, #20]
 800b278:	f7ff fcb2 	bl	800abe0 <__hi0bits>
 800b27c:	0176      	lsls	r6, r6, #5
 800b27e:	e7e3      	b.n	800b248 <__d2b+0x70>
 800b280:	0800c08b 	.word	0x0800c08b
 800b284:	0800c10d 	.word	0x0800c10d
 800b288:	0000030f 	.word	0x0000030f
 800b28c:	fffffbcd 	.word	0xfffffbcd
 800b290:	fffffbce 	.word	0xfffffbce
 800b294:	3fffffff 	.word	0x3fffffff

0800b298 <__ratio>:
 800b298:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b29a:	b087      	sub	sp, #28
 800b29c:	000f      	movs	r7, r1
 800b29e:	a904      	add	r1, sp, #16
 800b2a0:	0006      	movs	r6, r0
 800b2a2:	f7ff ff4d 	bl	800b140 <__b2d>
 800b2a6:	9000      	str	r0, [sp, #0]
 800b2a8:	9101      	str	r1, [sp, #4]
 800b2aa:	9b00      	ldr	r3, [sp, #0]
 800b2ac:	9c01      	ldr	r4, [sp, #4]
 800b2ae:	0038      	movs	r0, r7
 800b2b0:	a905      	add	r1, sp, #20
 800b2b2:	9302      	str	r3, [sp, #8]
 800b2b4:	9403      	str	r4, [sp, #12]
 800b2b6:	f7ff ff43 	bl	800b140 <__b2d>
 800b2ba:	000d      	movs	r5, r1
 800b2bc:	0002      	movs	r2, r0
 800b2be:	000b      	movs	r3, r1
 800b2c0:	6930      	ldr	r0, [r6, #16]
 800b2c2:	6939      	ldr	r1, [r7, #16]
 800b2c4:	9e04      	ldr	r6, [sp, #16]
 800b2c6:	1a40      	subs	r0, r0, r1
 800b2c8:	9905      	ldr	r1, [sp, #20]
 800b2ca:	0140      	lsls	r0, r0, #5
 800b2cc:	1a71      	subs	r1, r6, r1
 800b2ce:	1841      	adds	r1, r0, r1
 800b2d0:	0508      	lsls	r0, r1, #20
 800b2d2:	2900      	cmp	r1, #0
 800b2d4:	dd08      	ble.n	800b2e8 <__ratio+0x50>
 800b2d6:	9901      	ldr	r1, [sp, #4]
 800b2d8:	1841      	adds	r1, r0, r1
 800b2da:	9103      	str	r1, [sp, #12]
 800b2dc:	9802      	ldr	r0, [sp, #8]
 800b2de:	9903      	ldr	r1, [sp, #12]
 800b2e0:	f7f6 fd30 	bl	8001d44 <__aeabi_ddiv>
 800b2e4:	b007      	add	sp, #28
 800b2e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b2e8:	1a2b      	subs	r3, r5, r0
 800b2ea:	e7f7      	b.n	800b2dc <__ratio+0x44>

0800b2ec <__copybits>:
 800b2ec:	b570      	push	{r4, r5, r6, lr}
 800b2ee:	0014      	movs	r4, r2
 800b2f0:	0005      	movs	r5, r0
 800b2f2:	3901      	subs	r1, #1
 800b2f4:	6913      	ldr	r3, [r2, #16]
 800b2f6:	1149      	asrs	r1, r1, #5
 800b2f8:	3101      	adds	r1, #1
 800b2fa:	0089      	lsls	r1, r1, #2
 800b2fc:	3414      	adds	r4, #20
 800b2fe:	009b      	lsls	r3, r3, #2
 800b300:	1841      	adds	r1, r0, r1
 800b302:	18e3      	adds	r3, r4, r3
 800b304:	42a3      	cmp	r3, r4
 800b306:	d80d      	bhi.n	800b324 <__copybits+0x38>
 800b308:	0014      	movs	r4, r2
 800b30a:	3411      	adds	r4, #17
 800b30c:	2500      	movs	r5, #0
 800b30e:	42a3      	cmp	r3, r4
 800b310:	d303      	bcc.n	800b31a <__copybits+0x2e>
 800b312:	1a9b      	subs	r3, r3, r2
 800b314:	3b11      	subs	r3, #17
 800b316:	089b      	lsrs	r3, r3, #2
 800b318:	009d      	lsls	r5, r3, #2
 800b31a:	2300      	movs	r3, #0
 800b31c:	1940      	adds	r0, r0, r5
 800b31e:	4281      	cmp	r1, r0
 800b320:	d803      	bhi.n	800b32a <__copybits+0x3e>
 800b322:	bd70      	pop	{r4, r5, r6, pc}
 800b324:	cc40      	ldmia	r4!, {r6}
 800b326:	c540      	stmia	r5!, {r6}
 800b328:	e7ec      	b.n	800b304 <__copybits+0x18>
 800b32a:	c008      	stmia	r0!, {r3}
 800b32c:	e7f7      	b.n	800b31e <__copybits+0x32>

0800b32e <__any_on>:
 800b32e:	0002      	movs	r2, r0
 800b330:	6900      	ldr	r0, [r0, #16]
 800b332:	b510      	push	{r4, lr}
 800b334:	3214      	adds	r2, #20
 800b336:	114b      	asrs	r3, r1, #5
 800b338:	4298      	cmp	r0, r3
 800b33a:	db13      	blt.n	800b364 <__any_on+0x36>
 800b33c:	dd0c      	ble.n	800b358 <__any_on+0x2a>
 800b33e:	241f      	movs	r4, #31
 800b340:	0008      	movs	r0, r1
 800b342:	4020      	ands	r0, r4
 800b344:	4221      	tst	r1, r4
 800b346:	d007      	beq.n	800b358 <__any_on+0x2a>
 800b348:	0099      	lsls	r1, r3, #2
 800b34a:	588c      	ldr	r4, [r1, r2]
 800b34c:	0021      	movs	r1, r4
 800b34e:	40c1      	lsrs	r1, r0
 800b350:	4081      	lsls	r1, r0
 800b352:	2001      	movs	r0, #1
 800b354:	428c      	cmp	r4, r1
 800b356:	d104      	bne.n	800b362 <__any_on+0x34>
 800b358:	009b      	lsls	r3, r3, #2
 800b35a:	18d3      	adds	r3, r2, r3
 800b35c:	4293      	cmp	r3, r2
 800b35e:	d803      	bhi.n	800b368 <__any_on+0x3a>
 800b360:	2000      	movs	r0, #0
 800b362:	bd10      	pop	{r4, pc}
 800b364:	0003      	movs	r3, r0
 800b366:	e7f7      	b.n	800b358 <__any_on+0x2a>
 800b368:	3b04      	subs	r3, #4
 800b36a:	6819      	ldr	r1, [r3, #0]
 800b36c:	2900      	cmp	r1, #0
 800b36e:	d0f5      	beq.n	800b35c <__any_on+0x2e>
 800b370:	2001      	movs	r0, #1
 800b372:	e7f6      	b.n	800b362 <__any_on+0x34>

0800b374 <__sread>:
 800b374:	b570      	push	{r4, r5, r6, lr}
 800b376:	000c      	movs	r4, r1
 800b378:	250e      	movs	r5, #14
 800b37a:	5f49      	ldrsh	r1, [r1, r5]
 800b37c:	f000 f8aa 	bl	800b4d4 <_read_r>
 800b380:	2800      	cmp	r0, #0
 800b382:	db03      	blt.n	800b38c <__sread+0x18>
 800b384:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800b386:	181b      	adds	r3, r3, r0
 800b388:	6563      	str	r3, [r4, #84]	@ 0x54
 800b38a:	bd70      	pop	{r4, r5, r6, pc}
 800b38c:	89a3      	ldrh	r3, [r4, #12]
 800b38e:	4a02      	ldr	r2, [pc, #8]	@ (800b398 <__sread+0x24>)
 800b390:	4013      	ands	r3, r2
 800b392:	81a3      	strh	r3, [r4, #12]
 800b394:	e7f9      	b.n	800b38a <__sread+0x16>
 800b396:	46c0      	nop			@ (mov r8, r8)
 800b398:	ffffefff 	.word	0xffffefff

0800b39c <__swrite>:
 800b39c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b39e:	001f      	movs	r7, r3
 800b3a0:	898b      	ldrh	r3, [r1, #12]
 800b3a2:	0005      	movs	r5, r0
 800b3a4:	000c      	movs	r4, r1
 800b3a6:	0016      	movs	r6, r2
 800b3a8:	05db      	lsls	r3, r3, #23
 800b3aa:	d505      	bpl.n	800b3b8 <__swrite+0x1c>
 800b3ac:	230e      	movs	r3, #14
 800b3ae:	5ec9      	ldrsh	r1, [r1, r3]
 800b3b0:	2200      	movs	r2, #0
 800b3b2:	2302      	movs	r3, #2
 800b3b4:	f000 f87a 	bl	800b4ac <_lseek_r>
 800b3b8:	89a3      	ldrh	r3, [r4, #12]
 800b3ba:	4a05      	ldr	r2, [pc, #20]	@ (800b3d0 <__swrite+0x34>)
 800b3bc:	0028      	movs	r0, r5
 800b3be:	4013      	ands	r3, r2
 800b3c0:	81a3      	strh	r3, [r4, #12]
 800b3c2:	0032      	movs	r2, r6
 800b3c4:	230e      	movs	r3, #14
 800b3c6:	5ee1      	ldrsh	r1, [r4, r3]
 800b3c8:	003b      	movs	r3, r7
 800b3ca:	f000 f8a9 	bl	800b520 <_write_r>
 800b3ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b3d0:	ffffefff 	.word	0xffffefff

0800b3d4 <__sseek>:
 800b3d4:	b570      	push	{r4, r5, r6, lr}
 800b3d6:	000c      	movs	r4, r1
 800b3d8:	250e      	movs	r5, #14
 800b3da:	5f49      	ldrsh	r1, [r1, r5]
 800b3dc:	f000 f866 	bl	800b4ac <_lseek_r>
 800b3e0:	89a3      	ldrh	r3, [r4, #12]
 800b3e2:	1c42      	adds	r2, r0, #1
 800b3e4:	d103      	bne.n	800b3ee <__sseek+0x1a>
 800b3e6:	4a05      	ldr	r2, [pc, #20]	@ (800b3fc <__sseek+0x28>)
 800b3e8:	4013      	ands	r3, r2
 800b3ea:	81a3      	strh	r3, [r4, #12]
 800b3ec:	bd70      	pop	{r4, r5, r6, pc}
 800b3ee:	2280      	movs	r2, #128	@ 0x80
 800b3f0:	0152      	lsls	r2, r2, #5
 800b3f2:	4313      	orrs	r3, r2
 800b3f4:	81a3      	strh	r3, [r4, #12]
 800b3f6:	6560      	str	r0, [r4, #84]	@ 0x54
 800b3f8:	e7f8      	b.n	800b3ec <__sseek+0x18>
 800b3fa:	46c0      	nop			@ (mov r8, r8)
 800b3fc:	ffffefff 	.word	0xffffefff

0800b400 <__sclose>:
 800b400:	b510      	push	{r4, lr}
 800b402:	230e      	movs	r3, #14
 800b404:	5ec9      	ldrsh	r1, [r1, r3]
 800b406:	f000 f89f 	bl	800b548 <_close_r>
 800b40a:	bd10      	pop	{r4, pc}

0800b40c <_realloc_r>:
 800b40c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b40e:	0006      	movs	r6, r0
 800b410:	000c      	movs	r4, r1
 800b412:	0015      	movs	r5, r2
 800b414:	2900      	cmp	r1, #0
 800b416:	d105      	bne.n	800b424 <_realloc_r+0x18>
 800b418:	0011      	movs	r1, r2
 800b41a:	f7ff f995 	bl	800a748 <_malloc_r>
 800b41e:	0004      	movs	r4, r0
 800b420:	0020      	movs	r0, r4
 800b422:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800b424:	2a00      	cmp	r2, #0
 800b426:	d103      	bne.n	800b430 <_realloc_r+0x24>
 800b428:	f000 f8ec 	bl	800b604 <_free_r>
 800b42c:	002c      	movs	r4, r5
 800b42e:	e7f7      	b.n	800b420 <_realloc_r+0x14>
 800b430:	f000 f932 	bl	800b698 <_malloc_usable_size_r>
 800b434:	0007      	movs	r7, r0
 800b436:	4285      	cmp	r5, r0
 800b438:	d802      	bhi.n	800b440 <_realloc_r+0x34>
 800b43a:	0843      	lsrs	r3, r0, #1
 800b43c:	42ab      	cmp	r3, r5
 800b43e:	d3ef      	bcc.n	800b420 <_realloc_r+0x14>
 800b440:	0029      	movs	r1, r5
 800b442:	0030      	movs	r0, r6
 800b444:	f7ff f980 	bl	800a748 <_malloc_r>
 800b448:	9001      	str	r0, [sp, #4]
 800b44a:	2800      	cmp	r0, #0
 800b44c:	d101      	bne.n	800b452 <_realloc_r+0x46>
 800b44e:	9c01      	ldr	r4, [sp, #4]
 800b450:	e7e6      	b.n	800b420 <_realloc_r+0x14>
 800b452:	002a      	movs	r2, r5
 800b454:	42bd      	cmp	r5, r7
 800b456:	d900      	bls.n	800b45a <_realloc_r+0x4e>
 800b458:	003a      	movs	r2, r7
 800b45a:	0021      	movs	r1, r4
 800b45c:	9801      	ldr	r0, [sp, #4]
 800b45e:	f7fd fe06 	bl	800906e <memcpy>
 800b462:	0021      	movs	r1, r4
 800b464:	0030      	movs	r0, r6
 800b466:	f000 f8cd 	bl	800b604 <_free_r>
 800b46a:	e7f0      	b.n	800b44e <_realloc_r+0x42>

0800b46c <__ascii_wctomb>:
 800b46c:	0003      	movs	r3, r0
 800b46e:	1e08      	subs	r0, r1, #0
 800b470:	d005      	beq.n	800b47e <__ascii_wctomb+0x12>
 800b472:	2aff      	cmp	r2, #255	@ 0xff
 800b474:	d904      	bls.n	800b480 <__ascii_wctomb+0x14>
 800b476:	228a      	movs	r2, #138	@ 0x8a
 800b478:	2001      	movs	r0, #1
 800b47a:	601a      	str	r2, [r3, #0]
 800b47c:	4240      	negs	r0, r0
 800b47e:	4770      	bx	lr
 800b480:	2001      	movs	r0, #1
 800b482:	700a      	strb	r2, [r1, #0]
 800b484:	e7fb      	b.n	800b47e <__ascii_wctomb+0x12>

0800b486 <memmove>:
 800b486:	b510      	push	{r4, lr}
 800b488:	4288      	cmp	r0, r1
 800b48a:	d902      	bls.n	800b492 <memmove+0xc>
 800b48c:	188b      	adds	r3, r1, r2
 800b48e:	4298      	cmp	r0, r3
 800b490:	d308      	bcc.n	800b4a4 <memmove+0x1e>
 800b492:	2300      	movs	r3, #0
 800b494:	429a      	cmp	r2, r3
 800b496:	d007      	beq.n	800b4a8 <memmove+0x22>
 800b498:	5ccc      	ldrb	r4, [r1, r3]
 800b49a:	54c4      	strb	r4, [r0, r3]
 800b49c:	3301      	adds	r3, #1
 800b49e:	e7f9      	b.n	800b494 <memmove+0xe>
 800b4a0:	5c8b      	ldrb	r3, [r1, r2]
 800b4a2:	5483      	strb	r3, [r0, r2]
 800b4a4:	3a01      	subs	r2, #1
 800b4a6:	d2fb      	bcs.n	800b4a0 <memmove+0x1a>
 800b4a8:	bd10      	pop	{r4, pc}
	...

0800b4ac <_lseek_r>:
 800b4ac:	b570      	push	{r4, r5, r6, lr}
 800b4ae:	0004      	movs	r4, r0
 800b4b0:	0008      	movs	r0, r1
 800b4b2:	0011      	movs	r1, r2
 800b4b4:	001a      	movs	r2, r3
 800b4b6:	2300      	movs	r3, #0
 800b4b8:	4d05      	ldr	r5, [pc, #20]	@ (800b4d0 <_lseek_r+0x24>)
 800b4ba:	602b      	str	r3, [r5, #0]
 800b4bc:	f7fa f8be 	bl	800563c <_lseek>
 800b4c0:	1c43      	adds	r3, r0, #1
 800b4c2:	d103      	bne.n	800b4cc <_lseek_r+0x20>
 800b4c4:	682b      	ldr	r3, [r5, #0]
 800b4c6:	2b00      	cmp	r3, #0
 800b4c8:	d000      	beq.n	800b4cc <_lseek_r+0x20>
 800b4ca:	6023      	str	r3, [r4, #0]
 800b4cc:	bd70      	pop	{r4, r5, r6, pc}
 800b4ce:	46c0      	nop			@ (mov r8, r8)
 800b4d0:	20000454 	.word	0x20000454

0800b4d4 <_read_r>:
 800b4d4:	b570      	push	{r4, r5, r6, lr}
 800b4d6:	0004      	movs	r4, r0
 800b4d8:	0008      	movs	r0, r1
 800b4da:	0011      	movs	r1, r2
 800b4dc:	001a      	movs	r2, r3
 800b4de:	2300      	movs	r3, #0
 800b4e0:	4d05      	ldr	r5, [pc, #20]	@ (800b4f8 <_read_r+0x24>)
 800b4e2:	602b      	str	r3, [r5, #0]
 800b4e4:	f7fa f850 	bl	8005588 <_read>
 800b4e8:	1c43      	adds	r3, r0, #1
 800b4ea:	d103      	bne.n	800b4f4 <_read_r+0x20>
 800b4ec:	682b      	ldr	r3, [r5, #0]
 800b4ee:	2b00      	cmp	r3, #0
 800b4f0:	d000      	beq.n	800b4f4 <_read_r+0x20>
 800b4f2:	6023      	str	r3, [r4, #0]
 800b4f4:	bd70      	pop	{r4, r5, r6, pc}
 800b4f6:	46c0      	nop			@ (mov r8, r8)
 800b4f8:	20000454 	.word	0x20000454

0800b4fc <_sbrk_r>:
 800b4fc:	2300      	movs	r3, #0
 800b4fe:	b570      	push	{r4, r5, r6, lr}
 800b500:	4d06      	ldr	r5, [pc, #24]	@ (800b51c <_sbrk_r+0x20>)
 800b502:	0004      	movs	r4, r0
 800b504:	0008      	movs	r0, r1
 800b506:	602b      	str	r3, [r5, #0]
 800b508:	f7fa f8a4 	bl	8005654 <_sbrk>
 800b50c:	1c43      	adds	r3, r0, #1
 800b50e:	d103      	bne.n	800b518 <_sbrk_r+0x1c>
 800b510:	682b      	ldr	r3, [r5, #0]
 800b512:	2b00      	cmp	r3, #0
 800b514:	d000      	beq.n	800b518 <_sbrk_r+0x1c>
 800b516:	6023      	str	r3, [r4, #0]
 800b518:	bd70      	pop	{r4, r5, r6, pc}
 800b51a:	46c0      	nop			@ (mov r8, r8)
 800b51c:	20000454 	.word	0x20000454

0800b520 <_write_r>:
 800b520:	b570      	push	{r4, r5, r6, lr}
 800b522:	0004      	movs	r4, r0
 800b524:	0008      	movs	r0, r1
 800b526:	0011      	movs	r1, r2
 800b528:	001a      	movs	r2, r3
 800b52a:	2300      	movs	r3, #0
 800b52c:	4d05      	ldr	r5, [pc, #20]	@ (800b544 <_write_r+0x24>)
 800b52e:	602b      	str	r3, [r5, #0]
 800b530:	f7fa f847 	bl	80055c2 <_write>
 800b534:	1c43      	adds	r3, r0, #1
 800b536:	d103      	bne.n	800b540 <_write_r+0x20>
 800b538:	682b      	ldr	r3, [r5, #0]
 800b53a:	2b00      	cmp	r3, #0
 800b53c:	d000      	beq.n	800b540 <_write_r+0x20>
 800b53e:	6023      	str	r3, [r4, #0]
 800b540:	bd70      	pop	{r4, r5, r6, pc}
 800b542:	46c0      	nop			@ (mov r8, r8)
 800b544:	20000454 	.word	0x20000454

0800b548 <_close_r>:
 800b548:	2300      	movs	r3, #0
 800b54a:	b570      	push	{r4, r5, r6, lr}
 800b54c:	4d06      	ldr	r5, [pc, #24]	@ (800b568 <_close_r+0x20>)
 800b54e:	0004      	movs	r4, r0
 800b550:	0008      	movs	r0, r1
 800b552:	602b      	str	r3, [r5, #0]
 800b554:	f7fa f851 	bl	80055fa <_close>
 800b558:	1c43      	adds	r3, r0, #1
 800b55a:	d103      	bne.n	800b564 <_close_r+0x1c>
 800b55c:	682b      	ldr	r3, [r5, #0]
 800b55e:	2b00      	cmp	r3, #0
 800b560:	d000      	beq.n	800b564 <_close_r+0x1c>
 800b562:	6023      	str	r3, [r4, #0]
 800b564:	bd70      	pop	{r4, r5, r6, pc}
 800b566:	46c0      	nop			@ (mov r8, r8)
 800b568:	20000454 	.word	0x20000454

0800b56c <__assert_func>:
 800b56c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800b56e:	0014      	movs	r4, r2
 800b570:	001a      	movs	r2, r3
 800b572:	4b09      	ldr	r3, [pc, #36]	@ (800b598 <__assert_func+0x2c>)
 800b574:	0005      	movs	r5, r0
 800b576:	681b      	ldr	r3, [r3, #0]
 800b578:	000e      	movs	r6, r1
 800b57a:	68d8      	ldr	r0, [r3, #12]
 800b57c:	4b07      	ldr	r3, [pc, #28]	@ (800b59c <__assert_func+0x30>)
 800b57e:	2c00      	cmp	r4, #0
 800b580:	d101      	bne.n	800b586 <__assert_func+0x1a>
 800b582:	4b07      	ldr	r3, [pc, #28]	@ (800b5a0 <__assert_func+0x34>)
 800b584:	001c      	movs	r4, r3
 800b586:	4907      	ldr	r1, [pc, #28]	@ (800b5a4 <__assert_func+0x38>)
 800b588:	9301      	str	r3, [sp, #4]
 800b58a:	9402      	str	r4, [sp, #8]
 800b58c:	002b      	movs	r3, r5
 800b58e:	9600      	str	r6, [sp, #0]
 800b590:	f000 f88a 	bl	800b6a8 <fiprintf>
 800b594:	f000 f898 	bl	800b6c8 <abort>
 800b598:	2000018c 	.word	0x2000018c
 800b59c:	0800c166 	.word	0x0800c166
 800b5a0:	0800c1a1 	.word	0x0800c1a1
 800b5a4:	0800c173 	.word	0x0800c173

0800b5a8 <_calloc_r>:
 800b5a8:	b570      	push	{r4, r5, r6, lr}
 800b5aa:	0c0b      	lsrs	r3, r1, #16
 800b5ac:	0c15      	lsrs	r5, r2, #16
 800b5ae:	2b00      	cmp	r3, #0
 800b5b0:	d11e      	bne.n	800b5f0 <_calloc_r+0x48>
 800b5b2:	2d00      	cmp	r5, #0
 800b5b4:	d10c      	bne.n	800b5d0 <_calloc_r+0x28>
 800b5b6:	b289      	uxth	r1, r1
 800b5b8:	b294      	uxth	r4, r2
 800b5ba:	434c      	muls	r4, r1
 800b5bc:	0021      	movs	r1, r4
 800b5be:	f7ff f8c3 	bl	800a748 <_malloc_r>
 800b5c2:	1e05      	subs	r5, r0, #0
 800b5c4:	d01b      	beq.n	800b5fe <_calloc_r+0x56>
 800b5c6:	0022      	movs	r2, r4
 800b5c8:	2100      	movs	r1, #0
 800b5ca:	f7fd fcf9 	bl	8008fc0 <memset>
 800b5ce:	e016      	b.n	800b5fe <_calloc_r+0x56>
 800b5d0:	1c2b      	adds	r3, r5, #0
 800b5d2:	1c0c      	adds	r4, r1, #0
 800b5d4:	b289      	uxth	r1, r1
 800b5d6:	b292      	uxth	r2, r2
 800b5d8:	434a      	muls	r2, r1
 800b5da:	b29b      	uxth	r3, r3
 800b5dc:	b2a1      	uxth	r1, r4
 800b5de:	4359      	muls	r1, r3
 800b5e0:	0c14      	lsrs	r4, r2, #16
 800b5e2:	190c      	adds	r4, r1, r4
 800b5e4:	0c23      	lsrs	r3, r4, #16
 800b5e6:	d107      	bne.n	800b5f8 <_calloc_r+0x50>
 800b5e8:	0424      	lsls	r4, r4, #16
 800b5ea:	b292      	uxth	r2, r2
 800b5ec:	4314      	orrs	r4, r2
 800b5ee:	e7e5      	b.n	800b5bc <_calloc_r+0x14>
 800b5f0:	2d00      	cmp	r5, #0
 800b5f2:	d101      	bne.n	800b5f8 <_calloc_r+0x50>
 800b5f4:	1c14      	adds	r4, r2, #0
 800b5f6:	e7ed      	b.n	800b5d4 <_calloc_r+0x2c>
 800b5f8:	230c      	movs	r3, #12
 800b5fa:	2500      	movs	r5, #0
 800b5fc:	6003      	str	r3, [r0, #0]
 800b5fe:	0028      	movs	r0, r5
 800b600:	bd70      	pop	{r4, r5, r6, pc}
	...

0800b604 <_free_r>:
 800b604:	b570      	push	{r4, r5, r6, lr}
 800b606:	0005      	movs	r5, r0
 800b608:	1e0c      	subs	r4, r1, #0
 800b60a:	d010      	beq.n	800b62e <_free_r+0x2a>
 800b60c:	3c04      	subs	r4, #4
 800b60e:	6823      	ldr	r3, [r4, #0]
 800b610:	2b00      	cmp	r3, #0
 800b612:	da00      	bge.n	800b616 <_free_r+0x12>
 800b614:	18e4      	adds	r4, r4, r3
 800b616:	0028      	movs	r0, r5
 800b618:	f7ff f9da 	bl	800a9d0 <__malloc_lock>
 800b61c:	4a1d      	ldr	r2, [pc, #116]	@ (800b694 <_free_r+0x90>)
 800b61e:	6813      	ldr	r3, [r2, #0]
 800b620:	2b00      	cmp	r3, #0
 800b622:	d105      	bne.n	800b630 <_free_r+0x2c>
 800b624:	6063      	str	r3, [r4, #4]
 800b626:	6014      	str	r4, [r2, #0]
 800b628:	0028      	movs	r0, r5
 800b62a:	f7ff f9d9 	bl	800a9e0 <__malloc_unlock>
 800b62e:	bd70      	pop	{r4, r5, r6, pc}
 800b630:	42a3      	cmp	r3, r4
 800b632:	d908      	bls.n	800b646 <_free_r+0x42>
 800b634:	6820      	ldr	r0, [r4, #0]
 800b636:	1821      	adds	r1, r4, r0
 800b638:	428b      	cmp	r3, r1
 800b63a:	d1f3      	bne.n	800b624 <_free_r+0x20>
 800b63c:	6819      	ldr	r1, [r3, #0]
 800b63e:	685b      	ldr	r3, [r3, #4]
 800b640:	1809      	adds	r1, r1, r0
 800b642:	6021      	str	r1, [r4, #0]
 800b644:	e7ee      	b.n	800b624 <_free_r+0x20>
 800b646:	001a      	movs	r2, r3
 800b648:	685b      	ldr	r3, [r3, #4]
 800b64a:	2b00      	cmp	r3, #0
 800b64c:	d001      	beq.n	800b652 <_free_r+0x4e>
 800b64e:	42a3      	cmp	r3, r4
 800b650:	d9f9      	bls.n	800b646 <_free_r+0x42>
 800b652:	6811      	ldr	r1, [r2, #0]
 800b654:	1850      	adds	r0, r2, r1
 800b656:	42a0      	cmp	r0, r4
 800b658:	d10b      	bne.n	800b672 <_free_r+0x6e>
 800b65a:	6820      	ldr	r0, [r4, #0]
 800b65c:	1809      	adds	r1, r1, r0
 800b65e:	1850      	adds	r0, r2, r1
 800b660:	6011      	str	r1, [r2, #0]
 800b662:	4283      	cmp	r3, r0
 800b664:	d1e0      	bne.n	800b628 <_free_r+0x24>
 800b666:	6818      	ldr	r0, [r3, #0]
 800b668:	685b      	ldr	r3, [r3, #4]
 800b66a:	1841      	adds	r1, r0, r1
 800b66c:	6011      	str	r1, [r2, #0]
 800b66e:	6053      	str	r3, [r2, #4]
 800b670:	e7da      	b.n	800b628 <_free_r+0x24>
 800b672:	42a0      	cmp	r0, r4
 800b674:	d902      	bls.n	800b67c <_free_r+0x78>
 800b676:	230c      	movs	r3, #12
 800b678:	602b      	str	r3, [r5, #0]
 800b67a:	e7d5      	b.n	800b628 <_free_r+0x24>
 800b67c:	6820      	ldr	r0, [r4, #0]
 800b67e:	1821      	adds	r1, r4, r0
 800b680:	428b      	cmp	r3, r1
 800b682:	d103      	bne.n	800b68c <_free_r+0x88>
 800b684:	6819      	ldr	r1, [r3, #0]
 800b686:	685b      	ldr	r3, [r3, #4]
 800b688:	1809      	adds	r1, r1, r0
 800b68a:	6021      	str	r1, [r4, #0]
 800b68c:	6063      	str	r3, [r4, #4]
 800b68e:	6054      	str	r4, [r2, #4]
 800b690:	e7ca      	b.n	800b628 <_free_r+0x24>
 800b692:	46c0      	nop			@ (mov r8, r8)
 800b694:	20000450 	.word	0x20000450

0800b698 <_malloc_usable_size_r>:
 800b698:	1f0b      	subs	r3, r1, #4
 800b69a:	681b      	ldr	r3, [r3, #0]
 800b69c:	1f18      	subs	r0, r3, #4
 800b69e:	2b00      	cmp	r3, #0
 800b6a0:	da01      	bge.n	800b6a6 <_malloc_usable_size_r+0xe>
 800b6a2:	580b      	ldr	r3, [r1, r0]
 800b6a4:	18c0      	adds	r0, r0, r3
 800b6a6:	4770      	bx	lr

0800b6a8 <fiprintf>:
 800b6a8:	b40e      	push	{r1, r2, r3}
 800b6aa:	b517      	push	{r0, r1, r2, r4, lr}
 800b6ac:	4c05      	ldr	r4, [pc, #20]	@ (800b6c4 <fiprintf+0x1c>)
 800b6ae:	ab05      	add	r3, sp, #20
 800b6b0:	cb04      	ldmia	r3!, {r2}
 800b6b2:	0001      	movs	r1, r0
 800b6b4:	6820      	ldr	r0, [r4, #0]
 800b6b6:	9301      	str	r3, [sp, #4]
 800b6b8:	f000 f834 	bl	800b724 <_vfiprintf_r>
 800b6bc:	bc1e      	pop	{r1, r2, r3, r4}
 800b6be:	bc08      	pop	{r3}
 800b6c0:	b003      	add	sp, #12
 800b6c2:	4718      	bx	r3
 800b6c4:	2000018c 	.word	0x2000018c

0800b6c8 <abort>:
 800b6c8:	2006      	movs	r0, #6
 800b6ca:	b510      	push	{r4, lr}
 800b6cc:	f000 fa7a 	bl	800bbc4 <raise>
 800b6d0:	2001      	movs	r0, #1
 800b6d2:	f7f9 ff4c 	bl	800556e <_exit>

0800b6d6 <__sfputc_r>:
 800b6d6:	6893      	ldr	r3, [r2, #8]
 800b6d8:	b510      	push	{r4, lr}
 800b6da:	3b01      	subs	r3, #1
 800b6dc:	6093      	str	r3, [r2, #8]
 800b6de:	2b00      	cmp	r3, #0
 800b6e0:	da04      	bge.n	800b6ec <__sfputc_r+0x16>
 800b6e2:	6994      	ldr	r4, [r2, #24]
 800b6e4:	42a3      	cmp	r3, r4
 800b6e6:	db07      	blt.n	800b6f8 <__sfputc_r+0x22>
 800b6e8:	290a      	cmp	r1, #10
 800b6ea:	d005      	beq.n	800b6f8 <__sfputc_r+0x22>
 800b6ec:	6813      	ldr	r3, [r2, #0]
 800b6ee:	1c58      	adds	r0, r3, #1
 800b6f0:	6010      	str	r0, [r2, #0]
 800b6f2:	7019      	strb	r1, [r3, #0]
 800b6f4:	0008      	movs	r0, r1
 800b6f6:	bd10      	pop	{r4, pc}
 800b6f8:	f000 f930 	bl	800b95c <__swbuf_r>
 800b6fc:	0001      	movs	r1, r0
 800b6fe:	e7f9      	b.n	800b6f4 <__sfputc_r+0x1e>

0800b700 <__sfputs_r>:
 800b700:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b702:	0006      	movs	r6, r0
 800b704:	000f      	movs	r7, r1
 800b706:	0014      	movs	r4, r2
 800b708:	18d5      	adds	r5, r2, r3
 800b70a:	42ac      	cmp	r4, r5
 800b70c:	d101      	bne.n	800b712 <__sfputs_r+0x12>
 800b70e:	2000      	movs	r0, #0
 800b710:	e007      	b.n	800b722 <__sfputs_r+0x22>
 800b712:	7821      	ldrb	r1, [r4, #0]
 800b714:	003a      	movs	r2, r7
 800b716:	0030      	movs	r0, r6
 800b718:	f7ff ffdd 	bl	800b6d6 <__sfputc_r>
 800b71c:	3401      	adds	r4, #1
 800b71e:	1c43      	adds	r3, r0, #1
 800b720:	d1f3      	bne.n	800b70a <__sfputs_r+0xa>
 800b722:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800b724 <_vfiprintf_r>:
 800b724:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b726:	b0a1      	sub	sp, #132	@ 0x84
 800b728:	000f      	movs	r7, r1
 800b72a:	0015      	movs	r5, r2
 800b72c:	001e      	movs	r6, r3
 800b72e:	9003      	str	r0, [sp, #12]
 800b730:	2800      	cmp	r0, #0
 800b732:	d004      	beq.n	800b73e <_vfiprintf_r+0x1a>
 800b734:	6a03      	ldr	r3, [r0, #32]
 800b736:	2b00      	cmp	r3, #0
 800b738:	d101      	bne.n	800b73e <_vfiprintf_r+0x1a>
 800b73a:	f7fc fd61 	bl	8008200 <__sinit>
 800b73e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b740:	07db      	lsls	r3, r3, #31
 800b742:	d405      	bmi.n	800b750 <_vfiprintf_r+0x2c>
 800b744:	89bb      	ldrh	r3, [r7, #12]
 800b746:	059b      	lsls	r3, r3, #22
 800b748:	d402      	bmi.n	800b750 <_vfiprintf_r+0x2c>
 800b74a:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800b74c:	f7fd fc7d 	bl	800904a <__retarget_lock_acquire_recursive>
 800b750:	89bb      	ldrh	r3, [r7, #12]
 800b752:	071b      	lsls	r3, r3, #28
 800b754:	d502      	bpl.n	800b75c <_vfiprintf_r+0x38>
 800b756:	693b      	ldr	r3, [r7, #16]
 800b758:	2b00      	cmp	r3, #0
 800b75a:	d113      	bne.n	800b784 <_vfiprintf_r+0x60>
 800b75c:	0039      	movs	r1, r7
 800b75e:	9803      	ldr	r0, [sp, #12]
 800b760:	f000 f93e 	bl	800b9e0 <__swsetup_r>
 800b764:	2800      	cmp	r0, #0
 800b766:	d00d      	beq.n	800b784 <_vfiprintf_r+0x60>
 800b768:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b76a:	07db      	lsls	r3, r3, #31
 800b76c:	d503      	bpl.n	800b776 <_vfiprintf_r+0x52>
 800b76e:	2001      	movs	r0, #1
 800b770:	4240      	negs	r0, r0
 800b772:	b021      	add	sp, #132	@ 0x84
 800b774:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b776:	89bb      	ldrh	r3, [r7, #12]
 800b778:	059b      	lsls	r3, r3, #22
 800b77a:	d4f8      	bmi.n	800b76e <_vfiprintf_r+0x4a>
 800b77c:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800b77e:	f7fd fc65 	bl	800904c <__retarget_lock_release_recursive>
 800b782:	e7f4      	b.n	800b76e <_vfiprintf_r+0x4a>
 800b784:	2300      	movs	r3, #0
 800b786:	ac08      	add	r4, sp, #32
 800b788:	6163      	str	r3, [r4, #20]
 800b78a:	3320      	adds	r3, #32
 800b78c:	7663      	strb	r3, [r4, #25]
 800b78e:	3310      	adds	r3, #16
 800b790:	76a3      	strb	r3, [r4, #26]
 800b792:	9607      	str	r6, [sp, #28]
 800b794:	002e      	movs	r6, r5
 800b796:	7833      	ldrb	r3, [r6, #0]
 800b798:	2b00      	cmp	r3, #0
 800b79a:	d001      	beq.n	800b7a0 <_vfiprintf_r+0x7c>
 800b79c:	2b25      	cmp	r3, #37	@ 0x25
 800b79e:	d148      	bne.n	800b832 <_vfiprintf_r+0x10e>
 800b7a0:	1b73      	subs	r3, r6, r5
 800b7a2:	9305      	str	r3, [sp, #20]
 800b7a4:	42ae      	cmp	r6, r5
 800b7a6:	d00b      	beq.n	800b7c0 <_vfiprintf_r+0x9c>
 800b7a8:	002a      	movs	r2, r5
 800b7aa:	0039      	movs	r1, r7
 800b7ac:	9803      	ldr	r0, [sp, #12]
 800b7ae:	f7ff ffa7 	bl	800b700 <__sfputs_r>
 800b7b2:	3001      	adds	r0, #1
 800b7b4:	d100      	bne.n	800b7b8 <_vfiprintf_r+0x94>
 800b7b6:	e0ae      	b.n	800b916 <_vfiprintf_r+0x1f2>
 800b7b8:	6963      	ldr	r3, [r4, #20]
 800b7ba:	9a05      	ldr	r2, [sp, #20]
 800b7bc:	189b      	adds	r3, r3, r2
 800b7be:	6163      	str	r3, [r4, #20]
 800b7c0:	7833      	ldrb	r3, [r6, #0]
 800b7c2:	2b00      	cmp	r3, #0
 800b7c4:	d100      	bne.n	800b7c8 <_vfiprintf_r+0xa4>
 800b7c6:	e0a6      	b.n	800b916 <_vfiprintf_r+0x1f2>
 800b7c8:	2201      	movs	r2, #1
 800b7ca:	2300      	movs	r3, #0
 800b7cc:	4252      	negs	r2, r2
 800b7ce:	6062      	str	r2, [r4, #4]
 800b7d0:	a904      	add	r1, sp, #16
 800b7d2:	3254      	adds	r2, #84	@ 0x54
 800b7d4:	1852      	adds	r2, r2, r1
 800b7d6:	1c75      	adds	r5, r6, #1
 800b7d8:	6023      	str	r3, [r4, #0]
 800b7da:	60e3      	str	r3, [r4, #12]
 800b7dc:	60a3      	str	r3, [r4, #8]
 800b7de:	7013      	strb	r3, [r2, #0]
 800b7e0:	65a3      	str	r3, [r4, #88]	@ 0x58
 800b7e2:	4b59      	ldr	r3, [pc, #356]	@ (800b948 <_vfiprintf_r+0x224>)
 800b7e4:	2205      	movs	r2, #5
 800b7e6:	0018      	movs	r0, r3
 800b7e8:	7829      	ldrb	r1, [r5, #0]
 800b7ea:	9305      	str	r3, [sp, #20]
 800b7ec:	f7fd fc34 	bl	8009058 <memchr>
 800b7f0:	1c6e      	adds	r6, r5, #1
 800b7f2:	2800      	cmp	r0, #0
 800b7f4:	d11f      	bne.n	800b836 <_vfiprintf_r+0x112>
 800b7f6:	6822      	ldr	r2, [r4, #0]
 800b7f8:	06d3      	lsls	r3, r2, #27
 800b7fa:	d504      	bpl.n	800b806 <_vfiprintf_r+0xe2>
 800b7fc:	2353      	movs	r3, #83	@ 0x53
 800b7fe:	a904      	add	r1, sp, #16
 800b800:	185b      	adds	r3, r3, r1
 800b802:	2120      	movs	r1, #32
 800b804:	7019      	strb	r1, [r3, #0]
 800b806:	0713      	lsls	r3, r2, #28
 800b808:	d504      	bpl.n	800b814 <_vfiprintf_r+0xf0>
 800b80a:	2353      	movs	r3, #83	@ 0x53
 800b80c:	a904      	add	r1, sp, #16
 800b80e:	185b      	adds	r3, r3, r1
 800b810:	212b      	movs	r1, #43	@ 0x2b
 800b812:	7019      	strb	r1, [r3, #0]
 800b814:	782b      	ldrb	r3, [r5, #0]
 800b816:	2b2a      	cmp	r3, #42	@ 0x2a
 800b818:	d016      	beq.n	800b848 <_vfiprintf_r+0x124>
 800b81a:	002e      	movs	r6, r5
 800b81c:	2100      	movs	r1, #0
 800b81e:	200a      	movs	r0, #10
 800b820:	68e3      	ldr	r3, [r4, #12]
 800b822:	7832      	ldrb	r2, [r6, #0]
 800b824:	1c75      	adds	r5, r6, #1
 800b826:	3a30      	subs	r2, #48	@ 0x30
 800b828:	2a09      	cmp	r2, #9
 800b82a:	d950      	bls.n	800b8ce <_vfiprintf_r+0x1aa>
 800b82c:	2900      	cmp	r1, #0
 800b82e:	d111      	bne.n	800b854 <_vfiprintf_r+0x130>
 800b830:	e017      	b.n	800b862 <_vfiprintf_r+0x13e>
 800b832:	3601      	adds	r6, #1
 800b834:	e7af      	b.n	800b796 <_vfiprintf_r+0x72>
 800b836:	9b05      	ldr	r3, [sp, #20]
 800b838:	6822      	ldr	r2, [r4, #0]
 800b83a:	1ac0      	subs	r0, r0, r3
 800b83c:	2301      	movs	r3, #1
 800b83e:	4083      	lsls	r3, r0
 800b840:	4313      	orrs	r3, r2
 800b842:	0035      	movs	r5, r6
 800b844:	6023      	str	r3, [r4, #0]
 800b846:	e7cc      	b.n	800b7e2 <_vfiprintf_r+0xbe>
 800b848:	9b07      	ldr	r3, [sp, #28]
 800b84a:	1d19      	adds	r1, r3, #4
 800b84c:	681b      	ldr	r3, [r3, #0]
 800b84e:	9107      	str	r1, [sp, #28]
 800b850:	2b00      	cmp	r3, #0
 800b852:	db01      	blt.n	800b858 <_vfiprintf_r+0x134>
 800b854:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b856:	e004      	b.n	800b862 <_vfiprintf_r+0x13e>
 800b858:	425b      	negs	r3, r3
 800b85a:	60e3      	str	r3, [r4, #12]
 800b85c:	2302      	movs	r3, #2
 800b85e:	4313      	orrs	r3, r2
 800b860:	6023      	str	r3, [r4, #0]
 800b862:	7833      	ldrb	r3, [r6, #0]
 800b864:	2b2e      	cmp	r3, #46	@ 0x2e
 800b866:	d10c      	bne.n	800b882 <_vfiprintf_r+0x15e>
 800b868:	7873      	ldrb	r3, [r6, #1]
 800b86a:	2b2a      	cmp	r3, #42	@ 0x2a
 800b86c:	d134      	bne.n	800b8d8 <_vfiprintf_r+0x1b4>
 800b86e:	9b07      	ldr	r3, [sp, #28]
 800b870:	3602      	adds	r6, #2
 800b872:	1d1a      	adds	r2, r3, #4
 800b874:	681b      	ldr	r3, [r3, #0]
 800b876:	9207      	str	r2, [sp, #28]
 800b878:	2b00      	cmp	r3, #0
 800b87a:	da01      	bge.n	800b880 <_vfiprintf_r+0x15c>
 800b87c:	2301      	movs	r3, #1
 800b87e:	425b      	negs	r3, r3
 800b880:	9309      	str	r3, [sp, #36]	@ 0x24
 800b882:	4d32      	ldr	r5, [pc, #200]	@ (800b94c <_vfiprintf_r+0x228>)
 800b884:	2203      	movs	r2, #3
 800b886:	0028      	movs	r0, r5
 800b888:	7831      	ldrb	r1, [r6, #0]
 800b88a:	f7fd fbe5 	bl	8009058 <memchr>
 800b88e:	2800      	cmp	r0, #0
 800b890:	d006      	beq.n	800b8a0 <_vfiprintf_r+0x17c>
 800b892:	2340      	movs	r3, #64	@ 0x40
 800b894:	1b40      	subs	r0, r0, r5
 800b896:	4083      	lsls	r3, r0
 800b898:	6822      	ldr	r2, [r4, #0]
 800b89a:	3601      	adds	r6, #1
 800b89c:	4313      	orrs	r3, r2
 800b89e:	6023      	str	r3, [r4, #0]
 800b8a0:	7831      	ldrb	r1, [r6, #0]
 800b8a2:	2206      	movs	r2, #6
 800b8a4:	482a      	ldr	r0, [pc, #168]	@ (800b950 <_vfiprintf_r+0x22c>)
 800b8a6:	1c75      	adds	r5, r6, #1
 800b8a8:	7621      	strb	r1, [r4, #24]
 800b8aa:	f7fd fbd5 	bl	8009058 <memchr>
 800b8ae:	2800      	cmp	r0, #0
 800b8b0:	d040      	beq.n	800b934 <_vfiprintf_r+0x210>
 800b8b2:	4b28      	ldr	r3, [pc, #160]	@ (800b954 <_vfiprintf_r+0x230>)
 800b8b4:	2b00      	cmp	r3, #0
 800b8b6:	d122      	bne.n	800b8fe <_vfiprintf_r+0x1da>
 800b8b8:	2207      	movs	r2, #7
 800b8ba:	9b07      	ldr	r3, [sp, #28]
 800b8bc:	3307      	adds	r3, #7
 800b8be:	4393      	bics	r3, r2
 800b8c0:	3308      	adds	r3, #8
 800b8c2:	9307      	str	r3, [sp, #28]
 800b8c4:	6963      	ldr	r3, [r4, #20]
 800b8c6:	9a04      	ldr	r2, [sp, #16]
 800b8c8:	189b      	adds	r3, r3, r2
 800b8ca:	6163      	str	r3, [r4, #20]
 800b8cc:	e762      	b.n	800b794 <_vfiprintf_r+0x70>
 800b8ce:	4343      	muls	r3, r0
 800b8d0:	002e      	movs	r6, r5
 800b8d2:	2101      	movs	r1, #1
 800b8d4:	189b      	adds	r3, r3, r2
 800b8d6:	e7a4      	b.n	800b822 <_vfiprintf_r+0xfe>
 800b8d8:	2300      	movs	r3, #0
 800b8da:	200a      	movs	r0, #10
 800b8dc:	0019      	movs	r1, r3
 800b8de:	3601      	adds	r6, #1
 800b8e0:	6063      	str	r3, [r4, #4]
 800b8e2:	7832      	ldrb	r2, [r6, #0]
 800b8e4:	1c75      	adds	r5, r6, #1
 800b8e6:	3a30      	subs	r2, #48	@ 0x30
 800b8e8:	2a09      	cmp	r2, #9
 800b8ea:	d903      	bls.n	800b8f4 <_vfiprintf_r+0x1d0>
 800b8ec:	2b00      	cmp	r3, #0
 800b8ee:	d0c8      	beq.n	800b882 <_vfiprintf_r+0x15e>
 800b8f0:	9109      	str	r1, [sp, #36]	@ 0x24
 800b8f2:	e7c6      	b.n	800b882 <_vfiprintf_r+0x15e>
 800b8f4:	4341      	muls	r1, r0
 800b8f6:	002e      	movs	r6, r5
 800b8f8:	2301      	movs	r3, #1
 800b8fa:	1889      	adds	r1, r1, r2
 800b8fc:	e7f1      	b.n	800b8e2 <_vfiprintf_r+0x1be>
 800b8fe:	aa07      	add	r2, sp, #28
 800b900:	9200      	str	r2, [sp, #0]
 800b902:	0021      	movs	r1, r4
 800b904:	003a      	movs	r2, r7
 800b906:	4b14      	ldr	r3, [pc, #80]	@ (800b958 <_vfiprintf_r+0x234>)
 800b908:	9803      	ldr	r0, [sp, #12]
 800b90a:	f7fb fdcb 	bl	80074a4 <_printf_float>
 800b90e:	9004      	str	r0, [sp, #16]
 800b910:	9b04      	ldr	r3, [sp, #16]
 800b912:	3301      	adds	r3, #1
 800b914:	d1d6      	bne.n	800b8c4 <_vfiprintf_r+0x1a0>
 800b916:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b918:	07db      	lsls	r3, r3, #31
 800b91a:	d405      	bmi.n	800b928 <_vfiprintf_r+0x204>
 800b91c:	89bb      	ldrh	r3, [r7, #12]
 800b91e:	059b      	lsls	r3, r3, #22
 800b920:	d402      	bmi.n	800b928 <_vfiprintf_r+0x204>
 800b922:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800b924:	f7fd fb92 	bl	800904c <__retarget_lock_release_recursive>
 800b928:	89bb      	ldrh	r3, [r7, #12]
 800b92a:	065b      	lsls	r3, r3, #25
 800b92c:	d500      	bpl.n	800b930 <_vfiprintf_r+0x20c>
 800b92e:	e71e      	b.n	800b76e <_vfiprintf_r+0x4a>
 800b930:	980d      	ldr	r0, [sp, #52]	@ 0x34
 800b932:	e71e      	b.n	800b772 <_vfiprintf_r+0x4e>
 800b934:	aa07      	add	r2, sp, #28
 800b936:	9200      	str	r2, [sp, #0]
 800b938:	0021      	movs	r1, r4
 800b93a:	003a      	movs	r2, r7
 800b93c:	4b06      	ldr	r3, [pc, #24]	@ (800b958 <_vfiprintf_r+0x234>)
 800b93e:	9803      	ldr	r0, [sp, #12]
 800b940:	f7fc f85e 	bl	8007a00 <_printf_i>
 800b944:	e7e3      	b.n	800b90e <_vfiprintf_r+0x1ea>
 800b946:	46c0      	nop			@ (mov r8, r8)
 800b948:	0800c0fc 	.word	0x0800c0fc
 800b94c:	0800c102 	.word	0x0800c102
 800b950:	0800c106 	.word	0x0800c106
 800b954:	080074a5 	.word	0x080074a5
 800b958:	0800b701 	.word	0x0800b701

0800b95c <__swbuf_r>:
 800b95c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b95e:	0006      	movs	r6, r0
 800b960:	000d      	movs	r5, r1
 800b962:	0014      	movs	r4, r2
 800b964:	2800      	cmp	r0, #0
 800b966:	d004      	beq.n	800b972 <__swbuf_r+0x16>
 800b968:	6a03      	ldr	r3, [r0, #32]
 800b96a:	2b00      	cmp	r3, #0
 800b96c:	d101      	bne.n	800b972 <__swbuf_r+0x16>
 800b96e:	f7fc fc47 	bl	8008200 <__sinit>
 800b972:	69a3      	ldr	r3, [r4, #24]
 800b974:	60a3      	str	r3, [r4, #8]
 800b976:	89a3      	ldrh	r3, [r4, #12]
 800b978:	071b      	lsls	r3, r3, #28
 800b97a:	d502      	bpl.n	800b982 <__swbuf_r+0x26>
 800b97c:	6923      	ldr	r3, [r4, #16]
 800b97e:	2b00      	cmp	r3, #0
 800b980:	d109      	bne.n	800b996 <__swbuf_r+0x3a>
 800b982:	0021      	movs	r1, r4
 800b984:	0030      	movs	r0, r6
 800b986:	f000 f82b 	bl	800b9e0 <__swsetup_r>
 800b98a:	2800      	cmp	r0, #0
 800b98c:	d003      	beq.n	800b996 <__swbuf_r+0x3a>
 800b98e:	2501      	movs	r5, #1
 800b990:	426d      	negs	r5, r5
 800b992:	0028      	movs	r0, r5
 800b994:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b996:	6923      	ldr	r3, [r4, #16]
 800b998:	6820      	ldr	r0, [r4, #0]
 800b99a:	b2ef      	uxtb	r7, r5
 800b99c:	1ac0      	subs	r0, r0, r3
 800b99e:	6963      	ldr	r3, [r4, #20]
 800b9a0:	b2ed      	uxtb	r5, r5
 800b9a2:	4283      	cmp	r3, r0
 800b9a4:	dc05      	bgt.n	800b9b2 <__swbuf_r+0x56>
 800b9a6:	0021      	movs	r1, r4
 800b9a8:	0030      	movs	r0, r6
 800b9aa:	f7fe ffe5 	bl	800a978 <_fflush_r>
 800b9ae:	2800      	cmp	r0, #0
 800b9b0:	d1ed      	bne.n	800b98e <__swbuf_r+0x32>
 800b9b2:	68a3      	ldr	r3, [r4, #8]
 800b9b4:	3001      	adds	r0, #1
 800b9b6:	3b01      	subs	r3, #1
 800b9b8:	60a3      	str	r3, [r4, #8]
 800b9ba:	6823      	ldr	r3, [r4, #0]
 800b9bc:	1c5a      	adds	r2, r3, #1
 800b9be:	6022      	str	r2, [r4, #0]
 800b9c0:	701f      	strb	r7, [r3, #0]
 800b9c2:	6963      	ldr	r3, [r4, #20]
 800b9c4:	4283      	cmp	r3, r0
 800b9c6:	d004      	beq.n	800b9d2 <__swbuf_r+0x76>
 800b9c8:	89a3      	ldrh	r3, [r4, #12]
 800b9ca:	07db      	lsls	r3, r3, #31
 800b9cc:	d5e1      	bpl.n	800b992 <__swbuf_r+0x36>
 800b9ce:	2d0a      	cmp	r5, #10
 800b9d0:	d1df      	bne.n	800b992 <__swbuf_r+0x36>
 800b9d2:	0021      	movs	r1, r4
 800b9d4:	0030      	movs	r0, r6
 800b9d6:	f7fe ffcf 	bl	800a978 <_fflush_r>
 800b9da:	2800      	cmp	r0, #0
 800b9dc:	d0d9      	beq.n	800b992 <__swbuf_r+0x36>
 800b9de:	e7d6      	b.n	800b98e <__swbuf_r+0x32>

0800b9e0 <__swsetup_r>:
 800b9e0:	4b2d      	ldr	r3, [pc, #180]	@ (800ba98 <__swsetup_r+0xb8>)
 800b9e2:	b570      	push	{r4, r5, r6, lr}
 800b9e4:	0005      	movs	r5, r0
 800b9e6:	6818      	ldr	r0, [r3, #0]
 800b9e8:	000c      	movs	r4, r1
 800b9ea:	2800      	cmp	r0, #0
 800b9ec:	d004      	beq.n	800b9f8 <__swsetup_r+0x18>
 800b9ee:	6a03      	ldr	r3, [r0, #32]
 800b9f0:	2b00      	cmp	r3, #0
 800b9f2:	d101      	bne.n	800b9f8 <__swsetup_r+0x18>
 800b9f4:	f7fc fc04 	bl	8008200 <__sinit>
 800b9f8:	220c      	movs	r2, #12
 800b9fa:	5ea3      	ldrsh	r3, [r4, r2]
 800b9fc:	071a      	lsls	r2, r3, #28
 800b9fe:	d423      	bmi.n	800ba48 <__swsetup_r+0x68>
 800ba00:	06da      	lsls	r2, r3, #27
 800ba02:	d407      	bmi.n	800ba14 <__swsetup_r+0x34>
 800ba04:	2209      	movs	r2, #9
 800ba06:	602a      	str	r2, [r5, #0]
 800ba08:	2240      	movs	r2, #64	@ 0x40
 800ba0a:	2001      	movs	r0, #1
 800ba0c:	4313      	orrs	r3, r2
 800ba0e:	81a3      	strh	r3, [r4, #12]
 800ba10:	4240      	negs	r0, r0
 800ba12:	e03a      	b.n	800ba8a <__swsetup_r+0xaa>
 800ba14:	075b      	lsls	r3, r3, #29
 800ba16:	d513      	bpl.n	800ba40 <__swsetup_r+0x60>
 800ba18:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ba1a:	2900      	cmp	r1, #0
 800ba1c:	d008      	beq.n	800ba30 <__swsetup_r+0x50>
 800ba1e:	0023      	movs	r3, r4
 800ba20:	3344      	adds	r3, #68	@ 0x44
 800ba22:	4299      	cmp	r1, r3
 800ba24:	d002      	beq.n	800ba2c <__swsetup_r+0x4c>
 800ba26:	0028      	movs	r0, r5
 800ba28:	f7ff fdec 	bl	800b604 <_free_r>
 800ba2c:	2300      	movs	r3, #0
 800ba2e:	6363      	str	r3, [r4, #52]	@ 0x34
 800ba30:	2224      	movs	r2, #36	@ 0x24
 800ba32:	89a3      	ldrh	r3, [r4, #12]
 800ba34:	4393      	bics	r3, r2
 800ba36:	81a3      	strh	r3, [r4, #12]
 800ba38:	2300      	movs	r3, #0
 800ba3a:	6063      	str	r3, [r4, #4]
 800ba3c:	6923      	ldr	r3, [r4, #16]
 800ba3e:	6023      	str	r3, [r4, #0]
 800ba40:	2308      	movs	r3, #8
 800ba42:	89a2      	ldrh	r2, [r4, #12]
 800ba44:	4313      	orrs	r3, r2
 800ba46:	81a3      	strh	r3, [r4, #12]
 800ba48:	6923      	ldr	r3, [r4, #16]
 800ba4a:	2b00      	cmp	r3, #0
 800ba4c:	d10b      	bne.n	800ba66 <__swsetup_r+0x86>
 800ba4e:	21a0      	movs	r1, #160	@ 0xa0
 800ba50:	2280      	movs	r2, #128	@ 0x80
 800ba52:	89a3      	ldrh	r3, [r4, #12]
 800ba54:	0089      	lsls	r1, r1, #2
 800ba56:	0092      	lsls	r2, r2, #2
 800ba58:	400b      	ands	r3, r1
 800ba5a:	4293      	cmp	r3, r2
 800ba5c:	d003      	beq.n	800ba66 <__swsetup_r+0x86>
 800ba5e:	0021      	movs	r1, r4
 800ba60:	0028      	movs	r0, r5
 800ba62:	f000 f845 	bl	800baf0 <__smakebuf_r>
 800ba66:	220c      	movs	r2, #12
 800ba68:	5ea3      	ldrsh	r3, [r4, r2]
 800ba6a:	2101      	movs	r1, #1
 800ba6c:	001a      	movs	r2, r3
 800ba6e:	400a      	ands	r2, r1
 800ba70:	420b      	tst	r3, r1
 800ba72:	d00b      	beq.n	800ba8c <__swsetup_r+0xac>
 800ba74:	2200      	movs	r2, #0
 800ba76:	60a2      	str	r2, [r4, #8]
 800ba78:	6962      	ldr	r2, [r4, #20]
 800ba7a:	4252      	negs	r2, r2
 800ba7c:	61a2      	str	r2, [r4, #24]
 800ba7e:	2000      	movs	r0, #0
 800ba80:	6922      	ldr	r2, [r4, #16]
 800ba82:	4282      	cmp	r2, r0
 800ba84:	d101      	bne.n	800ba8a <__swsetup_r+0xaa>
 800ba86:	061a      	lsls	r2, r3, #24
 800ba88:	d4be      	bmi.n	800ba08 <__swsetup_r+0x28>
 800ba8a:	bd70      	pop	{r4, r5, r6, pc}
 800ba8c:	0799      	lsls	r1, r3, #30
 800ba8e:	d400      	bmi.n	800ba92 <__swsetup_r+0xb2>
 800ba90:	6962      	ldr	r2, [r4, #20]
 800ba92:	60a2      	str	r2, [r4, #8]
 800ba94:	e7f3      	b.n	800ba7e <__swsetup_r+0x9e>
 800ba96:	46c0      	nop			@ (mov r8, r8)
 800ba98:	2000018c 	.word	0x2000018c

0800ba9c <__swhatbuf_r>:
 800ba9c:	b570      	push	{r4, r5, r6, lr}
 800ba9e:	000e      	movs	r6, r1
 800baa0:	001d      	movs	r5, r3
 800baa2:	230e      	movs	r3, #14
 800baa4:	5ec9      	ldrsh	r1, [r1, r3]
 800baa6:	0014      	movs	r4, r2
 800baa8:	b096      	sub	sp, #88	@ 0x58
 800baaa:	2900      	cmp	r1, #0
 800baac:	da0c      	bge.n	800bac8 <__swhatbuf_r+0x2c>
 800baae:	89b2      	ldrh	r2, [r6, #12]
 800bab0:	2380      	movs	r3, #128	@ 0x80
 800bab2:	0011      	movs	r1, r2
 800bab4:	4019      	ands	r1, r3
 800bab6:	421a      	tst	r2, r3
 800bab8:	d114      	bne.n	800bae4 <__swhatbuf_r+0x48>
 800baba:	2380      	movs	r3, #128	@ 0x80
 800babc:	00db      	lsls	r3, r3, #3
 800babe:	2000      	movs	r0, #0
 800bac0:	6029      	str	r1, [r5, #0]
 800bac2:	6023      	str	r3, [r4, #0]
 800bac4:	b016      	add	sp, #88	@ 0x58
 800bac6:	bd70      	pop	{r4, r5, r6, pc}
 800bac8:	466a      	mov	r2, sp
 800baca:	f000 f8ad 	bl	800bc28 <_fstat_r>
 800bace:	2800      	cmp	r0, #0
 800bad0:	dbed      	blt.n	800baae <__swhatbuf_r+0x12>
 800bad2:	23f0      	movs	r3, #240	@ 0xf0
 800bad4:	9901      	ldr	r1, [sp, #4]
 800bad6:	021b      	lsls	r3, r3, #8
 800bad8:	4019      	ands	r1, r3
 800bada:	4b04      	ldr	r3, [pc, #16]	@ (800baec <__swhatbuf_r+0x50>)
 800badc:	18c9      	adds	r1, r1, r3
 800bade:	424b      	negs	r3, r1
 800bae0:	4159      	adcs	r1, r3
 800bae2:	e7ea      	b.n	800baba <__swhatbuf_r+0x1e>
 800bae4:	2100      	movs	r1, #0
 800bae6:	2340      	movs	r3, #64	@ 0x40
 800bae8:	e7e9      	b.n	800babe <__swhatbuf_r+0x22>
 800baea:	46c0      	nop			@ (mov r8, r8)
 800baec:	ffffe000 	.word	0xffffe000

0800baf0 <__smakebuf_r>:
 800baf0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800baf2:	2602      	movs	r6, #2
 800baf4:	898b      	ldrh	r3, [r1, #12]
 800baf6:	0005      	movs	r5, r0
 800baf8:	000c      	movs	r4, r1
 800bafa:	b085      	sub	sp, #20
 800bafc:	4233      	tst	r3, r6
 800bafe:	d007      	beq.n	800bb10 <__smakebuf_r+0x20>
 800bb00:	0023      	movs	r3, r4
 800bb02:	3347      	adds	r3, #71	@ 0x47
 800bb04:	6023      	str	r3, [r4, #0]
 800bb06:	6123      	str	r3, [r4, #16]
 800bb08:	2301      	movs	r3, #1
 800bb0a:	6163      	str	r3, [r4, #20]
 800bb0c:	b005      	add	sp, #20
 800bb0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bb10:	ab03      	add	r3, sp, #12
 800bb12:	aa02      	add	r2, sp, #8
 800bb14:	f7ff ffc2 	bl	800ba9c <__swhatbuf_r>
 800bb18:	9f02      	ldr	r7, [sp, #8]
 800bb1a:	9001      	str	r0, [sp, #4]
 800bb1c:	0039      	movs	r1, r7
 800bb1e:	0028      	movs	r0, r5
 800bb20:	f7fe fe12 	bl	800a748 <_malloc_r>
 800bb24:	2800      	cmp	r0, #0
 800bb26:	d108      	bne.n	800bb3a <__smakebuf_r+0x4a>
 800bb28:	220c      	movs	r2, #12
 800bb2a:	5ea3      	ldrsh	r3, [r4, r2]
 800bb2c:	059a      	lsls	r2, r3, #22
 800bb2e:	d4ed      	bmi.n	800bb0c <__smakebuf_r+0x1c>
 800bb30:	2203      	movs	r2, #3
 800bb32:	4393      	bics	r3, r2
 800bb34:	431e      	orrs	r6, r3
 800bb36:	81a6      	strh	r6, [r4, #12]
 800bb38:	e7e2      	b.n	800bb00 <__smakebuf_r+0x10>
 800bb3a:	2380      	movs	r3, #128	@ 0x80
 800bb3c:	89a2      	ldrh	r2, [r4, #12]
 800bb3e:	6020      	str	r0, [r4, #0]
 800bb40:	4313      	orrs	r3, r2
 800bb42:	81a3      	strh	r3, [r4, #12]
 800bb44:	9b03      	ldr	r3, [sp, #12]
 800bb46:	6120      	str	r0, [r4, #16]
 800bb48:	6167      	str	r7, [r4, #20]
 800bb4a:	2b00      	cmp	r3, #0
 800bb4c:	d00c      	beq.n	800bb68 <__smakebuf_r+0x78>
 800bb4e:	0028      	movs	r0, r5
 800bb50:	230e      	movs	r3, #14
 800bb52:	5ee1      	ldrsh	r1, [r4, r3]
 800bb54:	f000 f840 	bl	800bbd8 <_isatty_r>
 800bb58:	2800      	cmp	r0, #0
 800bb5a:	d005      	beq.n	800bb68 <__smakebuf_r+0x78>
 800bb5c:	2303      	movs	r3, #3
 800bb5e:	89a2      	ldrh	r2, [r4, #12]
 800bb60:	439a      	bics	r2, r3
 800bb62:	3b02      	subs	r3, #2
 800bb64:	4313      	orrs	r3, r2
 800bb66:	81a3      	strh	r3, [r4, #12]
 800bb68:	89a3      	ldrh	r3, [r4, #12]
 800bb6a:	9a01      	ldr	r2, [sp, #4]
 800bb6c:	4313      	orrs	r3, r2
 800bb6e:	81a3      	strh	r3, [r4, #12]
 800bb70:	e7cc      	b.n	800bb0c <__smakebuf_r+0x1c>

0800bb72 <_raise_r>:
 800bb72:	b570      	push	{r4, r5, r6, lr}
 800bb74:	0004      	movs	r4, r0
 800bb76:	000d      	movs	r5, r1
 800bb78:	291f      	cmp	r1, #31
 800bb7a:	d904      	bls.n	800bb86 <_raise_r+0x14>
 800bb7c:	2316      	movs	r3, #22
 800bb7e:	6003      	str	r3, [r0, #0]
 800bb80:	2001      	movs	r0, #1
 800bb82:	4240      	negs	r0, r0
 800bb84:	bd70      	pop	{r4, r5, r6, pc}
 800bb86:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 800bb88:	2b00      	cmp	r3, #0
 800bb8a:	d004      	beq.n	800bb96 <_raise_r+0x24>
 800bb8c:	008a      	lsls	r2, r1, #2
 800bb8e:	189b      	adds	r3, r3, r2
 800bb90:	681a      	ldr	r2, [r3, #0]
 800bb92:	2a00      	cmp	r2, #0
 800bb94:	d108      	bne.n	800bba8 <_raise_r+0x36>
 800bb96:	0020      	movs	r0, r4
 800bb98:	f000 f842 	bl	800bc20 <_getpid_r>
 800bb9c:	002a      	movs	r2, r5
 800bb9e:	0001      	movs	r1, r0
 800bba0:	0020      	movs	r0, r4
 800bba2:	f000 f82b 	bl	800bbfc <_kill_r>
 800bba6:	e7ed      	b.n	800bb84 <_raise_r+0x12>
 800bba8:	2a01      	cmp	r2, #1
 800bbaa:	d009      	beq.n	800bbc0 <_raise_r+0x4e>
 800bbac:	1c51      	adds	r1, r2, #1
 800bbae:	d103      	bne.n	800bbb8 <_raise_r+0x46>
 800bbb0:	2316      	movs	r3, #22
 800bbb2:	6003      	str	r3, [r0, #0]
 800bbb4:	2001      	movs	r0, #1
 800bbb6:	e7e5      	b.n	800bb84 <_raise_r+0x12>
 800bbb8:	2100      	movs	r1, #0
 800bbba:	0028      	movs	r0, r5
 800bbbc:	6019      	str	r1, [r3, #0]
 800bbbe:	4790      	blx	r2
 800bbc0:	2000      	movs	r0, #0
 800bbc2:	e7df      	b.n	800bb84 <_raise_r+0x12>

0800bbc4 <raise>:
 800bbc4:	b510      	push	{r4, lr}
 800bbc6:	4b03      	ldr	r3, [pc, #12]	@ (800bbd4 <raise+0x10>)
 800bbc8:	0001      	movs	r1, r0
 800bbca:	6818      	ldr	r0, [r3, #0]
 800bbcc:	f7ff ffd1 	bl	800bb72 <_raise_r>
 800bbd0:	bd10      	pop	{r4, pc}
 800bbd2:	46c0      	nop			@ (mov r8, r8)
 800bbd4:	2000018c 	.word	0x2000018c

0800bbd8 <_isatty_r>:
 800bbd8:	2300      	movs	r3, #0
 800bbda:	b570      	push	{r4, r5, r6, lr}
 800bbdc:	4d06      	ldr	r5, [pc, #24]	@ (800bbf8 <_isatty_r+0x20>)
 800bbde:	0004      	movs	r4, r0
 800bbe0:	0008      	movs	r0, r1
 800bbe2:	602b      	str	r3, [r5, #0]
 800bbe4:	f7f9 fd21 	bl	800562a <_isatty>
 800bbe8:	1c43      	adds	r3, r0, #1
 800bbea:	d103      	bne.n	800bbf4 <_isatty_r+0x1c>
 800bbec:	682b      	ldr	r3, [r5, #0]
 800bbee:	2b00      	cmp	r3, #0
 800bbf0:	d000      	beq.n	800bbf4 <_isatty_r+0x1c>
 800bbf2:	6023      	str	r3, [r4, #0]
 800bbf4:	bd70      	pop	{r4, r5, r6, pc}
 800bbf6:	46c0      	nop			@ (mov r8, r8)
 800bbf8:	20000454 	.word	0x20000454

0800bbfc <_kill_r>:
 800bbfc:	2300      	movs	r3, #0
 800bbfe:	b570      	push	{r4, r5, r6, lr}
 800bc00:	4d06      	ldr	r5, [pc, #24]	@ (800bc1c <_kill_r+0x20>)
 800bc02:	0004      	movs	r4, r0
 800bc04:	0008      	movs	r0, r1
 800bc06:	0011      	movs	r1, r2
 800bc08:	602b      	str	r3, [r5, #0]
 800bc0a:	f7f9 fca0 	bl	800554e <_kill>
 800bc0e:	1c43      	adds	r3, r0, #1
 800bc10:	d103      	bne.n	800bc1a <_kill_r+0x1e>
 800bc12:	682b      	ldr	r3, [r5, #0]
 800bc14:	2b00      	cmp	r3, #0
 800bc16:	d000      	beq.n	800bc1a <_kill_r+0x1e>
 800bc18:	6023      	str	r3, [r4, #0]
 800bc1a:	bd70      	pop	{r4, r5, r6, pc}
 800bc1c:	20000454 	.word	0x20000454

0800bc20 <_getpid_r>:
 800bc20:	b510      	push	{r4, lr}
 800bc22:	f7f9 fc8e 	bl	8005542 <_getpid>
 800bc26:	bd10      	pop	{r4, pc}

0800bc28 <_fstat_r>:
 800bc28:	2300      	movs	r3, #0
 800bc2a:	b570      	push	{r4, r5, r6, lr}
 800bc2c:	4d06      	ldr	r5, [pc, #24]	@ (800bc48 <_fstat_r+0x20>)
 800bc2e:	0004      	movs	r4, r0
 800bc30:	0008      	movs	r0, r1
 800bc32:	0011      	movs	r1, r2
 800bc34:	602b      	str	r3, [r5, #0]
 800bc36:	f7f9 fcea 	bl	800560e <_fstat>
 800bc3a:	1c43      	adds	r3, r0, #1
 800bc3c:	d103      	bne.n	800bc46 <_fstat_r+0x1e>
 800bc3e:	682b      	ldr	r3, [r5, #0]
 800bc40:	2b00      	cmp	r3, #0
 800bc42:	d000      	beq.n	800bc46 <_fstat_r+0x1e>
 800bc44:	6023      	str	r3, [r4, #0]
 800bc46:	bd70      	pop	{r4, r5, r6, pc}
 800bc48:	20000454 	.word	0x20000454

0800bc4c <_init>:
 800bc4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bc4e:	46c0      	nop			@ (mov r8, r8)
 800bc50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bc52:	bc08      	pop	{r3}
 800bc54:	469e      	mov	lr, r3
 800bc56:	4770      	bx	lr

0800bc58 <_fini>:
 800bc58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bc5a:	46c0      	nop			@ (mov r8, r8)
 800bc5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bc5e:	bc08      	pop	{r3}
 800bc60:	469e      	mov	lr, r3
 800bc62:	4770      	bx	lr
