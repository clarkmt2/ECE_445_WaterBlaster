
WaterBlasterFirmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000019d8  080000b8  080000b8  000010b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000050  08001a90  08001a90  00002a90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001ae0  08001ae0  0000300c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08001ae0  08001ae0  0000300c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08001ae0  08001ae0  0000300c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001ae0  08001ae0  00002ae0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08001ae4  08001ae4  00002ae4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08001ae8  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  2000000c  08001af4  0000300c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000002c  08001af4  0000302c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000300c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00003cd8  00000000  00000000  00003034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000012e3  00000000  00000000  00006d0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000530  00000000  00000000  00007ff0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000003c7  00000000  00000000  00008520  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000138ba  00000000  00000000  000088e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000627b  00000000  00000000  0001c1a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007a465  00000000  00000000  0002241c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0009c881  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000010b8  00000000  00000000  0009c8c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007f  00000000  00000000  0009d97c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	@ (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	@ (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	@ (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	2000000c 	.word	0x2000000c
 80000d8:	00000000 	.word	0x00000000
 80000dc:	08001a78 	.word	0x08001a78

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	@ (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	@ (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	@ (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			@ (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	20000010 	.word	0x20000010
 80000fc:	08001a78 	.word	0x08001a78

08000100 <__udivsi3>:
 8000100:	2200      	movs	r2, #0
 8000102:	0843      	lsrs	r3, r0, #1
 8000104:	428b      	cmp	r3, r1
 8000106:	d374      	bcc.n	80001f2 <__udivsi3+0xf2>
 8000108:	0903      	lsrs	r3, r0, #4
 800010a:	428b      	cmp	r3, r1
 800010c:	d35f      	bcc.n	80001ce <__udivsi3+0xce>
 800010e:	0a03      	lsrs	r3, r0, #8
 8000110:	428b      	cmp	r3, r1
 8000112:	d344      	bcc.n	800019e <__udivsi3+0x9e>
 8000114:	0b03      	lsrs	r3, r0, #12
 8000116:	428b      	cmp	r3, r1
 8000118:	d328      	bcc.n	800016c <__udivsi3+0x6c>
 800011a:	0c03      	lsrs	r3, r0, #16
 800011c:	428b      	cmp	r3, r1
 800011e:	d30d      	bcc.n	800013c <__udivsi3+0x3c>
 8000120:	22ff      	movs	r2, #255	@ 0xff
 8000122:	0209      	lsls	r1, r1, #8
 8000124:	ba12      	rev	r2, r2
 8000126:	0c03      	lsrs	r3, r0, #16
 8000128:	428b      	cmp	r3, r1
 800012a:	d302      	bcc.n	8000132 <__udivsi3+0x32>
 800012c:	1212      	asrs	r2, r2, #8
 800012e:	0209      	lsls	r1, r1, #8
 8000130:	d065      	beq.n	80001fe <__udivsi3+0xfe>
 8000132:	0b03      	lsrs	r3, r0, #12
 8000134:	428b      	cmp	r3, r1
 8000136:	d319      	bcc.n	800016c <__udivsi3+0x6c>
 8000138:	e000      	b.n	800013c <__udivsi3+0x3c>
 800013a:	0a09      	lsrs	r1, r1, #8
 800013c:	0bc3      	lsrs	r3, r0, #15
 800013e:	428b      	cmp	r3, r1
 8000140:	d301      	bcc.n	8000146 <__udivsi3+0x46>
 8000142:	03cb      	lsls	r3, r1, #15
 8000144:	1ac0      	subs	r0, r0, r3
 8000146:	4152      	adcs	r2, r2
 8000148:	0b83      	lsrs	r3, r0, #14
 800014a:	428b      	cmp	r3, r1
 800014c:	d301      	bcc.n	8000152 <__udivsi3+0x52>
 800014e:	038b      	lsls	r3, r1, #14
 8000150:	1ac0      	subs	r0, r0, r3
 8000152:	4152      	adcs	r2, r2
 8000154:	0b43      	lsrs	r3, r0, #13
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x5e>
 800015a:	034b      	lsls	r3, r1, #13
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b03      	lsrs	r3, r0, #12
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x6a>
 8000166:	030b      	lsls	r3, r1, #12
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0ac3      	lsrs	r3, r0, #11
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x76>
 8000172:	02cb      	lsls	r3, r1, #11
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0a83      	lsrs	r3, r0, #10
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x82>
 800017e:	028b      	lsls	r3, r1, #10
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0a43      	lsrs	r3, r0, #9
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x8e>
 800018a:	024b      	lsls	r3, r1, #9
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a03      	lsrs	r3, r0, #8
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x9a>
 8000196:	020b      	lsls	r3, r1, #8
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	d2cd      	bcs.n	800013a <__udivsi3+0x3a>
 800019e:	09c3      	lsrs	r3, r0, #7
 80001a0:	428b      	cmp	r3, r1
 80001a2:	d301      	bcc.n	80001a8 <__udivsi3+0xa8>
 80001a4:	01cb      	lsls	r3, r1, #7
 80001a6:	1ac0      	subs	r0, r0, r3
 80001a8:	4152      	adcs	r2, r2
 80001aa:	0983      	lsrs	r3, r0, #6
 80001ac:	428b      	cmp	r3, r1
 80001ae:	d301      	bcc.n	80001b4 <__udivsi3+0xb4>
 80001b0:	018b      	lsls	r3, r1, #6
 80001b2:	1ac0      	subs	r0, r0, r3
 80001b4:	4152      	adcs	r2, r2
 80001b6:	0943      	lsrs	r3, r0, #5
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xc0>
 80001bc:	014b      	lsls	r3, r1, #5
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0903      	lsrs	r3, r0, #4
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xcc>
 80001c8:	010b      	lsls	r3, r1, #4
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	08c3      	lsrs	r3, r0, #3
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xd8>
 80001d4:	00cb      	lsls	r3, r1, #3
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0883      	lsrs	r3, r0, #2
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xe4>
 80001e0:	008b      	lsls	r3, r1, #2
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0843      	lsrs	r3, r0, #1
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xf0>
 80001ec:	004b      	lsls	r3, r1, #1
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	1a41      	subs	r1, r0, r1
 80001f4:	d200      	bcs.n	80001f8 <__udivsi3+0xf8>
 80001f6:	4601      	mov	r1, r0
 80001f8:	4152      	adcs	r2, r2
 80001fa:	4610      	mov	r0, r2
 80001fc:	4770      	bx	lr
 80001fe:	e7ff      	b.n	8000200 <__udivsi3+0x100>
 8000200:	b501      	push	{r0, lr}
 8000202:	2000      	movs	r0, #0
 8000204:	f000 f806 	bl	8000214 <__aeabi_idiv0>
 8000208:	bd02      	pop	{r1, pc}
 800020a:	46c0      	nop			@ (mov r8, r8)

0800020c <__aeabi_uidivmod>:
 800020c:	2900      	cmp	r1, #0
 800020e:	d0f7      	beq.n	8000200 <__udivsi3+0x100>
 8000210:	e776      	b.n	8000100 <__udivsi3>
 8000212:	4770      	bx	lr

08000214 <__aeabi_idiv0>:
 8000214:	4770      	bx	lr
 8000216:	46c0      	nop			@ (mov r8, r8)

08000218 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000218:	b580      	push	{r7, lr}
 800021a:	b082      	sub	sp, #8
 800021c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800021e:	f000 fc0d 	bl	8000a3c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000222:	f000 f8c7 	bl	80003b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000226:	f000 f90d 	bl	8000444 <MX_GPIO_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_10);
 800022a:	2380      	movs	r3, #128	@ 0x80
 800022c:	00da      	lsls	r2, r3, #3
 800022e:	23a0      	movs	r3, #160	@ 0xa0
 8000230:	05db      	lsls	r3, r3, #23
 8000232:	0011      	movs	r1, r2
 8000234:	0018      	movs	r0, r3
 8000236:	f000 fefd 	bl	8001034 <HAL_GPIO_TogglePin>

  /*
   * Set the reset to be high set
   * set the cs to be reset
   */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 800023a:	4b5b      	ldr	r3, [pc, #364]	@ (80003a8 <main+0x190>)
 800023c:	2200      	movs	r2, #0
 800023e:	2101      	movs	r1, #1
 8000240:	0018      	movs	r0, r3
 8000242:	f000 feda 	bl	8000ffa <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);
 8000246:	4b58      	ldr	r3, [pc, #352]	@ (80003a8 <main+0x190>)
 8000248:	2201      	movs	r2, #1
 800024a:	2102      	movs	r1, #2
 800024c:	0018      	movs	r0, r3
 800024e:	f000 fed4 	bl	8000ffa <HAL_GPIO_WritePin>
//  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_8); // set the solenoid valve as closed on power on
  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_9); // set the solenoid valve as closed on power on
 8000252:	2380      	movs	r3, #128	@ 0x80
 8000254:	009a      	lsls	r2, r3, #2
 8000256:	23a0      	movs	r3, #160	@ 0xa0
 8000258:	05db      	lsls	r3, r3, #23
 800025a:	0011      	movs	r1, r2
 800025c:	0018      	movs	r0, r3
 800025e:	f000 fee9 	bl	8001034 <HAL_GPIO_TogglePin>
  NHD_OLED_begin();
 8000262:	f000 f99d 	bl	80005a0 <NHD_OLED_begin>
  NHD_OLED_textClear();
 8000266:	f000 fb40 	bl	80008ea <NHD_OLED_textClear>
  NHD_OLED_cursorHome();
 800026a:	f000 fb49 	bl	8000900 <NHD_OLED_cursorHome>
  char* message = "Water Blaster";
 800026e:	4b4f      	ldr	r3, [pc, #316]	@ (80003ac <main+0x194>)
 8000270:	607b      	str	r3, [r7, #4]
  uint8_t length = 13;
 8000272:	1cfb      	adds	r3, r7, #3
 8000274:	220d      	movs	r2, #13
 8000276:	701a      	strb	r2, [r3, #0]
  NHD_OLED_print_len(message, length);
 8000278:	1cfb      	adds	r3, r7, #3
 800027a:	781a      	ldrb	r2, [r3, #0]
 800027c:	687b      	ldr	r3, [r7, #4]
 800027e:	0011      	movs	r1, r2
 8000280:	0018      	movs	r0, r3
 8000282:	f000 fb48 	bl	8000916 <NHD_OLED_print_len>
  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_11);
 8000286:	2380      	movs	r3, #128	@ 0x80
 8000288:	011a      	lsls	r2, r3, #4
 800028a:	23a0      	movs	r3, #160	@ 0xa0
 800028c:	05db      	lsls	r3, r3, #23
 800028e:	0011      	movs	r1, r2
 8000290:	0018      	movs	r0, r3
 8000292:	f000 fecf 	bl	8001034 <HAL_GPIO_TogglePin>
////  NHD_OLED_displayOn();

  while (1==1)
  {

	if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) == GPIO_PIN_RESET)
 8000296:	4b44      	ldr	r3, [pc, #272]	@ (80003a8 <main+0x190>)
 8000298:	2140      	movs	r1, #64	@ 0x40
 800029a:	0018      	movs	r0, r3
 800029c:	f000 fe90 	bl	8000fc0 <HAL_GPIO_ReadPin>
 80002a0:	1e03      	subs	r3, r0, #0
 80002a2:	d122      	bne.n	80002ea <main+0xd2>
	{
	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_9);
 80002a4:	2380      	movs	r3, #128	@ 0x80
 80002a6:	009a      	lsls	r2, r3, #2
 80002a8:	23a0      	movs	r3, #160	@ 0xa0
 80002aa:	05db      	lsls	r3, r3, #23
 80002ac:	0011      	movs	r1, r2
 80002ae:	0018      	movs	r0, r3
 80002b0:	f000 fec0 	bl	8001034 <HAL_GPIO_TogglePin>
	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_8);
 80002b4:	2380      	movs	r3, #128	@ 0x80
 80002b6:	005a      	lsls	r2, r3, #1
 80002b8:	23a0      	movs	r3, #160	@ 0xa0
 80002ba:	05db      	lsls	r3, r3, #23
 80002bc:	0011      	movs	r1, r2
 80002be:	0018      	movs	r0, r3
 80002c0:	f000 feb8 	bl	8001034 <HAL_GPIO_TogglePin>
	  HAL_Delay(50);
 80002c4:	2032      	movs	r0, #50	@ 0x32
 80002c6:	f000 fc3f 	bl	8000b48 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_8);
 80002ca:	2380      	movs	r3, #128	@ 0x80
 80002cc:	005a      	lsls	r2, r3, #1
 80002ce:	23a0      	movs	r3, #160	@ 0xa0
 80002d0:	05db      	lsls	r3, r3, #23
 80002d2:	0011      	movs	r1, r2
 80002d4:	0018      	movs	r0, r3
 80002d6:	f000 fead 	bl	8001034 <HAL_GPIO_TogglePin>
	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_9);
 80002da:	2380      	movs	r3, #128	@ 0x80
 80002dc:	009a      	lsls	r2, r3, #2
 80002de:	23a0      	movs	r3, #160	@ 0xa0
 80002e0:	05db      	lsls	r3, r3, #23
 80002e2:	0011      	movs	r1, r2
 80002e4:	0018      	movs	r0, r3
 80002e6:	f000 fea5 	bl	8001034 <HAL_GPIO_TogglePin>
	}
	if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == GPIO_PIN_RESET)
 80002ea:	23a0      	movs	r3, #160	@ 0xa0
 80002ec:	05db      	lsls	r3, r3, #23
 80002ee:	2101      	movs	r1, #1
 80002f0:	0018      	movs	r0, r3
 80002f2:	f000 fe65 	bl	8000fc0 <HAL_GPIO_ReadPin>
 80002f6:	1e03      	subs	r3, r0, #0
 80002f8:	d116      	bne.n	8000328 <main+0x110>
	{
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_2);
 80002fa:	4b2b      	ldr	r3, [pc, #172]	@ (80003a8 <main+0x190>)
 80002fc:	2104      	movs	r1, #4
 80002fe:	0018      	movs	r0, r3
 8000300:	f000 fe98 	bl	8001034 <HAL_GPIO_TogglePin>
	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_6);
 8000304:	4b2a      	ldr	r3, [pc, #168]	@ (80003b0 <main+0x198>)
 8000306:	2140      	movs	r1, #64	@ 0x40
 8000308:	0018      	movs	r0, r3
 800030a:	f000 fe93 	bl	8001034 <HAL_GPIO_TogglePin>
	  HAL_Delay(50);
 800030e:	2032      	movs	r0, #50	@ 0x32
 8000310:	f000 fc1a 	bl	8000b48 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_2);
 8000314:	4b24      	ldr	r3, [pc, #144]	@ (80003a8 <main+0x190>)
 8000316:	2104      	movs	r1, #4
 8000318:	0018      	movs	r0, r3
 800031a:	f000 fe8b 	bl	8001034 <HAL_GPIO_TogglePin>
	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_6);
 800031e:	4b24      	ldr	r3, [pc, #144]	@ (80003b0 <main+0x198>)
 8000320:	2140      	movs	r1, #64	@ 0x40
 8000322:	0018      	movs	r0, r3
 8000324:	f000 fe86 	bl	8001034 <HAL_GPIO_TogglePin>
	}
	if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1) == GPIO_PIN_RESET)
 8000328:	23a0      	movs	r3, #160	@ 0xa0
 800032a:	05db      	lsls	r3, r3, #23
 800032c:	2102      	movs	r1, #2
 800032e:	0018      	movs	r0, r3
 8000330:	f000 fe46 	bl	8000fc0 <HAL_GPIO_ReadPin>
 8000334:	1e03      	subs	r3, r0, #0
 8000336:	d1ae      	bne.n	8000296 <main+0x7e>
	{
	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_9);
 8000338:	2380      	movs	r3, #128	@ 0x80
 800033a:	009a      	lsls	r2, r3, #2
 800033c:	23a0      	movs	r3, #160	@ 0xa0
 800033e:	05db      	lsls	r3, r3, #23
 8000340:	0011      	movs	r1, r2
 8000342:	0018      	movs	r0, r3
 8000344:	f000 fe76 	bl	8001034 <HAL_GPIO_TogglePin>
	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_8);
 8000348:	2380      	movs	r3, #128	@ 0x80
 800034a:	005a      	lsls	r2, r3, #1
 800034c:	23a0      	movs	r3, #160	@ 0xa0
 800034e:	05db      	lsls	r3, r3, #23
 8000350:	0011      	movs	r1, r2
 8000352:	0018      	movs	r0, r3
 8000354:	f000 fe6e 	bl	8001034 <HAL_GPIO_TogglePin>
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_2);
 8000358:	4b13      	ldr	r3, [pc, #76]	@ (80003a8 <main+0x190>)
 800035a:	2104      	movs	r1, #4
 800035c:	0018      	movs	r0, r3
 800035e:	f000 fe69 	bl	8001034 <HAL_GPIO_TogglePin>
	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_6);
 8000362:	4b13      	ldr	r3, [pc, #76]	@ (80003b0 <main+0x198>)
 8000364:	2140      	movs	r1, #64	@ 0x40
 8000366:	0018      	movs	r0, r3
 8000368:	f000 fe64 	bl	8001034 <HAL_GPIO_TogglePin>
	  HAL_Delay(50);
 800036c:	2032      	movs	r0, #50	@ 0x32
 800036e:	f000 fbeb 	bl	8000b48 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_2);
 8000372:	4b0d      	ldr	r3, [pc, #52]	@ (80003a8 <main+0x190>)
 8000374:	2104      	movs	r1, #4
 8000376:	0018      	movs	r0, r3
 8000378:	f000 fe5c 	bl	8001034 <HAL_GPIO_TogglePin>
	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_6);
 800037c:	4b0c      	ldr	r3, [pc, #48]	@ (80003b0 <main+0x198>)
 800037e:	2140      	movs	r1, #64	@ 0x40
 8000380:	0018      	movs	r0, r3
 8000382:	f000 fe57 	bl	8001034 <HAL_GPIO_TogglePin>
	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_8);
 8000386:	2380      	movs	r3, #128	@ 0x80
 8000388:	005a      	lsls	r2, r3, #1
 800038a:	23a0      	movs	r3, #160	@ 0xa0
 800038c:	05db      	lsls	r3, r3, #23
 800038e:	0011      	movs	r1, r2
 8000390:	0018      	movs	r0, r3
 8000392:	f000 fe4f 	bl	8001034 <HAL_GPIO_TogglePin>
	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_9);
 8000396:	2380      	movs	r3, #128	@ 0x80
 8000398:	009a      	lsls	r2, r3, #2
 800039a:	23a0      	movs	r3, #160	@ 0xa0
 800039c:	05db      	lsls	r3, r3, #23
 800039e:	0011      	movs	r1, r2
 80003a0:	0018      	movs	r0, r3
 80003a2:	f000 fe47 	bl	8001034 <HAL_GPIO_TogglePin>
	if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) == GPIO_PIN_RESET)
 80003a6:	e776      	b.n	8000296 <main+0x7e>
 80003a8:	50000400 	.word	0x50000400
 80003ac:	08001a90 	.word	0x08001a90
 80003b0:	50000800 	.word	0x50000800

080003b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80003b4:	b590      	push	{r4, r7, lr}
 80003b6:	b093      	sub	sp, #76	@ 0x4c
 80003b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003ba:	2414      	movs	r4, #20
 80003bc:	193b      	adds	r3, r7, r4
 80003be:	0018      	movs	r0, r3
 80003c0:	2334      	movs	r3, #52	@ 0x34
 80003c2:	001a      	movs	r2, r3
 80003c4:	2100      	movs	r1, #0
 80003c6:	f001 fb2b 	bl	8001a20 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003ca:	1d3b      	adds	r3, r7, #4
 80003cc:	0018      	movs	r0, r3
 80003ce:	2310      	movs	r3, #16
 80003d0:	001a      	movs	r2, r3
 80003d2:	2100      	movs	r1, #0
 80003d4:	f001 fb24 	bl	8001a20 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80003d8:	2380      	movs	r3, #128	@ 0x80
 80003da:	009b      	lsls	r3, r3, #2
 80003dc:	0018      	movs	r0, r3
 80003de:	f000 fe45 	bl	800106c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80003e2:	193b      	adds	r3, r7, r4
 80003e4:	2202      	movs	r2, #2
 80003e6:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80003e8:	193b      	adds	r3, r7, r4
 80003ea:	2280      	movs	r2, #128	@ 0x80
 80003ec:	0052      	lsls	r2, r2, #1
 80003ee:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80003f0:	193b      	adds	r3, r7, r4
 80003f2:	2200      	movs	r2, #0
 80003f4:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80003f6:	193b      	adds	r3, r7, r4
 80003f8:	2240      	movs	r2, #64	@ 0x40
 80003fa:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80003fc:	193b      	adds	r3, r7, r4
 80003fe:	2200      	movs	r2, #0
 8000400:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000402:	193b      	adds	r3, r7, r4
 8000404:	0018      	movs	r0, r3
 8000406:	f000 fe71 	bl	80010ec <HAL_RCC_OscConfig>
 800040a:	1e03      	subs	r3, r0, #0
 800040c:	d001      	beq.n	8000412 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 800040e:	f000 f8c1 	bl	8000594 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000412:	1d3b      	adds	r3, r7, #4
 8000414:	2207      	movs	r2, #7
 8000416:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000418:	1d3b      	adds	r3, r7, #4
 800041a:	2200      	movs	r2, #0
 800041c:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800041e:	1d3b      	adds	r3, r7, #4
 8000420:	2200      	movs	r2, #0
 8000422:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000424:	1d3b      	adds	r3, r7, #4
 8000426:	2200      	movs	r2, #0
 8000428:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800042a:	1d3b      	adds	r3, r7, #4
 800042c:	2100      	movs	r1, #0
 800042e:	0018      	movs	r0, r3
 8000430:	f001 f96c 	bl	800170c <HAL_RCC_ClockConfig>
 8000434:	1e03      	subs	r3, r0, #0
 8000436:	d001      	beq.n	800043c <SystemClock_Config+0x88>
  {
    Error_Handler();
 8000438:	f000 f8ac 	bl	8000594 <Error_Handler>
  }
}
 800043c:	46c0      	nop			@ (mov r8, r8)
 800043e:	46bd      	mov	sp, r7
 8000440:	b013      	add	sp, #76	@ 0x4c
 8000442:	bd90      	pop	{r4, r7, pc}

08000444 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000444:	b590      	push	{r4, r7, lr}
 8000446:	b089      	sub	sp, #36	@ 0x24
 8000448:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800044a:	240c      	movs	r4, #12
 800044c:	193b      	adds	r3, r7, r4
 800044e:	0018      	movs	r0, r3
 8000450:	2314      	movs	r3, #20
 8000452:	001a      	movs	r2, r3
 8000454:	2100      	movs	r1, #0
 8000456:	f001 fae3 	bl	8001a20 <memset>
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800045a:	4b4b      	ldr	r3, [pc, #300]	@ (8000588 <MX_GPIO_Init+0x144>)
 800045c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800045e:	4b4a      	ldr	r3, [pc, #296]	@ (8000588 <MX_GPIO_Init+0x144>)
 8000460:	2101      	movs	r1, #1
 8000462:	430a      	orrs	r2, r1
 8000464:	635a      	str	r2, [r3, #52]	@ 0x34
 8000466:	4b48      	ldr	r3, [pc, #288]	@ (8000588 <MX_GPIO_Init+0x144>)
 8000468:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800046a:	2201      	movs	r2, #1
 800046c:	4013      	ands	r3, r2
 800046e:	60bb      	str	r3, [r7, #8]
 8000470:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000472:	4b45      	ldr	r3, [pc, #276]	@ (8000588 <MX_GPIO_Init+0x144>)
 8000474:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000476:	4b44      	ldr	r3, [pc, #272]	@ (8000588 <MX_GPIO_Init+0x144>)
 8000478:	2102      	movs	r1, #2
 800047a:	430a      	orrs	r2, r1
 800047c:	635a      	str	r2, [r3, #52]	@ 0x34
 800047e:	4b42      	ldr	r3, [pc, #264]	@ (8000588 <MX_GPIO_Init+0x144>)
 8000480:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000482:	2202      	movs	r2, #2
 8000484:	4013      	ands	r3, r2
 8000486:	607b      	str	r3, [r7, #4]
 8000488:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800048a:	4b3f      	ldr	r3, [pc, #252]	@ (8000588 <MX_GPIO_Init+0x144>)
 800048c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800048e:	4b3e      	ldr	r3, [pc, #248]	@ (8000588 <MX_GPIO_Init+0x144>)
 8000490:	2104      	movs	r1, #4
 8000492:	430a      	orrs	r2, r1
 8000494:	635a      	str	r2, [r3, #52]	@ 0x34
 8000496:	4b3c      	ldr	r3, [pc, #240]	@ (8000588 <MX_GPIO_Init+0x144>)
 8000498:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800049a:	2204      	movs	r2, #4
 800049c:	4013      	ands	r3, r2
 800049e:	603b      	str	r3, [r7, #0]
 80004a0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 80004a2:	23fa      	movs	r3, #250	@ 0xfa
 80004a4:	0119      	lsls	r1, r3, #4
 80004a6:	23a0      	movs	r3, #160	@ 0xa0
 80004a8:	05db      	lsls	r3, r3, #23
 80004aa:	2200      	movs	r2, #0
 80004ac:	0018      	movs	r0, r3
 80004ae:	f000 fda4 	bl	8000ffa <HAL_GPIO_WritePin>
                          |GPIO_PIN_10|GPIO_PIN_11, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2, GPIO_PIN_RESET);
 80004b2:	4b36      	ldr	r3, [pc, #216]	@ (800058c <MX_GPIO_Init+0x148>)
 80004b4:	2200      	movs	r2, #0
 80004b6:	2107      	movs	r1, #7
 80004b8:	0018      	movs	r0, r3
 80004ba:	f000 fd9e 	bl	8000ffa <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_RESET);
 80004be:	4b34      	ldr	r3, [pc, #208]	@ (8000590 <MX_GPIO_Init+0x14c>)
 80004c0:	2200      	movs	r2, #0
 80004c2:	2140      	movs	r1, #64	@ 0x40
 80004c4:	0018      	movs	r0, r3
 80004c6:	f000 fd98 	bl	8000ffa <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA0 PA1 PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_6;
 80004ca:	193b      	adds	r3, r7, r4
 80004cc:	2243      	movs	r2, #67	@ 0x43
 80004ce:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80004d0:	193b      	adds	r3, r7, r4
 80004d2:	2200      	movs	r2, #0
 80004d4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004d6:	193b      	adds	r3, r7, r4
 80004d8:	2200      	movs	r2, #0
 80004da:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004dc:	193a      	adds	r2, r7, r4
 80004de:	23a0      	movs	r3, #160	@ 0xa0
 80004e0:	05db      	lsls	r3, r3, #23
 80004e2:	0011      	movs	r1, r2
 80004e4:	0018      	movs	r0, r3
 80004e6:	f000 fc07 	bl	8000cf8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA5 PA7 PA8 PA9
                           PA10 PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 80004ea:	0021      	movs	r1, r4
 80004ec:	187b      	adds	r3, r7, r1
 80004ee:	22fa      	movs	r2, #250	@ 0xfa
 80004f0:	0112      	lsls	r2, r2, #4
 80004f2:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_10|GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004f4:	000c      	movs	r4, r1
 80004f6:	193b      	adds	r3, r7, r4
 80004f8:	2201      	movs	r2, #1
 80004fa:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004fc:	193b      	adds	r3, r7, r4
 80004fe:	2200      	movs	r2, #0
 8000500:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000502:	193b      	adds	r3, r7, r4
 8000504:	2200      	movs	r2, #0
 8000506:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000508:	193a      	adds	r2, r7, r4
 800050a:	23a0      	movs	r3, #160	@ 0xa0
 800050c:	05db      	lsls	r3, r3, #23
 800050e:	0011      	movs	r1, r2
 8000510:	0018      	movs	r0, r3
 8000512:	f000 fbf1 	bl	8000cf8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8000516:	193b      	adds	r3, r7, r4
 8000518:	2207      	movs	r2, #7
 800051a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800051c:	193b      	adds	r3, r7, r4
 800051e:	2201      	movs	r2, #1
 8000520:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000522:	193b      	adds	r3, r7, r4
 8000524:	2200      	movs	r2, #0
 8000526:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000528:	193b      	adds	r3, r7, r4
 800052a:	2200      	movs	r2, #0
 800052c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800052e:	193b      	adds	r3, r7, r4
 8000530:	4a16      	ldr	r2, [pc, #88]	@ (800058c <MX_GPIO_Init+0x148>)
 8000532:	0019      	movs	r1, r3
 8000534:	0010      	movs	r0, r2
 8000536:	f000 fbdf 	bl	8000cf8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 800053a:	193b      	adds	r3, r7, r4
 800053c:	2240      	movs	r2, #64	@ 0x40
 800053e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000540:	193b      	adds	r3, r7, r4
 8000542:	2201      	movs	r2, #1
 8000544:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000546:	193b      	adds	r3, r7, r4
 8000548:	2200      	movs	r2, #0
 800054a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800054c:	193b      	adds	r3, r7, r4
 800054e:	2200      	movs	r2, #0
 8000550:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000552:	193b      	adds	r3, r7, r4
 8000554:	4a0e      	ldr	r2, [pc, #56]	@ (8000590 <MX_GPIO_Init+0x14c>)
 8000556:	0019      	movs	r1, r3
 8000558:	0010      	movs	r0, r2
 800055a:	f000 fbcd 	bl	8000cf8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB6 PB7 PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8;
 800055e:	0021      	movs	r1, r4
 8000560:	187b      	adds	r3, r7, r1
 8000562:	22e0      	movs	r2, #224	@ 0xe0
 8000564:	0052      	lsls	r2, r2, #1
 8000566:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000568:	187b      	adds	r3, r7, r1
 800056a:	2200      	movs	r2, #0
 800056c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800056e:	187b      	adds	r3, r7, r1
 8000570:	2200      	movs	r2, #0
 8000572:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000574:	187b      	adds	r3, r7, r1
 8000576:	4a05      	ldr	r2, [pc, #20]	@ (800058c <MX_GPIO_Init+0x148>)
 8000578:	0019      	movs	r1, r3
 800057a:	0010      	movs	r0, r2
 800057c:	f000 fbbc 	bl	8000cf8 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000580:	46c0      	nop			@ (mov r8, r8)
 8000582:	46bd      	mov	sp, r7
 8000584:	b009      	add	sp, #36	@ 0x24
 8000586:	bd90      	pop	{r4, r7, pc}
 8000588:	40021000 	.word	0x40021000
 800058c:	50000400 	.word	0x50000400
 8000590:	50000800 	.word	0x50000800

08000594 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000598:	b672      	cpsid	i
}
 800059a:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800059c:	46c0      	nop			@ (mov r8, r8)
 800059e:	e7fd      	b.n	800059c <Error_Handler+0x8>

080005a0 <NHD_OLED_begin>:
// Parameters:
//    rows: number of rows/lines on the display.
//    columns: number of columns/characters per line on the display.
//
void NHD_OLED_begin()
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	af00      	add	r7, sp, #0
NHD_OLED_setupPins();
 80005a4:	f000 f916 	bl	80007d4 <NHD_OLED_setupPins>
NHD_OLED_setupInit();
 80005a8:	f000 f93a 	bl	8000820 <NHD_OLED_setupInit>
}
 80005ac:	46c0      	nop			@ (mov r8, r8)
 80005ae:	46bd      	mov	sp, r7
 80005b0:	bd80      	pop	{r7, pc}

080005b2 <NHD_OLED_SPIBitBang>:
// Parameters:
//   data: uint8_t to send to display
//   isCommand: command/data flag, where 0 = data and !0 = command
//
void NHD_OLED_SPIBitBang(uint8_t data, uint8_t isCommand)
{
 80005b2:	b590      	push	{r4, r7, lr}
 80005b4:	b085      	sub	sp, #20
 80005b6:	af00      	add	r7, sp, #0
 80005b8:	0002      	movs	r2, r0
 80005ba:	1dfb      	adds	r3, r7, #7
 80005bc:	701a      	strb	r2, [r3, #0]
 80005be:	1dbb      	adds	r3, r7, #6
 80005c0:	1c0a      	adds	r2, r1, #0
 80005c2:	701a      	strb	r2, [r3, #0]
uint8_t i, cb;

// If var "isCommand" is zero, we're sending a data uint8_t.
// If it's NON-zero, we're sending a command uint8_t.
if (isCommand == 0)
 80005c4:	1dbb      	adds	r3, r7, #6
 80005c6:	781b      	ldrb	r3, [r3, #0]
 80005c8:	2b00      	cmp	r3, #0
 80005ca:	d104      	bne.n	80005d6 <NHD_OLED_SPIBitBang+0x24>
cb = 0xFA; // Var "data" is just that, data.
 80005cc:	230e      	movs	r3, #14
 80005ce:	18fb      	adds	r3, r7, r3
 80005d0:	22fa      	movs	r2, #250	@ 0xfa
 80005d2:	701a      	strb	r2, [r3, #0]
 80005d4:	e003      	b.n	80005de <NHD_OLED_SPIBitBang+0x2c>
else
cb = 0xF8; // Var "data" is a command/control uint8_t.
 80005d6:	230e      	movs	r3, #14
 80005d8:	18fb      	adds	r3, r7, r3
 80005da:	22f8      	movs	r2, #248	@ 0xf8
 80005dc:	701a      	strb	r2, [r3, #0]

// Send the command-or-data type specifier...
for (i = 0; i < 8; i++) {
 80005de:	230f      	movs	r3, #15
 80005e0:	18fb      	adds	r3, r7, r3
 80005e2:	2200      	movs	r2, #0
 80005e4:	701a      	strb	r2, [r3, #0]
 80005e6:	e023      	b.n	8000630 <NHD_OLED_SPIBitBang+0x7e>
HAL_GPIO_WritePin(OLED_CLK_GPIO_Port, OLED_CLK_Pin, 0);
 80005e8:	23a0      	movs	r3, #160	@ 0xa0
 80005ea:	05db      	lsls	r3, r3, #23
 80005ec:	2200      	movs	r2, #0
 80005ee:	2120      	movs	r1, #32
 80005f0:	0018      	movs	r0, r3
 80005f2:	f000 fd02 	bl	8000ffa <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(OLED_MOSI_GPIO_Port, OLED_MOSI_Pin, (cb & 0x80) >> 7);
 80005f6:	240e      	movs	r4, #14
 80005f8:	193b      	adds	r3, r7, r4
 80005fa:	781b      	ldrb	r3, [r3, #0]
 80005fc:	09db      	lsrs	r3, r3, #7
 80005fe:	b2da      	uxtb	r2, r3
 8000600:	23a0      	movs	r3, #160	@ 0xa0
 8000602:	05db      	lsls	r3, r3, #23
 8000604:	2180      	movs	r1, #128	@ 0x80
 8000606:	0018      	movs	r0, r3
 8000608:	f000 fcf7 	bl	8000ffa <HAL_GPIO_WritePin>
cb = cb << 1;
 800060c:	193a      	adds	r2, r7, r4
 800060e:	193b      	adds	r3, r7, r4
 8000610:	781b      	ldrb	r3, [r3, #0]
 8000612:	18db      	adds	r3, r3, r3
 8000614:	7013      	strb	r3, [r2, #0]
HAL_GPIO_WritePin(OLED_CLK_GPIO_Port, OLED_CLK_Pin, 1);
 8000616:	23a0      	movs	r3, #160	@ 0xa0
 8000618:	05db      	lsls	r3, r3, #23
 800061a:	2201      	movs	r2, #1
 800061c:	2120      	movs	r1, #32
 800061e:	0018      	movs	r0, r3
 8000620:	f000 fceb 	bl	8000ffa <HAL_GPIO_WritePin>
for (i = 0; i < 8; i++) {
 8000624:	210f      	movs	r1, #15
 8000626:	187b      	adds	r3, r7, r1
 8000628:	781a      	ldrb	r2, [r3, #0]
 800062a:	187b      	adds	r3, r7, r1
 800062c:	3201      	adds	r2, #1
 800062e:	701a      	strb	r2, [r3, #0]
 8000630:	220f      	movs	r2, #15
 8000632:	18bb      	adds	r3, r7, r2
 8000634:	781b      	ldrb	r3, [r3, #0]
 8000636:	2b07      	cmp	r3, #7
 8000638:	d9d6      	bls.n	80005e8 <NHD_OLED_SPIBitBang+0x36>
}

// Then send the lowest 4 bits of the data uint8_t, in little-endian order...
for (i = 0; i < 4; i++) {
 800063a:	18bb      	adds	r3, r7, r2
 800063c:	2200      	movs	r2, #0
 800063e:	701a      	strb	r2, [r3, #0]
 8000640:	e023      	b.n	800068a <NHD_OLED_SPIBitBang+0xd8>
HAL_GPIO_WritePin(OLED_CLK_GPIO_Port, OLED_CLK_Pin, 0);
 8000642:	23a0      	movs	r3, #160	@ 0xa0
 8000644:	05db      	lsls	r3, r3, #23
 8000646:	2200      	movs	r2, #0
 8000648:	2120      	movs	r1, #32
 800064a:	0018      	movs	r0, r3
 800064c:	f000 fcd5 	bl	8000ffa <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(OLED_MOSI_GPIO_Port, OLED_MOSI_Pin, (data & 0x01));
 8000650:	1dfb      	adds	r3, r7, #7
 8000652:	781b      	ldrb	r3, [r3, #0]
 8000654:	2201      	movs	r2, #1
 8000656:	4013      	ands	r3, r2
 8000658:	b2da      	uxtb	r2, r3
 800065a:	23a0      	movs	r3, #160	@ 0xa0
 800065c:	05db      	lsls	r3, r3, #23
 800065e:	2180      	movs	r1, #128	@ 0x80
 8000660:	0018      	movs	r0, r3
 8000662:	f000 fcca 	bl	8000ffa <HAL_GPIO_WritePin>
data = data >> 1;
 8000666:	1dfb      	adds	r3, r7, #7
 8000668:	1dfa      	adds	r2, r7, #7
 800066a:	7812      	ldrb	r2, [r2, #0]
 800066c:	0852      	lsrs	r2, r2, #1
 800066e:	701a      	strb	r2, [r3, #0]
HAL_GPIO_WritePin(OLED_CLK_GPIO_Port, OLED_CLK_Pin, 1);
 8000670:	23a0      	movs	r3, #160	@ 0xa0
 8000672:	05db      	lsls	r3, r3, #23
 8000674:	2201      	movs	r2, #1
 8000676:	2120      	movs	r1, #32
 8000678:	0018      	movs	r0, r3
 800067a:	f000 fcbe 	bl	8000ffa <HAL_GPIO_WritePin>
for (i = 0; i < 4; i++) {
 800067e:	210f      	movs	r1, #15
 8000680:	187b      	adds	r3, r7, r1
 8000682:	781a      	ldrb	r2, [r3, #0]
 8000684:	187b      	adds	r3, r7, r1
 8000686:	3201      	adds	r2, #1
 8000688:	701a      	strb	r2, [r3, #0]
 800068a:	220f      	movs	r2, #15
 800068c:	18bb      	adds	r3, r7, r2
 800068e:	781b      	ldrb	r3, [r3, #0]
 8000690:	2b03      	cmp	r3, #3
 8000692:	d9d6      	bls.n	8000642 <NHD_OLED_SPIBitBang+0x90>
}

// Then send four zero bits...
for (i = 0; i < 4; i++) {
 8000694:	18bb      	adds	r3, r7, r2
 8000696:	2200      	movs	r2, #0
 8000698:	701a      	strb	r2, [r3, #0]
 800069a:	e01a      	b.n	80006d2 <NHD_OLED_SPIBitBang+0x120>
HAL_GPIO_WritePin(OLED_CLK_GPIO_Port, OLED_CLK_Pin, 0);
 800069c:	23a0      	movs	r3, #160	@ 0xa0
 800069e:	05db      	lsls	r3, r3, #23
 80006a0:	2200      	movs	r2, #0
 80006a2:	2120      	movs	r1, #32
 80006a4:	0018      	movs	r0, r3
 80006a6:	f000 fca8 	bl	8000ffa <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(OLED_MOSI_GPIO_Port, OLED_MOSI_Pin, 0);
 80006aa:	23a0      	movs	r3, #160	@ 0xa0
 80006ac:	05db      	lsls	r3, r3, #23
 80006ae:	2200      	movs	r2, #0
 80006b0:	2180      	movs	r1, #128	@ 0x80
 80006b2:	0018      	movs	r0, r3
 80006b4:	f000 fca1 	bl	8000ffa <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(OLED_CLK_GPIO_Port, OLED_CLK_Pin, 1);
 80006b8:	23a0      	movs	r3, #160	@ 0xa0
 80006ba:	05db      	lsls	r3, r3, #23
 80006bc:	2201      	movs	r2, #1
 80006be:	2120      	movs	r1, #32
 80006c0:	0018      	movs	r0, r3
 80006c2:	f000 fc9a 	bl	8000ffa <HAL_GPIO_WritePin>
for (i = 0; i < 4; i++) {
 80006c6:	210f      	movs	r1, #15
 80006c8:	187b      	adds	r3, r7, r1
 80006ca:	781a      	ldrb	r2, [r3, #0]
 80006cc:	187b      	adds	r3, r7, r1
 80006ce:	3201      	adds	r2, #1
 80006d0:	701a      	strb	r2, [r3, #0]
 80006d2:	220f      	movs	r2, #15
 80006d4:	18bb      	adds	r3, r7, r2
 80006d6:	781b      	ldrb	r3, [r3, #0]
 80006d8:	2b03      	cmp	r3, #3
 80006da:	d9df      	bls.n	800069c <NHD_OLED_SPIBitBang+0xea>
}

// Then send the highest 4 bits of the data uint8_t, in little-endian order...
for (i = 0; i < 4; i++) {
 80006dc:	18bb      	adds	r3, r7, r2
 80006de:	2200      	movs	r2, #0
 80006e0:	701a      	strb	r2, [r3, #0]
 80006e2:	e023      	b.n	800072c <NHD_OLED_SPIBitBang+0x17a>
HAL_GPIO_WritePin(OLED_CLK_GPIO_Port, OLED_CLK_Pin, 0);
 80006e4:	23a0      	movs	r3, #160	@ 0xa0
 80006e6:	05db      	lsls	r3, r3, #23
 80006e8:	2200      	movs	r2, #0
 80006ea:	2120      	movs	r1, #32
 80006ec:	0018      	movs	r0, r3
 80006ee:	f000 fc84 	bl	8000ffa <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(OLED_MOSI_GPIO_Port, OLED_MOSI_Pin, (data & 0x01));
 80006f2:	1dfb      	adds	r3, r7, #7
 80006f4:	781b      	ldrb	r3, [r3, #0]
 80006f6:	2201      	movs	r2, #1
 80006f8:	4013      	ands	r3, r2
 80006fa:	b2da      	uxtb	r2, r3
 80006fc:	23a0      	movs	r3, #160	@ 0xa0
 80006fe:	05db      	lsls	r3, r3, #23
 8000700:	2180      	movs	r1, #128	@ 0x80
 8000702:	0018      	movs	r0, r3
 8000704:	f000 fc79 	bl	8000ffa <HAL_GPIO_WritePin>
data = data >> 1;
 8000708:	1dfb      	adds	r3, r7, #7
 800070a:	1dfa      	adds	r2, r7, #7
 800070c:	7812      	ldrb	r2, [r2, #0]
 800070e:	0852      	lsrs	r2, r2, #1
 8000710:	701a      	strb	r2, [r3, #0]
HAL_GPIO_WritePin(OLED_CLK_GPIO_Port, OLED_CLK_Pin, 1);
 8000712:	23a0      	movs	r3, #160	@ 0xa0
 8000714:	05db      	lsls	r3, r3, #23
 8000716:	2201      	movs	r2, #1
 8000718:	2120      	movs	r1, #32
 800071a:	0018      	movs	r0, r3
 800071c:	f000 fc6d 	bl	8000ffa <HAL_GPIO_WritePin>
for (i = 0; i < 4; i++) {
 8000720:	210f      	movs	r1, #15
 8000722:	187b      	adds	r3, r7, r1
 8000724:	781a      	ldrb	r2, [r3, #0]
 8000726:	187b      	adds	r3, r7, r1
 8000728:	3201      	adds	r2, #1
 800072a:	701a      	strb	r2, [r3, #0]
 800072c:	220f      	movs	r2, #15
 800072e:	18bb      	adds	r3, r7, r2
 8000730:	781b      	ldrb	r3, [r3, #0]
 8000732:	2b03      	cmp	r3, #3
 8000734:	d9d6      	bls.n	80006e4 <NHD_OLED_SPIBitBang+0x132>
}

// And wrap up the send with four zero bits...
for (i = 0; i < 4; i++) {
 8000736:	18bb      	adds	r3, r7, r2
 8000738:	2200      	movs	r2, #0
 800073a:	701a      	strb	r2, [r3, #0]
 800073c:	e01a      	b.n	8000774 <NHD_OLED_SPIBitBang+0x1c2>
HAL_GPIO_WritePin(OLED_CLK_GPIO_Port, OLED_CLK_Pin, 0);
 800073e:	23a0      	movs	r3, #160	@ 0xa0
 8000740:	05db      	lsls	r3, r3, #23
 8000742:	2200      	movs	r2, #0
 8000744:	2120      	movs	r1, #32
 8000746:	0018      	movs	r0, r3
 8000748:	f000 fc57 	bl	8000ffa <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(OLED_MOSI_GPIO_Port, OLED_MOSI_Pin, 0);
 800074c:	23a0      	movs	r3, #160	@ 0xa0
 800074e:	05db      	lsls	r3, r3, #23
 8000750:	2200      	movs	r2, #0
 8000752:	2180      	movs	r1, #128	@ 0x80
 8000754:	0018      	movs	r0, r3
 8000756:	f000 fc50 	bl	8000ffa <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(OLED_CLK_GPIO_Port, OLED_CLK_Pin, 1);
 800075a:	23a0      	movs	r3, #160	@ 0xa0
 800075c:	05db      	lsls	r3, r3, #23
 800075e:	2201      	movs	r2, #1
 8000760:	2120      	movs	r1, #32
 8000762:	0018      	movs	r0, r3
 8000764:	f000 fc49 	bl	8000ffa <HAL_GPIO_WritePin>
for (i = 0; i < 4; i++) {
 8000768:	210f      	movs	r1, #15
 800076a:	187b      	adds	r3, r7, r1
 800076c:	781a      	ldrb	r2, [r3, #0]
 800076e:	187b      	adds	r3, r7, r1
 8000770:	3201      	adds	r2, #1
 8000772:	701a      	strb	r2, [r3, #0]
 8000774:	230f      	movs	r3, #15
 8000776:	18fb      	adds	r3, r7, r3
 8000778:	781b      	ldrb	r3, [r3, #0]
 800077a:	2b03      	cmp	r3, #3
 800077c:	d9df      	bls.n	800073e <NHD_OLED_SPIBitBang+0x18c>
}
}
 800077e:	46c0      	nop			@ (mov r8, r8)
 8000780:	46c0      	nop			@ (mov r8, r8)
 8000782:	46bd      	mov	sp, r7
 8000784:	b005      	add	sp, #20
 8000786:	bd90      	pop	{r4, r7, pc}

08000788 <NHD_OLED_sendCommand>:
//
// Parameters:
//   command: command uint8_t to send.
//
void NHD_OLED_sendCommand(uint8_t command)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b082      	sub	sp, #8
 800078c:	af00      	add	r7, sp, #0
 800078e:	0002      	movs	r2, r0
 8000790:	1dfb      	adds	r3, r7, #7
 8000792:	701a      	strb	r2, [r3, #0]
NHD_OLED_SPIBitBang(command, 1);
 8000794:	1dfb      	adds	r3, r7, #7
 8000796:	781b      	ldrb	r3, [r3, #0]
 8000798:	2101      	movs	r1, #1
 800079a:	0018      	movs	r0, r3
 800079c:	f7ff ff09 	bl	80005b2 <NHD_OLED_SPIBitBang>

HAL_Delay(1);
 80007a0:	2001      	movs	r0, #1
 80007a2:	f000 f9d1 	bl	8000b48 <HAL_Delay>
}
 80007a6:	46c0      	nop			@ (mov r8, r8)
 80007a8:	46bd      	mov	sp, r7
 80007aa:	b002      	add	sp, #8
 80007ac:	bd80      	pop	{r7, pc}

080007ae <NHD_OLED_sendData>:
//
// Parameters:
//   data: command uint8_t to send.
//
void NHD_OLED_sendData(uint8_t data)
{
 80007ae:	b580      	push	{r7, lr}
 80007b0:	b082      	sub	sp, #8
 80007b2:	af00      	add	r7, sp, #0
 80007b4:	0002      	movs	r2, r0
 80007b6:	1dfb      	adds	r3, r7, #7
 80007b8:	701a      	strb	r2, [r3, #0]
NHD_OLED_SPIBitBang(data, 0);
 80007ba:	1dfb      	adds	r3, r7, #7
 80007bc:	781b      	ldrb	r3, [r3, #0]
 80007be:	2100      	movs	r1, #0
 80007c0:	0018      	movs	r0, r3
 80007c2:	f7ff fef6 	bl	80005b2 <NHD_OLED_SPIBitBang>
HAL_Delay(1);
 80007c6:	2001      	movs	r0, #1
 80007c8:	f000 f9be 	bl	8000b48 <HAL_Delay>
}
 80007cc:	46c0      	nop			@ (mov r8, r8)
 80007ce:	46bd      	mov	sp, r7
 80007d0:	b002      	add	sp, #8
 80007d2:	bd80      	pop	{r7, pc}

080007d4 <NHD_OLED_setupPins>:
//
// Parameters:
//    NONE. Define pin OLED_MOSI for data and OLED_CLK for clock in the header file.
//
void NHD_OLED_setupPins()
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b086      	sub	sp, #24
 80007d8:	af00      	add	r7, sp, #0
GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80007da:	1d3b      	adds	r3, r7, #4
 80007dc:	0018      	movs	r0, r3
 80007de:	2314      	movs	r3, #20
 80007e0:	001a      	movs	r2, r3
 80007e2:	2100      	movs	r1, #0
 80007e4:	f001 f91c 	bl	8001a20 <memset>

GPIO_InitStruct.Pin = OLED_MOSI_Pin | OLED_CLK_Pin;
 80007e8:	1d3b      	adds	r3, r7, #4
 80007ea:	22a0      	movs	r2, #160	@ 0xa0
 80007ec:	601a      	str	r2, [r3, #0]
GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007ee:	1d3b      	adds	r3, r7, #4
 80007f0:	2201      	movs	r2, #1
 80007f2:	605a      	str	r2, [r3, #4]
GPIO_InitStruct.Pull = GPIO_PULLUP;
 80007f4:	1d3b      	adds	r3, r7, #4
 80007f6:	2201      	movs	r2, #1
 80007f8:	609a      	str	r2, [r3, #8]
GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80007fa:	1d3b      	adds	r3, r7, #4
 80007fc:	2202      	movs	r2, #2
 80007fe:	60da      	str	r2, [r3, #12]
HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000800:	1d3b      	adds	r3, r7, #4
 8000802:	4a06      	ldr	r2, [pc, #24]	@ (800081c <NHD_OLED_setupPins+0x48>)
 8000804:	0019      	movs	r1, r3
 8000806:	0010      	movs	r0, r2
 8000808:	f000 fa76 	bl	8000cf8 <HAL_GPIO_Init>

HAL_Delay(50);
 800080c:	2032      	movs	r0, #50	@ 0x32
 800080e:	f000 f99b 	bl	8000b48 <HAL_Delay>
}
 8000812:	46c0      	nop			@ (mov r8, r8)
 8000814:	46bd      	mov	sp, r7
 8000816:	b006      	add	sp, #24
 8000818:	bd80      	pop	{r7, pc}
 800081a:	46c0      	nop			@ (mov r8, r8)
 800081c:	50000400 	.word	0x50000400

08000820 <NHD_OLED_setupInit>:
// Initializes and configures the display. Note that the command set provided
// below is for Newhaven's slim OLED line, and individual products may require
// different settings.
//
void NHD_OLED_setupInit()
{
 8000820:	b580      	push	{r7, lr}
 8000822:	af00      	add	r7, sp, #0
// Internal voltage regulator configuration
NHD_OLED_sendCommand(0x2A); // Function set select > extended command set enable (RE = 1)
 8000824:	202a      	movs	r0, #42	@ 0x2a
 8000826:	f7ff ffaf 	bl	8000788 <NHD_OLED_sendCommand>
NHD_OLED_sendCommand(0x71);     // Internal Vdd regualtor control (function selection A) - command
 800082a:	2071      	movs	r0, #113	@ 0x71
 800082c:	f7ff ffac 	bl	8000788 <NHD_OLED_sendCommand>
NHD_OLED_sendData(0x00);        // Internal Vdd regualtor control (function selection A) - value
 8000830:	2000      	movs	r0, #0
 8000832:	f7ff ffbc 	bl	80007ae <NHD_OLED_sendData>

// Display off
NHD_OLED_sendCommand(0x28); // Function set select > fundamental (default) command set (RE = 0)
 8000836:	2028      	movs	r0, #40	@ 0x28
 8000838:	f7ff ffa6 	bl	8000788 <NHD_OLED_sendCommand>
NHD_OLED_sendCommand(0x08);     // Display off, cursor off, blink off
 800083c:	2008      	movs	r0, #8
 800083e:	f7ff ffa3 	bl	8000788 <NHD_OLED_sendCommand>

// Timing configuration
NHD_OLED_sendCommand(0x2A); // Function set select > extended command set enable (RE = 1)
 8000842:	202a      	movs	r0, #42	@ 0x2a
 8000844:	f7ff ffa0 	bl	8000788 <NHD_OLED_sendCommand>
NHD_OLED_sendCommand(0x79);  // Function set select > OLED command set enable (SD = 1)
 8000848:	2079      	movs	r0, #121	@ 0x79
 800084a:	f7ff ff9d 	bl	8000788 <NHD_OLED_sendCommand>
NHD_OLED_sendCommand(0xD5);   // Set display clock divide ratio/oscillator frequency - command
 800084e:	20d5      	movs	r0, #213	@ 0xd5
 8000850:	f7ff ff9a 	bl	8000788 <NHD_OLED_sendCommand>
NHD_OLED_sendCommand(0x70);   // Set display clock divide ratio/oscillator frequency - value
 8000854:	2070      	movs	r0, #112	@ 0x70
 8000856:	f7ff ff97 	bl	8000788 <NHD_OLED_sendCommand>
NHD_OLED_sendCommand(0x78);     // Function set > OLED command set disable (SD = 0)
 800085a:	2078      	movs	r0, #120	@ 0x78
 800085c:	f7ff ff94 	bl	8000788 <NHD_OLED_sendCommand>

NHD_OLED_sendCommand(0x09); // Function set select > extended command set enable (RE = 1)
 8000860:	2009      	movs	r0, #9
 8000862:	f7ff ff91 	bl	8000788 <NHD_OLED_sendCommand>
NHD_OLED_sendCommand(0x06);  // Function set select > OLED command set enable (SD = 1)
 8000866:	2006      	movs	r0, #6
 8000868:	f7ff ff8e 	bl	8000788 <NHD_OLED_sendCommand>
NHD_OLED_sendCommand(0x72);   // Set display clock divide ratio/oscillator frequency - command
 800086c:	2072      	movs	r0, #114	@ 0x72
 800086e:	f7ff ff8b 	bl	8000788 <NHD_OLED_sendCommand>
NHD_OLED_sendData(0x00);        // Internal Vdd regualtor control (function selection A) - value
 8000872:	2000      	movs	r0, #0
 8000874:	f7ff ff9b 	bl	80007ae <NHD_OLED_sendData>

// CGROM select configuration
NHD_OLED_sendCommand(0x2A); // Function set select > extended command set enable (RE = 1)
 8000878:	202a      	movs	r0, #42	@ 0x2a
 800087a:	f7ff ff85 	bl	8000788 <NHD_OLED_sendCommand>
NHD_OLED_sendCommand(0x79);     // CGROM selection (function selection B) - command
 800087e:	2079      	movs	r0, #121	@ 0x79
 8000880:	f7ff ff82 	bl	8000788 <NHD_OLED_sendCommand>
NHD_OLED_sendCommand(0xDA);     // SEG pins hardware configuration - command
 8000884:	20da      	movs	r0, #218	@ 0xda
 8000886:	f7ff ff7f 	bl	8000788 <NHD_OLED_sendCommand>
NHD_OLED_sendCommand(0x10); // SEG pins hardware configuration - value - NOTE: Some displays require 0x00 here.
 800088a:	2010      	movs	r0, #16
 800088c:	f7ff ff7c 	bl	8000788 <NHD_OLED_sendCommand>
NHD_OLED_sendCommand(0xDC);    // VSL & GPIO control (function selection C) - command
 8000890:	20dc      	movs	r0, #220	@ 0xdc
 8000892:	f7ff ff79 	bl	8000788 <NHD_OLED_sendCommand>
NHD_OLED_sendCommand(0x00);     // VSL & GPIO control (function selection C) - value
 8000896:	2000      	movs	r0, #0
 8000898:	f7ff ff76 	bl	8000788 <NHD_OLED_sendCommand>
NHD_OLED_sendCommand(0x81);     // Contrast control - command
 800089c:	2081      	movs	r0, #129	@ 0x81
 800089e:	f7ff ff73 	bl	8000788 <NHD_OLED_sendCommand>
NHD_OLED_sendCommand(0x7F);     // Contrast control - value
 80008a2:	207f      	movs	r0, #127	@ 0x7f
 80008a4:	f7ff ff70 	bl	8000788 <NHD_OLED_sendCommand>
NHD_OLED_sendCommand(0xD9);     // Phase length - command
 80008a8:	20d9      	movs	r0, #217	@ 0xd9
 80008aa:	f7ff ff6d 	bl	8000788 <NHD_OLED_sendCommand>
NHD_OLED_sendCommand(0xF1);     // Phase length - value
 80008ae:	20f1      	movs	r0, #241	@ 0xf1
 80008b0:	f7ff ff6a 	bl	8000788 <NHD_OLED_sendCommand>
NHD_OLED_sendCommand(0xDB);     // VCOMH deselect level - command
 80008b4:	20db      	movs	r0, #219	@ 0xdb
 80008b6:	f7ff ff67 	bl	8000788 <NHD_OLED_sendCommand>
NHD_OLED_sendCommand(0x40);     // VCOMH deselect level - value
 80008ba:	2040      	movs	r0, #64	@ 0x40
 80008bc:	f7ff ff64 	bl	8000788 <NHD_OLED_sendCommand>
NHD_OLED_sendCommand(0x78); // Function set select > OLED command set disable (SD = 0)
 80008c0:	2078      	movs	r0, #120	@ 0x78
 80008c2:	f7ff ff61 	bl	8000788 <NHD_OLED_sendCommand>

// Wrapping up and switching on
NHD_OLED_sendCommand(0x28); // Function set select > fundamental (default) command set (RE = 0)
 80008c6:	2028      	movs	r0, #40	@ 0x28
 80008c8:	f7ff ff5e 	bl	8000788 <NHD_OLED_sendCommand>
NHD_OLED_sendCommand(0x01);     // Clear display
 80008cc:	2001      	movs	r0, #1
 80008ce:	f7ff ff5b 	bl	8000788 <NHD_OLED_sendCommand>
NHD_OLED_sendCommand(0x80);   // Set DDRAM address to 0x00 (home on topmost row/line)
 80008d2:	2080      	movs	r0, #128	@ 0x80
 80008d4:	f7ff ff58 	bl	8000788 <NHD_OLED_sendCommand>
NHD_OLED_sendCommand(0x0C);     // Display ON
 80008d8:	200c      	movs	r0, #12
 80008da:	f7ff ff55 	bl	8000788 <NHD_OLED_sendCommand>

HAL_Delay(100);
 80008de:	2064      	movs	r0, #100	@ 0x64
 80008e0:	f000 f932 	bl	8000b48 <HAL_Delay>
}
 80008e4:	46c0      	nop			@ (mov r8, r8)
 80008e6:	46bd      	mov	sp, r7
 80008e8:	bd80      	pop	{r7, pc}

080008ea <NHD_OLED_textClear>:
// NHD_OLED_textClear
//
// Sends a "clear" command to the display.
//
void NHD_OLED_textClear()
{
 80008ea:	b580      	push	{r7, lr}
 80008ec:	af00      	add	r7, sp, #0
NHD_OLED_sendCommand(0x01);
 80008ee:	2001      	movs	r0, #1
 80008f0:	f7ff ff4a 	bl	8000788 <NHD_OLED_sendCommand>
HAL_Delay(10);
 80008f4:	200a      	movs	r0, #10
 80008f6:	f000 f927 	bl	8000b48 <HAL_Delay>
}
 80008fa:	46c0      	nop			@ (mov r8, r8)
 80008fc:	46bd      	mov	sp, r7
 80008fe:	bd80      	pop	{r7, pc}

08000900 <NHD_OLED_cursorHome>:
//
// Sends a "home" command to the display, which moves the cursor without
// removing text from the display.
//
void NHD_OLED_cursorHome()
{
 8000900:	b580      	push	{r7, lr}
 8000902:	af00      	add	r7, sp, #0
NHD_OLED_sendCommand(0x02);
 8000904:	2002      	movs	r0, #2
 8000906:	f7ff ff3f 	bl	8000788 <NHD_OLED_sendCommand>
HAL_Delay(10);
 800090a:	200a      	movs	r0, #10
 800090c:	f000 f91c 	bl	8000b48 <HAL_Delay>
}
 8000910:	46c0      	nop			@ (mov r8, r8)
 8000912:	46bd      	mov	sp, r7
 8000914:	bd80      	pop	{r7, pc}

08000916 <NHD_OLED_print_len>:
//   text: text to display. This should be a full string if a length is
//         provided.
//   len: length of text to print, in characters.
//
void NHD_OLED_print_len(char *text, uint8_t len)
{
 8000916:	b590      	push	{r4, r7, lr}
 8000918:	b085      	sub	sp, #20
 800091a:	af00      	add	r7, sp, #0
 800091c:	6078      	str	r0, [r7, #4]
 800091e:	000a      	movs	r2, r1
 8000920:	1cfb      	adds	r3, r7, #3
 8000922:	701a      	strb	r2, [r3, #0]
for (uint8_t i = 0; i < len; i++)
 8000924:	230f      	movs	r3, #15
 8000926:	18fb      	adds	r3, r7, r3
 8000928:	2200      	movs	r2, #0
 800092a:	701a      	strb	r2, [r3, #0]
 800092c:	e00d      	b.n	800094a <NHD_OLED_print_len+0x34>
NHD_OLED_sendData(text[i]);
 800092e:	240f      	movs	r4, #15
 8000930:	193b      	adds	r3, r7, r4
 8000932:	781b      	ldrb	r3, [r3, #0]
 8000934:	687a      	ldr	r2, [r7, #4]
 8000936:	18d3      	adds	r3, r2, r3
 8000938:	781b      	ldrb	r3, [r3, #0]
 800093a:	0018      	movs	r0, r3
 800093c:	f7ff ff37 	bl	80007ae <NHD_OLED_sendData>
for (uint8_t i = 0; i < len; i++)
 8000940:	193b      	adds	r3, r7, r4
 8000942:	781a      	ldrb	r2, [r3, #0]
 8000944:	193b      	adds	r3, r7, r4
 8000946:	3201      	adds	r2, #1
 8000948:	701a      	strb	r2, [r3, #0]
 800094a:	230f      	movs	r3, #15
 800094c:	18fa      	adds	r2, r7, r3
 800094e:	1cfb      	adds	r3, r7, #3
 8000950:	7812      	ldrb	r2, [r2, #0]
 8000952:	781b      	ldrb	r3, [r3, #0]
 8000954:	429a      	cmp	r2, r3
 8000956:	d3ea      	bcc.n	800092e <NHD_OLED_print_len+0x18>
}
 8000958:	46c0      	nop			@ (mov r8, r8)
 800095a:	46c0      	nop			@ (mov r8, r8)
 800095c:	46bd      	mov	sp, r7
 800095e:	b005      	add	sp, #20
 8000960:	bd90      	pop	{r4, r7, pc}
	...

08000964 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	b082      	sub	sp, #8
 8000968:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800096a:	4b0f      	ldr	r3, [pc, #60]	@ (80009a8 <HAL_MspInit+0x44>)
 800096c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800096e:	4b0e      	ldr	r3, [pc, #56]	@ (80009a8 <HAL_MspInit+0x44>)
 8000970:	2101      	movs	r1, #1
 8000972:	430a      	orrs	r2, r1
 8000974:	641a      	str	r2, [r3, #64]	@ 0x40
 8000976:	4b0c      	ldr	r3, [pc, #48]	@ (80009a8 <HAL_MspInit+0x44>)
 8000978:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800097a:	2201      	movs	r2, #1
 800097c:	4013      	ands	r3, r2
 800097e:	607b      	str	r3, [r7, #4]
 8000980:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000982:	4b09      	ldr	r3, [pc, #36]	@ (80009a8 <HAL_MspInit+0x44>)
 8000984:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000986:	4b08      	ldr	r3, [pc, #32]	@ (80009a8 <HAL_MspInit+0x44>)
 8000988:	2180      	movs	r1, #128	@ 0x80
 800098a:	0549      	lsls	r1, r1, #21
 800098c:	430a      	orrs	r2, r1
 800098e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000990:	4b05      	ldr	r3, [pc, #20]	@ (80009a8 <HAL_MspInit+0x44>)
 8000992:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000994:	2380      	movs	r3, #128	@ 0x80
 8000996:	055b      	lsls	r3, r3, #21
 8000998:	4013      	ands	r3, r2
 800099a:	603b      	str	r3, [r7, #0]
 800099c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800099e:	46c0      	nop			@ (mov r8, r8)
 80009a0:	46bd      	mov	sp, r7
 80009a2:	b002      	add	sp, #8
 80009a4:	bd80      	pop	{r7, pc}
 80009a6:	46c0      	nop			@ (mov r8, r8)
 80009a8:	40021000 	.word	0x40021000

080009ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80009b0:	46c0      	nop			@ (mov r8, r8)
 80009b2:	e7fd      	b.n	80009b0 <NMI_Handler+0x4>

080009b4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009b8:	46c0      	nop			@ (mov r8, r8)
 80009ba:	e7fd      	b.n	80009b8 <HardFault_Handler+0x4>

080009bc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80009c0:	46c0      	nop			@ (mov r8, r8)
 80009c2:	46bd      	mov	sp, r7
 80009c4:	bd80      	pop	{r7, pc}

080009c6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009c6:	b580      	push	{r7, lr}
 80009c8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009ca:	46c0      	nop			@ (mov r8, r8)
 80009cc:	46bd      	mov	sp, r7
 80009ce:	bd80      	pop	{r7, pc}

080009d0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009d4:	f000 f89c 	bl	8000b10 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009d8:	46c0      	nop			@ (mov r8, r8)
 80009da:	46bd      	mov	sp, r7
 80009dc:	bd80      	pop	{r7, pc}

080009de <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80009de:	b580      	push	{r7, lr}
 80009e0:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009e2:	46c0      	nop			@ (mov r8, r8)
 80009e4:	46bd      	mov	sp, r7
 80009e6:	bd80      	pop	{r7, pc}

080009e8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80009e8:	480d      	ldr	r0, [pc, #52]	@ (8000a20 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80009ea:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80009ec:	f7ff fff7 	bl	80009de <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80009f0:	480c      	ldr	r0, [pc, #48]	@ (8000a24 <LoopForever+0x6>)
  ldr r1, =_edata
 80009f2:	490d      	ldr	r1, [pc, #52]	@ (8000a28 <LoopForever+0xa>)
  ldr r2, =_sidata
 80009f4:	4a0d      	ldr	r2, [pc, #52]	@ (8000a2c <LoopForever+0xe>)
  movs r3, #0
 80009f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009f8:	e002      	b.n	8000a00 <LoopCopyDataInit>

080009fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009fe:	3304      	adds	r3, #4

08000a00 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a00:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a02:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a04:	d3f9      	bcc.n	80009fa <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a06:	4a0a      	ldr	r2, [pc, #40]	@ (8000a30 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a08:	4c0a      	ldr	r4, [pc, #40]	@ (8000a34 <LoopForever+0x16>)
  movs r3, #0
 8000a0a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a0c:	e001      	b.n	8000a12 <LoopFillZerobss>

08000a0e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a0e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a10:	3204      	adds	r2, #4

08000a12 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a12:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a14:	d3fb      	bcc.n	8000a0e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000a16:	f001 f80b 	bl	8001a30 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000a1a:	f7ff fbfd 	bl	8000218 <main>

08000a1e <LoopForever>:

LoopForever:
  b LoopForever
 8000a1e:	e7fe      	b.n	8000a1e <LoopForever>
  ldr   r0, =_estack
 8000a20:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 8000a24:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a28:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000a2c:	08001ae8 	.word	0x08001ae8
  ldr r2, =_sbss
 8000a30:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000a34:	2000002c 	.word	0x2000002c

08000a38 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000a38:	e7fe      	b.n	8000a38 <ADC1_IRQHandler>
	...

08000a3c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b082      	sub	sp, #8
 8000a40:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000a42:	1dfb      	adds	r3, r7, #7
 8000a44:	2200      	movs	r2, #0
 8000a46:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a48:	4b0b      	ldr	r3, [pc, #44]	@ (8000a78 <HAL_Init+0x3c>)
 8000a4a:	681a      	ldr	r2, [r3, #0]
 8000a4c:	4b0a      	ldr	r3, [pc, #40]	@ (8000a78 <HAL_Init+0x3c>)
 8000a4e:	2180      	movs	r1, #128	@ 0x80
 8000a50:	0049      	lsls	r1, r1, #1
 8000a52:	430a      	orrs	r2, r1
 8000a54:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000a56:	2003      	movs	r0, #3
 8000a58:	f000 f810 	bl	8000a7c <HAL_InitTick>
 8000a5c:	1e03      	subs	r3, r0, #0
 8000a5e:	d003      	beq.n	8000a68 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000a60:	1dfb      	adds	r3, r7, #7
 8000a62:	2201      	movs	r2, #1
 8000a64:	701a      	strb	r2, [r3, #0]
 8000a66:	e001      	b.n	8000a6c <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000a68:	f7ff ff7c 	bl	8000964 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000a6c:	1dfb      	adds	r3, r7, #7
 8000a6e:	781b      	ldrb	r3, [r3, #0]
}
 8000a70:	0018      	movs	r0, r3
 8000a72:	46bd      	mov	sp, r7
 8000a74:	b002      	add	sp, #8
 8000a76:	bd80      	pop	{r7, pc}
 8000a78:	40022000 	.word	0x40022000

08000a7c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a7c:	b590      	push	{r4, r7, lr}
 8000a7e:	b085      	sub	sp, #20
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000a84:	230f      	movs	r3, #15
 8000a86:	18fb      	adds	r3, r7, r3
 8000a88:	2200      	movs	r2, #0
 8000a8a:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8000a8c:	4b1d      	ldr	r3, [pc, #116]	@ (8000b04 <HAL_InitTick+0x88>)
 8000a8e:	781b      	ldrb	r3, [r3, #0]
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d02b      	beq.n	8000aec <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8000a94:	4b1c      	ldr	r3, [pc, #112]	@ (8000b08 <HAL_InitTick+0x8c>)
 8000a96:	681c      	ldr	r4, [r3, #0]
 8000a98:	4b1a      	ldr	r3, [pc, #104]	@ (8000b04 <HAL_InitTick+0x88>)
 8000a9a:	781b      	ldrb	r3, [r3, #0]
 8000a9c:	0019      	movs	r1, r3
 8000a9e:	23fa      	movs	r3, #250	@ 0xfa
 8000aa0:	0098      	lsls	r0, r3, #2
 8000aa2:	f7ff fb2d 	bl	8000100 <__udivsi3>
 8000aa6:	0003      	movs	r3, r0
 8000aa8:	0019      	movs	r1, r3
 8000aaa:	0020      	movs	r0, r4
 8000aac:	f7ff fb28 	bl	8000100 <__udivsi3>
 8000ab0:	0003      	movs	r3, r0
 8000ab2:	0018      	movs	r0, r3
 8000ab4:	f000 f913 	bl	8000cde <HAL_SYSTICK_Config>
 8000ab8:	1e03      	subs	r3, r0, #0
 8000aba:	d112      	bne.n	8000ae2 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	2b03      	cmp	r3, #3
 8000ac0:	d80a      	bhi.n	8000ad8 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ac2:	6879      	ldr	r1, [r7, #4]
 8000ac4:	2301      	movs	r3, #1
 8000ac6:	425b      	negs	r3, r3
 8000ac8:	2200      	movs	r2, #0
 8000aca:	0018      	movs	r0, r3
 8000acc:	f000 f8f2 	bl	8000cb4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000ad0:	4b0e      	ldr	r3, [pc, #56]	@ (8000b0c <HAL_InitTick+0x90>)
 8000ad2:	687a      	ldr	r2, [r7, #4]
 8000ad4:	601a      	str	r2, [r3, #0]
 8000ad6:	e00d      	b.n	8000af4 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000ad8:	230f      	movs	r3, #15
 8000ada:	18fb      	adds	r3, r7, r3
 8000adc:	2201      	movs	r2, #1
 8000ade:	701a      	strb	r2, [r3, #0]
 8000ae0:	e008      	b.n	8000af4 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000ae2:	230f      	movs	r3, #15
 8000ae4:	18fb      	adds	r3, r7, r3
 8000ae6:	2201      	movs	r2, #1
 8000ae8:	701a      	strb	r2, [r3, #0]
 8000aea:	e003      	b.n	8000af4 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000aec:	230f      	movs	r3, #15
 8000aee:	18fb      	adds	r3, r7, r3
 8000af0:	2201      	movs	r2, #1
 8000af2:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000af4:	230f      	movs	r3, #15
 8000af6:	18fb      	adds	r3, r7, r3
 8000af8:	781b      	ldrb	r3, [r3, #0]
}
 8000afa:	0018      	movs	r0, r3
 8000afc:	46bd      	mov	sp, r7
 8000afe:	b005      	add	sp, #20
 8000b00:	bd90      	pop	{r4, r7, pc}
 8000b02:	46c0      	nop			@ (mov r8, r8)
 8000b04:	20000008 	.word	0x20000008
 8000b08:	20000000 	.word	0x20000000
 8000b0c:	20000004 	.word	0x20000004

08000b10 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000b14:	4b05      	ldr	r3, [pc, #20]	@ (8000b2c <HAL_IncTick+0x1c>)
 8000b16:	781b      	ldrb	r3, [r3, #0]
 8000b18:	001a      	movs	r2, r3
 8000b1a:	4b05      	ldr	r3, [pc, #20]	@ (8000b30 <HAL_IncTick+0x20>)
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	18d2      	adds	r2, r2, r3
 8000b20:	4b03      	ldr	r3, [pc, #12]	@ (8000b30 <HAL_IncTick+0x20>)
 8000b22:	601a      	str	r2, [r3, #0]
}
 8000b24:	46c0      	nop			@ (mov r8, r8)
 8000b26:	46bd      	mov	sp, r7
 8000b28:	bd80      	pop	{r7, pc}
 8000b2a:	46c0      	nop			@ (mov r8, r8)
 8000b2c:	20000008 	.word	0x20000008
 8000b30:	20000028 	.word	0x20000028

08000b34 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	af00      	add	r7, sp, #0
  return uwTick;
 8000b38:	4b02      	ldr	r3, [pc, #8]	@ (8000b44 <HAL_GetTick+0x10>)
 8000b3a:	681b      	ldr	r3, [r3, #0]
}
 8000b3c:	0018      	movs	r0, r3
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	bd80      	pop	{r7, pc}
 8000b42:	46c0      	nop			@ (mov r8, r8)
 8000b44:	20000028 	.word	0x20000028

08000b48 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b084      	sub	sp, #16
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b50:	f7ff fff0 	bl	8000b34 <HAL_GetTick>
 8000b54:	0003      	movs	r3, r0
 8000b56:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b5c:	68fb      	ldr	r3, [r7, #12]
 8000b5e:	3301      	adds	r3, #1
 8000b60:	d005      	beq.n	8000b6e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b62:	4b0a      	ldr	r3, [pc, #40]	@ (8000b8c <HAL_Delay+0x44>)
 8000b64:	781b      	ldrb	r3, [r3, #0]
 8000b66:	001a      	movs	r2, r3
 8000b68:	68fb      	ldr	r3, [r7, #12]
 8000b6a:	189b      	adds	r3, r3, r2
 8000b6c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000b6e:	46c0      	nop			@ (mov r8, r8)
 8000b70:	f7ff ffe0 	bl	8000b34 <HAL_GetTick>
 8000b74:	0002      	movs	r2, r0
 8000b76:	68bb      	ldr	r3, [r7, #8]
 8000b78:	1ad3      	subs	r3, r2, r3
 8000b7a:	68fa      	ldr	r2, [r7, #12]
 8000b7c:	429a      	cmp	r2, r3
 8000b7e:	d8f7      	bhi.n	8000b70 <HAL_Delay+0x28>
  {
  }
}
 8000b80:	46c0      	nop			@ (mov r8, r8)
 8000b82:	46c0      	nop			@ (mov r8, r8)
 8000b84:	46bd      	mov	sp, r7
 8000b86:	b004      	add	sp, #16
 8000b88:	bd80      	pop	{r7, pc}
 8000b8a:	46c0      	nop			@ (mov r8, r8)
 8000b8c:	20000008 	.word	0x20000008

08000b90 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b90:	b590      	push	{r4, r7, lr}
 8000b92:	b083      	sub	sp, #12
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	0002      	movs	r2, r0
 8000b98:	6039      	str	r1, [r7, #0]
 8000b9a:	1dfb      	adds	r3, r7, #7
 8000b9c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000b9e:	1dfb      	adds	r3, r7, #7
 8000ba0:	781b      	ldrb	r3, [r3, #0]
 8000ba2:	2b7f      	cmp	r3, #127	@ 0x7f
 8000ba4:	d828      	bhi.n	8000bf8 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ba6:	4a2f      	ldr	r2, [pc, #188]	@ (8000c64 <__NVIC_SetPriority+0xd4>)
 8000ba8:	1dfb      	adds	r3, r7, #7
 8000baa:	781b      	ldrb	r3, [r3, #0]
 8000bac:	b25b      	sxtb	r3, r3
 8000bae:	089b      	lsrs	r3, r3, #2
 8000bb0:	33c0      	adds	r3, #192	@ 0xc0
 8000bb2:	009b      	lsls	r3, r3, #2
 8000bb4:	589b      	ldr	r3, [r3, r2]
 8000bb6:	1dfa      	adds	r2, r7, #7
 8000bb8:	7812      	ldrb	r2, [r2, #0]
 8000bba:	0011      	movs	r1, r2
 8000bbc:	2203      	movs	r2, #3
 8000bbe:	400a      	ands	r2, r1
 8000bc0:	00d2      	lsls	r2, r2, #3
 8000bc2:	21ff      	movs	r1, #255	@ 0xff
 8000bc4:	4091      	lsls	r1, r2
 8000bc6:	000a      	movs	r2, r1
 8000bc8:	43d2      	mvns	r2, r2
 8000bca:	401a      	ands	r2, r3
 8000bcc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000bce:	683b      	ldr	r3, [r7, #0]
 8000bd0:	019b      	lsls	r3, r3, #6
 8000bd2:	22ff      	movs	r2, #255	@ 0xff
 8000bd4:	401a      	ands	r2, r3
 8000bd6:	1dfb      	adds	r3, r7, #7
 8000bd8:	781b      	ldrb	r3, [r3, #0]
 8000bda:	0018      	movs	r0, r3
 8000bdc:	2303      	movs	r3, #3
 8000bde:	4003      	ands	r3, r0
 8000be0:	00db      	lsls	r3, r3, #3
 8000be2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000be4:	481f      	ldr	r0, [pc, #124]	@ (8000c64 <__NVIC_SetPriority+0xd4>)
 8000be6:	1dfb      	adds	r3, r7, #7
 8000be8:	781b      	ldrb	r3, [r3, #0]
 8000bea:	b25b      	sxtb	r3, r3
 8000bec:	089b      	lsrs	r3, r3, #2
 8000bee:	430a      	orrs	r2, r1
 8000bf0:	33c0      	adds	r3, #192	@ 0xc0
 8000bf2:	009b      	lsls	r3, r3, #2
 8000bf4:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000bf6:	e031      	b.n	8000c5c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000bf8:	4a1b      	ldr	r2, [pc, #108]	@ (8000c68 <__NVIC_SetPriority+0xd8>)
 8000bfa:	1dfb      	adds	r3, r7, #7
 8000bfc:	781b      	ldrb	r3, [r3, #0]
 8000bfe:	0019      	movs	r1, r3
 8000c00:	230f      	movs	r3, #15
 8000c02:	400b      	ands	r3, r1
 8000c04:	3b08      	subs	r3, #8
 8000c06:	089b      	lsrs	r3, r3, #2
 8000c08:	3306      	adds	r3, #6
 8000c0a:	009b      	lsls	r3, r3, #2
 8000c0c:	18d3      	adds	r3, r2, r3
 8000c0e:	3304      	adds	r3, #4
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	1dfa      	adds	r2, r7, #7
 8000c14:	7812      	ldrb	r2, [r2, #0]
 8000c16:	0011      	movs	r1, r2
 8000c18:	2203      	movs	r2, #3
 8000c1a:	400a      	ands	r2, r1
 8000c1c:	00d2      	lsls	r2, r2, #3
 8000c1e:	21ff      	movs	r1, #255	@ 0xff
 8000c20:	4091      	lsls	r1, r2
 8000c22:	000a      	movs	r2, r1
 8000c24:	43d2      	mvns	r2, r2
 8000c26:	401a      	ands	r2, r3
 8000c28:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000c2a:	683b      	ldr	r3, [r7, #0]
 8000c2c:	019b      	lsls	r3, r3, #6
 8000c2e:	22ff      	movs	r2, #255	@ 0xff
 8000c30:	401a      	ands	r2, r3
 8000c32:	1dfb      	adds	r3, r7, #7
 8000c34:	781b      	ldrb	r3, [r3, #0]
 8000c36:	0018      	movs	r0, r3
 8000c38:	2303      	movs	r3, #3
 8000c3a:	4003      	ands	r3, r0
 8000c3c:	00db      	lsls	r3, r3, #3
 8000c3e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c40:	4809      	ldr	r0, [pc, #36]	@ (8000c68 <__NVIC_SetPriority+0xd8>)
 8000c42:	1dfb      	adds	r3, r7, #7
 8000c44:	781b      	ldrb	r3, [r3, #0]
 8000c46:	001c      	movs	r4, r3
 8000c48:	230f      	movs	r3, #15
 8000c4a:	4023      	ands	r3, r4
 8000c4c:	3b08      	subs	r3, #8
 8000c4e:	089b      	lsrs	r3, r3, #2
 8000c50:	430a      	orrs	r2, r1
 8000c52:	3306      	adds	r3, #6
 8000c54:	009b      	lsls	r3, r3, #2
 8000c56:	18c3      	adds	r3, r0, r3
 8000c58:	3304      	adds	r3, #4
 8000c5a:	601a      	str	r2, [r3, #0]
}
 8000c5c:	46c0      	nop			@ (mov r8, r8)
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	b003      	add	sp, #12
 8000c62:	bd90      	pop	{r4, r7, pc}
 8000c64:	e000e100 	.word	0xe000e100
 8000c68:	e000ed00 	.word	0xe000ed00

08000c6c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b082      	sub	sp, #8
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	1e5a      	subs	r2, r3, #1
 8000c78:	2380      	movs	r3, #128	@ 0x80
 8000c7a:	045b      	lsls	r3, r3, #17
 8000c7c:	429a      	cmp	r2, r3
 8000c7e:	d301      	bcc.n	8000c84 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c80:	2301      	movs	r3, #1
 8000c82:	e010      	b.n	8000ca6 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c84:	4b0a      	ldr	r3, [pc, #40]	@ (8000cb0 <SysTick_Config+0x44>)
 8000c86:	687a      	ldr	r2, [r7, #4]
 8000c88:	3a01      	subs	r2, #1
 8000c8a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c8c:	2301      	movs	r3, #1
 8000c8e:	425b      	negs	r3, r3
 8000c90:	2103      	movs	r1, #3
 8000c92:	0018      	movs	r0, r3
 8000c94:	f7ff ff7c 	bl	8000b90 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c98:	4b05      	ldr	r3, [pc, #20]	@ (8000cb0 <SysTick_Config+0x44>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c9e:	4b04      	ldr	r3, [pc, #16]	@ (8000cb0 <SysTick_Config+0x44>)
 8000ca0:	2207      	movs	r2, #7
 8000ca2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ca4:	2300      	movs	r3, #0
}
 8000ca6:	0018      	movs	r0, r3
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	b002      	add	sp, #8
 8000cac:	bd80      	pop	{r7, pc}
 8000cae:	46c0      	nop			@ (mov r8, r8)
 8000cb0:	e000e010 	.word	0xe000e010

08000cb4 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b084      	sub	sp, #16
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	60b9      	str	r1, [r7, #8]
 8000cbc:	607a      	str	r2, [r7, #4]
 8000cbe:	210f      	movs	r1, #15
 8000cc0:	187b      	adds	r3, r7, r1
 8000cc2:	1c02      	adds	r2, r0, #0
 8000cc4:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8000cc6:	68ba      	ldr	r2, [r7, #8]
 8000cc8:	187b      	adds	r3, r7, r1
 8000cca:	781b      	ldrb	r3, [r3, #0]
 8000ccc:	b25b      	sxtb	r3, r3
 8000cce:	0011      	movs	r1, r2
 8000cd0:	0018      	movs	r0, r3
 8000cd2:	f7ff ff5d 	bl	8000b90 <__NVIC_SetPriority>
}
 8000cd6:	46c0      	nop			@ (mov r8, r8)
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	b004      	add	sp, #16
 8000cdc:	bd80      	pop	{r7, pc}

08000cde <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000cde:	b580      	push	{r7, lr}
 8000ce0:	b082      	sub	sp, #8
 8000ce2:	af00      	add	r7, sp, #0
 8000ce4:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	0018      	movs	r0, r3
 8000cea:	f7ff ffbf 	bl	8000c6c <SysTick_Config>
 8000cee:	0003      	movs	r3, r0
}
 8000cf0:	0018      	movs	r0, r3
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	b002      	add	sp, #8
 8000cf6:	bd80      	pop	{r7, pc}

08000cf8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b086      	sub	sp, #24
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	6078      	str	r0, [r7, #4]
 8000d00:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000d02:	2300      	movs	r3, #0
 8000d04:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d06:	e147      	b.n	8000f98 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000d08:	683b      	ldr	r3, [r7, #0]
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	2101      	movs	r1, #1
 8000d0e:	697a      	ldr	r2, [r7, #20]
 8000d10:	4091      	lsls	r1, r2
 8000d12:	000a      	movs	r2, r1
 8000d14:	4013      	ands	r3, r2
 8000d16:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000d18:	68fb      	ldr	r3, [r7, #12]
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d100      	bne.n	8000d20 <HAL_GPIO_Init+0x28>
 8000d1e:	e138      	b.n	8000f92 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000d20:	683b      	ldr	r3, [r7, #0]
 8000d22:	685b      	ldr	r3, [r3, #4]
 8000d24:	2203      	movs	r2, #3
 8000d26:	4013      	ands	r3, r2
 8000d28:	2b01      	cmp	r3, #1
 8000d2a:	d005      	beq.n	8000d38 <HAL_GPIO_Init+0x40>
 8000d2c:	683b      	ldr	r3, [r7, #0]
 8000d2e:	685b      	ldr	r3, [r3, #4]
 8000d30:	2203      	movs	r2, #3
 8000d32:	4013      	ands	r3, r2
 8000d34:	2b02      	cmp	r3, #2
 8000d36:	d130      	bne.n	8000d9a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	689b      	ldr	r3, [r3, #8]
 8000d3c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000d3e:	697b      	ldr	r3, [r7, #20]
 8000d40:	005b      	lsls	r3, r3, #1
 8000d42:	2203      	movs	r2, #3
 8000d44:	409a      	lsls	r2, r3
 8000d46:	0013      	movs	r3, r2
 8000d48:	43da      	mvns	r2, r3
 8000d4a:	693b      	ldr	r3, [r7, #16]
 8000d4c:	4013      	ands	r3, r2
 8000d4e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000d50:	683b      	ldr	r3, [r7, #0]
 8000d52:	68da      	ldr	r2, [r3, #12]
 8000d54:	697b      	ldr	r3, [r7, #20]
 8000d56:	005b      	lsls	r3, r3, #1
 8000d58:	409a      	lsls	r2, r3
 8000d5a:	0013      	movs	r3, r2
 8000d5c:	693a      	ldr	r2, [r7, #16]
 8000d5e:	4313      	orrs	r3, r2
 8000d60:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	693a      	ldr	r2, [r7, #16]
 8000d66:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	685b      	ldr	r3, [r3, #4]
 8000d6c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000d6e:	2201      	movs	r2, #1
 8000d70:	697b      	ldr	r3, [r7, #20]
 8000d72:	409a      	lsls	r2, r3
 8000d74:	0013      	movs	r3, r2
 8000d76:	43da      	mvns	r2, r3
 8000d78:	693b      	ldr	r3, [r7, #16]
 8000d7a:	4013      	ands	r3, r2
 8000d7c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000d7e:	683b      	ldr	r3, [r7, #0]
 8000d80:	685b      	ldr	r3, [r3, #4]
 8000d82:	091b      	lsrs	r3, r3, #4
 8000d84:	2201      	movs	r2, #1
 8000d86:	401a      	ands	r2, r3
 8000d88:	697b      	ldr	r3, [r7, #20]
 8000d8a:	409a      	lsls	r2, r3
 8000d8c:	0013      	movs	r3, r2
 8000d8e:	693a      	ldr	r2, [r7, #16]
 8000d90:	4313      	orrs	r3, r2
 8000d92:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	693a      	ldr	r2, [r7, #16]
 8000d98:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000d9a:	683b      	ldr	r3, [r7, #0]
 8000d9c:	685b      	ldr	r3, [r3, #4]
 8000d9e:	2203      	movs	r2, #3
 8000da0:	4013      	ands	r3, r2
 8000da2:	2b03      	cmp	r3, #3
 8000da4:	d017      	beq.n	8000dd6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	68db      	ldr	r3, [r3, #12]
 8000daa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000dac:	697b      	ldr	r3, [r7, #20]
 8000dae:	005b      	lsls	r3, r3, #1
 8000db0:	2203      	movs	r2, #3
 8000db2:	409a      	lsls	r2, r3
 8000db4:	0013      	movs	r3, r2
 8000db6:	43da      	mvns	r2, r3
 8000db8:	693b      	ldr	r3, [r7, #16]
 8000dba:	4013      	ands	r3, r2
 8000dbc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000dbe:	683b      	ldr	r3, [r7, #0]
 8000dc0:	689a      	ldr	r2, [r3, #8]
 8000dc2:	697b      	ldr	r3, [r7, #20]
 8000dc4:	005b      	lsls	r3, r3, #1
 8000dc6:	409a      	lsls	r2, r3
 8000dc8:	0013      	movs	r3, r2
 8000dca:	693a      	ldr	r2, [r7, #16]
 8000dcc:	4313      	orrs	r3, r2
 8000dce:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	693a      	ldr	r2, [r7, #16]
 8000dd4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000dd6:	683b      	ldr	r3, [r7, #0]
 8000dd8:	685b      	ldr	r3, [r3, #4]
 8000dda:	2203      	movs	r2, #3
 8000ddc:	4013      	ands	r3, r2
 8000dde:	2b02      	cmp	r3, #2
 8000de0:	d123      	bne.n	8000e2a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000de2:	697b      	ldr	r3, [r7, #20]
 8000de4:	08da      	lsrs	r2, r3, #3
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	3208      	adds	r2, #8
 8000dea:	0092      	lsls	r2, r2, #2
 8000dec:	58d3      	ldr	r3, [r2, r3]
 8000dee:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000df0:	697b      	ldr	r3, [r7, #20]
 8000df2:	2207      	movs	r2, #7
 8000df4:	4013      	ands	r3, r2
 8000df6:	009b      	lsls	r3, r3, #2
 8000df8:	220f      	movs	r2, #15
 8000dfa:	409a      	lsls	r2, r3
 8000dfc:	0013      	movs	r3, r2
 8000dfe:	43da      	mvns	r2, r3
 8000e00:	693b      	ldr	r3, [r7, #16]
 8000e02:	4013      	ands	r3, r2
 8000e04:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000e06:	683b      	ldr	r3, [r7, #0]
 8000e08:	691a      	ldr	r2, [r3, #16]
 8000e0a:	697b      	ldr	r3, [r7, #20]
 8000e0c:	2107      	movs	r1, #7
 8000e0e:	400b      	ands	r3, r1
 8000e10:	009b      	lsls	r3, r3, #2
 8000e12:	409a      	lsls	r2, r3
 8000e14:	0013      	movs	r3, r2
 8000e16:	693a      	ldr	r2, [r7, #16]
 8000e18:	4313      	orrs	r3, r2
 8000e1a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000e1c:	697b      	ldr	r3, [r7, #20]
 8000e1e:	08da      	lsrs	r2, r3, #3
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	3208      	adds	r2, #8
 8000e24:	0092      	lsls	r2, r2, #2
 8000e26:	6939      	ldr	r1, [r7, #16]
 8000e28:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000e30:	697b      	ldr	r3, [r7, #20]
 8000e32:	005b      	lsls	r3, r3, #1
 8000e34:	2203      	movs	r2, #3
 8000e36:	409a      	lsls	r2, r3
 8000e38:	0013      	movs	r3, r2
 8000e3a:	43da      	mvns	r2, r3
 8000e3c:	693b      	ldr	r3, [r7, #16]
 8000e3e:	4013      	ands	r3, r2
 8000e40:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000e42:	683b      	ldr	r3, [r7, #0]
 8000e44:	685b      	ldr	r3, [r3, #4]
 8000e46:	2203      	movs	r2, #3
 8000e48:	401a      	ands	r2, r3
 8000e4a:	697b      	ldr	r3, [r7, #20]
 8000e4c:	005b      	lsls	r3, r3, #1
 8000e4e:	409a      	lsls	r2, r3
 8000e50:	0013      	movs	r3, r2
 8000e52:	693a      	ldr	r2, [r7, #16]
 8000e54:	4313      	orrs	r3, r2
 8000e56:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	693a      	ldr	r2, [r7, #16]
 8000e5c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000e5e:	683b      	ldr	r3, [r7, #0]
 8000e60:	685a      	ldr	r2, [r3, #4]
 8000e62:	23c0      	movs	r3, #192	@ 0xc0
 8000e64:	029b      	lsls	r3, r3, #10
 8000e66:	4013      	ands	r3, r2
 8000e68:	d100      	bne.n	8000e6c <HAL_GPIO_Init+0x174>
 8000e6a:	e092      	b.n	8000f92 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8000e6c:	4a50      	ldr	r2, [pc, #320]	@ (8000fb0 <HAL_GPIO_Init+0x2b8>)
 8000e6e:	697b      	ldr	r3, [r7, #20]
 8000e70:	089b      	lsrs	r3, r3, #2
 8000e72:	3318      	adds	r3, #24
 8000e74:	009b      	lsls	r3, r3, #2
 8000e76:	589b      	ldr	r3, [r3, r2]
 8000e78:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8000e7a:	697b      	ldr	r3, [r7, #20]
 8000e7c:	2203      	movs	r2, #3
 8000e7e:	4013      	ands	r3, r2
 8000e80:	00db      	lsls	r3, r3, #3
 8000e82:	220f      	movs	r2, #15
 8000e84:	409a      	lsls	r2, r3
 8000e86:	0013      	movs	r3, r2
 8000e88:	43da      	mvns	r2, r3
 8000e8a:	693b      	ldr	r3, [r7, #16]
 8000e8c:	4013      	ands	r3, r2
 8000e8e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8000e90:	687a      	ldr	r2, [r7, #4]
 8000e92:	23a0      	movs	r3, #160	@ 0xa0
 8000e94:	05db      	lsls	r3, r3, #23
 8000e96:	429a      	cmp	r2, r3
 8000e98:	d013      	beq.n	8000ec2 <HAL_GPIO_Init+0x1ca>
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	4a45      	ldr	r2, [pc, #276]	@ (8000fb4 <HAL_GPIO_Init+0x2bc>)
 8000e9e:	4293      	cmp	r3, r2
 8000ea0:	d00d      	beq.n	8000ebe <HAL_GPIO_Init+0x1c6>
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	4a44      	ldr	r2, [pc, #272]	@ (8000fb8 <HAL_GPIO_Init+0x2c0>)
 8000ea6:	4293      	cmp	r3, r2
 8000ea8:	d007      	beq.n	8000eba <HAL_GPIO_Init+0x1c2>
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	4a43      	ldr	r2, [pc, #268]	@ (8000fbc <HAL_GPIO_Init+0x2c4>)
 8000eae:	4293      	cmp	r3, r2
 8000eb0:	d101      	bne.n	8000eb6 <HAL_GPIO_Init+0x1be>
 8000eb2:	2303      	movs	r3, #3
 8000eb4:	e006      	b.n	8000ec4 <HAL_GPIO_Init+0x1cc>
 8000eb6:	2305      	movs	r3, #5
 8000eb8:	e004      	b.n	8000ec4 <HAL_GPIO_Init+0x1cc>
 8000eba:	2302      	movs	r3, #2
 8000ebc:	e002      	b.n	8000ec4 <HAL_GPIO_Init+0x1cc>
 8000ebe:	2301      	movs	r3, #1
 8000ec0:	e000      	b.n	8000ec4 <HAL_GPIO_Init+0x1cc>
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	697a      	ldr	r2, [r7, #20]
 8000ec6:	2103      	movs	r1, #3
 8000ec8:	400a      	ands	r2, r1
 8000eca:	00d2      	lsls	r2, r2, #3
 8000ecc:	4093      	lsls	r3, r2
 8000ece:	693a      	ldr	r2, [r7, #16]
 8000ed0:	4313      	orrs	r3, r2
 8000ed2:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8000ed4:	4936      	ldr	r1, [pc, #216]	@ (8000fb0 <HAL_GPIO_Init+0x2b8>)
 8000ed6:	697b      	ldr	r3, [r7, #20]
 8000ed8:	089b      	lsrs	r3, r3, #2
 8000eda:	3318      	adds	r3, #24
 8000edc:	009b      	lsls	r3, r3, #2
 8000ede:	693a      	ldr	r2, [r7, #16]
 8000ee0:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000ee2:	4b33      	ldr	r3, [pc, #204]	@ (8000fb0 <HAL_GPIO_Init+0x2b8>)
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ee8:	68fb      	ldr	r3, [r7, #12]
 8000eea:	43da      	mvns	r2, r3
 8000eec:	693b      	ldr	r3, [r7, #16]
 8000eee:	4013      	ands	r3, r2
 8000ef0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000ef2:	683b      	ldr	r3, [r7, #0]
 8000ef4:	685a      	ldr	r2, [r3, #4]
 8000ef6:	2380      	movs	r3, #128	@ 0x80
 8000ef8:	035b      	lsls	r3, r3, #13
 8000efa:	4013      	ands	r3, r2
 8000efc:	d003      	beq.n	8000f06 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8000efe:	693a      	ldr	r2, [r7, #16]
 8000f00:	68fb      	ldr	r3, [r7, #12]
 8000f02:	4313      	orrs	r3, r2
 8000f04:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000f06:	4b2a      	ldr	r3, [pc, #168]	@ (8000fb0 <HAL_GPIO_Init+0x2b8>)
 8000f08:	693a      	ldr	r2, [r7, #16]
 8000f0a:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8000f0c:	4b28      	ldr	r3, [pc, #160]	@ (8000fb0 <HAL_GPIO_Init+0x2b8>)
 8000f0e:	685b      	ldr	r3, [r3, #4]
 8000f10:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f12:	68fb      	ldr	r3, [r7, #12]
 8000f14:	43da      	mvns	r2, r3
 8000f16:	693b      	ldr	r3, [r7, #16]
 8000f18:	4013      	ands	r3, r2
 8000f1a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000f1c:	683b      	ldr	r3, [r7, #0]
 8000f1e:	685a      	ldr	r2, [r3, #4]
 8000f20:	2380      	movs	r3, #128	@ 0x80
 8000f22:	039b      	lsls	r3, r3, #14
 8000f24:	4013      	ands	r3, r2
 8000f26:	d003      	beq.n	8000f30 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8000f28:	693a      	ldr	r2, [r7, #16]
 8000f2a:	68fb      	ldr	r3, [r7, #12]
 8000f2c:	4313      	orrs	r3, r2
 8000f2e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000f30:	4b1f      	ldr	r3, [pc, #124]	@ (8000fb0 <HAL_GPIO_Init+0x2b8>)
 8000f32:	693a      	ldr	r2, [r7, #16]
 8000f34:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000f36:	4a1e      	ldr	r2, [pc, #120]	@ (8000fb0 <HAL_GPIO_Init+0x2b8>)
 8000f38:	2384      	movs	r3, #132	@ 0x84
 8000f3a:	58d3      	ldr	r3, [r2, r3]
 8000f3c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f3e:	68fb      	ldr	r3, [r7, #12]
 8000f40:	43da      	mvns	r2, r3
 8000f42:	693b      	ldr	r3, [r7, #16]
 8000f44:	4013      	ands	r3, r2
 8000f46:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000f48:	683b      	ldr	r3, [r7, #0]
 8000f4a:	685a      	ldr	r2, [r3, #4]
 8000f4c:	2380      	movs	r3, #128	@ 0x80
 8000f4e:	029b      	lsls	r3, r3, #10
 8000f50:	4013      	ands	r3, r2
 8000f52:	d003      	beq.n	8000f5c <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8000f54:	693a      	ldr	r2, [r7, #16]
 8000f56:	68fb      	ldr	r3, [r7, #12]
 8000f58:	4313      	orrs	r3, r2
 8000f5a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000f5c:	4914      	ldr	r1, [pc, #80]	@ (8000fb0 <HAL_GPIO_Init+0x2b8>)
 8000f5e:	2284      	movs	r2, #132	@ 0x84
 8000f60:	693b      	ldr	r3, [r7, #16]
 8000f62:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8000f64:	4a12      	ldr	r2, [pc, #72]	@ (8000fb0 <HAL_GPIO_Init+0x2b8>)
 8000f66:	2380      	movs	r3, #128	@ 0x80
 8000f68:	58d3      	ldr	r3, [r2, r3]
 8000f6a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f6c:	68fb      	ldr	r3, [r7, #12]
 8000f6e:	43da      	mvns	r2, r3
 8000f70:	693b      	ldr	r3, [r7, #16]
 8000f72:	4013      	ands	r3, r2
 8000f74:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000f76:	683b      	ldr	r3, [r7, #0]
 8000f78:	685a      	ldr	r2, [r3, #4]
 8000f7a:	2380      	movs	r3, #128	@ 0x80
 8000f7c:	025b      	lsls	r3, r3, #9
 8000f7e:	4013      	ands	r3, r2
 8000f80:	d003      	beq.n	8000f8a <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8000f82:	693a      	ldr	r2, [r7, #16]
 8000f84:	68fb      	ldr	r3, [r7, #12]
 8000f86:	4313      	orrs	r3, r2
 8000f88:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000f8a:	4909      	ldr	r1, [pc, #36]	@ (8000fb0 <HAL_GPIO_Init+0x2b8>)
 8000f8c:	2280      	movs	r2, #128	@ 0x80
 8000f8e:	693b      	ldr	r3, [r7, #16]
 8000f90:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8000f92:	697b      	ldr	r3, [r7, #20]
 8000f94:	3301      	adds	r3, #1
 8000f96:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f98:	683b      	ldr	r3, [r7, #0]
 8000f9a:	681a      	ldr	r2, [r3, #0]
 8000f9c:	697b      	ldr	r3, [r7, #20]
 8000f9e:	40da      	lsrs	r2, r3
 8000fa0:	1e13      	subs	r3, r2, #0
 8000fa2:	d000      	beq.n	8000fa6 <HAL_GPIO_Init+0x2ae>
 8000fa4:	e6b0      	b.n	8000d08 <HAL_GPIO_Init+0x10>
  }
}
 8000fa6:	46c0      	nop			@ (mov r8, r8)
 8000fa8:	46c0      	nop			@ (mov r8, r8)
 8000faa:	46bd      	mov	sp, r7
 8000fac:	b006      	add	sp, #24
 8000fae:	bd80      	pop	{r7, pc}
 8000fb0:	40021800 	.word	0x40021800
 8000fb4:	50000400 	.word	0x50000400
 8000fb8:	50000800 	.word	0x50000800
 8000fbc:	50000c00 	.word	0x50000c00

08000fc0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b084      	sub	sp, #16
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
 8000fc8:	000a      	movs	r2, r1
 8000fca:	1cbb      	adds	r3, r7, #2
 8000fcc:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	691b      	ldr	r3, [r3, #16]
 8000fd2:	1cba      	adds	r2, r7, #2
 8000fd4:	8812      	ldrh	r2, [r2, #0]
 8000fd6:	4013      	ands	r3, r2
 8000fd8:	d004      	beq.n	8000fe4 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8000fda:	230f      	movs	r3, #15
 8000fdc:	18fb      	adds	r3, r7, r3
 8000fde:	2201      	movs	r2, #1
 8000fe0:	701a      	strb	r2, [r3, #0]
 8000fe2:	e003      	b.n	8000fec <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000fe4:	230f      	movs	r3, #15
 8000fe6:	18fb      	adds	r3, r7, r3
 8000fe8:	2200      	movs	r2, #0
 8000fea:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8000fec:	230f      	movs	r3, #15
 8000fee:	18fb      	adds	r3, r7, r3
 8000ff0:	781b      	ldrb	r3, [r3, #0]
}
 8000ff2:	0018      	movs	r0, r3
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	b004      	add	sp, #16
 8000ff8:	bd80      	pop	{r7, pc}

08000ffa <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000ffa:	b580      	push	{r7, lr}
 8000ffc:	b082      	sub	sp, #8
 8000ffe:	af00      	add	r7, sp, #0
 8001000:	6078      	str	r0, [r7, #4]
 8001002:	0008      	movs	r0, r1
 8001004:	0011      	movs	r1, r2
 8001006:	1cbb      	adds	r3, r7, #2
 8001008:	1c02      	adds	r2, r0, #0
 800100a:	801a      	strh	r2, [r3, #0]
 800100c:	1c7b      	adds	r3, r7, #1
 800100e:	1c0a      	adds	r2, r1, #0
 8001010:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001012:	1c7b      	adds	r3, r7, #1
 8001014:	781b      	ldrb	r3, [r3, #0]
 8001016:	2b00      	cmp	r3, #0
 8001018:	d004      	beq.n	8001024 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800101a:	1cbb      	adds	r3, r7, #2
 800101c:	881a      	ldrh	r2, [r3, #0]
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001022:	e003      	b.n	800102c <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001024:	1cbb      	adds	r3, r7, #2
 8001026:	881a      	ldrh	r2, [r3, #0]
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800102c:	46c0      	nop			@ (mov r8, r8)
 800102e:	46bd      	mov	sp, r7
 8001030:	b002      	add	sp, #8
 8001032:	bd80      	pop	{r7, pc}

08001034 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b084      	sub	sp, #16
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
 800103c:	000a      	movs	r2, r1
 800103e:	1cbb      	adds	r3, r7, #2
 8001040:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	695b      	ldr	r3, [r3, #20]
 8001046:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001048:	1cbb      	adds	r3, r7, #2
 800104a:	881b      	ldrh	r3, [r3, #0]
 800104c:	68fa      	ldr	r2, [r7, #12]
 800104e:	4013      	ands	r3, r2
 8001050:	041a      	lsls	r2, r3, #16
 8001052:	68fb      	ldr	r3, [r7, #12]
 8001054:	43db      	mvns	r3, r3
 8001056:	1cb9      	adds	r1, r7, #2
 8001058:	8809      	ldrh	r1, [r1, #0]
 800105a:	400b      	ands	r3, r1
 800105c:	431a      	orrs	r2, r3
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	619a      	str	r2, [r3, #24]
}
 8001062:	46c0      	nop			@ (mov r8, r8)
 8001064:	46bd      	mov	sp, r7
 8001066:	b004      	add	sp, #16
 8001068:	bd80      	pop	{r7, pc}
	...

0800106c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b084      	sub	sp, #16
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8001074:	4b19      	ldr	r3, [pc, #100]	@ (80010dc <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	4a19      	ldr	r2, [pc, #100]	@ (80010e0 <HAL_PWREx_ControlVoltageScaling+0x74>)
 800107a:	4013      	ands	r3, r2
 800107c:	0019      	movs	r1, r3
 800107e:	4b17      	ldr	r3, [pc, #92]	@ (80010dc <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001080:	687a      	ldr	r2, [r7, #4]
 8001082:	430a      	orrs	r2, r1
 8001084:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001086:	687a      	ldr	r2, [r7, #4]
 8001088:	2380      	movs	r3, #128	@ 0x80
 800108a:	009b      	lsls	r3, r3, #2
 800108c:	429a      	cmp	r2, r3
 800108e:	d11f      	bne.n	80010d0 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8001090:	4b14      	ldr	r3, [pc, #80]	@ (80010e4 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8001092:	681a      	ldr	r2, [r3, #0]
 8001094:	0013      	movs	r3, r2
 8001096:	005b      	lsls	r3, r3, #1
 8001098:	189b      	adds	r3, r3, r2
 800109a:	005b      	lsls	r3, r3, #1
 800109c:	4912      	ldr	r1, [pc, #72]	@ (80010e8 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 800109e:	0018      	movs	r0, r3
 80010a0:	f7ff f82e 	bl	8000100 <__udivsi3>
 80010a4:	0003      	movs	r3, r0
 80010a6:	3301      	adds	r3, #1
 80010a8:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80010aa:	e008      	b.n	80010be <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d003      	beq.n	80010ba <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 80010b2:	68fb      	ldr	r3, [r7, #12]
 80010b4:	3b01      	subs	r3, #1
 80010b6:	60fb      	str	r3, [r7, #12]
 80010b8:	e001      	b.n	80010be <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 80010ba:	2303      	movs	r3, #3
 80010bc:	e009      	b.n	80010d2 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80010be:	4b07      	ldr	r3, [pc, #28]	@ (80010dc <HAL_PWREx_ControlVoltageScaling+0x70>)
 80010c0:	695a      	ldr	r2, [r3, #20]
 80010c2:	2380      	movs	r3, #128	@ 0x80
 80010c4:	00db      	lsls	r3, r3, #3
 80010c6:	401a      	ands	r2, r3
 80010c8:	2380      	movs	r3, #128	@ 0x80
 80010ca:	00db      	lsls	r3, r3, #3
 80010cc:	429a      	cmp	r2, r3
 80010ce:	d0ed      	beq.n	80010ac <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 80010d0:	2300      	movs	r3, #0
}
 80010d2:	0018      	movs	r0, r3
 80010d4:	46bd      	mov	sp, r7
 80010d6:	b004      	add	sp, #16
 80010d8:	bd80      	pop	{r7, pc}
 80010da:	46c0      	nop			@ (mov r8, r8)
 80010dc:	40007000 	.word	0x40007000
 80010e0:	fffff9ff 	.word	0xfffff9ff
 80010e4:	20000000 	.word	0x20000000
 80010e8:	000f4240 	.word	0x000f4240

080010ec <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b088      	sub	sp, #32
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d101      	bne.n	80010fe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80010fa:	2301      	movs	r3, #1
 80010fc:	e2f3      	b.n	80016e6 <HAL_RCC_OscConfig+0x5fa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	2201      	movs	r2, #1
 8001104:	4013      	ands	r3, r2
 8001106:	d100      	bne.n	800110a <HAL_RCC_OscConfig+0x1e>
 8001108:	e07c      	b.n	8001204 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800110a:	4bc3      	ldr	r3, [pc, #780]	@ (8001418 <HAL_RCC_OscConfig+0x32c>)
 800110c:	689b      	ldr	r3, [r3, #8]
 800110e:	2238      	movs	r2, #56	@ 0x38
 8001110:	4013      	ands	r3, r2
 8001112:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001114:	4bc0      	ldr	r3, [pc, #768]	@ (8001418 <HAL_RCC_OscConfig+0x32c>)
 8001116:	68db      	ldr	r3, [r3, #12]
 8001118:	2203      	movs	r2, #3
 800111a:	4013      	ands	r3, r2
 800111c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 800111e:	69bb      	ldr	r3, [r7, #24]
 8001120:	2b10      	cmp	r3, #16
 8001122:	d102      	bne.n	800112a <HAL_RCC_OscConfig+0x3e>
 8001124:	697b      	ldr	r3, [r7, #20]
 8001126:	2b03      	cmp	r3, #3
 8001128:	d002      	beq.n	8001130 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 800112a:	69bb      	ldr	r3, [r7, #24]
 800112c:	2b08      	cmp	r3, #8
 800112e:	d10b      	bne.n	8001148 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001130:	4bb9      	ldr	r3, [pc, #740]	@ (8001418 <HAL_RCC_OscConfig+0x32c>)
 8001132:	681a      	ldr	r2, [r3, #0]
 8001134:	2380      	movs	r3, #128	@ 0x80
 8001136:	029b      	lsls	r3, r3, #10
 8001138:	4013      	ands	r3, r2
 800113a:	d062      	beq.n	8001202 <HAL_RCC_OscConfig+0x116>
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	685b      	ldr	r3, [r3, #4]
 8001140:	2b00      	cmp	r3, #0
 8001142:	d15e      	bne.n	8001202 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8001144:	2301      	movs	r3, #1
 8001146:	e2ce      	b.n	80016e6 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	685a      	ldr	r2, [r3, #4]
 800114c:	2380      	movs	r3, #128	@ 0x80
 800114e:	025b      	lsls	r3, r3, #9
 8001150:	429a      	cmp	r2, r3
 8001152:	d107      	bne.n	8001164 <HAL_RCC_OscConfig+0x78>
 8001154:	4bb0      	ldr	r3, [pc, #704]	@ (8001418 <HAL_RCC_OscConfig+0x32c>)
 8001156:	681a      	ldr	r2, [r3, #0]
 8001158:	4baf      	ldr	r3, [pc, #700]	@ (8001418 <HAL_RCC_OscConfig+0x32c>)
 800115a:	2180      	movs	r1, #128	@ 0x80
 800115c:	0249      	lsls	r1, r1, #9
 800115e:	430a      	orrs	r2, r1
 8001160:	601a      	str	r2, [r3, #0]
 8001162:	e020      	b.n	80011a6 <HAL_RCC_OscConfig+0xba>
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	685a      	ldr	r2, [r3, #4]
 8001168:	23a0      	movs	r3, #160	@ 0xa0
 800116a:	02db      	lsls	r3, r3, #11
 800116c:	429a      	cmp	r2, r3
 800116e:	d10e      	bne.n	800118e <HAL_RCC_OscConfig+0xa2>
 8001170:	4ba9      	ldr	r3, [pc, #676]	@ (8001418 <HAL_RCC_OscConfig+0x32c>)
 8001172:	681a      	ldr	r2, [r3, #0]
 8001174:	4ba8      	ldr	r3, [pc, #672]	@ (8001418 <HAL_RCC_OscConfig+0x32c>)
 8001176:	2180      	movs	r1, #128	@ 0x80
 8001178:	02c9      	lsls	r1, r1, #11
 800117a:	430a      	orrs	r2, r1
 800117c:	601a      	str	r2, [r3, #0]
 800117e:	4ba6      	ldr	r3, [pc, #664]	@ (8001418 <HAL_RCC_OscConfig+0x32c>)
 8001180:	681a      	ldr	r2, [r3, #0]
 8001182:	4ba5      	ldr	r3, [pc, #660]	@ (8001418 <HAL_RCC_OscConfig+0x32c>)
 8001184:	2180      	movs	r1, #128	@ 0x80
 8001186:	0249      	lsls	r1, r1, #9
 8001188:	430a      	orrs	r2, r1
 800118a:	601a      	str	r2, [r3, #0]
 800118c:	e00b      	b.n	80011a6 <HAL_RCC_OscConfig+0xba>
 800118e:	4ba2      	ldr	r3, [pc, #648]	@ (8001418 <HAL_RCC_OscConfig+0x32c>)
 8001190:	681a      	ldr	r2, [r3, #0]
 8001192:	4ba1      	ldr	r3, [pc, #644]	@ (8001418 <HAL_RCC_OscConfig+0x32c>)
 8001194:	49a1      	ldr	r1, [pc, #644]	@ (800141c <HAL_RCC_OscConfig+0x330>)
 8001196:	400a      	ands	r2, r1
 8001198:	601a      	str	r2, [r3, #0]
 800119a:	4b9f      	ldr	r3, [pc, #636]	@ (8001418 <HAL_RCC_OscConfig+0x32c>)
 800119c:	681a      	ldr	r2, [r3, #0]
 800119e:	4b9e      	ldr	r3, [pc, #632]	@ (8001418 <HAL_RCC_OscConfig+0x32c>)
 80011a0:	499f      	ldr	r1, [pc, #636]	@ (8001420 <HAL_RCC_OscConfig+0x334>)
 80011a2:	400a      	ands	r2, r1
 80011a4:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	685b      	ldr	r3, [r3, #4]
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d014      	beq.n	80011d8 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011ae:	f7ff fcc1 	bl	8000b34 <HAL_GetTick>
 80011b2:	0003      	movs	r3, r0
 80011b4:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80011b6:	e008      	b.n	80011ca <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80011b8:	f7ff fcbc 	bl	8000b34 <HAL_GetTick>
 80011bc:	0002      	movs	r2, r0
 80011be:	693b      	ldr	r3, [r7, #16]
 80011c0:	1ad3      	subs	r3, r2, r3
 80011c2:	2b64      	cmp	r3, #100	@ 0x64
 80011c4:	d901      	bls.n	80011ca <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 80011c6:	2303      	movs	r3, #3
 80011c8:	e28d      	b.n	80016e6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80011ca:	4b93      	ldr	r3, [pc, #588]	@ (8001418 <HAL_RCC_OscConfig+0x32c>)
 80011cc:	681a      	ldr	r2, [r3, #0]
 80011ce:	2380      	movs	r3, #128	@ 0x80
 80011d0:	029b      	lsls	r3, r3, #10
 80011d2:	4013      	ands	r3, r2
 80011d4:	d0f0      	beq.n	80011b8 <HAL_RCC_OscConfig+0xcc>
 80011d6:	e015      	b.n	8001204 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011d8:	f7ff fcac 	bl	8000b34 <HAL_GetTick>
 80011dc:	0003      	movs	r3, r0
 80011de:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80011e0:	e008      	b.n	80011f4 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80011e2:	f7ff fca7 	bl	8000b34 <HAL_GetTick>
 80011e6:	0002      	movs	r2, r0
 80011e8:	693b      	ldr	r3, [r7, #16]
 80011ea:	1ad3      	subs	r3, r2, r3
 80011ec:	2b64      	cmp	r3, #100	@ 0x64
 80011ee:	d901      	bls.n	80011f4 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 80011f0:	2303      	movs	r3, #3
 80011f2:	e278      	b.n	80016e6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80011f4:	4b88      	ldr	r3, [pc, #544]	@ (8001418 <HAL_RCC_OscConfig+0x32c>)
 80011f6:	681a      	ldr	r2, [r3, #0]
 80011f8:	2380      	movs	r3, #128	@ 0x80
 80011fa:	029b      	lsls	r3, r3, #10
 80011fc:	4013      	ands	r3, r2
 80011fe:	d1f0      	bne.n	80011e2 <HAL_RCC_OscConfig+0xf6>
 8001200:	e000      	b.n	8001204 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001202:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	2202      	movs	r2, #2
 800120a:	4013      	ands	r3, r2
 800120c:	d100      	bne.n	8001210 <HAL_RCC_OscConfig+0x124>
 800120e:	e099      	b.n	8001344 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001210:	4b81      	ldr	r3, [pc, #516]	@ (8001418 <HAL_RCC_OscConfig+0x32c>)
 8001212:	689b      	ldr	r3, [r3, #8]
 8001214:	2238      	movs	r2, #56	@ 0x38
 8001216:	4013      	ands	r3, r2
 8001218:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800121a:	4b7f      	ldr	r3, [pc, #508]	@ (8001418 <HAL_RCC_OscConfig+0x32c>)
 800121c:	68db      	ldr	r3, [r3, #12]
 800121e:	2203      	movs	r2, #3
 8001220:	4013      	ands	r3, r2
 8001222:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8001224:	69bb      	ldr	r3, [r7, #24]
 8001226:	2b10      	cmp	r3, #16
 8001228:	d102      	bne.n	8001230 <HAL_RCC_OscConfig+0x144>
 800122a:	697b      	ldr	r3, [r7, #20]
 800122c:	2b02      	cmp	r3, #2
 800122e:	d002      	beq.n	8001236 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8001230:	69bb      	ldr	r3, [r7, #24]
 8001232:	2b00      	cmp	r3, #0
 8001234:	d135      	bne.n	80012a2 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001236:	4b78      	ldr	r3, [pc, #480]	@ (8001418 <HAL_RCC_OscConfig+0x32c>)
 8001238:	681a      	ldr	r2, [r3, #0]
 800123a:	2380      	movs	r3, #128	@ 0x80
 800123c:	00db      	lsls	r3, r3, #3
 800123e:	4013      	ands	r3, r2
 8001240:	d005      	beq.n	800124e <HAL_RCC_OscConfig+0x162>
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	68db      	ldr	r3, [r3, #12]
 8001246:	2b00      	cmp	r3, #0
 8001248:	d101      	bne.n	800124e <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 800124a:	2301      	movs	r3, #1
 800124c:	e24b      	b.n	80016e6 <HAL_RCC_OscConfig+0x5fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800124e:	4b72      	ldr	r3, [pc, #456]	@ (8001418 <HAL_RCC_OscConfig+0x32c>)
 8001250:	685b      	ldr	r3, [r3, #4]
 8001252:	4a74      	ldr	r2, [pc, #464]	@ (8001424 <HAL_RCC_OscConfig+0x338>)
 8001254:	4013      	ands	r3, r2
 8001256:	0019      	movs	r1, r3
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	695b      	ldr	r3, [r3, #20]
 800125c:	021a      	lsls	r2, r3, #8
 800125e:	4b6e      	ldr	r3, [pc, #440]	@ (8001418 <HAL_RCC_OscConfig+0x32c>)
 8001260:	430a      	orrs	r2, r1
 8001262:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001264:	69bb      	ldr	r3, [r7, #24]
 8001266:	2b00      	cmp	r3, #0
 8001268:	d112      	bne.n	8001290 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800126a:	4b6b      	ldr	r3, [pc, #428]	@ (8001418 <HAL_RCC_OscConfig+0x32c>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	4a6e      	ldr	r2, [pc, #440]	@ (8001428 <HAL_RCC_OscConfig+0x33c>)
 8001270:	4013      	ands	r3, r2
 8001272:	0019      	movs	r1, r3
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	691a      	ldr	r2, [r3, #16]
 8001278:	4b67      	ldr	r3, [pc, #412]	@ (8001418 <HAL_RCC_OscConfig+0x32c>)
 800127a:	430a      	orrs	r2, r1
 800127c:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 800127e:	4b66      	ldr	r3, [pc, #408]	@ (8001418 <HAL_RCC_OscConfig+0x32c>)
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	0adb      	lsrs	r3, r3, #11
 8001284:	2207      	movs	r2, #7
 8001286:	4013      	ands	r3, r2
 8001288:	4a68      	ldr	r2, [pc, #416]	@ (800142c <HAL_RCC_OscConfig+0x340>)
 800128a:	40da      	lsrs	r2, r3
 800128c:	4b68      	ldr	r3, [pc, #416]	@ (8001430 <HAL_RCC_OscConfig+0x344>)
 800128e:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001290:	4b68      	ldr	r3, [pc, #416]	@ (8001434 <HAL_RCC_OscConfig+0x348>)
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	0018      	movs	r0, r3
 8001296:	f7ff fbf1 	bl	8000a7c <HAL_InitTick>
 800129a:	1e03      	subs	r3, r0, #0
 800129c:	d051      	beq.n	8001342 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 800129e:	2301      	movs	r3, #1
 80012a0:	e221      	b.n	80016e6 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	68db      	ldr	r3, [r3, #12]
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d030      	beq.n	800130c <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80012aa:	4b5b      	ldr	r3, [pc, #364]	@ (8001418 <HAL_RCC_OscConfig+0x32c>)
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	4a5e      	ldr	r2, [pc, #376]	@ (8001428 <HAL_RCC_OscConfig+0x33c>)
 80012b0:	4013      	ands	r3, r2
 80012b2:	0019      	movs	r1, r3
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	691a      	ldr	r2, [r3, #16]
 80012b8:	4b57      	ldr	r3, [pc, #348]	@ (8001418 <HAL_RCC_OscConfig+0x32c>)
 80012ba:	430a      	orrs	r2, r1
 80012bc:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 80012be:	4b56      	ldr	r3, [pc, #344]	@ (8001418 <HAL_RCC_OscConfig+0x32c>)
 80012c0:	681a      	ldr	r2, [r3, #0]
 80012c2:	4b55      	ldr	r3, [pc, #340]	@ (8001418 <HAL_RCC_OscConfig+0x32c>)
 80012c4:	2180      	movs	r1, #128	@ 0x80
 80012c6:	0049      	lsls	r1, r1, #1
 80012c8:	430a      	orrs	r2, r1
 80012ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012cc:	f7ff fc32 	bl	8000b34 <HAL_GetTick>
 80012d0:	0003      	movs	r3, r0
 80012d2:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80012d4:	e008      	b.n	80012e8 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80012d6:	f7ff fc2d 	bl	8000b34 <HAL_GetTick>
 80012da:	0002      	movs	r2, r0
 80012dc:	693b      	ldr	r3, [r7, #16]
 80012de:	1ad3      	subs	r3, r2, r3
 80012e0:	2b02      	cmp	r3, #2
 80012e2:	d901      	bls.n	80012e8 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80012e4:	2303      	movs	r3, #3
 80012e6:	e1fe      	b.n	80016e6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80012e8:	4b4b      	ldr	r3, [pc, #300]	@ (8001418 <HAL_RCC_OscConfig+0x32c>)
 80012ea:	681a      	ldr	r2, [r3, #0]
 80012ec:	2380      	movs	r3, #128	@ 0x80
 80012ee:	00db      	lsls	r3, r3, #3
 80012f0:	4013      	ands	r3, r2
 80012f2:	d0f0      	beq.n	80012d6 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012f4:	4b48      	ldr	r3, [pc, #288]	@ (8001418 <HAL_RCC_OscConfig+0x32c>)
 80012f6:	685b      	ldr	r3, [r3, #4]
 80012f8:	4a4a      	ldr	r2, [pc, #296]	@ (8001424 <HAL_RCC_OscConfig+0x338>)
 80012fa:	4013      	ands	r3, r2
 80012fc:	0019      	movs	r1, r3
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	695b      	ldr	r3, [r3, #20]
 8001302:	021a      	lsls	r2, r3, #8
 8001304:	4b44      	ldr	r3, [pc, #272]	@ (8001418 <HAL_RCC_OscConfig+0x32c>)
 8001306:	430a      	orrs	r2, r1
 8001308:	605a      	str	r2, [r3, #4]
 800130a:	e01b      	b.n	8001344 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 800130c:	4b42      	ldr	r3, [pc, #264]	@ (8001418 <HAL_RCC_OscConfig+0x32c>)
 800130e:	681a      	ldr	r2, [r3, #0]
 8001310:	4b41      	ldr	r3, [pc, #260]	@ (8001418 <HAL_RCC_OscConfig+0x32c>)
 8001312:	4949      	ldr	r1, [pc, #292]	@ (8001438 <HAL_RCC_OscConfig+0x34c>)
 8001314:	400a      	ands	r2, r1
 8001316:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001318:	f7ff fc0c 	bl	8000b34 <HAL_GetTick>
 800131c:	0003      	movs	r3, r0
 800131e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001320:	e008      	b.n	8001334 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001322:	f7ff fc07 	bl	8000b34 <HAL_GetTick>
 8001326:	0002      	movs	r2, r0
 8001328:	693b      	ldr	r3, [r7, #16]
 800132a:	1ad3      	subs	r3, r2, r3
 800132c:	2b02      	cmp	r3, #2
 800132e:	d901      	bls.n	8001334 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8001330:	2303      	movs	r3, #3
 8001332:	e1d8      	b.n	80016e6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001334:	4b38      	ldr	r3, [pc, #224]	@ (8001418 <HAL_RCC_OscConfig+0x32c>)
 8001336:	681a      	ldr	r2, [r3, #0]
 8001338:	2380      	movs	r3, #128	@ 0x80
 800133a:	00db      	lsls	r3, r3, #3
 800133c:	4013      	ands	r3, r2
 800133e:	d1f0      	bne.n	8001322 <HAL_RCC_OscConfig+0x236>
 8001340:	e000      	b.n	8001344 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001342:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	2208      	movs	r2, #8
 800134a:	4013      	ands	r3, r2
 800134c:	d047      	beq.n	80013de <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800134e:	4b32      	ldr	r3, [pc, #200]	@ (8001418 <HAL_RCC_OscConfig+0x32c>)
 8001350:	689b      	ldr	r3, [r3, #8]
 8001352:	2238      	movs	r2, #56	@ 0x38
 8001354:	4013      	ands	r3, r2
 8001356:	2b18      	cmp	r3, #24
 8001358:	d10a      	bne.n	8001370 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 800135a:	4b2f      	ldr	r3, [pc, #188]	@ (8001418 <HAL_RCC_OscConfig+0x32c>)
 800135c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800135e:	2202      	movs	r2, #2
 8001360:	4013      	ands	r3, r2
 8001362:	d03c      	beq.n	80013de <HAL_RCC_OscConfig+0x2f2>
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	699b      	ldr	r3, [r3, #24]
 8001368:	2b00      	cmp	r3, #0
 800136a:	d138      	bne.n	80013de <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 800136c:	2301      	movs	r3, #1
 800136e:	e1ba      	b.n	80016e6 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	699b      	ldr	r3, [r3, #24]
 8001374:	2b00      	cmp	r3, #0
 8001376:	d019      	beq.n	80013ac <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8001378:	4b27      	ldr	r3, [pc, #156]	@ (8001418 <HAL_RCC_OscConfig+0x32c>)
 800137a:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800137c:	4b26      	ldr	r3, [pc, #152]	@ (8001418 <HAL_RCC_OscConfig+0x32c>)
 800137e:	2101      	movs	r1, #1
 8001380:	430a      	orrs	r2, r1
 8001382:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001384:	f7ff fbd6 	bl	8000b34 <HAL_GetTick>
 8001388:	0003      	movs	r3, r0
 800138a:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800138c:	e008      	b.n	80013a0 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800138e:	f7ff fbd1 	bl	8000b34 <HAL_GetTick>
 8001392:	0002      	movs	r2, r0
 8001394:	693b      	ldr	r3, [r7, #16]
 8001396:	1ad3      	subs	r3, r2, r3
 8001398:	2b02      	cmp	r3, #2
 800139a:	d901      	bls.n	80013a0 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 800139c:	2303      	movs	r3, #3
 800139e:	e1a2      	b.n	80016e6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80013a0:	4b1d      	ldr	r3, [pc, #116]	@ (8001418 <HAL_RCC_OscConfig+0x32c>)
 80013a2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80013a4:	2202      	movs	r2, #2
 80013a6:	4013      	ands	r3, r2
 80013a8:	d0f1      	beq.n	800138e <HAL_RCC_OscConfig+0x2a2>
 80013aa:	e018      	b.n	80013de <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 80013ac:	4b1a      	ldr	r3, [pc, #104]	@ (8001418 <HAL_RCC_OscConfig+0x32c>)
 80013ae:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80013b0:	4b19      	ldr	r3, [pc, #100]	@ (8001418 <HAL_RCC_OscConfig+0x32c>)
 80013b2:	2101      	movs	r1, #1
 80013b4:	438a      	bics	r2, r1
 80013b6:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013b8:	f7ff fbbc 	bl	8000b34 <HAL_GetTick>
 80013bc:	0003      	movs	r3, r0
 80013be:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80013c0:	e008      	b.n	80013d4 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80013c2:	f7ff fbb7 	bl	8000b34 <HAL_GetTick>
 80013c6:	0002      	movs	r2, r0
 80013c8:	693b      	ldr	r3, [r7, #16]
 80013ca:	1ad3      	subs	r3, r2, r3
 80013cc:	2b02      	cmp	r3, #2
 80013ce:	d901      	bls.n	80013d4 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 80013d0:	2303      	movs	r3, #3
 80013d2:	e188      	b.n	80016e6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80013d4:	4b10      	ldr	r3, [pc, #64]	@ (8001418 <HAL_RCC_OscConfig+0x32c>)
 80013d6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80013d8:	2202      	movs	r2, #2
 80013da:	4013      	ands	r3, r2
 80013dc:	d1f1      	bne.n	80013c2 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	2204      	movs	r2, #4
 80013e4:	4013      	ands	r3, r2
 80013e6:	d100      	bne.n	80013ea <HAL_RCC_OscConfig+0x2fe>
 80013e8:	e0c6      	b.n	8001578 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 80013ea:	231f      	movs	r3, #31
 80013ec:	18fb      	adds	r3, r7, r3
 80013ee:	2200      	movs	r2, #0
 80013f0:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80013f2:	4b09      	ldr	r3, [pc, #36]	@ (8001418 <HAL_RCC_OscConfig+0x32c>)
 80013f4:	689b      	ldr	r3, [r3, #8]
 80013f6:	2238      	movs	r2, #56	@ 0x38
 80013f8:	4013      	ands	r3, r2
 80013fa:	2b20      	cmp	r3, #32
 80013fc:	d11e      	bne.n	800143c <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 80013fe:	4b06      	ldr	r3, [pc, #24]	@ (8001418 <HAL_RCC_OscConfig+0x32c>)
 8001400:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001402:	2202      	movs	r2, #2
 8001404:	4013      	ands	r3, r2
 8001406:	d100      	bne.n	800140a <HAL_RCC_OscConfig+0x31e>
 8001408:	e0b6      	b.n	8001578 <HAL_RCC_OscConfig+0x48c>
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	689b      	ldr	r3, [r3, #8]
 800140e:	2b00      	cmp	r3, #0
 8001410:	d000      	beq.n	8001414 <HAL_RCC_OscConfig+0x328>
 8001412:	e0b1      	b.n	8001578 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8001414:	2301      	movs	r3, #1
 8001416:	e166      	b.n	80016e6 <HAL_RCC_OscConfig+0x5fa>
 8001418:	40021000 	.word	0x40021000
 800141c:	fffeffff 	.word	0xfffeffff
 8001420:	fffbffff 	.word	0xfffbffff
 8001424:	ffff80ff 	.word	0xffff80ff
 8001428:	ffffc7ff 	.word	0xffffc7ff
 800142c:	00f42400 	.word	0x00f42400
 8001430:	20000000 	.word	0x20000000
 8001434:	20000004 	.word	0x20000004
 8001438:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800143c:	4bac      	ldr	r3, [pc, #688]	@ (80016f0 <HAL_RCC_OscConfig+0x604>)
 800143e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001440:	2380      	movs	r3, #128	@ 0x80
 8001442:	055b      	lsls	r3, r3, #21
 8001444:	4013      	ands	r3, r2
 8001446:	d101      	bne.n	800144c <HAL_RCC_OscConfig+0x360>
 8001448:	2301      	movs	r3, #1
 800144a:	e000      	b.n	800144e <HAL_RCC_OscConfig+0x362>
 800144c:	2300      	movs	r3, #0
 800144e:	2b00      	cmp	r3, #0
 8001450:	d011      	beq.n	8001476 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8001452:	4ba7      	ldr	r3, [pc, #668]	@ (80016f0 <HAL_RCC_OscConfig+0x604>)
 8001454:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001456:	4ba6      	ldr	r3, [pc, #664]	@ (80016f0 <HAL_RCC_OscConfig+0x604>)
 8001458:	2180      	movs	r1, #128	@ 0x80
 800145a:	0549      	lsls	r1, r1, #21
 800145c:	430a      	orrs	r2, r1
 800145e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001460:	4ba3      	ldr	r3, [pc, #652]	@ (80016f0 <HAL_RCC_OscConfig+0x604>)
 8001462:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001464:	2380      	movs	r3, #128	@ 0x80
 8001466:	055b      	lsls	r3, r3, #21
 8001468:	4013      	ands	r3, r2
 800146a:	60fb      	str	r3, [r7, #12]
 800146c:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 800146e:	231f      	movs	r3, #31
 8001470:	18fb      	adds	r3, r7, r3
 8001472:	2201      	movs	r2, #1
 8001474:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001476:	4b9f      	ldr	r3, [pc, #636]	@ (80016f4 <HAL_RCC_OscConfig+0x608>)
 8001478:	681a      	ldr	r2, [r3, #0]
 800147a:	2380      	movs	r3, #128	@ 0x80
 800147c:	005b      	lsls	r3, r3, #1
 800147e:	4013      	ands	r3, r2
 8001480:	d11a      	bne.n	80014b8 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001482:	4b9c      	ldr	r3, [pc, #624]	@ (80016f4 <HAL_RCC_OscConfig+0x608>)
 8001484:	681a      	ldr	r2, [r3, #0]
 8001486:	4b9b      	ldr	r3, [pc, #620]	@ (80016f4 <HAL_RCC_OscConfig+0x608>)
 8001488:	2180      	movs	r1, #128	@ 0x80
 800148a:	0049      	lsls	r1, r1, #1
 800148c:	430a      	orrs	r2, r1
 800148e:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8001490:	f7ff fb50 	bl	8000b34 <HAL_GetTick>
 8001494:	0003      	movs	r3, r0
 8001496:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001498:	e008      	b.n	80014ac <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800149a:	f7ff fb4b 	bl	8000b34 <HAL_GetTick>
 800149e:	0002      	movs	r2, r0
 80014a0:	693b      	ldr	r3, [r7, #16]
 80014a2:	1ad3      	subs	r3, r2, r3
 80014a4:	2b02      	cmp	r3, #2
 80014a6:	d901      	bls.n	80014ac <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 80014a8:	2303      	movs	r3, #3
 80014aa:	e11c      	b.n	80016e6 <HAL_RCC_OscConfig+0x5fa>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80014ac:	4b91      	ldr	r3, [pc, #580]	@ (80016f4 <HAL_RCC_OscConfig+0x608>)
 80014ae:	681a      	ldr	r2, [r3, #0]
 80014b0:	2380      	movs	r3, #128	@ 0x80
 80014b2:	005b      	lsls	r3, r3, #1
 80014b4:	4013      	ands	r3, r2
 80014b6:	d0f0      	beq.n	800149a <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	689b      	ldr	r3, [r3, #8]
 80014bc:	2b01      	cmp	r3, #1
 80014be:	d106      	bne.n	80014ce <HAL_RCC_OscConfig+0x3e2>
 80014c0:	4b8b      	ldr	r3, [pc, #556]	@ (80016f0 <HAL_RCC_OscConfig+0x604>)
 80014c2:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80014c4:	4b8a      	ldr	r3, [pc, #552]	@ (80016f0 <HAL_RCC_OscConfig+0x604>)
 80014c6:	2101      	movs	r1, #1
 80014c8:	430a      	orrs	r2, r1
 80014ca:	65da      	str	r2, [r3, #92]	@ 0x5c
 80014cc:	e01c      	b.n	8001508 <HAL_RCC_OscConfig+0x41c>
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	689b      	ldr	r3, [r3, #8]
 80014d2:	2b05      	cmp	r3, #5
 80014d4:	d10c      	bne.n	80014f0 <HAL_RCC_OscConfig+0x404>
 80014d6:	4b86      	ldr	r3, [pc, #536]	@ (80016f0 <HAL_RCC_OscConfig+0x604>)
 80014d8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80014da:	4b85      	ldr	r3, [pc, #532]	@ (80016f0 <HAL_RCC_OscConfig+0x604>)
 80014dc:	2104      	movs	r1, #4
 80014de:	430a      	orrs	r2, r1
 80014e0:	65da      	str	r2, [r3, #92]	@ 0x5c
 80014e2:	4b83      	ldr	r3, [pc, #524]	@ (80016f0 <HAL_RCC_OscConfig+0x604>)
 80014e4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80014e6:	4b82      	ldr	r3, [pc, #520]	@ (80016f0 <HAL_RCC_OscConfig+0x604>)
 80014e8:	2101      	movs	r1, #1
 80014ea:	430a      	orrs	r2, r1
 80014ec:	65da      	str	r2, [r3, #92]	@ 0x5c
 80014ee:	e00b      	b.n	8001508 <HAL_RCC_OscConfig+0x41c>
 80014f0:	4b7f      	ldr	r3, [pc, #508]	@ (80016f0 <HAL_RCC_OscConfig+0x604>)
 80014f2:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80014f4:	4b7e      	ldr	r3, [pc, #504]	@ (80016f0 <HAL_RCC_OscConfig+0x604>)
 80014f6:	2101      	movs	r1, #1
 80014f8:	438a      	bics	r2, r1
 80014fa:	65da      	str	r2, [r3, #92]	@ 0x5c
 80014fc:	4b7c      	ldr	r3, [pc, #496]	@ (80016f0 <HAL_RCC_OscConfig+0x604>)
 80014fe:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001500:	4b7b      	ldr	r3, [pc, #492]	@ (80016f0 <HAL_RCC_OscConfig+0x604>)
 8001502:	2104      	movs	r1, #4
 8001504:	438a      	bics	r2, r1
 8001506:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	689b      	ldr	r3, [r3, #8]
 800150c:	2b00      	cmp	r3, #0
 800150e:	d014      	beq.n	800153a <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001510:	f7ff fb10 	bl	8000b34 <HAL_GetTick>
 8001514:	0003      	movs	r3, r0
 8001516:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001518:	e009      	b.n	800152e <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800151a:	f7ff fb0b 	bl	8000b34 <HAL_GetTick>
 800151e:	0002      	movs	r2, r0
 8001520:	693b      	ldr	r3, [r7, #16]
 8001522:	1ad3      	subs	r3, r2, r3
 8001524:	4a74      	ldr	r2, [pc, #464]	@ (80016f8 <HAL_RCC_OscConfig+0x60c>)
 8001526:	4293      	cmp	r3, r2
 8001528:	d901      	bls.n	800152e <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 800152a:	2303      	movs	r3, #3
 800152c:	e0db      	b.n	80016e6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800152e:	4b70      	ldr	r3, [pc, #448]	@ (80016f0 <HAL_RCC_OscConfig+0x604>)
 8001530:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001532:	2202      	movs	r2, #2
 8001534:	4013      	ands	r3, r2
 8001536:	d0f0      	beq.n	800151a <HAL_RCC_OscConfig+0x42e>
 8001538:	e013      	b.n	8001562 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800153a:	f7ff fafb 	bl	8000b34 <HAL_GetTick>
 800153e:	0003      	movs	r3, r0
 8001540:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001542:	e009      	b.n	8001558 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001544:	f7ff faf6 	bl	8000b34 <HAL_GetTick>
 8001548:	0002      	movs	r2, r0
 800154a:	693b      	ldr	r3, [r7, #16]
 800154c:	1ad3      	subs	r3, r2, r3
 800154e:	4a6a      	ldr	r2, [pc, #424]	@ (80016f8 <HAL_RCC_OscConfig+0x60c>)
 8001550:	4293      	cmp	r3, r2
 8001552:	d901      	bls.n	8001558 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8001554:	2303      	movs	r3, #3
 8001556:	e0c6      	b.n	80016e6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001558:	4b65      	ldr	r3, [pc, #404]	@ (80016f0 <HAL_RCC_OscConfig+0x604>)
 800155a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800155c:	2202      	movs	r2, #2
 800155e:	4013      	ands	r3, r2
 8001560:	d1f0      	bne.n	8001544 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8001562:	231f      	movs	r3, #31
 8001564:	18fb      	adds	r3, r7, r3
 8001566:	781b      	ldrb	r3, [r3, #0]
 8001568:	2b01      	cmp	r3, #1
 800156a:	d105      	bne.n	8001578 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 800156c:	4b60      	ldr	r3, [pc, #384]	@ (80016f0 <HAL_RCC_OscConfig+0x604>)
 800156e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001570:	4b5f      	ldr	r3, [pc, #380]	@ (80016f0 <HAL_RCC_OscConfig+0x604>)
 8001572:	4962      	ldr	r1, [pc, #392]	@ (80016fc <HAL_RCC_OscConfig+0x610>)
 8001574:	400a      	ands	r2, r1
 8001576:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	69db      	ldr	r3, [r3, #28]
 800157c:	2b00      	cmp	r3, #0
 800157e:	d100      	bne.n	8001582 <HAL_RCC_OscConfig+0x496>
 8001580:	e0b0      	b.n	80016e4 <HAL_RCC_OscConfig+0x5f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001582:	4b5b      	ldr	r3, [pc, #364]	@ (80016f0 <HAL_RCC_OscConfig+0x604>)
 8001584:	689b      	ldr	r3, [r3, #8]
 8001586:	2238      	movs	r2, #56	@ 0x38
 8001588:	4013      	ands	r3, r2
 800158a:	2b10      	cmp	r3, #16
 800158c:	d100      	bne.n	8001590 <HAL_RCC_OscConfig+0x4a4>
 800158e:	e078      	b.n	8001682 <HAL_RCC_OscConfig+0x596>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	69db      	ldr	r3, [r3, #28]
 8001594:	2b02      	cmp	r3, #2
 8001596:	d153      	bne.n	8001640 <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001598:	4b55      	ldr	r3, [pc, #340]	@ (80016f0 <HAL_RCC_OscConfig+0x604>)
 800159a:	681a      	ldr	r2, [r3, #0]
 800159c:	4b54      	ldr	r3, [pc, #336]	@ (80016f0 <HAL_RCC_OscConfig+0x604>)
 800159e:	4958      	ldr	r1, [pc, #352]	@ (8001700 <HAL_RCC_OscConfig+0x614>)
 80015a0:	400a      	ands	r2, r1
 80015a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015a4:	f7ff fac6 	bl	8000b34 <HAL_GetTick>
 80015a8:	0003      	movs	r3, r0
 80015aa:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80015ac:	e008      	b.n	80015c0 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015ae:	f7ff fac1 	bl	8000b34 <HAL_GetTick>
 80015b2:	0002      	movs	r2, r0
 80015b4:	693b      	ldr	r3, [r7, #16]
 80015b6:	1ad3      	subs	r3, r2, r3
 80015b8:	2b02      	cmp	r3, #2
 80015ba:	d901      	bls.n	80015c0 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 80015bc:	2303      	movs	r3, #3
 80015be:	e092      	b.n	80016e6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80015c0:	4b4b      	ldr	r3, [pc, #300]	@ (80016f0 <HAL_RCC_OscConfig+0x604>)
 80015c2:	681a      	ldr	r2, [r3, #0]
 80015c4:	2380      	movs	r3, #128	@ 0x80
 80015c6:	049b      	lsls	r3, r3, #18
 80015c8:	4013      	ands	r3, r2
 80015ca:	d1f0      	bne.n	80015ae <HAL_RCC_OscConfig+0x4c2>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else /* !RCC_PLLQ_SUPPORT */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80015cc:	4b48      	ldr	r3, [pc, #288]	@ (80016f0 <HAL_RCC_OscConfig+0x604>)
 80015ce:	68db      	ldr	r3, [r3, #12]
 80015d0:	4a4c      	ldr	r2, [pc, #304]	@ (8001704 <HAL_RCC_OscConfig+0x618>)
 80015d2:	4013      	ands	r3, r2
 80015d4:	0019      	movs	r1, r3
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	6a1a      	ldr	r2, [r3, #32]
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015de:	431a      	orrs	r2, r3
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80015e4:	021b      	lsls	r3, r3, #8
 80015e6:	431a      	orrs	r2, r3
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80015ec:	431a      	orrs	r2, r3
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015f2:	431a      	orrs	r2, r3
 80015f4:	4b3e      	ldr	r3, [pc, #248]	@ (80016f0 <HAL_RCC_OscConfig+0x604>)
 80015f6:	430a      	orrs	r2, r1
 80015f8:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80015fa:	4b3d      	ldr	r3, [pc, #244]	@ (80016f0 <HAL_RCC_OscConfig+0x604>)
 80015fc:	681a      	ldr	r2, [r3, #0]
 80015fe:	4b3c      	ldr	r3, [pc, #240]	@ (80016f0 <HAL_RCC_OscConfig+0x604>)
 8001600:	2180      	movs	r1, #128	@ 0x80
 8001602:	0449      	lsls	r1, r1, #17
 8001604:	430a      	orrs	r2, r1
 8001606:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8001608:	4b39      	ldr	r3, [pc, #228]	@ (80016f0 <HAL_RCC_OscConfig+0x604>)
 800160a:	68da      	ldr	r2, [r3, #12]
 800160c:	4b38      	ldr	r3, [pc, #224]	@ (80016f0 <HAL_RCC_OscConfig+0x604>)
 800160e:	2180      	movs	r1, #128	@ 0x80
 8001610:	0549      	lsls	r1, r1, #21
 8001612:	430a      	orrs	r2, r1
 8001614:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001616:	f7ff fa8d 	bl	8000b34 <HAL_GetTick>
 800161a:	0003      	movs	r3, r0
 800161c:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800161e:	e008      	b.n	8001632 <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001620:	f7ff fa88 	bl	8000b34 <HAL_GetTick>
 8001624:	0002      	movs	r2, r0
 8001626:	693b      	ldr	r3, [r7, #16]
 8001628:	1ad3      	subs	r3, r2, r3
 800162a:	2b02      	cmp	r3, #2
 800162c:	d901      	bls.n	8001632 <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 800162e:	2303      	movs	r3, #3
 8001630:	e059      	b.n	80016e6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001632:	4b2f      	ldr	r3, [pc, #188]	@ (80016f0 <HAL_RCC_OscConfig+0x604>)
 8001634:	681a      	ldr	r2, [r3, #0]
 8001636:	2380      	movs	r3, #128	@ 0x80
 8001638:	049b      	lsls	r3, r3, #18
 800163a:	4013      	ands	r3, r2
 800163c:	d0f0      	beq.n	8001620 <HAL_RCC_OscConfig+0x534>
 800163e:	e051      	b.n	80016e4 <HAL_RCC_OscConfig+0x5f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001640:	4b2b      	ldr	r3, [pc, #172]	@ (80016f0 <HAL_RCC_OscConfig+0x604>)
 8001642:	681a      	ldr	r2, [r3, #0]
 8001644:	4b2a      	ldr	r3, [pc, #168]	@ (80016f0 <HAL_RCC_OscConfig+0x604>)
 8001646:	492e      	ldr	r1, [pc, #184]	@ (8001700 <HAL_RCC_OscConfig+0x614>)
 8001648:	400a      	ands	r2, r1
 800164a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800164c:	f7ff fa72 	bl	8000b34 <HAL_GetTick>
 8001650:	0003      	movs	r3, r0
 8001652:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001654:	e008      	b.n	8001668 <HAL_RCC_OscConfig+0x57c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001656:	f7ff fa6d 	bl	8000b34 <HAL_GetTick>
 800165a:	0002      	movs	r2, r0
 800165c:	693b      	ldr	r3, [r7, #16]
 800165e:	1ad3      	subs	r3, r2, r3
 8001660:	2b02      	cmp	r3, #2
 8001662:	d901      	bls.n	8001668 <HAL_RCC_OscConfig+0x57c>
          {
            return HAL_TIMEOUT;
 8001664:	2303      	movs	r3, #3
 8001666:	e03e      	b.n	80016e6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001668:	4b21      	ldr	r3, [pc, #132]	@ (80016f0 <HAL_RCC_OscConfig+0x604>)
 800166a:	681a      	ldr	r2, [r3, #0]
 800166c:	2380      	movs	r3, #128	@ 0x80
 800166e:	049b      	lsls	r3, r3, #18
 8001670:	4013      	ands	r3, r2
 8001672:	d1f0      	bne.n	8001656 <HAL_RCC_OscConfig+0x56a>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 8001674:	4b1e      	ldr	r3, [pc, #120]	@ (80016f0 <HAL_RCC_OscConfig+0x604>)
 8001676:	68da      	ldr	r2, [r3, #12]
 8001678:	4b1d      	ldr	r3, [pc, #116]	@ (80016f0 <HAL_RCC_OscConfig+0x604>)
 800167a:	4923      	ldr	r1, [pc, #140]	@ (8001708 <HAL_RCC_OscConfig+0x61c>)
 800167c:	400a      	ands	r2, r1
 800167e:	60da      	str	r2, [r3, #12]
 8001680:	e030      	b.n	80016e4 <HAL_RCC_OscConfig+0x5f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	69db      	ldr	r3, [r3, #28]
 8001686:	2b01      	cmp	r3, #1
 8001688:	d101      	bne.n	800168e <HAL_RCC_OscConfig+0x5a2>
      {
        return HAL_ERROR;
 800168a:	2301      	movs	r3, #1
 800168c:	e02b      	b.n	80016e6 <HAL_RCC_OscConfig+0x5fa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 800168e:	4b18      	ldr	r3, [pc, #96]	@ (80016f0 <HAL_RCC_OscConfig+0x604>)
 8001690:	68db      	ldr	r3, [r3, #12]
 8001692:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001694:	697b      	ldr	r3, [r7, #20]
 8001696:	2203      	movs	r2, #3
 8001698:	401a      	ands	r2, r3
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	6a1b      	ldr	r3, [r3, #32]
 800169e:	429a      	cmp	r2, r3
 80016a0:	d11e      	bne.n	80016e0 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80016a2:	697b      	ldr	r3, [r7, #20]
 80016a4:	2270      	movs	r2, #112	@ 0x70
 80016a6:	401a      	ands	r2, r3
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016ac:	429a      	cmp	r2, r3
 80016ae:	d117      	bne.n	80016e0 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80016b0:	697a      	ldr	r2, [r7, #20]
 80016b2:	23fe      	movs	r3, #254	@ 0xfe
 80016b4:	01db      	lsls	r3, r3, #7
 80016b6:	401a      	ands	r2, r3
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80016bc:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80016be:	429a      	cmp	r2, r3
 80016c0:	d10e      	bne.n	80016e0 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80016c2:	697a      	ldr	r2, [r7, #20]
 80016c4:	23f8      	movs	r3, #248	@ 0xf8
 80016c6:	039b      	lsls	r3, r3, #14
 80016c8:	401a      	ands	r2, r3
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80016ce:	429a      	cmp	r2, r3
 80016d0:	d106      	bne.n	80016e0 <HAL_RCC_OscConfig+0x5f4>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80016d2:	697b      	ldr	r3, [r7, #20]
 80016d4:	0f5b      	lsrs	r3, r3, #29
 80016d6:	075a      	lsls	r2, r3, #29
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80016dc:	429a      	cmp	r2, r3
 80016de:	d001      	beq.n	80016e4 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_ERROR;
 80016e0:	2301      	movs	r3, #1
 80016e2:	e000      	b.n	80016e6 <HAL_RCC_OscConfig+0x5fa>
        }
      }
    }
  }
  return HAL_OK;
 80016e4:	2300      	movs	r3, #0
}
 80016e6:	0018      	movs	r0, r3
 80016e8:	46bd      	mov	sp, r7
 80016ea:	b008      	add	sp, #32
 80016ec:	bd80      	pop	{r7, pc}
 80016ee:	46c0      	nop			@ (mov r8, r8)
 80016f0:	40021000 	.word	0x40021000
 80016f4:	40007000 	.word	0x40007000
 80016f8:	00001388 	.word	0x00001388
 80016fc:	efffffff 	.word	0xefffffff
 8001700:	feffffff 	.word	0xfeffffff
 8001704:	1fc1808c 	.word	0x1fc1808c
 8001708:	effefffc 	.word	0xeffefffc

0800170c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b084      	sub	sp, #16
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
 8001714:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	2b00      	cmp	r3, #0
 800171a:	d101      	bne.n	8001720 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800171c:	2301      	movs	r3, #1
 800171e:	e0e9      	b.n	80018f4 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001720:	4b76      	ldr	r3, [pc, #472]	@ (80018fc <HAL_RCC_ClockConfig+0x1f0>)
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	2207      	movs	r2, #7
 8001726:	4013      	ands	r3, r2
 8001728:	683a      	ldr	r2, [r7, #0]
 800172a:	429a      	cmp	r2, r3
 800172c:	d91e      	bls.n	800176c <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800172e:	4b73      	ldr	r3, [pc, #460]	@ (80018fc <HAL_RCC_ClockConfig+0x1f0>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	2207      	movs	r2, #7
 8001734:	4393      	bics	r3, r2
 8001736:	0019      	movs	r1, r3
 8001738:	4b70      	ldr	r3, [pc, #448]	@ (80018fc <HAL_RCC_ClockConfig+0x1f0>)
 800173a:	683a      	ldr	r2, [r7, #0]
 800173c:	430a      	orrs	r2, r1
 800173e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001740:	f7ff f9f8 	bl	8000b34 <HAL_GetTick>
 8001744:	0003      	movs	r3, r0
 8001746:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001748:	e009      	b.n	800175e <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800174a:	f7ff f9f3 	bl	8000b34 <HAL_GetTick>
 800174e:	0002      	movs	r2, r0
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	1ad3      	subs	r3, r2, r3
 8001754:	4a6a      	ldr	r2, [pc, #424]	@ (8001900 <HAL_RCC_ClockConfig+0x1f4>)
 8001756:	4293      	cmp	r3, r2
 8001758:	d901      	bls.n	800175e <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800175a:	2303      	movs	r3, #3
 800175c:	e0ca      	b.n	80018f4 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800175e:	4b67      	ldr	r3, [pc, #412]	@ (80018fc <HAL_RCC_ClockConfig+0x1f0>)
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	2207      	movs	r2, #7
 8001764:	4013      	ands	r3, r2
 8001766:	683a      	ldr	r2, [r7, #0]
 8001768:	429a      	cmp	r2, r3
 800176a:	d1ee      	bne.n	800174a <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	2202      	movs	r2, #2
 8001772:	4013      	ands	r3, r2
 8001774:	d015      	beq.n	80017a2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	2204      	movs	r2, #4
 800177c:	4013      	ands	r3, r2
 800177e:	d006      	beq.n	800178e <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001780:	4b60      	ldr	r3, [pc, #384]	@ (8001904 <HAL_RCC_ClockConfig+0x1f8>)
 8001782:	689a      	ldr	r2, [r3, #8]
 8001784:	4b5f      	ldr	r3, [pc, #380]	@ (8001904 <HAL_RCC_ClockConfig+0x1f8>)
 8001786:	21e0      	movs	r1, #224	@ 0xe0
 8001788:	01c9      	lsls	r1, r1, #7
 800178a:	430a      	orrs	r2, r1
 800178c:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800178e:	4b5d      	ldr	r3, [pc, #372]	@ (8001904 <HAL_RCC_ClockConfig+0x1f8>)
 8001790:	689b      	ldr	r3, [r3, #8]
 8001792:	4a5d      	ldr	r2, [pc, #372]	@ (8001908 <HAL_RCC_ClockConfig+0x1fc>)
 8001794:	4013      	ands	r3, r2
 8001796:	0019      	movs	r1, r3
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	689a      	ldr	r2, [r3, #8]
 800179c:	4b59      	ldr	r3, [pc, #356]	@ (8001904 <HAL_RCC_ClockConfig+0x1f8>)
 800179e:	430a      	orrs	r2, r1
 80017a0:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	2201      	movs	r2, #1
 80017a8:	4013      	ands	r3, r2
 80017aa:	d057      	beq.n	800185c <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	685b      	ldr	r3, [r3, #4]
 80017b0:	2b01      	cmp	r3, #1
 80017b2:	d107      	bne.n	80017c4 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80017b4:	4b53      	ldr	r3, [pc, #332]	@ (8001904 <HAL_RCC_ClockConfig+0x1f8>)
 80017b6:	681a      	ldr	r2, [r3, #0]
 80017b8:	2380      	movs	r3, #128	@ 0x80
 80017ba:	029b      	lsls	r3, r3, #10
 80017bc:	4013      	ands	r3, r2
 80017be:	d12b      	bne.n	8001818 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80017c0:	2301      	movs	r3, #1
 80017c2:	e097      	b.n	80018f4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	685b      	ldr	r3, [r3, #4]
 80017c8:	2b02      	cmp	r3, #2
 80017ca:	d107      	bne.n	80017dc <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80017cc:	4b4d      	ldr	r3, [pc, #308]	@ (8001904 <HAL_RCC_ClockConfig+0x1f8>)
 80017ce:	681a      	ldr	r2, [r3, #0]
 80017d0:	2380      	movs	r3, #128	@ 0x80
 80017d2:	049b      	lsls	r3, r3, #18
 80017d4:	4013      	ands	r3, r2
 80017d6:	d11f      	bne.n	8001818 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80017d8:	2301      	movs	r3, #1
 80017da:	e08b      	b.n	80018f4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	685b      	ldr	r3, [r3, #4]
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d107      	bne.n	80017f4 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80017e4:	4b47      	ldr	r3, [pc, #284]	@ (8001904 <HAL_RCC_ClockConfig+0x1f8>)
 80017e6:	681a      	ldr	r2, [r3, #0]
 80017e8:	2380      	movs	r3, #128	@ 0x80
 80017ea:	00db      	lsls	r3, r3, #3
 80017ec:	4013      	ands	r3, r2
 80017ee:	d113      	bne.n	8001818 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80017f0:	2301      	movs	r3, #1
 80017f2:	e07f      	b.n	80018f4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	685b      	ldr	r3, [r3, #4]
 80017f8:	2b03      	cmp	r3, #3
 80017fa:	d106      	bne.n	800180a <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80017fc:	4b41      	ldr	r3, [pc, #260]	@ (8001904 <HAL_RCC_ClockConfig+0x1f8>)
 80017fe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001800:	2202      	movs	r2, #2
 8001802:	4013      	ands	r3, r2
 8001804:	d108      	bne.n	8001818 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001806:	2301      	movs	r3, #1
 8001808:	e074      	b.n	80018f4 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800180a:	4b3e      	ldr	r3, [pc, #248]	@ (8001904 <HAL_RCC_ClockConfig+0x1f8>)
 800180c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800180e:	2202      	movs	r2, #2
 8001810:	4013      	ands	r3, r2
 8001812:	d101      	bne.n	8001818 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001814:	2301      	movs	r3, #1
 8001816:	e06d      	b.n	80018f4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001818:	4b3a      	ldr	r3, [pc, #232]	@ (8001904 <HAL_RCC_ClockConfig+0x1f8>)
 800181a:	689b      	ldr	r3, [r3, #8]
 800181c:	2207      	movs	r2, #7
 800181e:	4393      	bics	r3, r2
 8001820:	0019      	movs	r1, r3
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	685a      	ldr	r2, [r3, #4]
 8001826:	4b37      	ldr	r3, [pc, #220]	@ (8001904 <HAL_RCC_ClockConfig+0x1f8>)
 8001828:	430a      	orrs	r2, r1
 800182a:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800182c:	f7ff f982 	bl	8000b34 <HAL_GetTick>
 8001830:	0003      	movs	r3, r0
 8001832:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001834:	e009      	b.n	800184a <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001836:	f7ff f97d 	bl	8000b34 <HAL_GetTick>
 800183a:	0002      	movs	r2, r0
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	1ad3      	subs	r3, r2, r3
 8001840:	4a2f      	ldr	r2, [pc, #188]	@ (8001900 <HAL_RCC_ClockConfig+0x1f4>)
 8001842:	4293      	cmp	r3, r2
 8001844:	d901      	bls.n	800184a <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8001846:	2303      	movs	r3, #3
 8001848:	e054      	b.n	80018f4 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800184a:	4b2e      	ldr	r3, [pc, #184]	@ (8001904 <HAL_RCC_ClockConfig+0x1f8>)
 800184c:	689b      	ldr	r3, [r3, #8]
 800184e:	2238      	movs	r2, #56	@ 0x38
 8001850:	401a      	ands	r2, r3
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	685b      	ldr	r3, [r3, #4]
 8001856:	00db      	lsls	r3, r3, #3
 8001858:	429a      	cmp	r2, r3
 800185a:	d1ec      	bne.n	8001836 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800185c:	4b27      	ldr	r3, [pc, #156]	@ (80018fc <HAL_RCC_ClockConfig+0x1f0>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	2207      	movs	r2, #7
 8001862:	4013      	ands	r3, r2
 8001864:	683a      	ldr	r2, [r7, #0]
 8001866:	429a      	cmp	r2, r3
 8001868:	d21e      	bcs.n	80018a8 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800186a:	4b24      	ldr	r3, [pc, #144]	@ (80018fc <HAL_RCC_ClockConfig+0x1f0>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	2207      	movs	r2, #7
 8001870:	4393      	bics	r3, r2
 8001872:	0019      	movs	r1, r3
 8001874:	4b21      	ldr	r3, [pc, #132]	@ (80018fc <HAL_RCC_ClockConfig+0x1f0>)
 8001876:	683a      	ldr	r2, [r7, #0]
 8001878:	430a      	orrs	r2, r1
 800187a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800187c:	f7ff f95a 	bl	8000b34 <HAL_GetTick>
 8001880:	0003      	movs	r3, r0
 8001882:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001884:	e009      	b.n	800189a <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001886:	f7ff f955 	bl	8000b34 <HAL_GetTick>
 800188a:	0002      	movs	r2, r0
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	1ad3      	subs	r3, r2, r3
 8001890:	4a1b      	ldr	r2, [pc, #108]	@ (8001900 <HAL_RCC_ClockConfig+0x1f4>)
 8001892:	4293      	cmp	r3, r2
 8001894:	d901      	bls.n	800189a <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8001896:	2303      	movs	r3, #3
 8001898:	e02c      	b.n	80018f4 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800189a:	4b18      	ldr	r3, [pc, #96]	@ (80018fc <HAL_RCC_ClockConfig+0x1f0>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	2207      	movs	r2, #7
 80018a0:	4013      	ands	r3, r2
 80018a2:	683a      	ldr	r2, [r7, #0]
 80018a4:	429a      	cmp	r2, r3
 80018a6:	d1ee      	bne.n	8001886 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	2204      	movs	r2, #4
 80018ae:	4013      	ands	r3, r2
 80018b0:	d009      	beq.n	80018c6 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80018b2:	4b14      	ldr	r3, [pc, #80]	@ (8001904 <HAL_RCC_ClockConfig+0x1f8>)
 80018b4:	689b      	ldr	r3, [r3, #8]
 80018b6:	4a15      	ldr	r2, [pc, #84]	@ (800190c <HAL_RCC_ClockConfig+0x200>)
 80018b8:	4013      	ands	r3, r2
 80018ba:	0019      	movs	r1, r3
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	68da      	ldr	r2, [r3, #12]
 80018c0:	4b10      	ldr	r3, [pc, #64]	@ (8001904 <HAL_RCC_ClockConfig+0x1f8>)
 80018c2:	430a      	orrs	r2, r1
 80018c4:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80018c6:	f000 f829 	bl	800191c <HAL_RCC_GetSysClockFreq>
 80018ca:	0001      	movs	r1, r0
 80018cc:	4b0d      	ldr	r3, [pc, #52]	@ (8001904 <HAL_RCC_ClockConfig+0x1f8>)
 80018ce:	689b      	ldr	r3, [r3, #8]
 80018d0:	0a1b      	lsrs	r3, r3, #8
 80018d2:	220f      	movs	r2, #15
 80018d4:	401a      	ands	r2, r3
 80018d6:	4b0e      	ldr	r3, [pc, #56]	@ (8001910 <HAL_RCC_ClockConfig+0x204>)
 80018d8:	0092      	lsls	r2, r2, #2
 80018da:	58d3      	ldr	r3, [r2, r3]
 80018dc:	221f      	movs	r2, #31
 80018de:	4013      	ands	r3, r2
 80018e0:	000a      	movs	r2, r1
 80018e2:	40da      	lsrs	r2, r3
 80018e4:	4b0b      	ldr	r3, [pc, #44]	@ (8001914 <HAL_RCC_ClockConfig+0x208>)
 80018e6:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80018e8:	4b0b      	ldr	r3, [pc, #44]	@ (8001918 <HAL_RCC_ClockConfig+0x20c>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	0018      	movs	r0, r3
 80018ee:	f7ff f8c5 	bl	8000a7c <HAL_InitTick>
 80018f2:	0003      	movs	r3, r0
}
 80018f4:	0018      	movs	r0, r3
 80018f6:	46bd      	mov	sp, r7
 80018f8:	b004      	add	sp, #16
 80018fa:	bd80      	pop	{r7, pc}
 80018fc:	40022000 	.word	0x40022000
 8001900:	00001388 	.word	0x00001388
 8001904:	40021000 	.word	0x40021000
 8001908:	fffff0ff 	.word	0xfffff0ff
 800190c:	ffff8fff 	.word	0xffff8fff
 8001910:	08001aa0 	.word	0x08001aa0
 8001914:	20000000 	.word	0x20000000
 8001918:	20000004 	.word	0x20000004

0800191c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	b086      	sub	sp, #24
 8001920:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001922:	4b3c      	ldr	r3, [pc, #240]	@ (8001a14 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001924:	689b      	ldr	r3, [r3, #8]
 8001926:	2238      	movs	r2, #56	@ 0x38
 8001928:	4013      	ands	r3, r2
 800192a:	d10f      	bne.n	800194c <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 800192c:	4b39      	ldr	r3, [pc, #228]	@ (8001a14 <HAL_RCC_GetSysClockFreq+0xf8>)
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	0adb      	lsrs	r3, r3, #11
 8001932:	2207      	movs	r2, #7
 8001934:	4013      	ands	r3, r2
 8001936:	2201      	movs	r2, #1
 8001938:	409a      	lsls	r2, r3
 800193a:	0013      	movs	r3, r2
 800193c:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 800193e:	6839      	ldr	r1, [r7, #0]
 8001940:	4835      	ldr	r0, [pc, #212]	@ (8001a18 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001942:	f7fe fbdd 	bl	8000100 <__udivsi3>
 8001946:	0003      	movs	r3, r0
 8001948:	613b      	str	r3, [r7, #16]
 800194a:	e05d      	b.n	8001a08 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800194c:	4b31      	ldr	r3, [pc, #196]	@ (8001a14 <HAL_RCC_GetSysClockFreq+0xf8>)
 800194e:	689b      	ldr	r3, [r3, #8]
 8001950:	2238      	movs	r2, #56	@ 0x38
 8001952:	4013      	ands	r3, r2
 8001954:	2b08      	cmp	r3, #8
 8001956:	d102      	bne.n	800195e <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001958:	4b30      	ldr	r3, [pc, #192]	@ (8001a1c <HAL_RCC_GetSysClockFreq+0x100>)
 800195a:	613b      	str	r3, [r7, #16]
 800195c:	e054      	b.n	8001a08 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800195e:	4b2d      	ldr	r3, [pc, #180]	@ (8001a14 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001960:	689b      	ldr	r3, [r3, #8]
 8001962:	2238      	movs	r2, #56	@ 0x38
 8001964:	4013      	ands	r3, r2
 8001966:	2b10      	cmp	r3, #16
 8001968:	d138      	bne.n	80019dc <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 800196a:	4b2a      	ldr	r3, [pc, #168]	@ (8001a14 <HAL_RCC_GetSysClockFreq+0xf8>)
 800196c:	68db      	ldr	r3, [r3, #12]
 800196e:	2203      	movs	r2, #3
 8001970:	4013      	ands	r3, r2
 8001972:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001974:	4b27      	ldr	r3, [pc, #156]	@ (8001a14 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001976:	68db      	ldr	r3, [r3, #12]
 8001978:	091b      	lsrs	r3, r3, #4
 800197a:	2207      	movs	r2, #7
 800197c:	4013      	ands	r3, r2
 800197e:	3301      	adds	r3, #1
 8001980:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	2b03      	cmp	r3, #3
 8001986:	d10d      	bne.n	80019a4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001988:	68b9      	ldr	r1, [r7, #8]
 800198a:	4824      	ldr	r0, [pc, #144]	@ (8001a1c <HAL_RCC_GetSysClockFreq+0x100>)
 800198c:	f7fe fbb8 	bl	8000100 <__udivsi3>
 8001990:	0003      	movs	r3, r0
 8001992:	0019      	movs	r1, r3
 8001994:	4b1f      	ldr	r3, [pc, #124]	@ (8001a14 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001996:	68db      	ldr	r3, [r3, #12]
 8001998:	0a1b      	lsrs	r3, r3, #8
 800199a:	227f      	movs	r2, #127	@ 0x7f
 800199c:	4013      	ands	r3, r2
 800199e:	434b      	muls	r3, r1
 80019a0:	617b      	str	r3, [r7, #20]
        break;
 80019a2:	e00d      	b.n	80019c0 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 80019a4:	68b9      	ldr	r1, [r7, #8]
 80019a6:	481c      	ldr	r0, [pc, #112]	@ (8001a18 <HAL_RCC_GetSysClockFreq+0xfc>)
 80019a8:	f7fe fbaa 	bl	8000100 <__udivsi3>
 80019ac:	0003      	movs	r3, r0
 80019ae:	0019      	movs	r1, r3
 80019b0:	4b18      	ldr	r3, [pc, #96]	@ (8001a14 <HAL_RCC_GetSysClockFreq+0xf8>)
 80019b2:	68db      	ldr	r3, [r3, #12]
 80019b4:	0a1b      	lsrs	r3, r3, #8
 80019b6:	227f      	movs	r2, #127	@ 0x7f
 80019b8:	4013      	ands	r3, r2
 80019ba:	434b      	muls	r3, r1
 80019bc:	617b      	str	r3, [r7, #20]
        break;
 80019be:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 80019c0:	4b14      	ldr	r3, [pc, #80]	@ (8001a14 <HAL_RCC_GetSysClockFreq+0xf8>)
 80019c2:	68db      	ldr	r3, [r3, #12]
 80019c4:	0f5b      	lsrs	r3, r3, #29
 80019c6:	2207      	movs	r2, #7
 80019c8:	4013      	ands	r3, r2
 80019ca:	3301      	adds	r3, #1
 80019cc:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 80019ce:	6879      	ldr	r1, [r7, #4]
 80019d0:	6978      	ldr	r0, [r7, #20]
 80019d2:	f7fe fb95 	bl	8000100 <__udivsi3>
 80019d6:	0003      	movs	r3, r0
 80019d8:	613b      	str	r3, [r7, #16]
 80019da:	e015      	b.n	8001a08 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80019dc:	4b0d      	ldr	r3, [pc, #52]	@ (8001a14 <HAL_RCC_GetSysClockFreq+0xf8>)
 80019de:	689b      	ldr	r3, [r3, #8]
 80019e0:	2238      	movs	r2, #56	@ 0x38
 80019e2:	4013      	ands	r3, r2
 80019e4:	2b20      	cmp	r3, #32
 80019e6:	d103      	bne.n	80019f0 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 80019e8:	2380      	movs	r3, #128	@ 0x80
 80019ea:	021b      	lsls	r3, r3, #8
 80019ec:	613b      	str	r3, [r7, #16]
 80019ee:	e00b      	b.n	8001a08 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80019f0:	4b08      	ldr	r3, [pc, #32]	@ (8001a14 <HAL_RCC_GetSysClockFreq+0xf8>)
 80019f2:	689b      	ldr	r3, [r3, #8]
 80019f4:	2238      	movs	r2, #56	@ 0x38
 80019f6:	4013      	ands	r3, r2
 80019f8:	2b18      	cmp	r3, #24
 80019fa:	d103      	bne.n	8001a04 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 80019fc:	23fa      	movs	r3, #250	@ 0xfa
 80019fe:	01db      	lsls	r3, r3, #7
 8001a00:	613b      	str	r3, [r7, #16]
 8001a02:	e001      	b.n	8001a08 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8001a04:	2300      	movs	r3, #0
 8001a06:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001a08:	693b      	ldr	r3, [r7, #16]
}
 8001a0a:	0018      	movs	r0, r3
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	b006      	add	sp, #24
 8001a10:	bd80      	pop	{r7, pc}
 8001a12:	46c0      	nop			@ (mov r8, r8)
 8001a14:	40021000 	.word	0x40021000
 8001a18:	00f42400 	.word	0x00f42400
 8001a1c:	007a1200 	.word	0x007a1200

08001a20 <memset>:
 8001a20:	0003      	movs	r3, r0
 8001a22:	1882      	adds	r2, r0, r2
 8001a24:	4293      	cmp	r3, r2
 8001a26:	d100      	bne.n	8001a2a <memset+0xa>
 8001a28:	4770      	bx	lr
 8001a2a:	7019      	strb	r1, [r3, #0]
 8001a2c:	3301      	adds	r3, #1
 8001a2e:	e7f9      	b.n	8001a24 <memset+0x4>

08001a30 <__libc_init_array>:
 8001a30:	b570      	push	{r4, r5, r6, lr}
 8001a32:	2600      	movs	r6, #0
 8001a34:	4c0c      	ldr	r4, [pc, #48]	@ (8001a68 <__libc_init_array+0x38>)
 8001a36:	4d0d      	ldr	r5, [pc, #52]	@ (8001a6c <__libc_init_array+0x3c>)
 8001a38:	1b64      	subs	r4, r4, r5
 8001a3a:	10a4      	asrs	r4, r4, #2
 8001a3c:	42a6      	cmp	r6, r4
 8001a3e:	d109      	bne.n	8001a54 <__libc_init_array+0x24>
 8001a40:	2600      	movs	r6, #0
 8001a42:	f000 f819 	bl	8001a78 <_init>
 8001a46:	4c0a      	ldr	r4, [pc, #40]	@ (8001a70 <__libc_init_array+0x40>)
 8001a48:	4d0a      	ldr	r5, [pc, #40]	@ (8001a74 <__libc_init_array+0x44>)
 8001a4a:	1b64      	subs	r4, r4, r5
 8001a4c:	10a4      	asrs	r4, r4, #2
 8001a4e:	42a6      	cmp	r6, r4
 8001a50:	d105      	bne.n	8001a5e <__libc_init_array+0x2e>
 8001a52:	bd70      	pop	{r4, r5, r6, pc}
 8001a54:	00b3      	lsls	r3, r6, #2
 8001a56:	58eb      	ldr	r3, [r5, r3]
 8001a58:	4798      	blx	r3
 8001a5a:	3601      	adds	r6, #1
 8001a5c:	e7ee      	b.n	8001a3c <__libc_init_array+0xc>
 8001a5e:	00b3      	lsls	r3, r6, #2
 8001a60:	58eb      	ldr	r3, [r5, r3]
 8001a62:	4798      	blx	r3
 8001a64:	3601      	adds	r6, #1
 8001a66:	e7f2      	b.n	8001a4e <__libc_init_array+0x1e>
 8001a68:	08001ae0 	.word	0x08001ae0
 8001a6c:	08001ae0 	.word	0x08001ae0
 8001a70:	08001ae4 	.word	0x08001ae4
 8001a74:	08001ae0 	.word	0x08001ae0

08001a78 <_init>:
 8001a78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001a7a:	46c0      	nop			@ (mov r8, r8)
 8001a7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001a7e:	bc08      	pop	{r3}
 8001a80:	469e      	mov	lr, r3
 8001a82:	4770      	bx	lr

08001a84 <_fini>:
 8001a84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001a86:	46c0      	nop			@ (mov r8, r8)
 8001a88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001a8a:	bc08      	pop	{r3}
 8001a8c:	469e      	mov	lr, r3
 8001a8e:	4770      	bx	lr
